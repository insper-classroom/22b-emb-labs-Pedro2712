
FREERTOS_SAM_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006138  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00406138  00406138  00016138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009b8  20400000  00406140  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000288  204009b8  00406af8  000209b8  2**2
                  ALLOC
  4 .stack        00002000  20400c40  00406d80  000209b8  2**0
                  ALLOC
  5 .heap         00000200  20402c40  00408d80  000209b8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209e6  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001dc94  00000000  00000000  00020a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003fbc  00000000  00000000  0003e6d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000a5c2  00000000  00000000  0004268f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000de0  00000000  00000000  0004cc51  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001e08  00000000  00000000  0004da31  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000211f4  00000000  00000000  0004f839  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00010590  00000000  00000000  00070a2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009373e  00000000  00000000  00080fbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000031bc  00000000  00000000  001146fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	40 2c 40 20 d9 09 40 00 d5 09 40 00 d5 09 40 00     @,@ ..@...@...@.
  400010:	d5 09 40 00 d5 09 40 00 d5 09 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	95 0d 40 00 d5 09 40 00 00 00 00 00 31 0e 40 00     ..@...@.....1.@.
  40003c:	99 0e 40 00 d5 09 40 00 d5 09 40 00 d5 09 40 00     ..@...@...@...@.
  40004c:	d5 09 40 00 d5 09 40 00 d5 09 40 00 d5 09 40 00     ..@...@...@...@.
  40005c:	d5 09 40 00 d5 09 40 00 00 00 00 00 0d 07 40 00     ..@...@.......@.
  40006c:	1d 07 40 00 2d 07 40 00 d5 09 40 00 d5 09 40 00     ..@.-.@...@...@.
  40007c:	d5 09 40 00 3d 07 40 00 4d 07 40 00 d5 09 40 00     ..@.=.@.M.@...@.
  40008c:	d5 09 40 00 d5 09 40 00 d5 09 40 00 d5 09 40 00     ..@...@...@...@.
  40009c:	d5 09 40 00 d5 09 40 00 d5 09 40 00 d5 09 40 00     ..@...@...@...@.
  4000ac:	d5 09 40 00 d5 09 40 00 d5 09 40 00 d5 09 40 00     ..@...@...@...@.
  4000bc:	d5 09 40 00 d5 09 40 00 d5 09 40 00 d5 09 40 00     ..@...@...@...@.
  4000cc:	d5 09 40 00 00 00 00 00 d5 09 40 00 00 00 00 00     ..@.......@.....
  4000dc:	d5 09 40 00 d5 09 40 00 d5 09 40 00 d5 09 40 00     ..@...@...@...@.
  4000ec:	d5 09 40 00 d5 09 40 00 d5 09 40 00 d5 09 40 00     ..@...@...@...@.
  4000fc:	d5 09 40 00 d5 09 40 00 d5 09 40 00 d5 09 40 00     ..@...@...@...@.
  40010c:	d5 09 40 00 d5 09 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 d5 09 40 00 d5 09 40 00 d5 09 40 00     ......@...@...@.
  40012c:	d5 09 40 00 d5 09 40 00 00 00 00 00 d5 09 40 00     ..@...@.......@.
  40013c:	d5 09 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009b8 	.word	0x204009b8
  40015c:	00000000 	.word	0x00000000
  400160:	00406140 	.word	0x00406140

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00406140 	.word	0x00406140
  4001a0:	204009bc 	.word	0x204009bc
  4001a4:	00406140 	.word	0x00406140
  4001a8:	00000000 	.word	0x00000000

004001ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001ac:	b570      	push	{r4, r5, r6, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4001ae:	4810      	ldr	r0, [pc, #64]	; (4001f0 <sysclk_init+0x44>)
  4001b0:	4d10      	ldr	r5, [pc, #64]	; (4001f4 <sysclk_init+0x48>)
  4001b2:	47a8      	blx	r5
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001b4:	213e      	movs	r1, #62	; 0x3e
  4001b6:	2000      	movs	r0, #0
  4001b8:	4b0f      	ldr	r3, [pc, #60]	; (4001f8 <sysclk_init+0x4c>)
  4001ba:	4c10      	ldr	r4, [pc, #64]	; (4001fc <sysclk_init+0x50>)
  4001bc:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001be:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001c0:	2800      	cmp	r0, #0
  4001c2:	d0fc      	beq.n	4001be <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001c4:	4b0e      	ldr	r3, [pc, #56]	; (400200 <sysclk_init+0x54>)
  4001c6:	4798      	blx	r3
  4001c8:	4c0e      	ldr	r4, [pc, #56]	; (400204 <sysclk_init+0x58>)
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001ca:	4b0f      	ldr	r3, [pc, #60]	; (400208 <sysclk_init+0x5c>)
  4001cc:	4a0f      	ldr	r2, [pc, #60]	; (40020c <sysclk_init+0x60>)
  4001ce:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001d0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001d2:	2800      	cmp	r0, #0
  4001d4:	d0fc      	beq.n	4001d0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001d6:	2002      	movs	r0, #2
  4001d8:	4b0d      	ldr	r3, [pc, #52]	; (400210 <sysclk_init+0x64>)
  4001da:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4001dc:	4b0d      	ldr	r3, [pc, #52]	; (400214 <sysclk_init+0x68>)
  4001de:	2000      	movs	r0, #0
  4001e0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4001e2:	4b0d      	ldr	r3, [pc, #52]	; (400218 <sysclk_init+0x6c>)
  4001e4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4001e6:	462b      	mov	r3, r5
  4001e8:	4801      	ldr	r0, [pc, #4]	; (4001f0 <sysclk_init+0x44>)

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4001ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	system_init_flash(sysclk_get_cpu_hz());
  4001ee:	4718      	bx	r3
  4001f0:	11e1a300 	.word	0x11e1a300
  4001f4:	00400b7d 	.word	0x00400b7d
  4001f8:	004007e1 	.word	0x004007e1
  4001fc:	00400835 	.word	0x00400835
  400200:	00400845 	.word	0x00400845
  400204:	00400855 	.word	0x00400855
  400208:	400e0600 	.word	0x400e0600
  40020c:	20183f01 	.word	0x20183f01
  400210:	0040075d 	.word	0x0040075d
  400214:	0040078d 	.word	0x0040078d
  400218:	00400a99 	.word	0x00400a99

0040021c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40021c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400220:	b990      	cbnz	r0, 400248 <_read+0x2c>
		return -1;
	}

	for (; len > 0; --len) {
  400222:	2a00      	cmp	r2, #0
  400224:	4690      	mov	r8, r2
  400226:	dd0d      	ble.n	400244 <_read+0x28>
  400228:	460c      	mov	r4, r1
  40022a:	188f      	adds	r7, r1, r2
  40022c:	4e08      	ldr	r6, [pc, #32]	; (400250 <_read+0x34>)
  40022e:	4d09      	ldr	r5, [pc, #36]	; (400254 <_read+0x38>)
		ptr_get(stdio_base, ptr);
  400230:	4621      	mov	r1, r4
		ptr++;
  400232:	3401      	adds	r4, #1
		ptr_get(stdio_base, ptr);
  400234:	6830      	ldr	r0, [r6, #0]
  400236:	682b      	ldr	r3, [r5, #0]
  400238:	4798      	blx	r3
	for (; len > 0; --len) {
  40023a:	42bc      	cmp	r4, r7
  40023c:	d1f8      	bne.n	400230 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  40023e:	4640      	mov	r0, r8
  400240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (; len > 0; --len) {
  400244:	4680      	mov	r8, r0
  400246:	e7fa      	b.n	40023e <_read+0x22>
		return -1;
  400248:	f04f 38ff 	mov.w	r8, #4294967295
  40024c:	e7f7      	b.n	40023e <_read+0x22>
  40024e:	bf00      	nop
  400250:	20400bcc 	.word	0x20400bcc
  400254:	20400bc4 	.word	0x20400bc4

00400258 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400258:	3801      	subs	r0, #1
  40025a:	2802      	cmp	r0, #2
  40025c:	d81e      	bhi.n	40029c <_write+0x44>
{
  40025e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400262:	4615      	mov	r5, r2
		return -1;
	}

	for (; len != 0; --len) {
  400264:	b1ba      	cbz	r2, 400296 <_write+0x3e>
  400266:	460e      	mov	r6, r1
  400268:	460c      	mov	r4, r1
  40026a:	f8df 803c 	ldr.w	r8, [pc, #60]	; 4002a8 <_write+0x50>
  40026e:	4f0d      	ldr	r7, [pc, #52]	; (4002a4 <_write+0x4c>)
  400270:	e001      	b.n	400276 <_write+0x1e>
  400272:	3d01      	subs	r5, #1
  400274:	d00d      	beq.n	400292 <_write+0x3a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400276:	f814 1b01 	ldrb.w	r1, [r4], #1
  40027a:	f8d8 0000 	ldr.w	r0, [r8]
  40027e:	683b      	ldr	r3, [r7, #0]
  400280:	4798      	blx	r3
  400282:	2800      	cmp	r0, #0
  400284:	eba4 0006 	sub.w	r0, r4, r6
  400288:	daf3      	bge.n	400272 <_write+0x1a>
		return -1;
  40028a:	f04f 30ff 	mov.w	r0, #4294967295
  40028e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (; len != 0; --len) {
  400296:	4610      	mov	r0, r2
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  400298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40029c:	f04f 30ff 	mov.w	r0, #4294967295
}
  4002a0:	4770      	bx	lr
  4002a2:	bf00      	nop
  4002a4:	20400bc8 	.word	0x20400bc8
  4002a8:	20400bcc 	.word	0x20400bcc

004002ac <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4002ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4002ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4002b2:	4b5a      	ldr	r3, [pc, #360]	; (40041c <board_init+0x170>)
  4002b4:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4002b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4002ba:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4002be:	4c58      	ldr	r4, [pc, #352]	; (400420 <board_init+0x174>)
  4002c0:	2300      	movs	r3, #0
  4002c2:	f8c4 3250 	str.w	r3, [r4, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4002c6:	6963      	ldr	r3, [r4, #20]
  4002c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  4002cc:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb");
  4002ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4002d2:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4002d6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4002da:	f003 0607 	and.w	r6, r3, #7
    sets    = CCSIDR_SETS(ccsidr);
  4002de:	f3c3 3e4e 	ubfx	lr, r3, #13, #15
    ways    = CCSIDR_WAYS(ccsidr);
  4002e2:	f3c3 0cc9 	ubfx	ip, r3, #3, #10
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4002e6:	3604      	adds	r6, #4
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4002e8:	fabc f38c 	clz	r3, ip
    wshift  = __CLZ(ways) & 0x1f;
  4002ec:	f003 031f 	and.w	r3, r3, #31
  __ASM volatile ("dsb");
  4002f0:	f3bf 8f4f 	dsb	sy
  4002f4:	f04f 35ff 	mov.w	r5, #4294967295
  4002f8:	fa0e f006 	lsl.w	r0, lr, r6
  4002fc:	fa0c f703 	lsl.w	r7, ip, r3
  400300:	fa05 f606 	lsl.w	r6, r5, r6
  400304:	409d      	lsls	r5, r3
{
  400306:	463a      	mov	r2, r7

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  400308:	4663      	mov	r3, ip
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  40030a:	ea40 0102 	orr.w	r1, r0, r2
              SCB->DCISW = sw;
            } while(tmpways--);
  40030e:	3b01      	subs	r3, #1
  400310:	442a      	add	r2, r5
              SCB->DCISW = sw;
  400312:	f8c4 1260 	str.w	r1, [r4, #608]	; 0x260
            } while(tmpways--);
  400316:	1c59      	adds	r1, r3, #1
  400318:	d1f7      	bne.n	40030a <board_init+0x5e>
        } while(sets--);
  40031a:	f10e 3eff 	add.w	lr, lr, #4294967295
  40031e:	4430      	add	r0, r6
  400320:	f1be 3fff 	cmp.w	lr, #4294967295
  400324:	d1ef      	bne.n	400306 <board_init+0x5a>
  400326:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  40032a:	6963      	ldr	r3, [r4, #20]
  40032c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400330:	6163      	str	r3, [r4, #20]
  400332:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400336:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40033a:	4b3a      	ldr	r3, [pc, #232]	; (400424 <board_init+0x178>)
  40033c:	493a      	ldr	r1, [pc, #232]	; (400428 <board_init+0x17c>)
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40033e:	4a3b      	ldr	r2, [pc, #236]	; (40042c <board_init+0x180>)
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400340:	6059      	str	r1, [r3, #4]
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400342:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb");
  400344:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400348:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  40034c:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  400350:	f023 0301 	bic.w	r3, r3, #1
  400354:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400358:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
  40035c:	f023 0301 	bic.w	r3, r3, #1
  400360:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  __ASM volatile ("dsb");
  400364:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400368:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40036c:	4c30      	ldr	r4, [pc, #192]	; (400430 <board_init+0x184>)
  40036e:	200a      	movs	r0, #10
  400370:	47a0      	blx	r4
  400372:	200b      	movs	r0, #11
  400374:	47a0      	blx	r4
  400376:	200c      	movs	r0, #12
  400378:	47a0      	blx	r4
  40037a:	2010      	movs	r0, #16
  40037c:	47a0      	blx	r4
  40037e:	2011      	movs	r0, #17
  400380:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400382:	f44f 7580 	mov.w	r5, #256	; 0x100
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400386:	4a2b      	ldr	r2, [pc, #172]	; (400434 <board_init+0x188>)
  400388:	f44f 6300 	mov.w	r3, #2048	; 0x800
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40038c:	492a      	ldr	r1, [pc, #168]	; (400438 <board_init+0x18c>)
		base->PIO_PUDR = mask;
  40038e:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400392:	4e2a      	ldr	r6, [pc, #168]	; (40043c <board_init+0x190>)
  400394:	2010      	movs	r0, #16
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400396:	610d      	str	r5, [r1, #16]
		base->PIO_PUDR = mask;
  400398:	f5a1 7100 	sub.w	r1, r1, #512	; 0x200
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40039c:	f8c1 52a0 	str.w	r5, [r1, #672]	; 0x2a0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4003a0:	f8c1 5230 	str.w	r5, [r1, #560]	; 0x230
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4003a4:	6153      	str	r3, [r2, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003a6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		base->PIO_PUER = mask;
  4003aa:	6653      	str	r3, [r2, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4003ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003b0:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFER = mask;
  4003b2:	6213      	str	r3, [r2, #32]
		base->PIO_IFSCER = mask;
  4003b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4003b8:	6f15      	ldr	r5, [r2, #112]	; 0x70
  4003ba:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
  4003be:	6715      	str	r5, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003c0:	6f55      	ldr	r5, [r2, #116]	; 0x74
  4003c2:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
  4003c6:	6755      	str	r5, [r2, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4003c8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4003cc:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4003d0:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4003d4:	6614      	str	r4, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4003d6:	f8c2 4090 	str.w	r4, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003da:	6554      	str	r4, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  4003dc:	6254      	str	r4, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4003de:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4003e2:	6f13      	ldr	r3, [r2, #112]	; 0x70
  4003e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  4003e8:	6713      	str	r3, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003ea:	6f53      	ldr	r3, [r2, #116]	; 0x74
  4003ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  4003f0:	6753      	str	r3, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003f2:	6054      	str	r4, [r2, #4]
  4003f4:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
  4003f8:	4303      	orrs	r3, r0
  4003fa:	f8c6 3114 	str.w	r3, [r6, #276]	; 0x114
		base->PIO_PUDR = mask;
  4003fe:	6608      	str	r0, [r1, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400400:	f8c1 0090 	str.w	r0, [r1, #144]	; 0x90
		base->PIO_MDDR = mask;
  400404:	6548      	str	r0, [r1, #84]	; 0x54
		base->PIO_IFDR = mask;
  400406:	6248      	str	r0, [r1, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400408:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  40040c:	6f0b      	ldr	r3, [r1, #112]	; 0x70
  40040e:	4303      	orrs	r3, r0
  400410:	670b      	str	r3, [r1, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400412:	6f4b      	ldr	r3, [r1, #116]	; 0x74
  400414:	4303      	orrs	r3, r0
  400416:	674b      	str	r3, [r1, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400418:	6048      	str	r0, [r1, #4]
  40041a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40041c:	400e1850 	.word	0x400e1850
  400420:	e000ed00 	.word	0xe000ed00
  400424:	400e0c00 	.word	0x400e0c00
  400428:	5a00080c 	.word	0x5a00080c
  40042c:	5a00070c 	.word	0x5a00070c
  400430:	00400865 	.word	0x00400865
  400434:	400e0e00 	.word	0x400e0e00
  400438:	400e1200 	.word	0x400e1200
  40043c:	40088000 	.word	0x40088000

00400440 <pio_set>:
  400440:	6301      	str	r1, [r0, #48]	; 0x30
  400442:	4770      	bx	lr

00400444 <pio_clear>:
  400444:	6341      	str	r1, [r0, #52]	; 0x34
  400446:	4770      	bx	lr

00400448 <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  400448:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  40044c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400450:	d105      	bne.n	40045e <pio_get+0x16>
		ul_reg = p_pio->PIO_ODSR;
  400452:	6b83      	ldr	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
	}

	if ((ul_reg & ul_mask) == 0) {
  400454:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
  400456:	bf14      	ite	ne
  400458:	2001      	movne	r0, #1
  40045a:	2000      	moveq	r0, #0
  40045c:	4770      	bx	lr
		ul_reg = p_pio->PIO_PDSR;
  40045e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  400460:	e7f8      	b.n	400454 <pio_get+0xc>
  400462:	bf00      	nop

00400464 <pio_set_peripheral>:

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400464:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
	p_pio->PIO_IDR = ul_mask;
  400468:	6442      	str	r2, [r0, #68]	; 0x44
	switch (ul_type) {
  40046a:	d034      	beq.n	4004d6 <pio_set_peripheral+0x72>
  40046c:	d810      	bhi.n	400490 <pio_set_peripheral+0x2c>
  40046e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400472:	d01c      	beq.n	4004ae <pio_set_peripheral+0x4a>
  400474:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400478:	d12a      	bne.n	4004d0 <pio_set_peripheral+0x6c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40047a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40047c:	4313      	orrs	r3, r2
  40047e:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400480:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400482:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400484:	400b      	ands	r3, r1
  400486:	ea23 0302 	bic.w	r3, r3, r2
  40048a:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40048c:	6042      	str	r2, [r0, #4]
  40048e:	4770      	bx	lr
	switch (ul_type) {
  400490:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400494:	d01b      	beq.n	4004ce <pio_set_peripheral+0x6a>
  400496:	d829      	bhi.n	4004ec <pio_set_peripheral+0x88>
  400498:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40049c:	d1f6      	bne.n	40048c <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  40049e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4004a0:	4313      	orrs	r3, r2
  4004a2:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4004a4:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4004a6:	4313      	orrs	r3, r2
  4004a8:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4004aa:	6042      	str	r2, [r0, #4]
  4004ac:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4004ae:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4004b0:	43d3      	mvns	r3, r2
{
  4004b2:	b410      	push	{r4}
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4004b4:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4004b6:	4021      	ands	r1, r4
  4004b8:	461c      	mov	r4, r3
  4004ba:	4019      	ands	r1, r3
  4004bc:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4004be:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4004c0:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4004c2:	400b      	ands	r3, r1
  4004c4:	4023      	ands	r3, r4
}
  4004c6:	f85d 4b04 	ldr.w	r4, [sp], #4
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4004ca:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4004cc:	6042      	str	r2, [r0, #4]
}
  4004ce:	4770      	bx	lr
	switch (ul_type) {
  4004d0:	2900      	cmp	r1, #0
  4004d2:	d1db      	bne.n	40048c <pio_set_peripheral+0x28>
  4004d4:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4004d6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4004d8:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4004da:	400b      	ands	r3, r1
  4004dc:	ea23 0302 	bic.w	r3, r3, r2
  4004e0:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4004e2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4004e4:	4313      	orrs	r3, r2
  4004e6:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4004e8:	6042      	str	r2, [r0, #4]
  4004ea:	4770      	bx	lr
	switch (ul_type) {
  4004ec:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4004f0:	d0ed      	beq.n	4004ce <pio_set_peripheral+0x6a>
  4004f2:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4004f6:	d0ea      	beq.n	4004ce <pio_set_peripheral+0x6a>
  4004f8:	e7c8      	b.n	40048c <pio_set_peripheral+0x28>
  4004fa:	bf00      	nop

004004fc <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  4004fc:	b410      	push	{r4}
  4004fe:	9c01      	ldr	r4, [sp, #4]
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400500:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400502:	b194      	cbz	r4, 40052a <pio_set_output+0x2e>
		p_pio->PIO_PUER = ul_mask;
  400504:	6641      	str	r1, [r0, #100]	; 0x64
	if (ul_multidrive_enable) {
  400506:	b13b      	cbz	r3, 400518 <pio_set_output+0x1c>
		p_pio->PIO_MDER = ul_mask;
  400508:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  40050a:	b942      	cbnz	r2, 40051e <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
  40050c:	6341      	str	r1, [r0, #52]	; 0x34
}
  40050e:	f85d 4b04 	ldr.w	r4, [sp], #4
	p_pio->PIO_OER = ul_mask;
  400512:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400514:	6001      	str	r1, [r0, #0]
}
  400516:	4770      	bx	lr
		p_pio->PIO_MDDR = ul_mask;
  400518:	6541      	str	r1, [r0, #84]	; 0x54
	if (ul_default_level) {
  40051a:	2a00      	cmp	r2, #0
  40051c:	d0f6      	beq.n	40050c <pio_set_output+0x10>
		p_pio->PIO_SODR = ul_mask;
  40051e:	6301      	str	r1, [r0, #48]	; 0x30
}
  400520:	f85d 4b04 	ldr.w	r4, [sp], #4
	p_pio->PIO_OER = ul_mask;
  400524:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400526:	6001      	str	r1, [r0, #0]
}
  400528:	4770      	bx	lr
		p_pio->PIO_PUDR = ul_mask;
  40052a:	6601      	str	r1, [r0, #96]	; 0x60
  40052c:	e7eb      	b.n	400506 <pio_set_output+0xa>
  40052e:	bf00      	nop

00400530 <pio_configure>:
	switch (ul_type) {
  400530:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
{
  400534:	b570      	push	{r4, r5, r6, lr}
	switch (ul_type) {
  400536:	d037      	beq.n	4005a8 <pio_configure+0x78>
  400538:	d92d      	bls.n	400596 <pio_configure+0x66>
  40053a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40053e:	d019      	beq.n	400574 <pio_configure+0x44>
  400540:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400544:	d016      	beq.n	400574 <pio_configure+0x44>
  400546:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40054a:	d002      	beq.n	400552 <pio_configure+0x22>
		return 0;
  40054c:	2300      	movs	r3, #0
}
  40054e:	4618      	mov	r0, r3
  400550:	bd70      	pop	{r4, r5, r6, pc}
	if (ul_pull_up_enable) {
  400552:	07dd      	lsls	r5, r3, #31
	p_pio->PIO_IDR = ul_mask;
  400554:	6442      	str	r2, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400556:	d436      	bmi.n	4005c6 <pio_configure+0x96>
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400558:	f013 0f0a 	tst.w	r3, #10
		p_pio->PIO_PUDR = ul_mask;
  40055c:	6602      	str	r2, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40055e:	d036      	beq.n	4005ce <pio_configure+0x9e>
	if (ul_attribute & PIO_DEGLITCH) {
  400560:	079c      	lsls	r4, r3, #30
		p_pio->PIO_IFER = ul_mask;
  400562:	6202      	str	r2, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400564:	d536      	bpl.n	4005d4 <pio_configure+0xa4>
		p_pio->PIO_IFSCDR = ul_mask;
  400566:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
	return 1;
  40056a:	2301      	movs	r3, #1
	p_pio->PIO_ODR = ul_mask;
  40056c:	6142      	str	r2, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  40056e:	6002      	str	r2, [r0, #0]
}
  400570:	4618      	mov	r0, r3
  400572:	bd70      	pop	{r4, r5, r6, pc}
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
  400574:	f003 0404 	and.w	r4, r3, #4
	if (ul_pull_up_enable) {
  400578:	07db      	lsls	r3, r3, #31
	p_pio->PIO_IDR = ul_mask;
  40057a:	6442      	str	r2, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40057c:	d51e      	bpl.n	4005bc <pio_configure+0x8c>
		p_pio->PIO_PUER = ul_mask;
  40057e:	6642      	str	r2, [r0, #100]	; 0x64
	if (ul_multidrive_enable) {
  400580:	b1fc      	cbz	r4, 4005c2 <pio_configure+0x92>
		p_pio->PIO_MDER = ul_mask;
  400582:	6502      	str	r2, [r0, #80]	; 0x50
	if (ul_default_level) {
  400584:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400588:	d02d      	beq.n	4005e6 <pio_configure+0xb6>
		p_pio->PIO_CODR = ul_mask;
  40058a:	6342      	str	r2, [r0, #52]	; 0x34
	return 1;
  40058c:	2301      	movs	r3, #1
	p_pio->PIO_OER = ul_mask;
  40058e:	6102      	str	r2, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400590:	6002      	str	r2, [r0, #0]
}
  400592:	4618      	mov	r0, r3
  400594:	bd70      	pop	{r4, r5, r6, pc}
	switch (ul_type) {
  400596:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40059a:	d005      	beq.n	4005a8 <pio_configure+0x78>
  40059c:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4005a0:	d002      	beq.n	4005a8 <pio_configure+0x78>
  4005a2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4005a6:	d1d1      	bne.n	40054c <pio_configure+0x1c>
  4005a8:	461e      	mov	r6, r3
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  4005aa:	4b10      	ldr	r3, [pc, #64]	; (4005ec <pio_configure+0xbc>)
  4005ac:	4604      	mov	r4, r0
  4005ae:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4005b0:	07f6      	lsls	r6, r6, #31
  4005b2:	d514      	bpl.n	4005de <pio_configure+0xae>
	return 1;
  4005b4:	2301      	movs	r3, #1
		p_pio->PIO_PUER = ul_mask;
  4005b6:	6662      	str	r2, [r4, #100]	; 0x64
}
  4005b8:	4618      	mov	r0, r3
  4005ba:	bd70      	pop	{r4, r5, r6, pc}
		p_pio->PIO_PUDR = ul_mask;
  4005bc:	6602      	str	r2, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  4005be:	2c00      	cmp	r4, #0
  4005c0:	d1df      	bne.n	400582 <pio_configure+0x52>
		p_pio->PIO_MDDR = ul_mask;
  4005c2:	6542      	str	r2, [r0, #84]	; 0x54
  4005c4:	e7de      	b.n	400584 <pio_configure+0x54>
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4005c6:	f013 0f0a 	tst.w	r3, #10
		p_pio->PIO_PUER = ul_mask;
  4005ca:	6642      	str	r2, [r0, #100]	; 0x64
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4005cc:	d1c8      	bne.n	400560 <pio_configure+0x30>
	if (ul_attribute & PIO_DEGLITCH) {
  4005ce:	079c      	lsls	r4, r3, #30
		p_pio->PIO_IFDR = ul_mask;
  4005d0:	6242      	str	r2, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
  4005d2:	d4c8      	bmi.n	400566 <pio_configure+0x36>
		if (ul_attribute & PIO_DEBOUNCE) {
  4005d4:	0719      	lsls	r1, r3, #28
  4005d6:	d5c8      	bpl.n	40056a <pio_configure+0x3a>
			p_pio->PIO_IFSCER = ul_mask;
  4005d8:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  4005dc:	e7c5      	b.n	40056a <pio_configure+0x3a>
	return 1;
  4005de:	2301      	movs	r3, #1
		p_pio->PIO_PUDR = ul_mask;
  4005e0:	6622      	str	r2, [r4, #96]	; 0x60
}
  4005e2:	4618      	mov	r0, r3
  4005e4:	bd70      	pop	{r4, r5, r6, pc}
		p_pio->PIO_SODR = ul_mask;
  4005e6:	6302      	str	r2, [r0, #48]	; 0x30
  4005e8:	e7d0      	b.n	40058c <pio_configure+0x5c>
  4005ea:	bf00      	nop
  4005ec:	00400465 	.word	0x00400465

004005f0 <pio_get_output_data_status>:
	if ((p_pio->PIO_ODSR & ul_mask) == 0) {
  4005f0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4005f2:	420b      	tst	r3, r1
}
  4005f4:	bf14      	ite	ne
  4005f6:	2001      	movne	r0, #1
  4005f8:	2000      	moveq	r0, #0
  4005fa:	4770      	bx	lr

004005fc <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  4005fc:	6401      	str	r1, [r0, #64]	; 0x40
  4005fe:	4770      	bx	lr

00400600 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400600:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400602:	4770      	bx	lr

00400604 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400604:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400606:	4770      	bx	lr

00400608 <pio_set_additional_interrupt_mode>:
 */
void pio_set_additional_interrupt_mode(Pio *p_pio,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
	/* Enables additional interrupt mode if needed */
	if (ul_attribute & PIO_IT_AIME) {
  400608:	06d3      	lsls	r3, r2, #27
  40060a:	d50a      	bpl.n	400622 <pio_set_additional_interrupt_mode+0x1a>
		/* Enables additional interrupt mode */
		p_pio->PIO_AIMER = ul_mask;

		/* Configures the Polarity of the event detection */
		/* (Rising/Falling Edge or High/Low Level) */
		if (ul_attribute & PIO_IT_RE_OR_HL) {
  40060c:	0693      	lsls	r3, r2, #26
		p_pio->PIO_AIMER = ul_mask;
  40060e:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attribute & PIO_IT_RE_OR_HL) {
  400612:	d409      	bmi.n	400628 <pio_set_additional_interrupt_mode+0x20>
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
		}

		/* Configures the type of event detection (Edge or Level) */
		if (ul_attribute & PIO_IT_EDGE) {
  400614:	0653      	lsls	r3, r2, #25
			p_pio->PIO_FELLSR = ul_mask;
  400616:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
		if (ul_attribute & PIO_IT_EDGE) {
  40061a:	d509      	bpl.n	400630 <pio_set_additional_interrupt_mode+0x28>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  40061c:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  400620:	4770      	bx	lr
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
		}
	} else {
		/* Disable additional interrupt mode */
		p_pio->PIO_AIMDR = ul_mask;
  400622:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  400626:	4770      	bx	lr
		if (ul_attribute & PIO_IT_EDGE) {
  400628:	0653      	lsls	r3, r2, #25
			p_pio->PIO_REHLSR = ul_mask;
  40062a:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attribute & PIO_IT_EDGE) {
  40062e:	d4f5      	bmi.n	40061c <pio_set_additional_interrupt_mode+0x14>
			p_pio->PIO_LSR = ul_mask;
  400630:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  400634:	4770      	bx	lr
  400636:	bf00      	nop

00400638 <pio_configure_interrupt>:
  400638:	4b00      	ldr	r3, [pc, #0]	; (40063c <pio_configure_interrupt+0x4>)
  40063a:	4718      	bx	r3
  40063c:	00400609 	.word	0x00400609

00400640 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400642:	4604      	mov	r4, r0
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400644:	4b0f      	ldr	r3, [pc, #60]	; (400684 <pio_handler_process+0x44>)
{
  400646:	460f      	mov	r7, r1
	status = pio_get_interrupt_status(p_pio);
  400648:	4798      	blx	r3
  40064a:	4606      	mov	r6, r0
	status &= pio_get_interrupt_mask(p_pio);
  40064c:	4b0e      	ldr	r3, [pc, #56]	; (400688 <pio_handler_process+0x48>)
  40064e:	4620      	mov	r0, r4
  400650:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400652:	4006      	ands	r6, r0
  400654:	d015      	beq.n	400682 <pio_handler_process+0x42>
  400656:	4c0d      	ldr	r4, [pc, #52]	; (40068c <pio_handler_process+0x4c>)
  400658:	2500      	movs	r5, #0
  40065a:	e004      	b.n	400666 <pio_handler_process+0x26>
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  40065c:	2d07      	cmp	r5, #7
  40065e:	f104 0410 	add.w	r4, r4, #16
  400662:	d00e      	beq.n	400682 <pio_handler_process+0x42>
  400664:	b16e      	cbz	r6, 400682 <pio_handler_process+0x42>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400666:	6823      	ldr	r3, [r4, #0]
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
  400668:	3501      	adds	r5, #1
			if (gs_interrupt_sources[i].id == ul_id) {
  40066a:	42bb      	cmp	r3, r7
  40066c:	d1f6      	bne.n	40065c <pio_handler_process+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40066e:	6861      	ldr	r1, [r4, #4]
  400670:	4231      	tst	r1, r6
  400672:	d0f3      	beq.n	40065c <pio_handler_process+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400674:	68e3      	ldr	r3, [r4, #12]
  400676:	4638      	mov	r0, r7
  400678:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  40067a:	6863      	ldr	r3, [r4, #4]
  40067c:	ea26 0603 	bic.w	r6, r6, r3
  400680:	e7ec      	b.n	40065c <pio_handler_process+0x1c>
  400682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400684:	00400601 	.word	0x00400601
  400688:	00400605 	.word	0x00400605
  40068c:	204009d4 	.word	0x204009d4

00400690 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400694:	f8df 9070 	ldr.w	r9, [pc, #112]	; 400708 <pio_handler_set+0x78>
  400698:	f8d9 c000 	ldr.w	ip, [r9]
  40069c:	f1bc 0f06 	cmp.w	ip, #6
  4006a0:	d82b      	bhi.n	4006fa <pio_handler_set+0x6a>
  4006a2:	f04f 0800 	mov.w	r8, #0
  4006a6:	4e16      	ldr	r6, [pc, #88]	; (400700 <pio_handler_set+0x70>)
  4006a8:	4644      	mov	r4, r8
  4006aa:	e002      	b.n	4006b2 <pio_handler_set+0x22>
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4006ac:	45a4      	cmp	ip, r4
  4006ae:	46a0      	mov	r8, r4
  4006b0:	d30c      	bcc.n	4006cc <pio_handler_set+0x3c>
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4006b2:	0125      	lsls	r5, r4, #4
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4006b4:	f104 0e01 	add.w	lr, r4, #1
		pSource = &(gs_interrupt_sources[i]);
  4006b8:	46a2      	mov	sl, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4006ba:	5977      	ldr	r7, [r6, r5]
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4006bc:	fa5f f48e 	uxtb.w	r4, lr
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4006c0:	4435      	add	r5, r6
  4006c2:	428f      	cmp	r7, r1
  4006c4:	d1f2      	bne.n	4006ac <pio_handler_set+0x1c>
  4006c6:	686d      	ldr	r5, [r5, #4]
  4006c8:	4295      	cmp	r5, r2
  4006ca:	d1ef      	bne.n	4006ac <pio_handler_set+0x1c>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  4006cc:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
	pSource->mask = ul_mask;
	pSource->attr = ul_attr;
	pSource->handler = p_handler;
	if (i == gs_ul_nb_sources + 1) {
  4006d0:	f10c 0c01 	add.w	ip, ip, #1
	pSource->id = ul_id;
  4006d4:	eb06 040a 	add.w	r4, r6, sl
  4006d8:	f846 100a 	str.w	r1, [r6, sl]
	pSource->handler = p_handler;
  4006dc:	9908      	ldr	r1, [sp, #32]
	if (i == gs_ul_nb_sources + 1) {
  4006de:	45c4      	cmp	ip, r8
	pSource->mask = ul_mask;
  4006e0:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  4006e2:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  4006e4:	60e1      	str	r1, [r4, #12]
  4006e6:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4006e8:	461a      	mov	r2, r3
  4006ea:	4b06      	ldr	r3, [pc, #24]	; (400704 <pio_handler_set+0x74>)
		gs_ul_nb_sources++;
  4006ec:	bf08      	it	eq
  4006ee:	f8c9 8000 	streq.w	r8, [r9]
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4006f2:	4798      	blx	r3

	return 0;
  4006f4:	2000      	movs	r0, #0
  4006f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return 1;
  4006fa:	2001      	movs	r0, #1
}
  4006fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400700:	204009d4 	.word	0x204009d4
  400704:	00400639 	.word	0x00400639
  400708:	20400a44 	.word	0x20400a44

0040070c <PIOA_Handler>:
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
	pio_handler_process(PIOA, ID_PIOA);
  40070c:	210a      	movs	r1, #10
  40070e:	4801      	ldr	r0, [pc, #4]	; (400714 <PIOA_Handler+0x8>)
  400710:	4b01      	ldr	r3, [pc, #4]	; (400718 <PIOA_Handler+0xc>)
  400712:	4718      	bx	r3
  400714:	400e0e00 	.word	0x400e0e00
  400718:	00400641 	.word	0x00400641

0040071c <PIOB_Handler>:
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
    pio_handler_process(PIOB, ID_PIOB);
  40071c:	210b      	movs	r1, #11
  40071e:	4801      	ldr	r0, [pc, #4]	; (400724 <PIOB_Handler+0x8>)
  400720:	4b01      	ldr	r3, [pc, #4]	; (400728 <PIOB_Handler+0xc>)
  400722:	4718      	bx	r3
  400724:	400e1000 	.word	0x400e1000
  400728:	00400641 	.word	0x00400641

0040072c <PIOC_Handler>:
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
	pio_handler_process(PIOC, ID_PIOC);
  40072c:	210c      	movs	r1, #12
  40072e:	4801      	ldr	r0, [pc, #4]	; (400734 <PIOC_Handler+0x8>)
  400730:	4b01      	ldr	r3, [pc, #4]	; (400738 <PIOC_Handler+0xc>)
  400732:	4718      	bx	r3
  400734:	400e1200 	.word	0x400e1200
  400738:	00400641 	.word	0x00400641

0040073c <PIOD_Handler>:
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
	pio_handler_process(PIOD, ID_PIOD);
  40073c:	2110      	movs	r1, #16
  40073e:	4801      	ldr	r0, [pc, #4]	; (400744 <PIOD_Handler+0x8>)
  400740:	4b01      	ldr	r3, [pc, #4]	; (400748 <PIOD_Handler+0xc>)
  400742:	4718      	bx	r3
  400744:	400e1400 	.word	0x400e1400
  400748:	00400641 	.word	0x00400641

0040074c <PIOE_Handler>:
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
	pio_handler_process(PIOE, ID_PIOE);
  40074c:	2111      	movs	r1, #17
  40074e:	4801      	ldr	r0, [pc, #4]	; (400754 <PIOE_Handler+0x8>)
  400750:	4b01      	ldr	r3, [pc, #4]	; (400758 <PIOE_Handler+0xc>)
  400752:	4718      	bx	r3
  400754:	400e1600 	.word	0x400e1600
  400758:	00400641 	.word	0x00400641

0040075c <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  40075c:	3802      	subs	r0, #2
  40075e:	2802      	cmp	r0, #2
  400760:	d80d      	bhi.n	40077e <pmc_mck_set_division+0x22>
  400762:	4b08      	ldr	r3, [pc, #32]	; (400784 <pmc_mck_set_division+0x28>)
  400764:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400768:	4907      	ldr	r1, [pc, #28]	; (400788 <pmc_mck_set_division+0x2c>)
  40076a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40076c:	460a      	mov	r2, r1
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40076e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400772:	4303      	orrs	r3, r0
	PMC->PMC_MCKR =
  400774:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400776:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400778:	071b      	lsls	r3, r3, #28
  40077a:	d5fc      	bpl.n	400776 <pmc_mck_set_division+0x1a>
}
  40077c:	4770      	bx	lr
{
  40077e:	2000      	movs	r0, #0
  400780:	e7f2      	b.n	400768 <pmc_mck_set_division+0xc>
  400782:	bf00      	nop
  400784:	00405e98 	.word	0x00405e98
  400788:	400e0600 	.word	0x400e0600

0040078c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40078c:	4913      	ldr	r1, [pc, #76]	; (4007dc <pmc_switch_mck_to_pllack+0x50>)
  40078e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400794:	4318      	orrs	r0, r3
  400796:	6308      	str	r0, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400798:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  40079a:	0718      	lsls	r0, r3, #28
  40079c:	d407      	bmi.n	4007ae <pmc_switch_mck_to_pllack+0x22>
  40079e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4007a2:	e001      	b.n	4007a8 <pmc_switch_mck_to_pllack+0x1c>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4007a4:	3b01      	subs	r3, #1
  4007a6:	d016      	beq.n	4007d6 <pmc_switch_mck_to_pllack+0x4a>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4007a8:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4007aa:	0712      	lsls	r2, r2, #28
  4007ac:	d5fa      	bpl.n	4007a4 <pmc_switch_mck_to_pllack+0x18>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4007ae:	490b      	ldr	r1, [pc, #44]	; (4007dc <pmc_switch_mck_to_pllack+0x50>)
  4007b0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4007b2:	f023 0303 	bic.w	r3, r3, #3
  4007b6:	f043 0302 	orr.w	r3, r3, #2
  4007ba:	630b      	str	r3, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4007bc:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  4007be:	0718      	lsls	r0, r3, #28
  4007c0:	d407      	bmi.n	4007d2 <pmc_switch_mck_to_pllack+0x46>
  4007c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4007c6:	e001      	b.n	4007cc <pmc_switch_mck_to_pllack+0x40>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4007c8:	3b01      	subs	r3, #1
  4007ca:	d004      	beq.n	4007d6 <pmc_switch_mck_to_pllack+0x4a>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4007cc:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4007ce:	0712      	lsls	r2, r2, #28
  4007d0:	d5fa      	bpl.n	4007c8 <pmc_switch_mck_to_pllack+0x3c>
			return 1;
		}
	}

	return 0;
  4007d2:	2000      	movs	r0, #0
}
  4007d4:	4770      	bx	lr
			return 1;
  4007d6:	2001      	movs	r0, #1
  4007d8:	4770      	bx	lr
  4007da:	bf00      	nop
  4007dc:	400e0600 	.word	0x400e0600

004007e0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4007e0:	b9a0      	cbnz	r0, 40080c <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4007e2:	4b0e      	ldr	r3, [pc, #56]	; (40081c <pmc_switch_mainck_to_xtal+0x3c>)
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4007e4:	0209      	lsls	r1, r1, #8
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4007e6:	480e      	ldr	r0, [pc, #56]	; (400820 <pmc_switch_mainck_to_xtal+0x40>)
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4007e8:	b289      	uxth	r1, r1
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4007ea:	461a      	mov	r2, r3
{
  4007ec:	b430      	push	{r4, r5}
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4007ee:	4c0d      	ldr	r4, [pc, #52]	; (400824 <pmc_switch_mainck_to_xtal+0x44>)
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4007f0:	6a1d      	ldr	r5, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4007f2:	402c      	ands	r4, r5
  4007f4:	4320      	orrs	r0, r4
  4007f6:	4301      	orrs	r1, r0
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4007f8:	6219      	str	r1, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4007fa:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4007fc:	07db      	lsls	r3, r3, #31
  4007fe:	d5fc      	bpl.n	4007fa <pmc_switch_mainck_to_xtal+0x1a>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400800:	6a11      	ldr	r1, [r2, #32]
  400802:	4b09      	ldr	r3, [pc, #36]	; (400828 <pmc_switch_mainck_to_xtal+0x48>)
  400804:	430b      	orrs	r3, r1
  400806:	6213      	str	r3, [r2, #32]
	}
}
  400808:	bc30      	pop	{r4, r5}
  40080a:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40080c:	4903      	ldr	r1, [pc, #12]	; (40081c <pmc_switch_mainck_to_xtal+0x3c>)
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40080e:	4a07      	ldr	r2, [pc, #28]	; (40082c <pmc_switch_mainck_to_xtal+0x4c>)
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400810:	6a08      	ldr	r0, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400812:	4b07      	ldr	r3, [pc, #28]	; (400830 <pmc_switch_mainck_to_xtal+0x50>)
  400814:	4002      	ands	r2, r0
  400816:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400818:	620b      	str	r3, [r1, #32]
  40081a:	4770      	bx	lr
  40081c:	400e0600 	.word	0x400e0600
  400820:	00370001 	.word	0x00370001
  400824:	ffc8fffc 	.word	0xffc8fffc
  400828:	01370000 	.word	0x01370000
  40082c:	fec8fffc 	.word	0xfec8fffc
  400830:	01370002 	.word	0x01370002

00400834 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400834:	4b02      	ldr	r3, [pc, #8]	; (400840 <pmc_osc_is_ready_mainck+0xc>)
  400836:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400838:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  40083c:	4770      	bx	lr
  40083e:	bf00      	nop
  400840:	400e0600 	.word	0x400e0600

00400844 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400844:	4b02      	ldr	r3, [pc, #8]	; (400850 <pmc_disable_pllack+0xc>)
  400846:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40084a:	629a      	str	r2, [r3, #40]	; 0x28
  40084c:	4770      	bx	lr
  40084e:	bf00      	nop
  400850:	400e0600 	.word	0x400e0600

00400854 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400854:	4b02      	ldr	r3, [pc, #8]	; (400860 <pmc_is_locked_pllack+0xc>)
  400856:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400858:	f000 0002 	and.w	r0, r0, #2
  40085c:	4770      	bx	lr
  40085e:	bf00      	nop
  400860:	400e0600 	.word	0x400e0600

00400864 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400864:	283f      	cmp	r0, #63	; 0x3f
  400866:	d81a      	bhi.n	40089e <pmc_enable_periph_clk+0x3a>
		return 1;
	}

	if (ul_id < 32) {
  400868:	281f      	cmp	r0, #31
  40086a:	d80a      	bhi.n	400882 <pmc_enable_periph_clk+0x1e>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  40086c:	2301      	movs	r3, #1
  40086e:	4a0e      	ldr	r2, [pc, #56]	; (4008a8 <pmc_enable_periph_clk+0x44>)
  400870:	fa03 f000 	lsl.w	r0, r3, r0
  400874:	6991      	ldr	r1, [r2, #24]
  400876:	ea30 0301 	bics.w	r3, r0, r1
  40087a:	d012      	beq.n	4008a2 <pmc_enable_periph_clk+0x3e>
			PMC->PMC_PCER0 = 1 << ul_id;
  40087c:	6110      	str	r0, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40087e:	2000      	movs	r0, #0
  400880:	4770      	bx	lr
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400882:	2301      	movs	r3, #1
		ul_id -= 32;
  400884:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400886:	4a08      	ldr	r2, [pc, #32]	; (4008a8 <pmc_enable_periph_clk+0x44>)
  400888:	fa03 f000 	lsl.w	r0, r3, r0
  40088c:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
  400890:	ea30 0303 	bics.w	r3, r0, r3
  400894:	d005      	beq.n	4008a2 <pmc_enable_periph_clk+0x3e>
			PMC->PMC_PCER1 = 1 << ul_id;
  400896:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
	return 0;
  40089a:	2000      	movs	r0, #0
  40089c:	4770      	bx	lr
		return 1;
  40089e:	2001      	movs	r0, #1
  4008a0:	4770      	bx	lr
	return 0;
  4008a2:	2000      	movs	r0, #0
}
  4008a4:	4770      	bx	lr
  4008a6:	bf00      	nop
  4008a8:	400e0600 	.word	0x400e0600

004008ac <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4008ac:	6943      	ldr	r3, [r0, #20]
  4008ae:	079b      	lsls	r3, r3, #30
  4008b0:	d502      	bpl.n	4008b8 <uart_write+0xc>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4008b2:	61c1      	str	r1, [r0, #28]
	return 0;
  4008b4:	2000      	movs	r0, #0
  4008b6:	4770      	bx	lr
		return 1;
  4008b8:	2001      	movs	r0, #1
}
  4008ba:	4770      	bx	lr

004008bc <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4008bc:	6943      	ldr	r3, [r0, #20]
  4008be:	07db      	lsls	r3, r3, #31
  4008c0:	d503      	bpl.n	4008ca <uart_read+0xe>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4008c2:	6983      	ldr	r3, [r0, #24]
	return 0;
  4008c4:	2000      	movs	r0, #0
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4008c6:	700b      	strb	r3, [r1, #0]
	return 0;
  4008c8:	4770      	bx	lr
		return 1;
  4008ca:	2001      	movs	r0, #1
}
  4008cc:	4770      	bx	lr
  4008ce:	bf00      	nop

004008d0 <usart_set_async_baudrate>:
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4008d0:	010b      	lsls	r3, r1, #4
  4008d2:	4293      	cmp	r3, r2
{
  4008d4:	b410      	push	{r4}
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4008d6:	d814      	bhi.n	400902 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4008d8:	0859      	lsrs	r1, r3, #1
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4008da:	f64f 74fe 	movw	r4, #65534	; 0xfffe
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4008de:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  4008e2:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  4008e6:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4008e8:	1e59      	subs	r1, r3, #1
  4008ea:	42a1      	cmp	r1, r4
  4008ec:	d815      	bhi.n	40091a <usart_set_async_baudrate+0x4a>
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4008ee:	0412      	lsls	r2, r2, #16

	return 0;
  4008f0:	2100      	movs	r1, #0
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4008f2:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  4008f6:	431a      	orrs	r2, r3
  4008f8:	6202      	str	r2, [r0, #32]
}
  4008fa:	4608      	mov	r0, r1
  4008fc:	f85d 4b04 	ldr.w	r4, [sp], #4
  400900:	4770      	bx	lr
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400902:	00c9      	lsls	r1, r1, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400904:	f64f 74fe 	movw	r4, #65534	; 0xfffe
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400908:	084b      	lsrs	r3, r1, #1
  40090a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  40090e:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400912:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400914:	1e59      	subs	r1, r3, #1
  400916:	42a1      	cmp	r1, r4
  400918:	d904      	bls.n	400924 <usart_set_async_baudrate+0x54>
		return 1;
  40091a:	2101      	movs	r1, #1
}
  40091c:	f85d 4b04 	ldr.w	r4, [sp], #4
  400920:	4608      	mov	r0, r1
  400922:	4770      	bx	lr
		p_usart->US_MR |= US_MR_OVER;
  400924:	6841      	ldr	r1, [r0, #4]
  400926:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  40092a:	6041      	str	r1, [r0, #4]
  40092c:	e7df      	b.n	4008ee <usart_set_async_baudrate+0x1e>
  40092e:	bf00      	nop

00400930 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  400930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	p_usart->US_MR = 0;
  400932:	2400      	movs	r4, #0
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400934:	4d14      	ldr	r5, [pc, #80]	; (400988 <usart_init_rs232+0x58>)
	p_usart->US_CR = US_CR_RSTSTA;
  400936:	f44f 7680 	mov.w	r6, #256	; 0x100
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40093a:	f04f 0e88 	mov.w	lr, #136	; 0x88
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40093e:	2724      	movs	r7, #36	; 0x24
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400940:	f8c0 50e4 	str.w	r5, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  400944:	6044      	str	r4, [r0, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  400946:	f44f 2500 	mov.w	r5, #524288	; 0x80000
	p_usart->US_RTOR = 0;
  40094a:	6244      	str	r4, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  40094c:	6284      	str	r4, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40094e:	f8c0 e000 	str.w	lr, [r0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400952:	6007      	str	r7, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  400954:	6006      	str	r6, [r0, #0]
	ul_reg_val = 0;
  400956:	4e0d      	ldr	r6, [pc, #52]	; (40098c <usart_init_rs232+0x5c>)
	p_usart->US_CR = US_CR_RTSDIS;
  400958:	6005      	str	r5, [r0, #0]
	ul_reg_val = 0;
  40095a:	6034      	str	r4, [r6, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  40095c:	b189      	cbz	r1, 400982 <usart_init_rs232+0x52>
  40095e:	460d      	mov	r5, r1
  400960:	4b0b      	ldr	r3, [pc, #44]	; (400990 <usart_init_rs232+0x60>)
  400962:	6809      	ldr	r1, [r1, #0]
  400964:	4604      	mov	r4, r0
  400966:	4798      	blx	r3
  400968:	b958      	cbnz	r0, 400982 <usart_init_rs232+0x52>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40096a:	686a      	ldr	r2, [r5, #4]
  40096c:	68ab      	ldr	r3, [r5, #8]
  40096e:	692f      	ldr	r7, [r5, #16]
  400970:	4313      	orrs	r3, r2
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400972:	68e9      	ldr	r1, [r5, #12]
	p_usart->US_MR |= ul_reg_val;
  400974:	6862      	ldr	r2, [r4, #4]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400976:	433b      	orrs	r3, r7
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400978:	430b      	orrs	r3, r1
	p_usart->US_MR |= ul_reg_val;
  40097a:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40097c:	6033      	str	r3, [r6, #0]
	p_usart->US_MR |= ul_reg_val;
  40097e:	6062      	str	r2, [r4, #4]
}
  400980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
  400982:	2001      	movs	r0, #1
  400984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400986:	bf00      	nop
  400988:	55534100 	.word	0x55534100
  40098c:	20400a48 	.word	0x20400a48
  400990:	004008d1 	.word	0x004008d1

00400994 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  400994:	2340      	movs	r3, #64	; 0x40
  400996:	6003      	str	r3, [r0, #0]
  400998:	4770      	bx	lr
  40099a:	bf00      	nop

0040099c <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  40099c:	2310      	movs	r3, #16
  40099e:	6003      	str	r3, [r0, #0]
  4009a0:	4770      	bx	lr
  4009a2:	bf00      	nop

004009a4 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4009a4:	6942      	ldr	r2, [r0, #20]
{
  4009a6:	4603      	mov	r3, r0
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4009a8:	0792      	lsls	r2, r2, #30
  4009aa:	d504      	bpl.n	4009b6 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  4009ac:	f3c1 0108 	ubfx	r1, r1, #0, #9
	return 0;
  4009b0:	2000      	movs	r0, #0
	p_usart->US_THR = US_THR_TXCHR(c);
  4009b2:	61d9      	str	r1, [r3, #28]
	return 0;
  4009b4:	4770      	bx	lr
		return 1;
  4009b6:	2001      	movs	r0, #1
}
  4009b8:	4770      	bx	lr
  4009ba:	bf00      	nop

004009bc <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4009bc:	6943      	ldr	r3, [r0, #20]
  4009be:	07db      	lsls	r3, r3, #31
  4009c0:	d505      	bpl.n	4009ce <usart_read+0x12>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4009c2:	6983      	ldr	r3, [r0, #24]
	return 0;
  4009c4:	2000      	movs	r0, #0
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4009c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4009ca:	600b      	str	r3, [r1, #0]
	return 0;
  4009cc:	4770      	bx	lr
		return 1;
  4009ce:	2001      	movs	r0, #1
}
  4009d0:	4770      	bx	lr
  4009d2:	bf00      	nop

004009d4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4009d4:	e7fe      	b.n	4009d4 <Dummy_Handler>
  4009d6:	bf00      	nop

004009d8 <Reset_Handler>:
        if (pSrc != pDest) {
  4009d8:	4924      	ldr	r1, [pc, #144]	; (400a6c <Reset_Handler+0x94>)
  4009da:	4a25      	ldr	r2, [pc, #148]	; (400a70 <Reset_Handler+0x98>)
  4009dc:	4291      	cmp	r1, r2
{
  4009de:	b500      	push	{lr}
  4009e0:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4009e2:	d00e      	beq.n	400a02 <Reset_Handler+0x2a>
                for (; pDest < &_erelocate;) {
  4009e4:	4823      	ldr	r0, [pc, #140]	; (400a74 <Reset_Handler+0x9c>)
  4009e6:	4282      	cmp	r2, r0
  4009e8:	d20b      	bcs.n	400a02 <Reset_Handler+0x2a>
  4009ea:	43d3      	mvns	r3, r2
  4009ec:	4403      	add	r3, r0
  4009ee:	f023 0303 	bic.w	r3, r3, #3
  4009f2:	3304      	adds	r3, #4
  4009f4:	4413      	add	r3, r2
                        *pDest++ = *pSrc++;
  4009f6:	f851 0b04 	ldr.w	r0, [r1], #4
  4009fa:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4009fe:	429a      	cmp	r2, r3
  400a00:	d1f9      	bne.n	4009f6 <Reset_Handler+0x1e>
        for (pDest = &_szero; pDest < &_ezero;) {
  400a02:	4a1d      	ldr	r2, [pc, #116]	; (400a78 <Reset_Handler+0xa0>)
  400a04:	491d      	ldr	r1, [pc, #116]	; (400a7c <Reset_Handler+0xa4>)
  400a06:	428a      	cmp	r2, r1
  400a08:	d20a      	bcs.n	400a20 <Reset_Handler+0x48>
  400a0a:	43d3      	mvns	r3, r2
                *pDest++ = 0;
  400a0c:	2000      	movs	r0, #0
  400a0e:	440b      	add	r3, r1
  400a10:	f023 0303 	bic.w	r3, r3, #3
  400a14:	3304      	adds	r3, #4
  400a16:	4413      	add	r3, r2
  400a18:	f842 0b04 	str.w	r0, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400a1c:	429a      	cmp	r2, r3
  400a1e:	d1fb      	bne.n	400a18 <Reset_Handler+0x40>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400a20:	4b17      	ldr	r3, [pc, #92]	; (400a80 <Reset_Handler+0xa8>)
  400a22:	4a18      	ldr	r2, [pc, #96]	; (400a84 <Reset_Handler+0xac>)
  400a24:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400a28:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400a2a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400a2e:	fab3 f383 	clz	r3, r3
  400a32:	095b      	lsrs	r3, r3, #5
  400a34:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400a36:	b672      	cpsid	i
  __ASM volatile ("dmb");
  400a38:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400a3c:	4a12      	ldr	r2, [pc, #72]	; (400a88 <Reset_Handler+0xb0>)
  400a3e:	2300      	movs	r3, #0
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400a40:	4912      	ldr	r1, [pc, #72]	; (400a8c <Reset_Handler+0xb4>)
  400a42:	7013      	strb	r3, [r2, #0]
	return flags;
  400a44:	9801      	ldr	r0, [sp, #4]
  400a46:	680b      	ldr	r3, [r1, #0]
  400a48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400a4c:	600b      	str	r3, [r1, #0]
  __ASM volatile ("dsb");
  400a4e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400a52:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400a56:	b120      	cbz	r0, 400a62 <Reset_Handler+0x8a>
		cpu_irq_enable();
  400a58:	2301      	movs	r3, #1
  400a5a:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dmb");
  400a5c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400a60:	b662      	cpsie	i
        __libc_init_array();
  400a62:	4b0b      	ldr	r3, [pc, #44]	; (400a90 <Reset_Handler+0xb8>)
  400a64:	4798      	blx	r3
        main();
  400a66:	4b0b      	ldr	r3, [pc, #44]	; (400a94 <Reset_Handler+0xbc>)
  400a68:	4798      	blx	r3
  400a6a:	e7fe      	b.n	400a6a <Reset_Handler+0x92>
  400a6c:	00406140 	.word	0x00406140
  400a70:	20400000 	.word	0x20400000
  400a74:	204009b8 	.word	0x204009b8
  400a78:	204009b8 	.word	0x204009b8
  400a7c:	20400c40 	.word	0x20400c40
  400a80:	00400000 	.word	0x00400000
  400a84:	e000ed00 	.word	0xe000ed00
  400a88:	20400000 	.word	0x20400000
  400a8c:	e000ed88 	.word	0xe000ed88
  400a90:	00402f19 	.word	0x00402f19
  400a94:	00402db1 	.word	0x00402db1

00400a98 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400a98:	4a31      	ldr	r2, [pc, #196]	; (400b60 <SystemCoreClockUpdate+0xc8>)
  400a9a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400a9c:	f003 0303 	and.w	r3, r3, #3
  400aa0:	2b01      	cmp	r3, #1
  400aa2:	d03d      	beq.n	400b20 <SystemCoreClockUpdate+0x88>
  400aa4:	d326      	bcc.n	400af4 <SystemCoreClockUpdate+0x5c>
  400aa6:	2b02      	cmp	r3, #2
  400aa8:	d00d      	beq.n	400ac6 <SystemCoreClockUpdate+0x2e>
  400aaa:	492e      	ldr	r1, [pc, #184]	; (400b64 <SystemCoreClockUpdate+0xcc>)
  400aac:	680b      	ldr	r3, [r1, #0]

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400aae:	482c      	ldr	r0, [pc, #176]	; (400b60 <SystemCoreClockUpdate+0xc8>)
  400ab0:	6b02      	ldr	r2, [r0, #48]	; 0x30
  400ab2:	f002 0270 	and.w	r2, r2, #112	; 0x70
  400ab6:	2a70      	cmp	r2, #112	; 0x70
  400ab8:	d02c      	beq.n	400b14 <SystemCoreClockUpdate+0x7c>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400aba:	6b02      	ldr	r2, [r0, #48]	; 0x30
  400abc:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400ac0:	40d3      	lsrs	r3, r2
  400ac2:	600b      	str	r3, [r1, #0]
  400ac4:	4770      	bx	lr
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400ac6:	6a13      	ldr	r3, [r2, #32]
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400ac8:	4926      	ldr	r1, [pc, #152]	; (400b64 <SystemCoreClockUpdate+0xcc>)
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400aca:	01db      	lsls	r3, r3, #7
  400acc:	d538      	bpl.n	400b40 <SystemCoreClockUpdate+0xa8>
            SystemCoreClock *= 3U;
  400ace:	4b26      	ldr	r3, [pc, #152]	; (400b68 <SystemCoreClockUpdate+0xd0>)
  400ad0:	600b      	str	r3, [r1, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400ad2:	4823      	ldr	r0, [pc, #140]	; (400b60 <SystemCoreClockUpdate+0xc8>)
  400ad4:	6b02      	ldr	r2, [r0, #48]	; 0x30
  400ad6:	f002 0203 	and.w	r2, r2, #3
  400ada:	2a02      	cmp	r2, #2
  400adc:	d1e7      	bne.n	400aae <SystemCoreClockUpdate+0x16>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400ade:	6a82      	ldr	r2, [r0, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400ae0:	6a80      	ldr	r0, [r0, #40]	; 0x28
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400ae2:	f3c2 420a 	ubfx	r2, r2, #16, #11
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400ae6:	b2c0      	uxtb	r0, r0
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400ae8:	fb02 3303 	mla	r3, r2, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400aec:	fbb3 f3f0 	udiv	r3, r3, r0
  400af0:	600b      	str	r3, [r1, #0]
  400af2:	e7dc      	b.n	400aae <SystemCoreClockUpdate+0x16>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400af4:	4b1d      	ldr	r3, [pc, #116]	; (400b6c <SystemCoreClockUpdate+0xd4>)
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400af6:	491b      	ldr	r1, [pc, #108]	; (400b64 <SystemCoreClockUpdate+0xcc>)
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400af8:	695b      	ldr	r3, [r3, #20]
  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400afa:	4819      	ldr	r0, [pc, #100]	; (400b60 <SystemCoreClockUpdate+0xc8>)
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400afc:	061b      	lsls	r3, r3, #24
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400afe:	bf4c      	ite	mi
  400b00:	f44f 4300 	movmi.w	r3, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400b04:	f44f 43fa 	movpl.w	r3, #32000	; 0x7d00
  400b08:	600b      	str	r3, [r1, #0]
  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400b0a:	6b02      	ldr	r2, [r0, #48]	; 0x30
  400b0c:	f002 0270 	and.w	r2, r2, #112	; 0x70
  400b10:	2a70      	cmp	r2, #112	; 0x70
  400b12:	d1d2      	bne.n	400aba <SystemCoreClockUpdate+0x22>
    SystemCoreClock /= 3U;
  400b14:	4a16      	ldr	r2, [pc, #88]	; (400b70 <SystemCoreClockUpdate+0xd8>)
  400b16:	fba2 2303 	umull	r2, r3, r2, r3
  400b1a:	085b      	lsrs	r3, r3, #1
  400b1c:	600b      	str	r3, [r1, #0]
  400b1e:	4770      	bx	lr
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400b20:	6a13      	ldr	r3, [r2, #32]
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400b22:	4910      	ldr	r1, [pc, #64]	; (400b64 <SystemCoreClockUpdate+0xcc>)
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400b24:	01d8      	lsls	r0, r3, #7
  400b26:	d408      	bmi.n	400b3a <SystemCoreClockUpdate+0xa2>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400b28:	4b12      	ldr	r3, [pc, #72]	; (400b74 <SystemCoreClockUpdate+0xdc>)
  400b2a:	600b      	str	r3, [r1, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400b2c:	6a12      	ldr	r2, [r2, #32]
  400b2e:	f002 0270 	and.w	r2, r2, #112	; 0x70
  400b32:	2a10      	cmp	r2, #16
  400b34:	d011      	beq.n	400b5a <SystemCoreClockUpdate+0xc2>
  400b36:	2a20      	cmp	r2, #32
  400b38:	d1b9      	bne.n	400aae <SystemCoreClockUpdate+0x16>
            SystemCoreClock *= 3U;
  400b3a:	4b0b      	ldr	r3, [pc, #44]	; (400b68 <SystemCoreClockUpdate+0xd0>)
  400b3c:	600b      	str	r3, [r1, #0]
          break;
  400b3e:	e7b6      	b.n	400aae <SystemCoreClockUpdate+0x16>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400b40:	4b0c      	ldr	r3, [pc, #48]	; (400b74 <SystemCoreClockUpdate+0xdc>)
  400b42:	600b      	str	r3, [r1, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400b44:	6a12      	ldr	r2, [r2, #32]
  400b46:	f002 0270 	and.w	r2, r2, #112	; 0x70
  400b4a:	2a10      	cmp	r2, #16
  400b4c:	d002      	beq.n	400b54 <SystemCoreClockUpdate+0xbc>
  400b4e:	2a20      	cmp	r2, #32
  400b50:	d0bd      	beq.n	400ace <SystemCoreClockUpdate+0x36>
  400b52:	e7be      	b.n	400ad2 <SystemCoreClockUpdate+0x3a>
            SystemCoreClock *= 2U;
  400b54:	4b08      	ldr	r3, [pc, #32]	; (400b78 <SystemCoreClockUpdate+0xe0>)
  400b56:	600b      	str	r3, [r1, #0]
          break;
  400b58:	e7bb      	b.n	400ad2 <SystemCoreClockUpdate+0x3a>
            SystemCoreClock *= 2U;
  400b5a:	4b07      	ldr	r3, [pc, #28]	; (400b78 <SystemCoreClockUpdate+0xe0>)
  400b5c:	600b      	str	r3, [r1, #0]
          break;
  400b5e:	e7a6      	b.n	400aae <SystemCoreClockUpdate+0x16>
  400b60:	400e0600 	.word	0x400e0600
  400b64:	20400004 	.word	0x20400004
  400b68:	00b71b00 	.word	0x00b71b00
  400b6c:	400e1810 	.word	0x400e1810
  400b70:	aaaaaaab 	.word	0xaaaaaaab
  400b74:	003d0900 	.word	0x003d0900
  400b78:	007a1200 	.word	0x007a1200

00400b7c <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400b7c:	4b16      	ldr	r3, [pc, #88]	; (400bd8 <system_init_flash+0x5c>)
  400b7e:	4298      	cmp	r0, r3
  400b80:	d917      	bls.n	400bb2 <system_init_flash+0x36>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  400b82:	4b16      	ldr	r3, [pc, #88]	; (400bdc <system_init_flash+0x60>)
  400b84:	4298      	cmp	r0, r3
  400b86:	d910      	bls.n	400baa <system_init_flash+0x2e>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400b88:	4b15      	ldr	r3, [pc, #84]	; (400be0 <system_init_flash+0x64>)
  400b8a:	4298      	cmp	r0, r3
  400b8c:	d91a      	bls.n	400bc4 <system_init_flash+0x48>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400b8e:	4b15      	ldr	r3, [pc, #84]	; (400be4 <system_init_flash+0x68>)
  400b90:	4298      	cmp	r0, r3
  400b92:	d913      	bls.n	400bbc <system_init_flash+0x40>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400b94:	4b14      	ldr	r3, [pc, #80]	; (400be8 <system_init_flash+0x6c>)
  400b96:	4298      	cmp	r0, r3
  400b98:	d918      	bls.n	400bcc <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  400b9a:	4b14      	ldr	r3, [pc, #80]	; (400bec <system_init_flash+0x70>)
  400b9c:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400b9e:	4b14      	ldr	r3, [pc, #80]	; (400bf0 <system_init_flash+0x74>)
  400ba0:	bf94      	ite	ls
  400ba2:	4a14      	ldrls	r2, [pc, #80]	; (400bf4 <system_init_flash+0x78>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  400ba4:	4a14      	ldrhi	r2, [pc, #80]	; (400bf8 <system_init_flash+0x7c>)
  400ba6:	601a      	str	r2, [r3, #0]
  400ba8:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400baa:	4b11      	ldr	r3, [pc, #68]	; (400bf0 <system_init_flash+0x74>)
  400bac:	4a13      	ldr	r2, [pc, #76]	; (400bfc <system_init_flash+0x80>)
  400bae:	601a      	str	r2, [r3, #0]
  400bb0:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400bb2:	4b0f      	ldr	r3, [pc, #60]	; (400bf0 <system_init_flash+0x74>)
  400bb4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400bb8:	601a      	str	r2, [r3, #0]
  400bba:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400bbc:	4b0c      	ldr	r3, [pc, #48]	; (400bf0 <system_init_flash+0x74>)
  400bbe:	4a10      	ldr	r2, [pc, #64]	; (400c00 <system_init_flash+0x84>)
  400bc0:	601a      	str	r2, [r3, #0]
  400bc2:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400bc4:	4b0a      	ldr	r3, [pc, #40]	; (400bf0 <system_init_flash+0x74>)
  400bc6:	4a0f      	ldr	r2, [pc, #60]	; (400c04 <system_init_flash+0x88>)
  400bc8:	601a      	str	r2, [r3, #0]
  400bca:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400bcc:	4b08      	ldr	r3, [pc, #32]	; (400bf0 <system_init_flash+0x74>)
  400bce:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  400bd2:	601a      	str	r2, [r3, #0]
  400bd4:	4770      	bx	lr
  400bd6:	bf00      	nop
  400bd8:	015ef3bf 	.word	0x015ef3bf
  400bdc:	02bde77f 	.word	0x02bde77f
  400be0:	041cdb3f 	.word	0x041cdb3f
  400be4:	057bceff 	.word	0x057bceff
  400be8:	06dac2bf 	.word	0x06dac2bf
  400bec:	0839b67f 	.word	0x0839b67f
  400bf0:	400e0c00 	.word	0x400e0c00
  400bf4:	04000500 	.word	0x04000500
  400bf8:	04000600 	.word	0x04000600
  400bfc:	04000100 	.word	0x04000100
  400c00:	04000300 	.word	0x04000300
  400c04:	04000200 	.word	0x04000200

00400c08 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400c08:	4a0d      	ldr	r2, [pc, #52]	; (400c40 <_sbrk+0x38>)
	int ramend = (int)&__ram_end__;
  400c0a:	490e      	ldr	r1, [pc, #56]	; (400c44 <_sbrk+0x3c>)
	if (heap == NULL) {
  400c0c:	6813      	ldr	r3, [r2, #0]
  400c0e:	b143      	cbz	r3, 400c22 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
  400c10:	4418      	add	r0, r3
  400c12:	4281      	cmp	r1, r0
  400c14:	db02      	blt.n	400c1c <_sbrk+0x14>
		return (caddr_t) -1;	
	}

	heap += incr;
  400c16:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400c18:	4618      	mov	r0, r3
  400c1a:	4770      	bx	lr
		return (caddr_t) -1;	
  400c1c:	f04f 30ff 	mov.w	r0, #4294967295
  400c20:	4770      	bx	lr
{
  400c22:	b410      	push	{r4}
		heap = (unsigned char *)&_end;
  400c24:	4c08      	ldr	r4, [pc, #32]	; (400c48 <_sbrk+0x40>)
	if (((int)prev_heap + incr) > ramend) {
  400c26:	4420      	add	r0, r4
		heap = (unsigned char *)&_end;
  400c28:	6014      	str	r4, [r2, #0]
	if (((int)prev_heap + incr) > ramend) {
  400c2a:	4281      	cmp	r1, r0
  400c2c:	db04      	blt.n	400c38 <_sbrk+0x30>
	heap += incr;
  400c2e:	6010      	str	r0, [r2, #0]
	return (caddr_t) prev_heap;
  400c30:	4620      	mov	r0, r4
}
  400c32:	f85d 4b04 	ldr.w	r4, [sp], #4
  400c36:	4770      	bx	lr
		return (caddr_t) -1;	
  400c38:	f04f 30ff 	mov.w	r0, #4294967295
  400c3c:	e7f9      	b.n	400c32 <_sbrk+0x2a>
  400c3e:	bf00      	nop
  400c40:	20400a4c 	.word	0x20400a4c
  400c44:	2045fffc 	.word	0x2045fffc
  400c48:	20402e40 	.word	0x20402e40

00400c4c <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400c4c:	f04f 30ff 	mov.w	r0, #4294967295
  400c50:	4770      	bx	lr
  400c52:	bf00      	nop

00400c54 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400c54:	f44f 5300 	mov.w	r3, #8192	; 0x2000

	return 0;
}
  400c58:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
  400c5a:	604b      	str	r3, [r1, #4]
}
  400c5c:	4770      	bx	lr
  400c5e:	bf00      	nop

00400c60 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400c60:	2001      	movs	r0, #1
  400c62:	4770      	bx	lr

00400c64 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400c64:	2000      	movs	r0, #0
  400c66:	4770      	bx	lr

00400c68 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400c68:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400c6c:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400c70:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400c72:	6081      	str	r1, [r0, #8]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400c74:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400c76:	6103      	str	r3, [r0, #16]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400c78:	e880 000c 	stmia.w	r0, {r2, r3}
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400c7c:	4770      	bx	lr
  400c7e:	bf00      	nop

00400c80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  400c80:	2300      	movs	r3, #0
  400c82:	6103      	str	r3, [r0, #16]
  400c84:	4770      	bx	lr
  400c86:	bf00      	nop

00400c88 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  400c88:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  400c8a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400c8c:	689a      	ldr	r2, [r3, #8]
  400c8e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  400c90:	689a      	ldr	r2, [r3, #8]
  400c92:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  400c94:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400c96:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400c98:	6803      	ldr	r3, [r0, #0]
  400c9a:	3301      	adds	r3, #1
  400c9c:	6003      	str	r3, [r0, #0]
  400c9e:	4770      	bx	lr

00400ca0 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  400ca0:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  400ca2:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  400ca4:	1c6b      	adds	r3, r5, #1
  400ca6:	d011      	beq.n	400ccc <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400ca8:	f100 0208 	add.w	r2, r0, #8
  400cac:	e000      	b.n	400cb0 <vListInsert+0x10>
  400cae:	461a      	mov	r2, r3
  400cb0:	6853      	ldr	r3, [r2, #4]
  400cb2:	681c      	ldr	r4, [r3, #0]
  400cb4:	42a5      	cmp	r5, r4
  400cb6:	d2fa      	bcs.n	400cae <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400cb8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  400cba:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  400cbc:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  400cbe:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400cc0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400cc2:	6803      	ldr	r3, [r0, #0]
  400cc4:	3301      	adds	r3, #1
}
  400cc6:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
  400cc8:	6003      	str	r3, [r0, #0]
}
  400cca:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
  400ccc:	6902      	ldr	r2, [r0, #16]
  400cce:	6853      	ldr	r3, [r2, #4]
  400cd0:	e7f2      	b.n	400cb8 <vListInsert+0x18>
  400cd2:	bf00      	nop

00400cd4 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400cd4:	6842      	ldr	r2, [r0, #4]
  400cd6:	6881      	ldr	r1, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  400cd8:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400cda:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400cdc:	6882      	ldr	r2, [r0, #8]
  400cde:	6841      	ldr	r1, [r0, #4]
  400ce0:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  400ce2:	685a      	ldr	r2, [r3, #4]
  400ce4:	4290      	cmp	r0, r2
  400ce6:	d005      	beq.n	400cf4 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  400ce8:	2200      	movs	r2, #0
  400cea:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  400cec:	6818      	ldr	r0, [r3, #0]
  400cee:	3801      	subs	r0, #1
  400cf0:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  400cf2:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  400cf4:	6882      	ldr	r2, [r0, #8]
  400cf6:	605a      	str	r2, [r3, #4]
  400cf8:	e7f6      	b.n	400ce8 <uxListRemove+0x14>
  400cfa:	bf00      	nop

00400cfc <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  400cfc:	4b0c      	ldr	r3, [pc, #48]	; (400d30 <prvTaskExitError+0x34>)
  400cfe:	681b      	ldr	r3, [r3, #0]
  400d00:	3301      	adds	r3, #1
  400d02:	d00a      	beq.n	400d1a <prvTaskExitError+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400d04:	f04f 0380 	mov.w	r3, #128	; 0x80
  400d08:	b672      	cpsid	i
  400d0a:	f383 8811 	msr	BASEPRI, r3
  400d0e:	f3bf 8f6f 	isb	sy
  400d12:	f3bf 8f4f 	dsb	sy
  400d16:	b662      	cpsie	i
  400d18:	e7fe      	b.n	400d18 <prvTaskExitError+0x1c>
  400d1a:	f04f 0380 	mov.w	r3, #128	; 0x80
  400d1e:	b672      	cpsid	i
  400d20:	f383 8811 	msr	BASEPRI, r3
  400d24:	f3bf 8f6f 	isb	sy
  400d28:	f3bf 8f4f 	dsb	sy
  400d2c:	b662      	cpsie	i
  400d2e:	e7fe      	b.n	400d2e <prvTaskExitError+0x32>
  400d30:	20400008 	.word	0x20400008

00400d34 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  400d34:	4806      	ldr	r0, [pc, #24]	; (400d50 <prvPortStartFirstTask+0x1c>)
  400d36:	6800      	ldr	r0, [r0, #0]
  400d38:	6800      	ldr	r0, [r0, #0]
  400d3a:	f380 8808 	msr	MSP, r0
  400d3e:	b662      	cpsie	i
  400d40:	b661      	cpsie	f
  400d42:	f3bf 8f4f 	dsb	sy
  400d46:	f3bf 8f6f 	isb	sy
  400d4a:	df00      	svc	0
  400d4c:	bf00      	nop
  400d4e:	0000      	.short	0x0000
  400d50:	e000ed08 	.word	0xe000ed08

00400d54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  400d54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 400d64 <vPortEnableVFP+0x10>
  400d58:	6801      	ldr	r1, [r0, #0]
  400d5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400d5e:	6001      	str	r1, [r0, #0]
  400d60:	4770      	bx	lr
  400d62:	0000      	.short	0x0000
  400d64:	e000ed88 	.word	0xe000ed88

00400d68 <pxPortInitialiseStack>:
{
  400d68:	b470      	push	{r4, r5, r6}
  400d6a:	4603      	mov	r3, r0
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  400d6c:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  400d70:	4d07      	ldr	r5, [pc, #28]	; (400d90 <pxPortInitialiseStack+0x28>)
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  400d72:	f06f 0402 	mvn.w	r4, #2
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  400d76:	f840 1c08 	str.w	r1, [r0, #-8]
}
  400d7a:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  400d7c:	f843 2c20 	str.w	r2, [r3, #-32]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  400d80:	f843 6c04 	str.w	r6, [r3, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  400d84:	f843 5c0c 	str.w	r5, [r3, #-12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  400d88:	f843 4c24 	str.w	r4, [r3, #-36]
}
  400d8c:	bc70      	pop	{r4, r5, r6}
  400d8e:	4770      	bx	lr
  400d90:	00400cfd 	.word	0x00400cfd

00400d94 <SVC_Handler>:
	__asm volatile (
  400d94:	4b06      	ldr	r3, [pc, #24]	; (400db0 <pxCurrentTCBConst2>)
  400d96:	6819      	ldr	r1, [r3, #0]
  400d98:	6808      	ldr	r0, [r1, #0]
  400d9a:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400d9e:	f380 8809 	msr	PSP, r0
  400da2:	f3bf 8f6f 	isb	sy
  400da6:	f04f 0000 	mov.w	r0, #0
  400daa:	f380 8811 	msr	BASEPRI, r0
  400dae:	4770      	bx	lr

00400db0 <pxCurrentTCBConst2>:
  400db0:	20400a58 	.word	0x20400a58
  400db4:	4770      	bx	lr
  400db6:	bf00      	nop

00400db8 <vPortEnterCritical>:
  400db8:	f04f 0380 	mov.w	r3, #128	; 0x80
  400dbc:	b672      	cpsid	i
  400dbe:	f383 8811 	msr	BASEPRI, r3
  400dc2:	f3bf 8f6f 	isb	sy
  400dc6:	f3bf 8f4f 	dsb	sy
  400dca:	b662      	cpsie	i
	uxCriticalNesting++;
  400dcc:	4a0b      	ldr	r2, [pc, #44]	; (400dfc <vPortEnterCritical+0x44>)
  400dce:	6813      	ldr	r3, [r2, #0]
  400dd0:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
  400dd2:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
  400dd4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  400dd6:	d000      	beq.n	400dda <vPortEnterCritical+0x22>
  400dd8:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  400dda:	4b09      	ldr	r3, [pc, #36]	; (400e00 <vPortEnterCritical+0x48>)
  400ddc:	681b      	ldr	r3, [r3, #0]
  400dde:	f013 0fff 	tst.w	r3, #255	; 0xff
  400de2:	d0f9      	beq.n	400dd8 <vPortEnterCritical+0x20>
  400de4:	f04f 0380 	mov.w	r3, #128	; 0x80
  400de8:	b672      	cpsid	i
  400dea:	f383 8811 	msr	BASEPRI, r3
  400dee:	f3bf 8f6f 	isb	sy
  400df2:	f3bf 8f4f 	dsb	sy
  400df6:	b662      	cpsie	i
  400df8:	e7fe      	b.n	400df8 <vPortEnterCritical+0x40>
  400dfa:	bf00      	nop
  400dfc:	20400008 	.word	0x20400008
  400e00:	e000ed04 	.word	0xe000ed04

00400e04 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  400e04:	4a09      	ldr	r2, [pc, #36]	; (400e2c <vPortExitCritical+0x28>)
  400e06:	6813      	ldr	r3, [r2, #0]
  400e08:	b953      	cbnz	r3, 400e20 <vPortExitCritical+0x1c>
  400e0a:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e0e:	b672      	cpsid	i
  400e10:	f383 8811 	msr	BASEPRI, r3
  400e14:	f3bf 8f6f 	isb	sy
  400e18:	f3bf 8f4f 	dsb	sy
  400e1c:	b662      	cpsie	i
  400e1e:	e7fe      	b.n	400e1e <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  400e20:	3b01      	subs	r3, #1
  400e22:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  400e24:	b90b      	cbnz	r3, 400e2a <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400e26:	f383 8811 	msr	BASEPRI, r3
  400e2a:	4770      	bx	lr
  400e2c:	20400008 	.word	0x20400008

00400e30 <PendSV_Handler>:
	__asm volatile
  400e30:	f3ef 8009 	mrs	r0, PSP
  400e34:	f3bf 8f6f 	isb	sy
  400e38:	4b15      	ldr	r3, [pc, #84]	; (400e90 <pxCurrentTCBConst>)
  400e3a:	681a      	ldr	r2, [r3, #0]
  400e3c:	f01e 0f10 	tst.w	lr, #16
  400e40:	bf08      	it	eq
  400e42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  400e46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400e4a:	6010      	str	r0, [r2, #0]
  400e4c:	f84d 3d04 	str.w	r3, [sp, #-4]!
  400e50:	f04f 0080 	mov.w	r0, #128	; 0x80
  400e54:	b672      	cpsid	i
  400e56:	f380 8811 	msr	BASEPRI, r0
  400e5a:	f3bf 8f4f 	dsb	sy
  400e5e:	f3bf 8f6f 	isb	sy
  400e62:	b662      	cpsie	i
  400e64:	f001 f922 	bl	4020ac <vTaskSwitchContext>
  400e68:	f04f 0000 	mov.w	r0, #0
  400e6c:	f380 8811 	msr	BASEPRI, r0
  400e70:	bc08      	pop	{r3}
  400e72:	6819      	ldr	r1, [r3, #0]
  400e74:	6808      	ldr	r0, [r1, #0]
  400e76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400e7a:	f01e 0f10 	tst.w	lr, #16
  400e7e:	bf08      	it	eq
  400e80:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  400e84:	f380 8809 	msr	PSP, r0
  400e88:	f3bf 8f6f 	isb	sy
  400e8c:	4770      	bx	lr
  400e8e:	bf00      	nop

00400e90 <pxCurrentTCBConst>:
  400e90:	20400a58 	.word	0x20400a58
  400e94:	4770      	bx	lr
  400e96:	bf00      	nop

00400e98 <SysTick_Handler>:
{
  400e98:	b508      	push	{r3, lr}
	__asm volatile
  400e9a:	f3ef 8311 	mrs	r3, BASEPRI
  400e9e:	f04f 0280 	mov.w	r2, #128	; 0x80
  400ea2:	b672      	cpsid	i
  400ea4:	f382 8811 	msr	BASEPRI, r2
  400ea8:	f3bf 8f6f 	isb	sy
  400eac:	f3bf 8f4f 	dsb	sy
  400eb0:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  400eb2:	4b05      	ldr	r3, [pc, #20]	; (400ec8 <SysTick_Handler+0x30>)
  400eb4:	4798      	blx	r3
  400eb6:	b118      	cbz	r0, 400ec0 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  400eb8:	4b04      	ldr	r3, [pc, #16]	; (400ecc <SysTick_Handler+0x34>)
  400eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400ebe:	601a      	str	r2, [r3, #0]
	__asm volatile
  400ec0:	2300      	movs	r3, #0
  400ec2:	f383 8811 	msr	BASEPRI, r3
  400ec6:	bd08      	pop	{r3, pc}
  400ec8:	00401cdd 	.word	0x00401cdd
  400ecc:	e000ed04 	.word	0xe000ed04

00400ed0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  400ed0:	4903      	ldr	r1, [pc, #12]	; (400ee0 <vPortSetupTimerInterrupt+0x10>)
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  400ed2:	2207      	movs	r2, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  400ed4:	4803      	ldr	r0, [pc, #12]	; (400ee4 <vPortSetupTimerInterrupt+0x14>)
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  400ed6:	4b04      	ldr	r3, [pc, #16]	; (400ee8 <vPortSetupTimerInterrupt+0x18>)
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  400ed8:	6008      	str	r0, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  400eda:	601a      	str	r2, [r3, #0]
  400edc:	4770      	bx	lr
  400ede:	bf00      	nop
  400ee0:	e000e014 	.word	0xe000e014
  400ee4:	000927bf 	.word	0x000927bf
  400ee8:	e000e010 	.word	0xe000e010

00400eec <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  400eec:	4b23      	ldr	r3, [pc, #140]	; (400f7c <xPortStartScheduler+0x90>)
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  400eee:	2207      	movs	r2, #7
  400ef0:	4823      	ldr	r0, [pc, #140]	; (400f80 <xPortStartScheduler+0x94>)
{
  400ef2:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  400ef4:	7819      	ldrb	r1, [r3, #0]
{
  400ef6:	b083      	sub	sp, #12
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  400ef8:	25ff      	movs	r5, #255	; 0xff
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400efa:	4c22      	ldr	r4, [pc, #136]	; (400f84 <xPortStartScheduler+0x98>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  400efc:	b2c9      	uxtb	r1, r1
  400efe:	9101      	str	r1, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  400f00:	701d      	strb	r5, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  400f02:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  400f04:	6002      	str	r2, [r0, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  400f06:	b2db      	uxtb	r3, r3
  400f08:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400f0c:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400f10:	f89d 1003 	ldrb.w	r1, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400f18:	0609      	lsls	r1, r1, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400f1a:	7023      	strb	r3, [r4, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400f1c:	d50d      	bpl.n	400f3a <xPortStartScheduler+0x4e>
  400f1e:	2206      	movs	r2, #6
  400f20:	e000      	b.n	400f24 <xPortStartScheduler+0x38>
  400f22:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  400f24:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400f28:	1e51      	subs	r1, r2, #1
  400f2a:	005b      	lsls	r3, r3, #1
  400f2c:	b2db      	uxtb	r3, r3
  400f2e:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400f32:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400f36:	061b      	lsls	r3, r3, #24
  400f38:	d4f3      	bmi.n	400f22 <xPortStartScheduler+0x36>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  400f3a:	9901      	ldr	r1, [sp, #4]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  400f3c:	0212      	lsls	r2, r2, #8
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  400f3e:	4b12      	ldr	r3, [pc, #72]	; (400f88 <xPortStartScheduler+0x9c>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  400f40:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  400f44:	b2c9      	uxtb	r1, r1
  400f46:	4c0d      	ldr	r4, [pc, #52]	; (400f7c <xPortStartScheduler+0x90>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  400f48:	6002      	str	r2, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  400f4a:	7021      	strb	r1, [r4, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  400f4c:	681a      	ldr	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  400f4e:	490f      	ldr	r1, [pc, #60]	; (400f8c <xPortStartScheduler+0xa0>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  400f50:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  400f54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  400f56:	681a      	ldr	r2, [r3, #0]
  400f58:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  400f5c:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  400f5e:	4788      	blx	r1
	uxCriticalNesting = 0;
  400f60:	4a0b      	ldr	r2, [pc, #44]	; (400f90 <xPortStartScheduler+0xa4>)
  400f62:	2100      	movs	r1, #0
	vPortEnableVFP();
  400f64:	4b0b      	ldr	r3, [pc, #44]	; (400f94 <xPortStartScheduler+0xa8>)
	uxCriticalNesting = 0;
  400f66:	6011      	str	r1, [r2, #0]
	vPortEnableVFP();
  400f68:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  400f6a:	4a0b      	ldr	r2, [pc, #44]	; (400f98 <xPortStartScheduler+0xac>)
	prvPortStartFirstTask();
  400f6c:	490b      	ldr	r1, [pc, #44]	; (400f9c <xPortStartScheduler+0xb0>)
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  400f6e:	6813      	ldr	r3, [r2, #0]
  400f70:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  400f74:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  400f76:	4788      	blx	r1
	prvTaskExitError();
  400f78:	4b09      	ldr	r3, [pc, #36]	; (400fa0 <xPortStartScheduler+0xb4>)
  400f7a:	4798      	blx	r3
  400f7c:	e000e400 	.word	0xe000e400
  400f80:	20400a54 	.word	0x20400a54
  400f84:	20400a50 	.word	0x20400a50
  400f88:	e000ed20 	.word	0xe000ed20
  400f8c:	00400ed1 	.word	0x00400ed1
  400f90:	20400008 	.word	0x20400008
  400f94:	00400d55 	.word	0x00400d55
  400f98:	e000ef34 	.word	0xe000ef34
  400f9c:	00400d35 	.word	0x00400d35
  400fa0:	00400cfd 	.word	0x00400cfd

00400fa4 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  400fa4:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  400fa8:	2b0f      	cmp	r3, #15
  400faa:	d910      	bls.n	400fce <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  400fac:	4912      	ldr	r1, [pc, #72]	; (400ff8 <vPortValidateInterruptPriority+0x54>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  400fae:	4a13      	ldr	r2, [pc, #76]	; (400ffc <vPortValidateInterruptPriority+0x58>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  400fb0:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  400fb2:	7812      	ldrb	r2, [r2, #0]
  400fb4:	429a      	cmp	r2, r3
  400fb6:	d90a      	bls.n	400fce <vPortValidateInterruptPriority+0x2a>
	__asm volatile
  400fb8:	f04f 0380 	mov.w	r3, #128	; 0x80
  400fbc:	b672      	cpsid	i
  400fbe:	f383 8811 	msr	BASEPRI, r3
  400fc2:	f3bf 8f6f 	isb	sy
  400fc6:	f3bf 8f4f 	dsb	sy
  400fca:	b662      	cpsie	i
  400fcc:	e7fe      	b.n	400fcc <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  400fce:	4b0c      	ldr	r3, [pc, #48]	; (401000 <vPortValidateInterruptPriority+0x5c>)
  400fd0:	4a0c      	ldr	r2, [pc, #48]	; (401004 <vPortValidateInterruptPriority+0x60>)
  400fd2:	681b      	ldr	r3, [r3, #0]
  400fd4:	6812      	ldr	r2, [r2, #0]
  400fd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400fda:	4293      	cmp	r3, r2
  400fdc:	d90a      	bls.n	400ff4 <vPortValidateInterruptPriority+0x50>
  400fde:	f04f 0380 	mov.w	r3, #128	; 0x80
  400fe2:	b672      	cpsid	i
  400fe4:	f383 8811 	msr	BASEPRI, r3
  400fe8:	f3bf 8f6f 	isb	sy
  400fec:	f3bf 8f4f 	dsb	sy
  400ff0:	b662      	cpsie	i
  400ff2:	e7fe      	b.n	400ff2 <vPortValidateInterruptPriority+0x4e>
  400ff4:	4770      	bx	lr
  400ff6:	bf00      	nop
  400ff8:	e000e3f0 	.word	0xe000e3f0
  400ffc:	20400a50 	.word	0x20400a50
  401000:	e000ed0c 	.word	0xe000ed0c
  401004:	20400a54 	.word	0x20400a54

00401008 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  401008:	b510      	push	{r4, lr}
  40100a:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  40100c:	4b07      	ldr	r3, [pc, #28]	; (40102c <pvPortMalloc+0x24>)
  40100e:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  401010:	4b07      	ldr	r3, [pc, #28]	; (401030 <pvPortMalloc+0x28>)
  401012:	4620      	mov	r0, r4
  401014:	4798      	blx	r3
  401016:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  401018:	4b06      	ldr	r3, [pc, #24]	; (401034 <pvPortMalloc+0x2c>)
  40101a:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  40101c:	b10c      	cbz	r4, 401022 <pvPortMalloc+0x1a>
		}
	}
	#endif

	return pvReturn;
}
  40101e:	4620      	mov	r0, r4
  401020:	bd10      	pop	{r4, pc}
			vApplicationMallocFailedHook();
  401022:	4b05      	ldr	r3, [pc, #20]	; (401038 <pvPortMalloc+0x30>)
  401024:	4798      	blx	r3
}
  401026:	4620      	mov	r0, r4
  401028:	bd10      	pop	{r4, pc}
  40102a:	bf00      	nop
  40102c:	00401cc1 	.word	0x00401cc1
  401030:	00402f91 	.word	0x00402f91
  401034:	00401e51 	.word	0x00401e51
  401038:	00402cc5 	.word	0x00402cc5

0040103c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  40103c:	b150      	cbz	r0, 401054 <vPortFree+0x18>
	{
		vTaskSuspendAll();
  40103e:	4b06      	ldr	r3, [pc, #24]	; (401058 <vPortFree+0x1c>)
{
  401040:	b510      	push	{r4, lr}
  401042:	4604      	mov	r4, r0
		vTaskSuspendAll();
  401044:	4798      	blx	r3
		{
			free( pv );
  401046:	4b05      	ldr	r3, [pc, #20]	; (40105c <vPortFree+0x20>)
  401048:	4620      	mov	r0, r4
  40104a:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  40104c:	4b04      	ldr	r3, [pc, #16]	; (401060 <vPortFree+0x24>)
	}
}
  40104e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		( void ) xTaskResumeAll();
  401052:	4718      	bx	r3
  401054:	4770      	bx	lr
  401056:	bf00      	nop
  401058:	00401cc1 	.word	0x00401cc1
  40105c:	00402fa1 	.word	0x00402fa1
  401060:	00401e51 	.word	0x00401e51

00401064 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  401064:	b538      	push	{r3, r4, r5, lr}
  401066:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  401068:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
  40106a:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  40106c:	b942      	cbnz	r2, 401080 <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40106e:	6805      	ldr	r5, [r0, #0]
  401070:	b10d      	cbz	r5, 401076 <prvCopyDataToQueue+0x12>
BaseType_t xReturn = pdFALSE;
  401072:	2000      	movs	r0, #0
  401074:	e029      	b.n	4010ca <prvCopyDataToQueue+0x66>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  401076:	6840      	ldr	r0, [r0, #4]
  401078:	4b16      	ldr	r3, [pc, #88]	; (4010d4 <prvCopyDataToQueue+0x70>)
  40107a:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  40107c:	6065      	str	r5, [r4, #4]
  40107e:	e024      	b.n	4010ca <prvCopyDataToQueue+0x66>
  401080:	4b15      	ldr	r3, [pc, #84]	; (4010d8 <prvCopyDataToQueue+0x74>)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
  401082:	b965      	cbnz	r5, 40109e <prvCopyDataToQueue+0x3a>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  401084:	6880      	ldr	r0, [r0, #8]
  401086:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  401088:	68a3      	ldr	r3, [r4, #8]
  40108a:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  40108c:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  40108e:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401090:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  401092:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401094:	d3ed      	bcc.n	401072 <prvCopyDataToQueue+0xe>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  401096:	6823      	ldr	r3, [r4, #0]
BaseType_t xReturn = pdFALSE;
  401098:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
  40109a:	60a3      	str	r3, [r4, #8]
  40109c:	e015      	b.n	4010ca <prvCopyDataToQueue+0x66>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40109e:	68c0      	ldr	r0, [r0, #12]
  4010a0:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  4010a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4010a4:	68e2      	ldr	r2, [r4, #12]
  4010a6:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4010a8:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  4010aa:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4010ac:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  4010ae:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4010b0:	d202      	bcs.n	4010b8 <prvCopyDataToQueue+0x54>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  4010b2:	6862      	ldr	r2, [r4, #4]
  4010b4:	4413      	add	r3, r2
  4010b6:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
  4010b8:	2d02      	cmp	r5, #2
  4010ba:	d1da      	bne.n	401072 <prvCopyDataToQueue+0xe>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  4010bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4010be:	2b00      	cmp	r3, #0
  4010c0:	d0d7      	beq.n	401072 <prvCopyDataToQueue+0xe>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
  4010c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  4010c4:	2000      	movs	r0, #0
				--( pxQueue->uxMessagesWaiting );
  4010c6:	3b01      	subs	r3, #1
  4010c8:	63a3      	str	r3, [r4, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  4010ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4010cc:	3301      	adds	r3, #1
  4010ce:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  4010d0:	bd38      	pop	{r3, r4, r5, pc}
  4010d2:	bf00      	nop
  4010d4:	00402489 	.word	0x00402489
  4010d8:	00403511 	.word	0x00403511

004010dc <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  4010dc:	b530      	push	{r4, r5, lr}
  4010de:	b083      	sub	sp, #12
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  4010e0:	6d44      	ldr	r4, [r0, #84]	; 0x54
	{
  4010e2:	9001      	str	r0, [sp, #4]
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  4010e4:	b1ac      	cbz	r4, 401112 <prvNotifyQueueSetContainer+0x36>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  4010e6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4010e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4010ea:	429a      	cmp	r2, r3
  4010ec:	d30a      	bcc.n	401104 <prvNotifyQueueSetContainer+0x28>
  4010ee:	f04f 0380 	mov.w	r3, #128	; 0x80
  4010f2:	b672      	cpsid	i
  4010f4:	f383 8811 	msr	BASEPRI, r3
  4010f8:	f3bf 8f6f 	isb	sy
  4010fc:	f3bf 8f4f 	dsb	sy
  401100:	b662      	cpsie	i
  401102:	e7fe      	b.n	401102 <prvNotifyQueueSetContainer+0x26>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  401104:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401106:	4293      	cmp	r3, r2
  401108:	d80e      	bhi.n	401128 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  40110a:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  40110c:	4628      	mov	r0, r5
  40110e:	b003      	add	sp, #12
  401110:	bd30      	pop	{r4, r5, pc}
  401112:	f04f 0380 	mov.w	r3, #128	; 0x80
  401116:	b672      	cpsid	i
  401118:	f383 8811 	msr	BASEPRI, r3
  40111c:	f3bf 8f6f 	isb	sy
  401120:	f3bf 8f4f 	dsb	sy
  401124:	b662      	cpsie	i
  401126:	e7fe      	b.n	401126 <prvNotifyQueueSetContainer+0x4a>
  401128:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  40112a:	4b0d      	ldr	r3, [pc, #52]	; (401160 <prvNotifyQueueSetContainer+0x84>)
  40112c:	a901      	add	r1, sp, #4
  40112e:	4620      	mov	r0, r4
  401130:	4798      	blx	r3
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  401132:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  401134:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  401136:	3301      	adds	r3, #1
  401138:	d005      	beq.n	401146 <prvNotifyQueueSetContainer+0x6a>
				( pxQueueSetContainer->xTxLock )++;
  40113a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
	}
  40113c:	4628      	mov	r0, r5
				( pxQueueSetContainer->xTxLock )++;
  40113e:	3301      	adds	r3, #1
  401140:	64a3      	str	r3, [r4, #72]	; 0x48
	}
  401142:	b003      	add	sp, #12
  401144:	bd30      	pop	{r4, r5, pc}
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  401146:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401148:	2b00      	cmp	r3, #0
  40114a:	d0df      	beq.n	40110c <prvNotifyQueueSetContainer+0x30>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  40114c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401150:	4b04      	ldr	r3, [pc, #16]	; (401164 <prvNotifyQueueSetContainer+0x88>)
  401152:	4798      	blx	r3
						xReturn = pdTRUE;
  401154:	2800      	cmp	r0, #0
  401156:	bf18      	it	ne
  401158:	2501      	movne	r5, #1
	}
  40115a:	4628      	mov	r0, r5
  40115c:	b003      	add	sp, #12
  40115e:	bd30      	pop	{r4, r5, pc}
  401160:	00401065 	.word	0x00401065
  401164:	00402265 	.word	0x00402265

00401168 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  401168:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
  40116a:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  40116c:	b172      	cbz	r2, 40118c <prvCopyDataFromQueue+0x24>
  40116e:	4608      	mov	r0, r1
{
  401170:	b410      	push	{r4}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  401172:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  401174:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  401176:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  401178:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  40117a:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  40117c:	d301      	bcc.n	401182 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  40117e:	6819      	ldr	r1, [r3, #0]
  401180:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  401182:	68d9      	ldr	r1, [r3, #12]
}
  401184:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  401188:	4b01      	ldr	r3, [pc, #4]	; (401190 <prvCopyDataFromQueue+0x28>)
  40118a:	4718      	bx	r3
  40118c:	4770      	bx	lr
  40118e:	bf00      	nop
  401190:	00403511 	.word	0x00403511

00401194 <prvUnlockQueue>:
{
  401194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401198:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  40119a:	f8df 809c 	ldr.w	r8, [pc, #156]	; 401238 <prvUnlockQueue+0xa4>
  40119e:	47c0      	blx	r8
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4011a0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4011a2:	2b00      	cmp	r3, #0
  4011a4:	dd1a      	ble.n	4011dc <prvUnlockQueue+0x48>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4011a6:	4d20      	ldr	r5, [pc, #128]	; (401228 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  4011a8:	4f20      	ldr	r7, [pc, #128]	; (40122c <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4011aa:	4e21      	ldr	r6, [pc, #132]	; (401230 <prvUnlockQueue+0x9c>)
  4011ac:	e008      	b.n	4011c0 <prvUnlockQueue+0x2c>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4011ae:	47a8      	blx	r5
  4011b0:	2801      	cmp	r0, #1
  4011b2:	d011      	beq.n	4011d8 <prvUnlockQueue+0x44>
			--( pxQueue->xTxLock );
  4011b4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4011b6:	3b01      	subs	r3, #1
  4011b8:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4011ba:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4011bc:	2b00      	cmp	r3, #0
  4011be:	dd0d      	ble.n	4011dc <prvUnlockQueue+0x48>
				if( pxQueue->pxQueueSetContainer != NULL )
  4011c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4011c2:	2100      	movs	r1, #0
  4011c4:	4620      	mov	r0, r4
				if( pxQueue->pxQueueSetContainer != NULL )
  4011c6:	2b00      	cmp	r3, #0
  4011c8:	d1f1      	bne.n	4011ae <prvUnlockQueue+0x1a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4011ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4011cc:	f104 0024 	add.w	r0, r4, #36	; 0x24
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4011d0:	b123      	cbz	r3, 4011dc <prvUnlockQueue+0x48>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4011d2:	47b0      	blx	r6
  4011d4:	2800      	cmp	r0, #0
  4011d6:	d0ed      	beq.n	4011b4 <prvUnlockQueue+0x20>
						vTaskMissedYield();
  4011d8:	47b8      	blx	r7
  4011da:	e7eb      	b.n	4011b4 <prvUnlockQueue+0x20>
		pxQueue->xTxLock = queueUNLOCKED;
  4011dc:	f04f 33ff 	mov.w	r3, #4294967295
	taskEXIT_CRITICAL();
  4011e0:	4f14      	ldr	r7, [pc, #80]	; (401234 <prvUnlockQueue+0xa0>)
		pxQueue->xTxLock = queueUNLOCKED;
  4011e2:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  4011e4:	47b8      	blx	r7
	taskENTER_CRITICAL();
  4011e6:	47c0      	blx	r8
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  4011e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4011ea:	2b00      	cmp	r3, #0
  4011ec:	dd15      	ble.n	40121a <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4011ee:	6923      	ldr	r3, [r4, #16]
  4011f0:	b19b      	cbz	r3, 40121a <prvUnlockQueue+0x86>
  4011f2:	f104 0610 	add.w	r6, r4, #16
  4011f6:	4d0e      	ldr	r5, [pc, #56]	; (401230 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  4011f8:	f8df 8030 	ldr.w	r8, [pc, #48]	; 40122c <prvUnlockQueue+0x98>
  4011fc:	e007      	b.n	40120e <prvUnlockQueue+0x7a>
				--( pxQueue->xRxLock );
  4011fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401200:	3b01      	subs	r3, #1
  401202:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401204:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401206:	2b00      	cmp	r3, #0
  401208:	dd07      	ble.n	40121a <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40120a:	6923      	ldr	r3, [r4, #16]
  40120c:	b12b      	cbz	r3, 40121a <prvUnlockQueue+0x86>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40120e:	4630      	mov	r0, r6
  401210:	47a8      	blx	r5
  401212:	2800      	cmp	r0, #0
  401214:	d0f3      	beq.n	4011fe <prvUnlockQueue+0x6a>
					vTaskMissedYield();
  401216:	47c0      	blx	r8
  401218:	e7f1      	b.n	4011fe <prvUnlockQueue+0x6a>
		pxQueue->xRxLock = queueUNLOCKED;
  40121a:	f04f 33ff 	mov.w	r3, #4294967295
  40121e:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  401220:	463b      	mov	r3, r7
}
  401222:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	taskEXIT_CRITICAL();
  401226:	4718      	bx	r3
  401228:	004010dd 	.word	0x004010dd
  40122c:	004023b5 	.word	0x004023b5
  401230:	00402265 	.word	0x00402265
  401234:	00400e05 	.word	0x00400e05
  401238:	00400db9 	.word	0x00400db9

0040123c <xQueueGenericCreate.part.1>:
  40123c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401240:	b672      	cpsid	i
  401242:	f383 8811 	msr	BASEPRI, r3
  401246:	f3bf 8f6f 	isb	sy
  40124a:	f3bf 8f4f 	dsb	sy
  40124e:	b662      	cpsie	i
  401250:	e7fe      	b.n	401250 <xQueueGenericCreate.part.1+0x14>
	...

00401254 <xQueueGenericReset>:
{
  401254:	b570      	push	{r4, r5, r6, lr}
	configASSERT( pxQueue );
  401256:	b1d8      	cbz	r0, 401290 <xQueueGenericReset+0x3c>
  401258:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  40125a:	4b1d      	ldr	r3, [pc, #116]	; (4012d0 <xQueueGenericReset+0x7c>)
  40125c:	460e      	mov	r6, r1
  40125e:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  401260:	6c20      	ldr	r0, [r4, #64]	; 0x40
		pxQueue->xRxLock = queueUNLOCKED;
  401262:	f04f 35ff 	mov.w	r5, #4294967295
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  401266:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  401268:	2100      	movs	r1, #0
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  40126a:	6822      	ldr	r2, [r4, #0]
  40126c:	fb03 f300 	mul.w	r3, r3, r0
		pxQueue->pcWriteTo = pxQueue->pcHead;
  401270:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  401272:	1a18      	subs	r0, r3, r0
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  401274:	4413      	add	r3, r2
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  401276:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  401278:	4402      	add	r2, r0
		pxQueue->xRxLock = queueUNLOCKED;
  40127a:	6465      	str	r5, [r4, #68]	; 0x44
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  40127c:	6063      	str	r3, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  40127e:	60e2      	str	r2, [r4, #12]
		pxQueue->xTxLock = queueUNLOCKED;
  401280:	64a5      	str	r5, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  401282:	b9ce      	cbnz	r6, 4012b8 <xQueueGenericReset+0x64>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401284:	6923      	ldr	r3, [r4, #16]
  401286:	b92b      	cbnz	r3, 401294 <xQueueGenericReset+0x40>
	taskEXIT_CRITICAL();
  401288:	4b12      	ldr	r3, [pc, #72]	; (4012d4 <xQueueGenericReset+0x80>)
  40128a:	4798      	blx	r3
}
  40128c:	2001      	movs	r0, #1
  40128e:	bd70      	pop	{r4, r5, r6, pc}
  401290:	4b11      	ldr	r3, [pc, #68]	; (4012d8 <xQueueGenericReset+0x84>)
  401292:	4798      	blx	r3
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401294:	f104 0010 	add.w	r0, r4, #16
  401298:	4b10      	ldr	r3, [pc, #64]	; (4012dc <xQueueGenericReset+0x88>)
  40129a:	4798      	blx	r3
  40129c:	2801      	cmp	r0, #1
  40129e:	d1f3      	bne.n	401288 <xQueueGenericReset+0x34>
					queueYIELD_IF_USING_PREEMPTION();
  4012a0:	4b0f      	ldr	r3, [pc, #60]	; (4012e0 <xQueueGenericReset+0x8c>)
  4012a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4012a6:	601a      	str	r2, [r3, #0]
  4012a8:	f3bf 8f4f 	dsb	sy
  4012ac:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
  4012b0:	4b08      	ldr	r3, [pc, #32]	; (4012d4 <xQueueGenericReset+0x80>)
  4012b2:	4798      	blx	r3
}
  4012b4:	2001      	movs	r0, #1
  4012b6:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  4012b8:	f104 0010 	add.w	r0, r4, #16
  4012bc:	4d09      	ldr	r5, [pc, #36]	; (4012e4 <xQueueGenericReset+0x90>)
  4012be:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  4012c0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4012c4:	47a8      	blx	r5
	taskEXIT_CRITICAL();
  4012c6:	4b03      	ldr	r3, [pc, #12]	; (4012d4 <xQueueGenericReset+0x80>)
  4012c8:	4798      	blx	r3
}
  4012ca:	2001      	movs	r0, #1
  4012cc:	bd70      	pop	{r4, r5, r6, pc}
  4012ce:	bf00      	nop
  4012d0:	00400db9 	.word	0x00400db9
  4012d4:	00400e05 	.word	0x00400e05
  4012d8:	0040123d 	.word	0x0040123d
  4012dc:	00402265 	.word	0x00402265
  4012e0:	e000ed04 	.word	0xe000ed04
  4012e4:	00400c69 	.word	0x00400c69

004012e8 <xQueueGenericCreate>:
{
  4012e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  4012ea:	b950      	cbnz	r0, 401302 <xQueueGenericCreate+0x1a>
  4012ec:	f04f 0380 	mov.w	r3, #128	; 0x80
  4012f0:	b672      	cpsid	i
  4012f2:	f383 8811 	msr	BASEPRI, r3
  4012f6:	f3bf 8f6f 	isb	sy
  4012fa:	f3bf 8f4f 	dsb	sy
  4012fe:	b662      	cpsie	i
  401300:	e7fe      	b.n	401300 <xQueueGenericCreate+0x18>
  401302:	4606      	mov	r6, r0
  401304:	4617      	mov	r7, r2
  401306:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  401308:	b1a9      	cbz	r1, 401336 <xQueueGenericCreate+0x4e>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40130a:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  40130e:	4b0e      	ldr	r3, [pc, #56]	; (401348 <xQueueGenericCreate+0x60>)
  401310:	3059      	adds	r0, #89	; 0x59
  401312:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401314:	4604      	mov	r4, r0
  401316:	b1a8      	cbz	r0, 401344 <xQueueGenericCreate+0x5c>
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  401318:	f100 0358 	add.w	r3, r0, #88	; 0x58
  40131c:	6003      	str	r3, [r0, #0]
		pxNewQueue->uxLength = uxQueueLength;
  40131e:	63e6      	str	r6, [r4, #60]	; 0x3c
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  401320:	2101      	movs	r1, #1
		pxNewQueue->uxItemSize = uxItemSize;
  401322:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  401324:	4620      	mov	r0, r4
  401326:	4b09      	ldr	r3, [pc, #36]	; (40134c <xQueueGenericCreate+0x64>)
  401328:	4798      	blx	r3
			pxNewQueue->pxQueueSetContainer = NULL;
  40132a:	2300      	movs	r3, #0
			pxNewQueue->ucQueueType = ucQueueType;
  40132c:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
}
  401330:	4620      	mov	r0, r4
			pxNewQueue->pxQueueSetContainer = NULL;
  401332:	6563      	str	r3, [r4, #84]	; 0x54
}
  401334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401336:	2058      	movs	r0, #88	; 0x58
  401338:	4b03      	ldr	r3, [pc, #12]	; (401348 <xQueueGenericCreate+0x60>)
  40133a:	4798      	blx	r3
	if( pxNewQueue != NULL )
  40133c:	4604      	mov	r4, r0
  40133e:	b108      	cbz	r0, 401344 <xQueueGenericCreate+0x5c>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  401340:	6024      	str	r4, [r4, #0]
  401342:	e7ec      	b.n	40131e <xQueueGenericCreate+0x36>
  401344:	4b02      	ldr	r3, [pc, #8]	; (401350 <xQueueGenericCreate+0x68>)
  401346:	4798      	blx	r3
  401348:	00401009 	.word	0x00401009
  40134c:	00401255 	.word	0x00401255
  401350:	0040123d 	.word	0x0040123d

00401354 <xQueueGenericSend>:
{
  401354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401358:	b085      	sub	sp, #20
  40135a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  40135c:	2800      	cmp	r0, #0
  40135e:	f000 80b7 	beq.w	4014d0 <xQueueGenericSend+0x17c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401362:	2900      	cmp	r1, #0
  401364:	f000 809e 	beq.w	4014a4 <xQueueGenericSend+0x150>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401368:	2b02      	cmp	r3, #2
  40136a:	f000 808c 	beq.w	401486 <xQueueGenericSend+0x132>
  40136e:	461e      	mov	r6, r3
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401370:	4b63      	ldr	r3, [pc, #396]	; (401500 <xQueueGenericSend+0x1ac>)
  401372:	4604      	mov	r4, r0
  401374:	4688      	mov	r8, r1
  401376:	4798      	blx	r3
  401378:	b910      	cbnz	r0, 401380 <xQueueGenericSend+0x2c>
  40137a:	9b01      	ldr	r3, [sp, #4]
  40137c:	2b00      	cmp	r3, #0
  40137e:	d16a      	bne.n	401456 <xQueueGenericSend+0x102>
  401380:	f1a6 0502 	sub.w	r5, r6, #2
{
  401384:	f04f 0a00 	mov.w	sl, #0
  401388:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 40152c <xQueueGenericSend+0x1d8>
  40138c:	fab5 f585 	clz	r5, r5
  401390:	4f5c      	ldr	r7, [pc, #368]	; (401504 <xQueueGenericSend+0x1b0>)
					vTaskSetTimeOutState( &xTimeOut );
  401392:	f8df b19c 	ldr.w	fp, [pc, #412]	; 401530 <xQueueGenericSend+0x1dc>
  401396:	096d      	lsrs	r5, r5, #5
  401398:	e022      	b.n	4013e0 <xQueueGenericSend+0x8c>
  40139a:	f10d 0a08 	add.w	sl, sp, #8
		taskEXIT_CRITICAL();
  40139e:	47b8      	blx	r7
		vTaskSuspendAll();
  4013a0:	4b59      	ldr	r3, [pc, #356]	; (401508 <xQueueGenericSend+0x1b4>)
  4013a2:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4013a4:	47c8      	blx	r9
  4013a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4013a8:	3301      	adds	r3, #1
  4013aa:	f000 80a6 	beq.w	4014fa <xQueueGenericSend+0x1a6>
  4013ae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4013b0:	3301      	adds	r3, #1
  4013b2:	f000 809f 	beq.w	4014f4 <xQueueGenericSend+0x1a0>
  4013b6:	47b8      	blx	r7
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4013b8:	4650      	mov	r0, sl
  4013ba:	a901      	add	r1, sp, #4
  4013bc:	4b53      	ldr	r3, [pc, #332]	; (40150c <xQueueGenericSend+0x1b8>)
  4013be:	4798      	blx	r3
  4013c0:	2800      	cmp	r0, #0
  4013c2:	f040 8090 	bne.w	4014e6 <xQueueGenericSend+0x192>
	taskENTER_CRITICAL();
  4013c6:	47c8      	blx	r9
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  4013c8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4013ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4013cc:	429a      	cmp	r2, r3
  4013ce:	d017      	beq.n	401400 <xQueueGenericSend+0xac>
	taskEXIT_CRITICAL();
  4013d0:	47b8      	blx	r7
				prvUnlockQueue( pxQueue );
  4013d2:	4b4f      	ldr	r3, [pc, #316]	; (401510 <xQueueGenericSend+0x1bc>)
  4013d4:	4620      	mov	r0, r4
  4013d6:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4013d8:	4b4e      	ldr	r3, [pc, #312]	; (401514 <xQueueGenericSend+0x1c0>)
  4013da:	4798      	blx	r3
  4013dc:	f04f 0a01 	mov.w	sl, #1
		taskENTER_CRITICAL();
  4013e0:	47c8      	blx	r9
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  4013e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4013e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4013e6:	429a      	cmp	r2, r3
  4013e8:	d325      	bcc.n	401436 <xQueueGenericSend+0xe2>
  4013ea:	bb25      	cbnz	r5, 401436 <xQueueGenericSend+0xe2>
				if( xTicksToWait == ( TickType_t ) 0 )
  4013ec:	9b01      	ldr	r3, [sp, #4]
  4013ee:	b1eb      	cbz	r3, 40142c <xQueueGenericSend+0xd8>
				else if( xEntryTimeSet == pdFALSE )
  4013f0:	f1ba 0f00 	cmp.w	sl, #0
  4013f4:	d1d1      	bne.n	40139a <xQueueGenericSend+0x46>
					vTaskSetTimeOutState( &xTimeOut );
  4013f6:	f10d 0a08 	add.w	sl, sp, #8
  4013fa:	4650      	mov	r0, sl
  4013fc:	47d8      	blx	fp
  4013fe:	e7ce      	b.n	40139e <xQueueGenericSend+0x4a>
	taskEXIT_CRITICAL();
  401400:	47b8      	blx	r7
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  401402:	9901      	ldr	r1, [sp, #4]
  401404:	f104 0010 	add.w	r0, r4, #16
  401408:	4b43      	ldr	r3, [pc, #268]	; (401518 <xQueueGenericSend+0x1c4>)
  40140a:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  40140c:	4b40      	ldr	r3, [pc, #256]	; (401510 <xQueueGenericSend+0x1bc>)
  40140e:	4620      	mov	r0, r4
  401410:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401412:	4b40      	ldr	r3, [pc, #256]	; (401514 <xQueueGenericSend+0x1c0>)
  401414:	4798      	blx	r3
  401416:	2800      	cmp	r0, #0
  401418:	d1e0      	bne.n	4013dc <xQueueGenericSend+0x88>
					portYIELD_WITHIN_API();
  40141a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40141e:	4a3f      	ldr	r2, [pc, #252]	; (40151c <xQueueGenericSend+0x1c8>)
  401420:	6013      	str	r3, [r2, #0]
  401422:	f3bf 8f4f 	dsb	sy
  401426:	f3bf 8f6f 	isb	sy
  40142a:	e7d7      	b.n	4013dc <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
  40142c:	47b8      	blx	r7
					return errQUEUE_FULL;
  40142e:	4628      	mov	r0, r5
}
  401430:	b005      	add	sp, #20
  401432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401436:	4b3a      	ldr	r3, [pc, #232]	; (401520 <xQueueGenericSend+0x1cc>)
  401438:	4641      	mov	r1, r8
  40143a:	4632      	mov	r2, r6
  40143c:	4620      	mov	r0, r4
  40143e:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  401440:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401442:	b19b      	cbz	r3, 40146c <xQueueGenericSend+0x118>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401444:	4631      	mov	r1, r6
  401446:	4620      	mov	r0, r4
  401448:	4b36      	ldr	r3, [pc, #216]	; (401524 <xQueueGenericSend+0x1d0>)
  40144a:	4798      	blx	r3
  40144c:	2801      	cmp	r0, #1
  40144e:	d011      	beq.n	401474 <xQueueGenericSend+0x120>
				taskEXIT_CRITICAL();
  401450:	47b8      	blx	r7
				return pdPASS;
  401452:	2001      	movs	r0, #1
  401454:	e7ec      	b.n	401430 <xQueueGenericSend+0xdc>
  401456:	f04f 0380 	mov.w	r3, #128	; 0x80
  40145a:	b672      	cpsid	i
  40145c:	f383 8811 	msr	BASEPRI, r3
  401460:	f3bf 8f6f 	isb	sy
  401464:	f3bf 8f4f 	dsb	sy
  401468:	b662      	cpsie	i
  40146a:	e7fe      	b.n	40146a <xQueueGenericSend+0x116>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40146c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40146e:	bb43      	cbnz	r3, 4014c2 <xQueueGenericSend+0x16e>
						else if( xYieldRequired != pdFALSE )
  401470:	2800      	cmp	r0, #0
  401472:	d0ed      	beq.n	401450 <xQueueGenericSend+0xfc>
							queueYIELD_IF_USING_PREEMPTION();
  401474:	4b29      	ldr	r3, [pc, #164]	; (40151c <xQueueGenericSend+0x1c8>)
  401476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40147a:	601a      	str	r2, [r3, #0]
  40147c:	f3bf 8f4f 	dsb	sy
  401480:	f3bf 8f6f 	isb	sy
  401484:	e7e4      	b.n	401450 <xQueueGenericSend+0xfc>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401486:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  401488:	2a01      	cmp	r2, #1
  40148a:	f43f af70 	beq.w	40136e <xQueueGenericSend+0x1a>
  40148e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401492:	b672      	cpsid	i
  401494:	f383 8811 	msr	BASEPRI, r3
  401498:	f3bf 8f6f 	isb	sy
  40149c:	f3bf 8f4f 	dsb	sy
  4014a0:	b662      	cpsie	i
  4014a2:	e7fe      	b.n	4014a2 <xQueueGenericSend+0x14e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4014a4:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4014a6:	2a00      	cmp	r2, #0
  4014a8:	f43f af5e 	beq.w	401368 <xQueueGenericSend+0x14>
  4014ac:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014b0:	b672      	cpsid	i
  4014b2:	f383 8811 	msr	BASEPRI, r3
  4014b6:	f3bf 8f6f 	isb	sy
  4014ba:	f3bf 8f4f 	dsb	sy
  4014be:	b662      	cpsie	i
  4014c0:	e7fe      	b.n	4014c0 <xQueueGenericSend+0x16c>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  4014c2:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4014c6:	4b18      	ldr	r3, [pc, #96]	; (401528 <xQueueGenericSend+0x1d4>)
  4014c8:	4798      	blx	r3
  4014ca:	2801      	cmp	r0, #1
  4014cc:	d1c0      	bne.n	401450 <xQueueGenericSend+0xfc>
  4014ce:	e7d1      	b.n	401474 <xQueueGenericSend+0x120>
  4014d0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014d4:	b672      	cpsid	i
  4014d6:	f383 8811 	msr	BASEPRI, r3
  4014da:	f3bf 8f6f 	isb	sy
  4014de:	f3bf 8f4f 	dsb	sy
  4014e2:	b662      	cpsie	i
  4014e4:	e7fe      	b.n	4014e4 <xQueueGenericSend+0x190>
			prvUnlockQueue( pxQueue );
  4014e6:	4620      	mov	r0, r4
  4014e8:	4b09      	ldr	r3, [pc, #36]	; (401510 <xQueueGenericSend+0x1bc>)
  4014ea:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4014ec:	4b09      	ldr	r3, [pc, #36]	; (401514 <xQueueGenericSend+0x1c0>)
  4014ee:	4798      	blx	r3
			return errQUEUE_FULL;
  4014f0:	2000      	movs	r0, #0
  4014f2:	e79d      	b.n	401430 <xQueueGenericSend+0xdc>
		prvLockQueue( pxQueue );
  4014f4:	2300      	movs	r3, #0
  4014f6:	64a3      	str	r3, [r4, #72]	; 0x48
  4014f8:	e75d      	b.n	4013b6 <xQueueGenericSend+0x62>
  4014fa:	2300      	movs	r3, #0
  4014fc:	6463      	str	r3, [r4, #68]	; 0x44
  4014fe:	e756      	b.n	4013ae <xQueueGenericSend+0x5a>
  401500:	004023c1 	.word	0x004023c1
  401504:	00400e05 	.word	0x00400e05
  401508:	00401cc1 	.word	0x00401cc1
  40150c:	0040231d 	.word	0x0040231d
  401510:	00401195 	.word	0x00401195
  401514:	00401e51 	.word	0x00401e51
  401518:	0040215d 	.word	0x0040215d
  40151c:	e000ed04 	.word	0xe000ed04
  401520:	00401065 	.word	0x00401065
  401524:	004010dd 	.word	0x004010dd
  401528:	00402265 	.word	0x00402265
  40152c:	00400db9 	.word	0x00400db9
  401530:	004022f9 	.word	0x004022f9

00401534 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  401534:	b328      	cbz	r0, 401582 <xQueueGenericSendFromISR+0x4e>
{
  401536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40153a:	2900      	cmp	r1, #0
  40153c:	d047      	beq.n	4015ce <xQueueGenericSendFromISR+0x9a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40153e:	2b02      	cmp	r3, #2
  401540:	d037      	beq.n	4015b2 <xQueueGenericSendFromISR+0x7e>
  401542:	461d      	mov	r5, r3
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401544:	4b37      	ldr	r3, [pc, #220]	; (401624 <xQueueGenericSendFromISR+0xf0>)
  401546:	4604      	mov	r4, r0
  401548:	4690      	mov	r8, r2
  40154a:	460e      	mov	r6, r1
  40154c:	4798      	blx	r3
	__asm volatile
  40154e:	f3ef 8711 	mrs	r7, BASEPRI
  401552:	f04f 0380 	mov.w	r3, #128	; 0x80
  401556:	b672      	cpsid	i
  401558:	f383 8811 	msr	BASEPRI, r3
  40155c:	f3bf 8f6f 	isb	sy
  401560:	f3bf 8f4f 	dsb	sy
  401564:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401566:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401568:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40156a:	429a      	cmp	r2, r3
  40156c:	d314      	bcc.n	401598 <xQueueGenericSendFromISR+0x64>
  40156e:	f1a5 0002 	sub.w	r0, r5, #2
  401572:	fab0 f080 	clz	r0, r0
  401576:	0940      	lsrs	r0, r0, #5
  401578:	b970      	cbnz	r0, 401598 <xQueueGenericSendFromISR+0x64>
	__asm volatile
  40157a:	f387 8811 	msr	BASEPRI, r7
}
  40157e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  401582:	f04f 0380 	mov.w	r3, #128	; 0x80
  401586:	b672      	cpsid	i
  401588:	f383 8811 	msr	BASEPRI, r3
  40158c:	f3bf 8f6f 	isb	sy
  401590:	f3bf 8f4f 	dsb	sy
  401594:	b662      	cpsie	i
  401596:	e7fe      	b.n	401596 <xQueueGenericSendFromISR+0x62>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401598:	4b23      	ldr	r3, [pc, #140]	; (401628 <xQueueGenericSendFromISR+0xf4>)
  40159a:	4631      	mov	r1, r6
  40159c:	462a      	mov	r2, r5
  40159e:	4620      	mov	r0, r4
  4015a0:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  4015a2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4015a4:	3301      	adds	r3, #1
  4015a6:	d020      	beq.n	4015ea <xQueueGenericSendFromISR+0xb6>
				++( pxQueue->xTxLock );
  4015a8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  4015aa:	2001      	movs	r0, #1
				++( pxQueue->xTxLock );
  4015ac:	4403      	add	r3, r0
  4015ae:	64a3      	str	r3, [r4, #72]	; 0x48
  4015b0:	e7e3      	b.n	40157a <xQueueGenericSendFromISR+0x46>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4015b2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  4015b4:	2c01      	cmp	r4, #1
  4015b6:	d0c4      	beq.n	401542 <xQueueGenericSendFromISR+0xe>
  4015b8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015bc:	b672      	cpsid	i
  4015be:	f383 8811 	msr	BASEPRI, r3
  4015c2:	f3bf 8f6f 	isb	sy
  4015c6:	f3bf 8f4f 	dsb	sy
  4015ca:	b662      	cpsie	i
  4015cc:	e7fe      	b.n	4015cc <xQueueGenericSendFromISR+0x98>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4015ce:	6c04      	ldr	r4, [r0, #64]	; 0x40
  4015d0:	2c00      	cmp	r4, #0
  4015d2:	d0b4      	beq.n	40153e <xQueueGenericSendFromISR+0xa>
  4015d4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015d8:	b672      	cpsid	i
  4015da:	f383 8811 	msr	BASEPRI, r3
  4015de:	f3bf 8f6f 	isb	sy
  4015e2:	f3bf 8f4f 	dsb	sy
  4015e6:	b662      	cpsie	i
  4015e8:	e7fe      	b.n	4015e8 <xQueueGenericSendFromISR+0xb4>
					if( pxQueue->pxQueueSetContainer != NULL )
  4015ea:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4015ec:	b163      	cbz	r3, 401608 <xQueueGenericSendFromISR+0xd4>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  4015ee:	4629      	mov	r1, r5
  4015f0:	4620      	mov	r0, r4
  4015f2:	4b0e      	ldr	r3, [pc, #56]	; (40162c <xQueueGenericSendFromISR+0xf8>)
  4015f4:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  4015f6:	2801      	cmp	r0, #1
  4015f8:	d108      	bne.n	40160c <xQueueGenericSendFromISR+0xd8>
  4015fa:	f1b8 0f00 	cmp.w	r8, #0
  4015fe:	d005      	beq.n	40160c <xQueueGenericSendFromISR+0xd8>
								*pxHigherPriorityTaskWoken = pdTRUE;
  401600:	2001      	movs	r0, #1
  401602:	f8c8 0000 	str.w	r0, [r8]
  401606:	e7b8      	b.n	40157a <xQueueGenericSendFromISR+0x46>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401608:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40160a:	b90b      	cbnz	r3, 401610 <xQueueGenericSendFromISR+0xdc>
			xReturn = pdPASS;
  40160c:	2001      	movs	r0, #1
  40160e:	e7b4      	b.n	40157a <xQueueGenericSendFromISR+0x46>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401610:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401614:	4b06      	ldr	r3, [pc, #24]	; (401630 <xQueueGenericSendFromISR+0xfc>)
  401616:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  401618:	f1b8 0f00 	cmp.w	r8, #0
  40161c:	d0f6      	beq.n	40160c <xQueueGenericSendFromISR+0xd8>
  40161e:	2800      	cmp	r0, #0
  401620:	d1ee      	bne.n	401600 <xQueueGenericSendFromISR+0xcc>
  401622:	e7f3      	b.n	40160c <xQueueGenericSendFromISR+0xd8>
  401624:	00400fa5 	.word	0x00400fa5
  401628:	00401065 	.word	0x00401065
  40162c:	004010dd 	.word	0x004010dd
  401630:	00402265 	.word	0x00402265

00401634 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
  401634:	2800      	cmp	r0, #0
  401636:	d031      	beq.n	40169c <xQueueGiveFromISR+0x68>
	configASSERT( pxQueue->uxItemSize == 0 );
  401638:	6c03      	ldr	r3, [r0, #64]	; 0x40
  40163a:	b153      	cbz	r3, 401652 <xQueueGiveFromISR+0x1e>
  40163c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401640:	b672      	cpsid	i
  401642:	f383 8811 	msr	BASEPRI, r3
  401646:	f3bf 8f6f 	isb	sy
  40164a:	f3bf 8f4f 	dsb	sy
  40164e:	b662      	cpsie	i
  401650:	e7fe      	b.n	401650 <xQueueGiveFromISR+0x1c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  401652:	6803      	ldr	r3, [r0, #0]
  401654:	2b00      	cmp	r3, #0
  401656:	d03a      	beq.n	4016ce <xQueueGiveFromISR+0x9a>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401658:	4b29      	ldr	r3, [pc, #164]	; (401700 <xQueueGiveFromISR+0xcc>)
{
  40165a:	b570      	push	{r4, r5, r6, lr}
  40165c:	4604      	mov	r4, r0
  40165e:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401660:	4798      	blx	r3
	__asm volatile
  401662:	f3ef 8611 	mrs	r6, BASEPRI
  401666:	f04f 0380 	mov.w	r3, #128	; 0x80
  40166a:	b672      	cpsid	i
  40166c:	f383 8811 	msr	BASEPRI, r3
  401670:	f3bf 8f6f 	isb	sy
  401674:	f3bf 8f4f 	dsb	sy
  401678:	b662      	cpsie	i
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  40167a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40167c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40167e:	429a      	cmp	r2, r3
  401680:	d223      	bcs.n	4016ca <xQueueGiveFromISR+0x96>
			++( pxQueue->uxMessagesWaiting );
  401682:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401684:	3301      	adds	r3, #1
  401686:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
  401688:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40168a:	3301      	adds	r3, #1
  40168c:	d011      	beq.n	4016b2 <xQueueGiveFromISR+0x7e>
				++( pxQueue->xTxLock );
  40168e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  401690:	2001      	movs	r0, #1
				++( pxQueue->xTxLock );
  401692:	4403      	add	r3, r0
  401694:	64a3      	str	r3, [r4, #72]	; 0x48
	__asm volatile
  401696:	f386 8811 	msr	BASEPRI, r6
}
  40169a:	bd70      	pop	{r4, r5, r6, pc}
	__asm volatile
  40169c:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016a0:	b672      	cpsid	i
  4016a2:	f383 8811 	msr	BASEPRI, r3
  4016a6:	f3bf 8f6f 	isb	sy
  4016aa:	f3bf 8f4f 	dsb	sy
  4016ae:	b662      	cpsie	i
  4016b0:	e7fe      	b.n	4016b0 <xQueueGiveFromISR+0x7c>
					if( pxQueue->pxQueueSetContainer != NULL )
  4016b2:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4016b4:	b1cb      	cbz	r3, 4016ea <xQueueGiveFromISR+0xb6>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4016b6:	4620      	mov	r0, r4
  4016b8:	2100      	movs	r1, #0
  4016ba:	4b12      	ldr	r3, [pc, #72]	; (401704 <xQueueGiveFromISR+0xd0>)
  4016bc:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  4016be:	2801      	cmp	r0, #1
  4016c0:	d11c      	bne.n	4016fc <xQueueGiveFromISR+0xc8>
  4016c2:	b1dd      	cbz	r5, 4016fc <xQueueGiveFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
  4016c4:	2001      	movs	r0, #1
  4016c6:	6028      	str	r0, [r5, #0]
  4016c8:	e7e5      	b.n	401696 <xQueueGiveFromISR+0x62>
			xReturn = errQUEUE_FULL;
  4016ca:	2000      	movs	r0, #0
  4016cc:	e7e3      	b.n	401696 <xQueueGiveFromISR+0x62>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  4016ce:	6843      	ldr	r3, [r0, #4]
  4016d0:	2b00      	cmp	r3, #0
  4016d2:	d0c1      	beq.n	401658 <xQueueGiveFromISR+0x24>
  4016d4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016d8:	b672      	cpsid	i
  4016da:	f383 8811 	msr	BASEPRI, r3
  4016de:	f3bf 8f6f 	isb	sy
  4016e2:	f3bf 8f4f 	dsb	sy
  4016e6:	b662      	cpsie	i
  4016e8:	e7fe      	b.n	4016e8 <xQueueGiveFromISR+0xb4>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4016ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4016ec:	b133      	cbz	r3, 4016fc <xQueueGiveFromISR+0xc8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4016ee:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4016f2:	4b05      	ldr	r3, [pc, #20]	; (401708 <xQueueGiveFromISR+0xd4>)
  4016f4:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  4016f6:	b10d      	cbz	r5, 4016fc <xQueueGiveFromISR+0xc8>
  4016f8:	2800      	cmp	r0, #0
  4016fa:	d1e3      	bne.n	4016c4 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
  4016fc:	2001      	movs	r0, #1
  4016fe:	e7ca      	b.n	401696 <xQueueGiveFromISR+0x62>
  401700:	00400fa5 	.word	0x00400fa5
  401704:	004010dd 	.word	0x004010dd
  401708:	00402265 	.word	0x00402265

0040170c <xQueueGenericReceive>:
{
  40170c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401710:	b087      	sub	sp, #28
  401712:	9203      	str	r2, [sp, #12]
	configASSERT( pxQueue );
  401714:	2800      	cmp	r0, #0
  401716:	d066      	beq.n	4017e6 <xQueueGenericReceive+0xda>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401718:	2900      	cmp	r1, #0
  40171a:	f000 80af 	beq.w	40187c <xQueueGenericReceive+0x170>
  40171e:	9301      	str	r3, [sp, #4]
  401720:	4604      	mov	r4, r0
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401722:	4b5e      	ldr	r3, [pc, #376]	; (40189c <xQueueGenericReceive+0x190>)
  401724:	460f      	mov	r7, r1
  401726:	4798      	blx	r3
  401728:	b960      	cbnz	r0, 401744 <xQueueGenericReceive+0x38>
  40172a:	9b03      	ldr	r3, [sp, #12]
  40172c:	b15b      	cbz	r3, 401746 <xQueueGenericReceive+0x3a>
  40172e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401732:	b672      	cpsid	i
  401734:	f383 8811 	msr	BASEPRI, r3
  401738:	f3bf 8f6f 	isb	sy
  40173c:	f3bf 8f4f 	dsb	sy
  401740:	b662      	cpsie	i
  401742:	e7fe      	b.n	401742 <xQueueGenericReceive+0x36>
  401744:	2300      	movs	r3, #0
  401746:	4e56      	ldr	r6, [pc, #344]	; (4018a0 <xQueueGenericReceive+0x194>)
  401748:	4d56      	ldr	r5, [pc, #344]	; (4018a4 <xQueueGenericReceive+0x198>)
					vTaskSetTimeOutState( &xTimeOut );
  40174a:	f8df b180 	ldr.w	fp, [pc, #384]	; 4018cc <xQueueGenericReceive+0x1c0>
		vTaskSuspendAll();
  40174e:	f8df a180 	ldr.w	sl, [pc, #384]	; 4018d0 <xQueueGenericReceive+0x1c4>
					portYIELD_WITHIN_API();
  401752:	f8df 9174 	ldr.w	r9, [pc, #372]	; 4018c8 <xQueueGenericReceive+0x1bc>
  401756:	e006      	b.n	401766 <xQueueGenericReceive+0x5a>
	taskEXIT_CRITICAL();
  401758:	47a8      	blx	r5
				prvUnlockQueue( pxQueue );
  40175a:	4b53      	ldr	r3, [pc, #332]	; (4018a8 <xQueueGenericReceive+0x19c>)
  40175c:	4620      	mov	r0, r4
  40175e:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401760:	4b52      	ldr	r3, [pc, #328]	; (4018ac <xQueueGenericReceive+0x1a0>)
  401762:	4798      	blx	r3
  401764:	2301      	movs	r3, #1
  401766:	9302      	str	r3, [sp, #8]
		taskENTER_CRITICAL();
  401768:	47b0      	blx	r6
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  40176a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40176c:	9b02      	ldr	r3, [sp, #8]
  40176e:	2a00      	cmp	r2, #0
  401770:	d156      	bne.n	401820 <xQueueGenericReceive+0x114>
				if( xTicksToWait == ( TickType_t ) 0 )
  401772:	f8dd 800c 	ldr.w	r8, [sp, #12]
  401776:	f1b8 0f00 	cmp.w	r8, #0
  40177a:	d04e      	beq.n	40181a <xQueueGenericReceive+0x10e>
					vTaskSetTimeOutState( &xTimeOut );
  40177c:	f10d 0810 	add.w	r8, sp, #16
				else if( xEntryTimeSet == pdFALSE )
  401780:	b90b      	cbnz	r3, 401786 <xQueueGenericReceive+0x7a>
					vTaskSetTimeOutState( &xTimeOut );
  401782:	4640      	mov	r0, r8
  401784:	47d8      	blx	fp
		taskEXIT_CRITICAL();
  401786:	47a8      	blx	r5
		vTaskSuspendAll();
  401788:	47d0      	blx	sl
		prvLockQueue( pxQueue );
  40178a:	47b0      	blx	r6
  40178c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40178e:	3301      	adds	r3, #1
  401790:	d101      	bne.n	401796 <xQueueGenericReceive+0x8a>
  401792:	2300      	movs	r3, #0
  401794:	6463      	str	r3, [r4, #68]	; 0x44
  401796:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401798:	3301      	adds	r3, #1
  40179a:	d101      	bne.n	4017a0 <xQueueGenericReceive+0x94>
  40179c:	2300      	movs	r3, #0
  40179e:	64a3      	str	r3, [r4, #72]	; 0x48
  4017a0:	47a8      	blx	r5
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4017a2:	4640      	mov	r0, r8
  4017a4:	a903      	add	r1, sp, #12
  4017a6:	4b42      	ldr	r3, [pc, #264]	; (4018b0 <xQueueGenericReceive+0x1a4>)
  4017a8:	4798      	blx	r3
  4017aa:	2800      	cmp	r0, #0
  4017ac:	d12c      	bne.n	401808 <xQueueGenericReceive+0xfc>
	taskENTER_CRITICAL();
  4017ae:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  4017b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4017b2:	2b00      	cmp	r3, #0
  4017b4:	d1d0      	bne.n	401758 <xQueueGenericReceive+0x4c>
	taskEXIT_CRITICAL();
  4017b6:	47a8      	blx	r5
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4017b8:	6823      	ldr	r3, [r4, #0]
  4017ba:	b1fb      	cbz	r3, 4017fc <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  4017bc:	9903      	ldr	r1, [sp, #12]
  4017be:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4017c2:	4b3c      	ldr	r3, [pc, #240]	; (4018b4 <xQueueGenericReceive+0x1a8>)
  4017c4:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  4017c6:	4b38      	ldr	r3, [pc, #224]	; (4018a8 <xQueueGenericReceive+0x19c>)
  4017c8:	4620      	mov	r0, r4
  4017ca:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4017cc:	4b37      	ldr	r3, [pc, #220]	; (4018ac <xQueueGenericReceive+0x1a0>)
  4017ce:	4798      	blx	r3
  4017d0:	2800      	cmp	r0, #0
  4017d2:	d1c7      	bne.n	401764 <xQueueGenericReceive+0x58>
					portYIELD_WITHIN_API();
  4017d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4017d8:	f8c9 3000 	str.w	r3, [r9]
  4017dc:	f3bf 8f4f 	dsb	sy
  4017e0:	f3bf 8f6f 	isb	sy
  4017e4:	e7be      	b.n	401764 <xQueueGenericReceive+0x58>
  4017e6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017ea:	b672      	cpsid	i
  4017ec:	f383 8811 	msr	BASEPRI, r3
  4017f0:	f3bf 8f6f 	isb	sy
  4017f4:	f3bf 8f4f 	dsb	sy
  4017f8:	b662      	cpsie	i
  4017fa:	e7fe      	b.n	4017fa <xQueueGenericReceive+0xee>
						taskENTER_CRITICAL();
  4017fc:	47b0      	blx	r6
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  4017fe:	6860      	ldr	r0, [r4, #4]
  401800:	4b2d      	ldr	r3, [pc, #180]	; (4018b8 <xQueueGenericReceive+0x1ac>)
  401802:	4798      	blx	r3
						taskEXIT_CRITICAL();
  401804:	47a8      	blx	r5
  401806:	e7d9      	b.n	4017bc <xQueueGenericReceive+0xb0>
			prvUnlockQueue( pxQueue );
  401808:	4620      	mov	r0, r4
  40180a:	4b27      	ldr	r3, [pc, #156]	; (4018a8 <xQueueGenericReceive+0x19c>)
  40180c:	4798      	blx	r3
			( void ) xTaskResumeAll();
  40180e:	4b27      	ldr	r3, [pc, #156]	; (4018ac <xQueueGenericReceive+0x1a0>)
  401810:	4798      	blx	r3
			return errQUEUE_EMPTY;
  401812:	2000      	movs	r0, #0
}
  401814:	b007      	add	sp, #28
  401816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					taskEXIT_CRITICAL();
  40181a:	47a8      	blx	r5
					return errQUEUE_EMPTY;
  40181c:	4640      	mov	r0, r8
  40181e:	e7f9      	b.n	401814 <xQueueGenericReceive+0x108>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  401820:	4b26      	ldr	r3, [pc, #152]	; (4018bc <xQueueGenericReceive+0x1b0>)
  401822:	4639      	mov	r1, r7
  401824:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  401826:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  401828:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  40182a:	9b01      	ldr	r3, [sp, #4]
  40182c:	b963      	cbnz	r3, 401848 <xQueueGenericReceive+0x13c>
					--( pxQueue->uxMessagesWaiting );
  40182e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401830:	6822      	ldr	r2, [r4, #0]
					--( pxQueue->uxMessagesWaiting );
  401832:	3b01      	subs	r3, #1
  401834:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401836:	b912      	cbnz	r2, 40183e <xQueueGenericReceive+0x132>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  401838:	4b21      	ldr	r3, [pc, #132]	; (4018c0 <xQueueGenericReceive+0x1b4>)
  40183a:	4798      	blx	r3
  40183c:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40183e:	6923      	ldr	r3, [r4, #16]
  401840:	b9ab      	cbnz	r3, 40186e <xQueueGenericReceive+0x162>
				taskEXIT_CRITICAL();
  401842:	47a8      	blx	r5
				return pdPASS;
  401844:	2001      	movs	r0, #1
  401846:	e7e5      	b.n	401814 <xQueueGenericReceive+0x108>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401848:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  40184a:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40184c:	2b00      	cmp	r3, #0
  40184e:	d0f8      	beq.n	401842 <xQueueGenericReceive+0x136>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401850:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401854:	4b1b      	ldr	r3, [pc, #108]	; (4018c4 <xQueueGenericReceive+0x1b8>)
  401856:	4798      	blx	r3
  401858:	2800      	cmp	r0, #0
  40185a:	d0f2      	beq.n	401842 <xQueueGenericReceive+0x136>
							queueYIELD_IF_USING_PREEMPTION();
  40185c:	4b1a      	ldr	r3, [pc, #104]	; (4018c8 <xQueueGenericReceive+0x1bc>)
  40185e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401862:	601a      	str	r2, [r3, #0]
  401864:	f3bf 8f4f 	dsb	sy
  401868:	f3bf 8f6f 	isb	sy
  40186c:	e7e9      	b.n	401842 <xQueueGenericReceive+0x136>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  40186e:	f104 0010 	add.w	r0, r4, #16
  401872:	4b14      	ldr	r3, [pc, #80]	; (4018c4 <xQueueGenericReceive+0x1b8>)
  401874:	4798      	blx	r3
  401876:	2801      	cmp	r0, #1
  401878:	d1e3      	bne.n	401842 <xQueueGenericReceive+0x136>
  40187a:	e7ef      	b.n	40185c <xQueueGenericReceive+0x150>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40187c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40187e:	2a00      	cmp	r2, #0
  401880:	f43f af4d 	beq.w	40171e <xQueueGenericReceive+0x12>
  401884:	f04f 0380 	mov.w	r3, #128	; 0x80
  401888:	b672      	cpsid	i
  40188a:	f383 8811 	msr	BASEPRI, r3
  40188e:	f3bf 8f6f 	isb	sy
  401892:	f3bf 8f4f 	dsb	sy
  401896:	b662      	cpsie	i
  401898:	e7fe      	b.n	401898 <xQueueGenericReceive+0x18c>
  40189a:	bf00      	nop
  40189c:	004023c1 	.word	0x004023c1
  4018a0:	00400db9 	.word	0x00400db9
  4018a4:	00400e05 	.word	0x00400e05
  4018a8:	00401195 	.word	0x00401195
  4018ac:	00401e51 	.word	0x00401e51
  4018b0:	0040231d 	.word	0x0040231d
  4018b4:	0040215d 	.word	0x0040215d
  4018b8:	004023e1 	.word	0x004023e1
  4018bc:	00401169 	.word	0x00401169
  4018c0:	00402551 	.word	0x00402551
  4018c4:	00402265 	.word	0x00402265
  4018c8:	e000ed04 	.word	0xe000ed04
  4018cc:	004022f9 	.word	0x004022f9
  4018d0:	00401cc1 	.word	0x00401cc1

004018d4 <vQueueAddToRegistry>:
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4018d4:	2300      	movs	r3, #0
  4018d6:	4a08      	ldr	r2, [pc, #32]	; (4018f8 <vQueueAddToRegistry+0x24>)
	{
  4018d8:	b430      	push	{r4, r5}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  4018da:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
  4018de:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
  4018e2:	b124      	cbz	r4, 4018ee <vQueueAddToRegistry+0x1a>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4018e4:	3301      	adds	r3, #1
  4018e6:	2b08      	cmp	r3, #8
  4018e8:	d1f7      	bne.n	4018da <vQueueAddToRegistry+0x6>
	}
  4018ea:	bc30      	pop	{r4, r5}
  4018ec:	4770      	bx	lr
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  4018ee:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  4018f2:	6068      	str	r0, [r5, #4]
	}
  4018f4:	bc30      	pop	{r4, r5}
  4018f6:	4770      	bx	lr
  4018f8:	20400bd0 	.word	0x20400bd0

004018fc <vQueueWaitForMessageRestricted>:
	{
  4018fc:	b570      	push	{r4, r5, r6, lr}
  4018fe:	4604      	mov	r4, r0
		prvLockQueue( pxQueue );
  401900:	4b0f      	ldr	r3, [pc, #60]	; (401940 <vQueueWaitForMessageRestricted+0x44>)
	{
  401902:	460d      	mov	r5, r1
  401904:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  401906:	4798      	blx	r3
  401908:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40190a:	3301      	adds	r3, #1
  40190c:	d014      	beq.n	401938 <vQueueWaitForMessageRestricted+0x3c>
  40190e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401910:	3301      	adds	r3, #1
  401912:	d00e      	beq.n	401932 <vQueueWaitForMessageRestricted+0x36>
  401914:	4b0b      	ldr	r3, [pc, #44]	; (401944 <vQueueWaitForMessageRestricted+0x48>)
  401916:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  401918:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40191a:	b92b      	cbnz	r3, 401928 <vQueueWaitForMessageRestricted+0x2c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  40191c:	4632      	mov	r2, r6
  40191e:	4629      	mov	r1, r5
  401920:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401924:	4b08      	ldr	r3, [pc, #32]	; (401948 <vQueueWaitForMessageRestricted+0x4c>)
  401926:	4798      	blx	r3
		prvUnlockQueue( pxQueue );
  401928:	4620      	mov	r0, r4
  40192a:	4b08      	ldr	r3, [pc, #32]	; (40194c <vQueueWaitForMessageRestricted+0x50>)
	}
  40192c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
  401930:	4718      	bx	r3
		prvLockQueue( pxQueue );
  401932:	2300      	movs	r3, #0
  401934:	64a3      	str	r3, [r4, #72]	; 0x48
  401936:	e7ed      	b.n	401914 <vQueueWaitForMessageRestricted+0x18>
  401938:	2300      	movs	r3, #0
  40193a:	6463      	str	r3, [r4, #68]	; 0x44
  40193c:	e7e7      	b.n	40190e <vQueueWaitForMessageRestricted+0x12>
  40193e:	bf00      	nop
  401940:	00400db9 	.word	0x00400db9
  401944:	00400e05 	.word	0x00400e05
  401948:	004021e1 	.word	0x004021e1
  40194c:	00401195 	.word	0x00401195

00401950 <prvResetNextTaskUnblockTime.part.2>:
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401950:	4a03      	ldr	r2, [pc, #12]	; (401960 <prvResetNextTaskUnblockTime.part.2+0x10>)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  401952:	4b04      	ldr	r3, [pc, #16]	; (401964 <prvResetNextTaskUnblockTime.part.2+0x14>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401954:	6812      	ldr	r2, [r2, #0]
  401956:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  401958:	68d2      	ldr	r2, [r2, #12]
  40195a:	6852      	ldr	r2, [r2, #4]
  40195c:	601a      	str	r2, [r3, #0]
  40195e:	4770      	bx	lr
  401960:	20400a5c 	.word	0x20400a5c
  401964:	20400b08 	.word	0x20400b08

00401968 <prvAddCurrentTaskToDelayedList>:
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  401968:	4b0d      	ldr	r3, [pc, #52]	; (4019a0 <prvAddCurrentTaskToDelayedList+0x38>)
	if( xTimeToWake < xTickCount )
  40196a:	4a0e      	ldr	r2, [pc, #56]	; (4019a4 <prvAddCurrentTaskToDelayedList+0x3c>)
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  40196c:	6819      	ldr	r1, [r3, #0]
	if( xTimeToWake < xTickCount )
  40196e:	6812      	ldr	r2, [r2, #0]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  401970:	6048      	str	r0, [r1, #4]
	if( xTimeToWake < xTickCount )
  401972:	4290      	cmp	r0, r2
  401974:	d30d      	bcc.n	401992 <prvAddCurrentTaskToDelayedList+0x2a>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401976:	490c      	ldr	r1, [pc, #48]	; (4019a8 <prvAddCurrentTaskToDelayedList+0x40>)
  401978:	4a0c      	ldr	r2, [pc, #48]	; (4019ac <prvAddCurrentTaskToDelayedList+0x44>)
{
  40197a:	b510      	push	{r4, lr}
  40197c:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40197e:	6808      	ldr	r0, [r1, #0]
  401980:	6819      	ldr	r1, [r3, #0]
  401982:	3104      	adds	r1, #4
  401984:	4790      	blx	r2
		if( xTimeToWake < xNextTaskUnblockTime )
  401986:	4b0a      	ldr	r3, [pc, #40]	; (4019b0 <prvAddCurrentTaskToDelayedList+0x48>)
  401988:	681a      	ldr	r2, [r3, #0]
  40198a:	4294      	cmp	r4, r2
  40198c:	d200      	bcs.n	401990 <prvAddCurrentTaskToDelayedList+0x28>
			xNextTaskUnblockTime = xTimeToWake;
  40198e:	601c      	str	r4, [r3, #0]
  401990:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401992:	4908      	ldr	r1, [pc, #32]	; (4019b4 <prvAddCurrentTaskToDelayedList+0x4c>)
  401994:	4a05      	ldr	r2, [pc, #20]	; (4019ac <prvAddCurrentTaskToDelayedList+0x44>)
  401996:	6808      	ldr	r0, [r1, #0]
  401998:	6819      	ldr	r1, [r3, #0]
  40199a:	3104      	adds	r1, #4
  40199c:	4710      	bx	r2
  40199e:	bf00      	nop
  4019a0:	20400a58 	.word	0x20400a58
  4019a4:	20400b50 	.word	0x20400b50
  4019a8:	20400a5c 	.word	0x20400a5c
  4019ac:	00400ca1 	.word	0x00400ca1
  4019b0:	20400b08 	.word	0x20400b08
  4019b4:	20400a60 	.word	0x20400a60

004019b8 <xTaskGenericCreate.part.5>:
BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
  4019b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4019bc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  4019be:	4680      	mov	r8, r0
  4019c0:	460d      	mov	r5, r1
  4019c2:	4692      	mov	sl, r2
  4019c4:	4699      	mov	r9, r3
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4019c6:	2e00      	cmp	r6, #0
  4019c8:	f000 8096 	beq.w	401af8 <xTaskGenericCreate.part.5+0x140>
  4019cc:	4c64      	ldr	r4, [pc, #400]	; (401b60 <xTaskGenericCreate.part.5+0x1a8>)
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  4019ce:	2058      	movs	r0, #88	; 0x58
  4019d0:	47a0      	blx	r4
			if( pxNewTCB != NULL )
  4019d2:	4604      	mov	r4, r0
  4019d4:	2800      	cmp	r0, #0
  4019d6:	f000 809a 	beq.w	401b0e <xTaskGenericCreate.part.5+0x156>
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  4019da:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
				pxNewTCB->pxStack = pxStack;
  4019de:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  4019e0:	21a5      	movs	r1, #165	; 0xa5
  4019e2:	4b60      	ldr	r3, [pc, #384]	; (401b64 <xTaskGenericCreate.part.5+0x1ac>)
  4019e4:	4652      	mov	r2, sl
  4019e6:	4630      	mov	r0, r6
  4019e8:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  4019ea:	f1aa 0a04 	sub.w	sl, sl, #4
  4019ee:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4019f0:	1e6b      	subs	r3, r5, #1
  4019f2:	f105 0109 	add.w	r1, r5, #9
  4019f6:	f104 0533 	add.w	r5, r4, #51	; 0x33
  4019fa:	4482      	add	sl, r0
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  4019fc:	f02a 0a07 	bic.w	sl, sl, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401a00:	785a      	ldrb	r2, [r3, #1]
  401a02:	f805 2f01 	strb.w	r2, [r5, #1]!
		if( pcName[ x ] == 0x00 )
  401a06:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  401a0a:	b10a      	cbz	r2, 401a10 <xTaskGenericCreate.part.5+0x58>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  401a0c:	4299      	cmp	r1, r3
  401a0e:	d1f7      	bne.n	401a00 <xTaskGenericCreate.part.5+0x48>
  401a10:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  401a12:	2700      	movs	r7, #0
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  401a14:	f104 0b04 	add.w	fp, r4, #4
  401a18:	4e53      	ldr	r6, [pc, #332]	; (401b68 <xTaskGenericCreate.part.5+0x1b0>)
  401a1a:	2d04      	cmp	r5, #4
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  401a1c:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  401a20:	4658      	mov	r0, fp
		pxTCB->uxMutexesHeld = 0;
  401a22:	64e7      	str	r7, [r4, #76]	; 0x4c
  401a24:	bf28      	it	cs
  401a26:	2504      	movcs	r5, #4
	pxTCB->uxPriority = uxPriority;
  401a28:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  401a2a:	64a5      	str	r5, [r4, #72]	; 0x48
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401a2c:	f1c5 0505 	rsb	r5, r5, #5
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  401a30:	47b0      	blx	r6
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  401a32:	f104 0018 	add.w	r0, r4, #24
  401a36:	47b0      	blx	r6
		pxTCB->ulNotifiedValue = 0;
  401a38:	6527      	str	r7, [r4, #80]	; 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401a3a:	4b4c      	ldr	r3, [pc, #304]	; (401b6c <xTaskGenericCreate.part.5+0x1b4>)
  401a3c:	464a      	mov	r2, r9
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401a3e:	61a5      	str	r5, [r4, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401a40:	4641      	mov	r1, r8
		pxTCB->eNotifyState = eNotWaitingNotification;
  401a42:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401a46:	4650      	mov	r0, sl
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  401a48:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  401a4a:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401a4c:	4798      	blx	r3
		if( ( void * ) pxCreatedTask != NULL )
  401a4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401a50:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  401a52:	b103      	cbz	r3, 401a56 <xTaskGenericCreate.part.5+0x9e>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  401a54:	601c      	str	r4, [r3, #0]
		taskENTER_CRITICAL();
  401a56:	4b46      	ldr	r3, [pc, #280]	; (401b70 <xTaskGenericCreate.part.5+0x1b8>)
  401a58:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  401a5a:	4a46      	ldr	r2, [pc, #280]	; (401b74 <xTaskGenericCreate.part.5+0x1bc>)
			if( pxCurrentTCB == NULL )
  401a5c:	4e46      	ldr	r6, [pc, #280]	; (401b78 <xTaskGenericCreate.part.5+0x1c0>)
			uxCurrentNumberOfTasks++;
  401a5e:	6813      	ldr	r3, [r2, #0]
  401a60:	3301      	adds	r3, #1
  401a62:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  401a64:	6833      	ldr	r3, [r6, #0]
  401a66:	2b00      	cmp	r3, #0
  401a68:	d03f      	beq.n	401aea <xTaskGenericCreate.part.5+0x132>
				if( xSchedulerRunning == pdFALSE )
  401a6a:	f8df 814c 	ldr.w	r8, [pc, #332]	; 401bb8 <xTaskGenericCreate.part.5+0x200>
  401a6e:	f8d8 3000 	ldr.w	r3, [r8]
  401a72:	b92b      	cbnz	r3, 401a80 <xTaskGenericCreate.part.5+0xc8>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  401a74:	6833      	ldr	r3, [r6, #0]
  401a76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  401a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401a7a:	429a      	cmp	r2, r3
  401a7c:	d300      	bcc.n	401a80 <xTaskGenericCreate.part.5+0xc8>
						pxCurrentTCB = pxNewTCB;
  401a7e:	6034      	str	r4, [r6, #0]
			uxTaskNumber++;
  401a80:	f8df e138 	ldr.w	lr, [pc, #312]	; 401bbc <xTaskGenericCreate.part.5+0x204>
			prvAddTaskToReadyList( pxNewTCB );
  401a84:	2501      	movs	r5, #1
  401a86:	f8df c138 	ldr.w	ip, [pc, #312]	; 401bc0 <xTaskGenericCreate.part.5+0x208>
  401a8a:	4659      	mov	r1, fp
  401a8c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401a8e:	f8dc 9000 	ldr.w	r9, [ip]
			uxTaskNumber++;
  401a92:	f8de 2000 	ldr.w	r2, [lr]
			prvAddTaskToReadyList( pxNewTCB );
  401a96:	fa05 f300 	lsl.w	r3, r5, r0
  401a9a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401a9e:	ea43 0309 	orr.w	r3, r3, r9
			uxTaskNumber++;
  401aa2:	442a      	add	r2, r5
			prvAddTaskToReadyList( pxNewTCB );
  401aa4:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 401b90 <xTaskGenericCreate.part.5+0x1d8>
			uxTaskNumber++;
  401aa8:	f8ce 2000 	str.w	r2, [lr]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  401aac:	6422      	str	r2, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  401aae:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  401ab2:	4a32      	ldr	r2, [pc, #200]	; (401b7c <xTaskGenericCreate.part.5+0x1c4>)
  401ab4:	f8cc 3000 	str.w	r3, [ip]
  401ab8:	4790      	blx	r2
		taskEXIT_CRITICAL();
  401aba:	4b31      	ldr	r3, [pc, #196]	; (401b80 <xTaskGenericCreate.part.5+0x1c8>)
  401abc:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  401abe:	f8d8 3000 	ldr.w	r3, [r8]
  401ac2:	b17b      	cbz	r3, 401ae4 <xTaskGenericCreate.part.5+0x12c>
			if( pxCurrentTCB->uxPriority < uxPriority )
  401ac4:	6833      	ldr	r3, [r6, #0]
  401ac6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  401ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401aca:	429a      	cmp	r2, r3
  401acc:	d90a      	bls.n	401ae4 <xTaskGenericCreate.part.5+0x12c>
				taskYIELD_IF_USING_PREEMPTION();
  401ace:	4b2d      	ldr	r3, [pc, #180]	; (401b84 <xTaskGenericCreate.part.5+0x1cc>)
  401ad0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401ad4:	601a      	str	r2, [r3, #0]
  401ad6:	f3bf 8f4f 	dsb	sy
  401ada:	f3bf 8f6f 	isb	sy
  401ade:	4628      	mov	r0, r5
  401ae0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if( pxCurrentTCB->uxPriority < uxPriority )
  401ae4:	4628      	mov	r0, r5
}
  401ae6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				pxCurrentTCB =  pxNewTCB;
  401aea:	6034      	str	r4, [r6, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  401aec:	6813      	ldr	r3, [r2, #0]
  401aee:	2b01      	cmp	r3, #1
  401af0:	d014      	beq.n	401b1c <xTaskGenericCreate.part.5+0x164>
  401af2:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 401bb8 <xTaskGenericCreate.part.5+0x200>
  401af6:	e7c3      	b.n	401a80 <xTaskGenericCreate.part.5+0xc8>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401af8:	0090      	lsls	r0, r2, #2
  401afa:	4c19      	ldr	r4, [pc, #100]	; (401b60 <xTaskGenericCreate.part.5+0x1a8>)
  401afc:	47a0      	blx	r4
		if( pxStack != NULL )
  401afe:	4606      	mov	r6, r0
  401b00:	2800      	cmp	r0, #0
  401b02:	f47f af64 	bne.w	4019ce <xTaskGenericCreate.part.5+0x16>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401b06:	f04f 30ff 	mov.w	r0, #4294967295
  401b0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  401b0e:	4630      	mov	r0, r6
  401b10:	4b1d      	ldr	r3, [pc, #116]	; (401b88 <xTaskGenericCreate.part.5+0x1d0>)
  401b12:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401b14:	f04f 30ff 	mov.w	r0, #4294967295
  401b18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401b1c:	4d1b      	ldr	r5, [pc, #108]	; (401b8c <xTaskGenericCreate.part.5+0x1d4>)
  401b1e:	481c      	ldr	r0, [pc, #112]	; (401b90 <xTaskGenericCreate.part.5+0x1d8>)
  401b20:	47a8      	blx	r5
  401b22:	481c      	ldr	r0, [pc, #112]	; (401b94 <xTaskGenericCreate.part.5+0x1dc>)
  401b24:	47a8      	blx	r5
  401b26:	481c      	ldr	r0, [pc, #112]	; (401b98 <xTaskGenericCreate.part.5+0x1e0>)
  401b28:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList1 );
  401b2a:	f8df 8098 	ldr.w	r8, [pc, #152]	; 401bc4 <xTaskGenericCreate.part.5+0x20c>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401b2e:	481b      	ldr	r0, [pc, #108]	; (401b9c <xTaskGenericCreate.part.5+0x1e4>)
  401b30:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  401b32:	f8df 9094 	ldr.w	r9, [pc, #148]	; 401bc8 <xTaskGenericCreate.part.5+0x210>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401b36:	481a      	ldr	r0, [pc, #104]	; (401ba0 <xTaskGenericCreate.part.5+0x1e8>)
  401b38:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList1 );
  401b3a:	4640      	mov	r0, r8
  401b3c:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  401b3e:	4648      	mov	r0, r9
  401b40:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
  401b42:	4818      	ldr	r0, [pc, #96]	; (401ba4 <xTaskGenericCreate.part.5+0x1ec>)
  401b44:	47a8      	blx	r5
		vListInitialise( &xTasksWaitingTermination );
  401b46:	4818      	ldr	r0, [pc, #96]	; (401ba8 <xTaskGenericCreate.part.5+0x1f0>)
  401b48:	47a8      	blx	r5
		vListInitialise( &xSuspendedTaskList );
  401b4a:	4818      	ldr	r0, [pc, #96]	; (401bac <xTaskGenericCreate.part.5+0x1f4>)
  401b4c:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
  401b4e:	4a18      	ldr	r2, [pc, #96]	; (401bb0 <xTaskGenericCreate.part.5+0x1f8>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401b50:	4b18      	ldr	r3, [pc, #96]	; (401bb4 <xTaskGenericCreate.part.5+0x1fc>)
	pxDelayedTaskList = &xDelayedTaskList1;
  401b52:	f8c2 8000 	str.w	r8, [r2]
  401b56:	f8df 8060 	ldr.w	r8, [pc, #96]	; 401bb8 <xTaskGenericCreate.part.5+0x200>
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401b5a:	f8c3 9000 	str.w	r9, [r3]
  401b5e:	e78f      	b.n	401a80 <xTaskGenericCreate.part.5+0xc8>
  401b60:	00401009 	.word	0x00401009
  401b64:	00403645 	.word	0x00403645
  401b68:	00400c81 	.word	0x00400c81
  401b6c:	00400d69 	.word	0x00400d69
  401b70:	00400db9 	.word	0x00400db9
  401b74:	20400ac8 	.word	0x20400ac8
  401b78:	20400a58 	.word	0x20400a58
  401b7c:	00400c89 	.word	0x00400c89
  401b80:	00400e05 	.word	0x00400e05
  401b84:	e000ed04 	.word	0xe000ed04
  401b88:	0040103d 	.word	0x0040103d
  401b8c:	00400c69 	.word	0x00400c69
  401b90:	20400a64 	.word	0x20400a64
  401b94:	20400a78 	.word	0x20400a78
  401b98:	20400a8c 	.word	0x20400a8c
  401b9c:	20400aa0 	.word	0x20400aa0
  401ba0:	20400ab4 	.word	0x20400ab4
  401ba4:	20400b10 	.word	0x20400b10
  401ba8:	20400b3c 	.word	0x20400b3c
  401bac:	20400b28 	.word	0x20400b28
  401bb0:	20400a5c 	.word	0x20400a5c
  401bb4:	20400a60 	.word	0x20400a60
  401bb8:	20400b24 	.word	0x20400b24
  401bbc:	20400ad4 	.word	0x20400ad4
  401bc0:	20400adc 	.word	0x20400adc
  401bc4:	20400ae0 	.word	0x20400ae0
  401bc8:	20400af4 	.word	0x20400af4

00401bcc <prvTaskIsTaskSuspended.part.0>:
  401bcc:	f04f 0380 	mov.w	r3, #128	; 0x80
  401bd0:	b672      	cpsid	i
  401bd2:	f383 8811 	msr	BASEPRI, r3
  401bd6:	f3bf 8f6f 	isb	sy
  401bda:	f3bf 8f4f 	dsb	sy
  401bde:	b662      	cpsie	i
  401be0:	e7fe      	b.n	401be0 <prvTaskIsTaskSuspended.part.0+0x14>
  401be2:	bf00      	nop

00401be4 <xTaskGenericCreate>:
{
  401be4:	b470      	push	{r4, r5, r6}
  401be6:	ac03      	add	r4, sp, #12
  401be8:	cc70      	ldmia	r4, {r4, r5, r6}
	configASSERT( pxTaskCode );
  401bea:	b160      	cbz	r0, 401c06 <xTaskGenericCreate+0x22>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  401bec:	2c04      	cmp	r4, #4
  401bee:	d915      	bls.n	401c1c <xTaskGenericCreate+0x38>
  401bf0:	f04f 0380 	mov.w	r3, #128	; 0x80
  401bf4:	b672      	cpsid	i
  401bf6:	f383 8811 	msr	BASEPRI, r3
  401bfa:	f3bf 8f6f 	isb	sy
  401bfe:	f3bf 8f4f 	dsb	sy
  401c02:	b662      	cpsie	i
  401c04:	e7fe      	b.n	401c04 <xTaskGenericCreate+0x20>
  401c06:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c0a:	b672      	cpsid	i
  401c0c:	f383 8811 	msr	BASEPRI, r3
  401c10:	f3bf 8f6f 	isb	sy
  401c14:	f3bf 8f4f 	dsb	sy
  401c18:	b662      	cpsie	i
  401c1a:	e7fe      	b.n	401c1a <xTaskGenericCreate+0x36>
  401c1c:	9403      	str	r4, [sp, #12]
  401c1e:	4c03      	ldr	r4, [pc, #12]	; (401c2c <xTaskGenericCreate+0x48>)
  401c20:	9605      	str	r6, [sp, #20]
  401c22:	9504      	str	r5, [sp, #16]
  401c24:	46a4      	mov	ip, r4
}
  401c26:	bc70      	pop	{r4, r5, r6}
  401c28:	4760      	bx	ip
  401c2a:	bf00      	nop
  401c2c:	004019b9 	.word	0x004019b9

00401c30 <vTaskStartScheduler>:
{
  401c30:	b570      	push	{r4, r5, r6, lr}
  401c32:	2400      	movs	r4, #0
  401c34:	b084      	sub	sp, #16
  401c36:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401c3a:	4919      	ldr	r1, [pc, #100]	; (401ca0 <vTaskStartScheduler+0x70>)
  401c3c:	9402      	str	r4, [sp, #8]
  401c3e:	4623      	mov	r3, r4
  401c40:	9401      	str	r4, [sp, #4]
  401c42:	9400      	str	r4, [sp, #0]
  401c44:	4817      	ldr	r0, [pc, #92]	; (401ca4 <vTaskStartScheduler+0x74>)
  401c46:	4d18      	ldr	r5, [pc, #96]	; (401ca8 <vTaskStartScheduler+0x78>)
  401c48:	47a8      	blx	r5
		if( xReturn == pdPASS )
  401c4a:	2801      	cmp	r0, #1
  401c4c:	d00d      	beq.n	401c6a <vTaskStartScheduler+0x3a>
		configASSERT( xReturn );
  401c4e:	b950      	cbnz	r0, 401c66 <vTaskStartScheduler+0x36>
  401c50:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c54:	b672      	cpsid	i
  401c56:	f383 8811 	msr	BASEPRI, r3
  401c5a:	f3bf 8f6f 	isb	sy
  401c5e:	f3bf 8f4f 	dsb	sy
  401c62:	b662      	cpsie	i
  401c64:	e7fe      	b.n	401c64 <vTaskStartScheduler+0x34>
}
  401c66:	b004      	add	sp, #16
  401c68:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xTimerCreateTimerTask();
  401c6a:	4b10      	ldr	r3, [pc, #64]	; (401cac <vTaskStartScheduler+0x7c>)
  401c6c:	4798      	blx	r3
	if( xReturn == pdPASS )
  401c6e:	2801      	cmp	r0, #1
  401c70:	d1ed      	bne.n	401c4e <vTaskStartScheduler+0x1e>
  401c72:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c76:	b672      	cpsid	i
  401c78:	f383 8811 	msr	BASEPRI, r3
  401c7c:	f3bf 8f6f 	isb	sy
  401c80:	f3bf 8f4f 	dsb	sy
  401c84:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  401c86:	4d0a      	ldr	r5, [pc, #40]	; (401cb0 <vTaskStartScheduler+0x80>)
  401c88:	f04f 36ff 	mov.w	r6, #4294967295
		xSchedulerRunning = pdTRUE;
  401c8c:	4909      	ldr	r1, [pc, #36]	; (401cb4 <vTaskStartScheduler+0x84>)
		xTickCount = ( TickType_t ) 0U;
  401c8e:	4a0a      	ldr	r2, [pc, #40]	; (401cb8 <vTaskStartScheduler+0x88>)
		if( xPortStartScheduler() != pdFALSE )
  401c90:	4b0a      	ldr	r3, [pc, #40]	; (401cbc <vTaskStartScheduler+0x8c>)
		xNextTaskUnblockTime = portMAX_DELAY;
  401c92:	602e      	str	r6, [r5, #0]
		xSchedulerRunning = pdTRUE;
  401c94:	6008      	str	r0, [r1, #0]
		xTickCount = ( TickType_t ) 0U;
  401c96:	6014      	str	r4, [r2, #0]
}
  401c98:	b004      	add	sp, #16
  401c9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if( xPortStartScheduler() != pdFALSE )
  401c9e:	4718      	bx	r3
  401ca0:	00405ea4 	.word	0x00405ea4
  401ca4:	00402001 	.word	0x00402001
  401ca8:	004019b9 	.word	0x004019b9
  401cac:	00402641 	.word	0x00402641
  401cb0:	20400b08 	.word	0x20400b08
  401cb4:	20400b24 	.word	0x20400b24
  401cb8:	20400b50 	.word	0x20400b50
  401cbc:	00400eed 	.word	0x00400eed

00401cc0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  401cc0:	4a02      	ldr	r2, [pc, #8]	; (401ccc <vTaskSuspendAll+0xc>)
  401cc2:	6813      	ldr	r3, [r2, #0]
  401cc4:	3301      	adds	r3, #1
  401cc6:	6013      	str	r3, [r2, #0]
  401cc8:	4770      	bx	lr
  401cca:	bf00      	nop
  401ccc:	20400ad0 	.word	0x20400ad0

00401cd0 <xTaskGetTickCount>:
		xTicks = xTickCount;
  401cd0:	4b01      	ldr	r3, [pc, #4]	; (401cd8 <xTaskGetTickCount+0x8>)
  401cd2:	6818      	ldr	r0, [r3, #0]
}
  401cd4:	4770      	bx	lr
  401cd6:	bf00      	nop
  401cd8:	20400b50 	.word	0x20400b50

00401cdc <xTaskIncrementTick>:
{
  401cdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401ce0:	4b4c      	ldr	r3, [pc, #304]	; (401e14 <xTaskIncrementTick+0x138>)
  401ce2:	681b      	ldr	r3, [r3, #0]
  401ce4:	2b00      	cmp	r3, #0
  401ce6:	d170      	bne.n	401dca <xTaskIncrementTick+0xee>
		++xTickCount;
  401ce8:	4b4b      	ldr	r3, [pc, #300]	; (401e18 <xTaskIncrementTick+0x13c>)
  401cea:	681a      	ldr	r2, [r3, #0]
  401cec:	3201      	adds	r2, #1
  401cee:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  401cf0:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  401cf2:	2e00      	cmp	r6, #0
  401cf4:	d05a      	beq.n	401dac <xTaskIncrementTick+0xd0>
  401cf6:	f8df a150 	ldr.w	sl, [pc, #336]	; 401e48 <xTaskIncrementTick+0x16c>
			if( xConstTickCount >= xNextTaskUnblockTime )
  401cfa:	f8da 2000 	ldr.w	r2, [sl]
  401cfe:	2400      	movs	r4, #0
  401d00:	4296      	cmp	r6, r2
  401d02:	d36a      	bcc.n	401dda <xTaskIncrementTick+0xfe>
  401d04:	4d45      	ldr	r5, [pc, #276]	; (401e1c <xTaskIncrementTick+0x140>)
  401d06:	4f46      	ldr	r7, [pc, #280]	; (401e20 <xTaskIncrementTick+0x144>)
  401d08:	f8df 8140 	ldr.w	r8, [pc, #320]	; 401e4c <xTaskIncrementTick+0x170>
  401d0c:	e02f      	b.n	401d6e <xTaskIncrementTick+0x92>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401d0e:	682a      	ldr	r2, [r5, #0]
  401d10:	68d2      	ldr	r2, [r2, #12]
  401d12:	f8d2 900c 	ldr.w	r9, [r2, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  401d16:	f8d9 1004 	ldr.w	r1, [r9, #4]
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401d1a:	f109 0b04 	add.w	fp, r9, #4
						if( xConstTickCount < xItemValue )
  401d1e:	428e      	cmp	r6, r1
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401d20:	4658      	mov	r0, fp
						if( xConstTickCount < xItemValue )
  401d22:	d36d      	bcc.n	401e00 <xTaskIncrementTick+0x124>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401d24:	4b3f      	ldr	r3, [pc, #252]	; (401e24 <xTaskIncrementTick+0x148>)
  401d26:	4798      	blx	r3
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401d28:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401d2c:	f109 0018 	add.w	r0, r9, #24
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401d30:	b109      	cbz	r1, 401d36 <xTaskIncrementTick+0x5a>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401d32:	4b3c      	ldr	r3, [pc, #240]	; (401e24 <xTaskIncrementTick+0x148>)
  401d34:	4798      	blx	r3
						prvAddTaskToReadyList( pxTCB );
  401d36:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
  401d3a:	f04f 0e01 	mov.w	lr, #1
  401d3e:	4b3a      	ldr	r3, [pc, #232]	; (401e28 <xTaskIncrementTick+0x14c>)
  401d40:	4659      	mov	r1, fp
  401d42:	fa0e fe00 	lsl.w	lr, lr, r0
  401d46:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401d4a:	681b      	ldr	r3, [r3, #0]
  401d4c:	eb07 0080 	add.w	r0, r7, r0, lsl #2
  401d50:	ea4e 0e03 	orr.w	lr, lr, r3
  401d54:	4b34      	ldr	r3, [pc, #208]	; (401e28 <xTaskIncrementTick+0x14c>)
  401d56:	f8c3 e000 	str.w	lr, [r3]
  401d5a:	4b34      	ldr	r3, [pc, #208]	; (401e2c <xTaskIncrementTick+0x150>)
  401d5c:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401d5e:	f8d8 0000 	ldr.w	r0, [r8]
  401d62:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
  401d66:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  401d68:	4291      	cmp	r1, r2
  401d6a:	bf28      	it	cs
  401d6c:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401d6e:	682a      	ldr	r2, [r5, #0]
  401d70:	6812      	ldr	r2, [r2, #0]
  401d72:	2a00      	cmp	r2, #0
  401d74:	d1cb      	bne.n	401d0e <xTaskIncrementTick+0x32>
						xNextTaskUnblockTime = portMAX_DELAY;
  401d76:	f04f 32ff 	mov.w	r2, #4294967295
  401d7a:	f8ca 2000 	str.w	r2, [sl]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  401d7e:	f8d8 3000 	ldr.w	r3, [r8]
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  401d82:	4a2b      	ldr	r2, [pc, #172]	; (401e30 <xTaskIncrementTick+0x154>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  401d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  401d86:	6812      	ldr	r2, [r2, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  401d88:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401d8c:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  401d90:	2b02      	cmp	r3, #2
  401d92:	bf28      	it	cs
  401d94:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  401d96:	b90a      	cbnz	r2, 401d9c <xTaskIncrementTick+0xc0>
				vApplicationTickHook();
  401d98:	4b26      	ldr	r3, [pc, #152]	; (401e34 <xTaskIncrementTick+0x158>)
  401d9a:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  401d9c:	4b26      	ldr	r3, [pc, #152]	; (401e38 <xTaskIncrementTick+0x15c>)
  401d9e:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  401da0:	2b00      	cmp	r3, #0
  401da2:	bf18      	it	ne
  401da4:	2401      	movne	r4, #1
}
  401da6:	4620      	mov	r0, r4
  401da8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				taskSWITCH_DELAYED_LISTS();
  401dac:	4d1b      	ldr	r5, [pc, #108]	; (401e1c <xTaskIncrementTick+0x140>)
  401dae:	682b      	ldr	r3, [r5, #0]
  401db0:	681b      	ldr	r3, [r3, #0]
  401db2:	b1b3      	cbz	r3, 401de2 <xTaskIncrementTick+0x106>
  401db4:	f04f 0380 	mov.w	r3, #128	; 0x80
  401db8:	b672      	cpsid	i
  401dba:	f383 8811 	msr	BASEPRI, r3
  401dbe:	f3bf 8f6f 	isb	sy
  401dc2:	f3bf 8f4f 	dsb	sy
  401dc6:	b662      	cpsie	i
  401dc8:	e7fe      	b.n	401dc8 <xTaskIncrementTick+0xec>
		++uxPendedTicks;
  401dca:	4a19      	ldr	r2, [pc, #100]	; (401e30 <xTaskIncrementTick+0x154>)
BaseType_t xSwitchRequired = pdFALSE;
  401dcc:	2400      	movs	r4, #0
			vApplicationTickHook();
  401dce:	4919      	ldr	r1, [pc, #100]	; (401e34 <xTaskIncrementTick+0x158>)
		++uxPendedTicks;
  401dd0:	6813      	ldr	r3, [r2, #0]
  401dd2:	3301      	adds	r3, #1
  401dd4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  401dd6:	4788      	blx	r1
  401dd8:	e7e0      	b.n	401d9c <xTaskIncrementTick+0xc0>
  401dda:	4f11      	ldr	r7, [pc, #68]	; (401e20 <xTaskIncrementTick+0x144>)
  401ddc:	f8df 806c 	ldr.w	r8, [pc, #108]	; 401e4c <xTaskIncrementTick+0x170>
  401de0:	e7cd      	b.n	401d7e <xTaskIncrementTick+0xa2>
				taskSWITCH_DELAYED_LISTS();
  401de2:	4b16      	ldr	r3, [pc, #88]	; (401e3c <xTaskIncrementTick+0x160>)
  401de4:	6829      	ldr	r1, [r5, #0]
  401de6:	4a16      	ldr	r2, [pc, #88]	; (401e40 <xTaskIncrementTick+0x164>)
  401de8:	6818      	ldr	r0, [r3, #0]
  401dea:	6028      	str	r0, [r5, #0]
  401dec:	6019      	str	r1, [r3, #0]
  401dee:	6813      	ldr	r3, [r2, #0]
  401df0:	3301      	adds	r3, #1
  401df2:	6013      	str	r3, [r2, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401df4:	682b      	ldr	r3, [r5, #0]
  401df6:	681b      	ldr	r3, [r3, #0]
  401df8:	b12b      	cbz	r3, 401e06 <xTaskIncrementTick+0x12a>
  401dfa:	4b12      	ldr	r3, [pc, #72]	; (401e44 <xTaskIncrementTick+0x168>)
  401dfc:	4798      	blx	r3
  401dfe:	e77a      	b.n	401cf6 <xTaskIncrementTick+0x1a>
							xNextTaskUnblockTime = xItemValue;
  401e00:	f8ca 1000 	str.w	r1, [sl]
							break;
  401e04:	e7bb      	b.n	401d7e <xTaskIncrementTick+0xa2>
		xNextTaskUnblockTime = portMAX_DELAY;
  401e06:	f8df a040 	ldr.w	sl, [pc, #64]	; 401e48 <xTaskIncrementTick+0x16c>
  401e0a:	f04f 32ff 	mov.w	r2, #4294967295
  401e0e:	f8ca 2000 	str.w	r2, [sl]
  401e12:	e772      	b.n	401cfa <xTaskIncrementTick+0x1e>
  401e14:	20400ad0 	.word	0x20400ad0
  401e18:	20400b50 	.word	0x20400b50
  401e1c:	20400a5c 	.word	0x20400a5c
  401e20:	20400a64 	.word	0x20400a64
  401e24:	00400cd5 	.word	0x00400cd5
  401e28:	20400adc 	.word	0x20400adc
  401e2c:	00400c89 	.word	0x00400c89
  401e30:	20400acc 	.word	0x20400acc
  401e34:	00402cc1 	.word	0x00402cc1
  401e38:	20400b54 	.word	0x20400b54
  401e3c:	20400a60 	.word	0x20400a60
  401e40:	20400b0c 	.word	0x20400b0c
  401e44:	00401951 	.word	0x00401951
  401e48:	20400b08 	.word	0x20400b08
  401e4c:	20400a58 	.word	0x20400a58

00401e50 <xTaskResumeAll>:
{
  401e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
  401e54:	4c38      	ldr	r4, [pc, #224]	; (401f38 <xTaskResumeAll+0xe8>)
{
  401e56:	b083      	sub	sp, #12
	configASSERT( uxSchedulerSuspended );
  401e58:	6823      	ldr	r3, [r4, #0]
  401e5a:	b953      	cbnz	r3, 401e72 <xTaskResumeAll+0x22>
  401e5c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e60:	b672      	cpsid	i
  401e62:	f383 8811 	msr	BASEPRI, r3
  401e66:	f3bf 8f6f 	isb	sy
  401e6a:	f3bf 8f4f 	dsb	sy
  401e6e:	b662      	cpsie	i
  401e70:	e7fe      	b.n	401e70 <xTaskResumeAll+0x20>
	taskENTER_CRITICAL();
  401e72:	4b32      	ldr	r3, [pc, #200]	; (401f3c <xTaskResumeAll+0xec>)
  401e74:	4798      	blx	r3
		--uxSchedulerSuspended;
  401e76:	6823      	ldr	r3, [r4, #0]
  401e78:	3b01      	subs	r3, #1
  401e7a:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401e7c:	6823      	ldr	r3, [r4, #0]
  401e7e:	2b00      	cmp	r3, #0
  401e80:	d137      	bne.n	401ef2 <xTaskResumeAll+0xa2>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  401e82:	4b2f      	ldr	r3, [pc, #188]	; (401f40 <xTaskResumeAll+0xf0>)
  401e84:	681b      	ldr	r3, [r3, #0]
  401e86:	2b00      	cmp	r3, #0
  401e88:	d033      	beq.n	401ef2 <xTaskResumeAll+0xa2>
  401e8a:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 401f64 <xTaskResumeAll+0x114>
  401e8e:	4b2d      	ldr	r3, [pc, #180]	; (401f44 <xTaskResumeAll+0xf4>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401e90:	4e2d      	ldr	r6, [pc, #180]	; (401f48 <xTaskResumeAll+0xf8>)
					prvAddTaskToReadyList( pxTCB );
  401e92:	4d2e      	ldr	r5, [pc, #184]	; (401f4c <xTaskResumeAll+0xfc>)
  401e94:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 401f68 <xTaskResumeAll+0x118>
  401e98:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 401f6c <xTaskResumeAll+0x11c>
  401e9c:	e01e      	b.n	401edc <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  401e9e:	68da      	ldr	r2, [r3, #12]
  401ea0:	9301      	str	r3, [sp, #4]
  401ea2:	68d4      	ldr	r4, [r2, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401ea4:	f104 0804 	add.w	r8, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401ea8:	f104 0018 	add.w	r0, r4, #24
  401eac:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401eae:	4640      	mov	r0, r8
  401eb0:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  401eb2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401eb4:	f8d5 e000 	ldr.w	lr, [r5]
  401eb8:	4641      	mov	r1, r8
  401eba:	fa07 f200 	lsl.w	r2, r7, r0
  401ebe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401ec2:	ea42 020e 	orr.w	r2, r2, lr
  401ec6:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
  401eca:	602a      	str	r2, [r5, #0]
  401ecc:	47c8      	blx	r9
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401ece:	4a20      	ldr	r2, [pc, #128]	; (401f50 <xTaskResumeAll+0x100>)
  401ed0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  401ed2:	6812      	ldr	r2, [r2, #0]
  401ed4:	9b01      	ldr	r3, [sp, #4]
  401ed6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  401ed8:	4291      	cmp	r1, r2
  401eda:	d211      	bcs.n	401f00 <xTaskResumeAll+0xb0>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401edc:	681a      	ldr	r2, [r3, #0]
					prvAddTaskToReadyList( pxTCB );
  401ede:	2701      	movs	r7, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401ee0:	2a00      	cmp	r2, #0
  401ee2:	d1dc      	bne.n	401e9e <xTaskResumeAll+0x4e>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  401ee4:	4c1b      	ldr	r4, [pc, #108]	; (401f54 <xTaskResumeAll+0x104>)
  401ee6:	6823      	ldr	r3, [r4, #0]
  401ee8:	b96b      	cbnz	r3, 401f06 <xTaskResumeAll+0xb6>
				if( xYieldPending == pdTRUE )
  401eea:	f8db 4000 	ldr.w	r4, [fp]
  401eee:	2c01      	cmp	r4, #1
  401ef0:	d019      	beq.n	401f26 <xTaskResumeAll+0xd6>
BaseType_t xAlreadyYielded = pdFALSE;
  401ef2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  401ef4:	4b18      	ldr	r3, [pc, #96]	; (401f58 <xTaskResumeAll+0x108>)
  401ef6:	4798      	blx	r3
}
  401ef8:	4620      	mov	r0, r4
  401efa:	b003      	add	sp, #12
  401efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						xYieldPending = pdTRUE;
  401f00:	f8cb 7000 	str.w	r7, [fp]
  401f04:	e7ea      	b.n	401edc <xTaskResumeAll+0x8c>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401f06:	6823      	ldr	r3, [r4, #0]
  401f08:	2b00      	cmp	r3, #0
  401f0a:	d0ee      	beq.n	401eea <xTaskResumeAll+0x9a>
  401f0c:	4e13      	ldr	r6, [pc, #76]	; (401f5c <xTaskResumeAll+0x10c>)
							xYieldPending = pdTRUE;
  401f0e:	2501      	movs	r5, #1
						if( xTaskIncrementTick() != pdFALSE )
  401f10:	47b0      	blx	r6
  401f12:	b108      	cbz	r0, 401f18 <xTaskResumeAll+0xc8>
							xYieldPending = pdTRUE;
  401f14:	f8cb 5000 	str.w	r5, [fp]
						--uxPendedTicks;
  401f18:	6823      	ldr	r3, [r4, #0]
  401f1a:	3b01      	subs	r3, #1
  401f1c:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401f1e:	6823      	ldr	r3, [r4, #0]
  401f20:	2b00      	cmp	r3, #0
  401f22:	d1f5      	bne.n	401f10 <xTaskResumeAll+0xc0>
  401f24:	e7e1      	b.n	401eea <xTaskResumeAll+0x9a>
					taskYIELD_IF_USING_PREEMPTION();
  401f26:	4b0e      	ldr	r3, [pc, #56]	; (401f60 <xTaskResumeAll+0x110>)
  401f28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401f2c:	601a      	str	r2, [r3, #0]
  401f2e:	f3bf 8f4f 	dsb	sy
  401f32:	f3bf 8f6f 	isb	sy
  401f36:	e7dd      	b.n	401ef4 <xTaskResumeAll+0xa4>
  401f38:	20400ad0 	.word	0x20400ad0
  401f3c:	00400db9 	.word	0x00400db9
  401f40:	20400ac8 	.word	0x20400ac8
  401f44:	20400b10 	.word	0x20400b10
  401f48:	00400cd5 	.word	0x00400cd5
  401f4c:	20400adc 	.word	0x20400adc
  401f50:	20400a58 	.word	0x20400a58
  401f54:	20400acc 	.word	0x20400acc
  401f58:	00400e05 	.word	0x00400e05
  401f5c:	00401cdd 	.word	0x00401cdd
  401f60:	e000ed04 	.word	0xe000ed04
  401f64:	20400b54 	.word	0x20400b54
  401f68:	20400a64 	.word	0x20400a64
  401f6c:	00400c89 	.word	0x00400c89

00401f70 <vTaskDelay>:
	{
  401f70:	b538      	push	{r3, r4, r5, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  401f72:	b168      	cbz	r0, 401f90 <vTaskDelay+0x20>
			configASSERT( uxSchedulerSuspended == 0 );
  401f74:	4b1a      	ldr	r3, [pc, #104]	; (401fe0 <vTaskDelay+0x70>)
  401f76:	681a      	ldr	r2, [r3, #0]
  401f78:	b19a      	cbz	r2, 401fa2 <vTaskDelay+0x32>
  401f7a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f7e:	b672      	cpsid	i
  401f80:	f383 8811 	msr	BASEPRI, r3
  401f84:	f3bf 8f6f 	isb	sy
  401f88:	f3bf 8f4f 	dsb	sy
  401f8c:	b662      	cpsie	i
  401f8e:	e7fe      	b.n	401f8e <vTaskDelay+0x1e>
			portYIELD_WITHIN_API();
  401f90:	4b14      	ldr	r3, [pc, #80]	; (401fe4 <vTaskDelay+0x74>)
  401f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401f96:	601a      	str	r2, [r3, #0]
  401f98:	f3bf 8f4f 	dsb	sy
  401f9c:	f3bf 8f6f 	isb	sy
  401fa0:	bd38      	pop	{r3, r4, r5, pc}
	++uxSchedulerSuspended;
  401fa2:	681a      	ldr	r2, [r3, #0]
  401fa4:	4604      	mov	r4, r0
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401fa6:	4d10      	ldr	r5, [pc, #64]	; (401fe8 <vTaskDelay+0x78>)
				xTimeToWake = xTickCount + xTicksToDelay;
  401fa8:	4810      	ldr	r0, [pc, #64]	; (401fec <vTaskDelay+0x7c>)
	++uxSchedulerSuspended;
  401faa:	3201      	adds	r2, #1
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401fac:	4910      	ldr	r1, [pc, #64]	; (401ff0 <vTaskDelay+0x80>)
	++uxSchedulerSuspended;
  401fae:	601a      	str	r2, [r3, #0]
				xTimeToWake = xTickCount + xTicksToDelay;
  401fb0:	6803      	ldr	r3, [r0, #0]
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401fb2:	6828      	ldr	r0, [r5, #0]
				xTimeToWake = xTickCount + xTicksToDelay;
  401fb4:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401fb6:	3004      	adds	r0, #4
  401fb8:	4788      	blx	r1
  401fba:	b940      	cbnz	r0, 401fce <vTaskDelay+0x5e>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401fbc:	682b      	ldr	r3, [r5, #0]
  401fbe:	2201      	movs	r2, #1
  401fc0:	490c      	ldr	r1, [pc, #48]	; (401ff4 <vTaskDelay+0x84>)
  401fc2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  401fc4:	680b      	ldr	r3, [r1, #0]
  401fc6:	4082      	lsls	r2, r0
  401fc8:	ea23 0302 	bic.w	r3, r3, r2
  401fcc:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  401fce:	4b0a      	ldr	r3, [pc, #40]	; (401ff8 <vTaskDelay+0x88>)
  401fd0:	4620      	mov	r0, r4
  401fd2:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  401fd4:	4b09      	ldr	r3, [pc, #36]	; (401ffc <vTaskDelay+0x8c>)
  401fd6:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  401fd8:	2800      	cmp	r0, #0
  401fda:	d0d9      	beq.n	401f90 <vTaskDelay+0x20>
  401fdc:	bd38      	pop	{r3, r4, r5, pc}
  401fde:	bf00      	nop
  401fe0:	20400ad0 	.word	0x20400ad0
  401fe4:	e000ed04 	.word	0xe000ed04
  401fe8:	20400a58 	.word	0x20400a58
  401fec:	20400b50 	.word	0x20400b50
  401ff0:	00400cd5 	.word	0x00400cd5
  401ff4:	20400adc 	.word	0x20400adc
  401ff8:	00401969 	.word	0x00401969
  401ffc:	00401e51 	.word	0x00401e51

00402000 <prvIdleTask>:
{
  402000:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
  402004:	4c1e      	ldr	r4, [pc, #120]	; (402080 <prvIdleTask+0x80>)
  402006:	4e1f      	ldr	r6, [pc, #124]	; (402084 <prvIdleTask+0x84>)
  402008:	4f1f      	ldr	r7, [pc, #124]	; (402088 <prvIdleTask+0x88>)
  40200a:	f8df 9094 	ldr.w	r9, [pc, #148]	; 4020a0 <prvIdleTask+0xa0>
  40200e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 4020a4 <prvIdleTask+0xa4>
  402012:	4d1e      	ldr	r5, [pc, #120]	; (40208c <prvIdleTask+0x8c>)
  402014:	f8df a090 	ldr.w	sl, [pc, #144]	; 4020a8 <prvIdleTask+0xa8>
  402018:	e008      	b.n	40202c <prvIdleTask+0x2c>
	++uxSchedulerSuspended;
  40201a:	6823      	ldr	r3, [r4, #0]
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  40201c:	f8d6 b000 	ldr.w	fp, [r6]
	++uxSchedulerSuspended;
  402020:	3301      	adds	r3, #1
  402022:	6023      	str	r3, [r4, #0]
			( void ) xTaskResumeAll();
  402024:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  402026:	f1bb 0f00 	cmp.w	fp, #0
  40202a:	d10f      	bne.n	40204c <prvIdleTask+0x4c>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  40202c:	682b      	ldr	r3, [r5, #0]
  40202e:	2b00      	cmp	r3, #0
  402030:	d1f3      	bne.n	40201a <prvIdleTask+0x1a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  402032:	f8da 3000 	ldr.w	r3, [sl]
  402036:	2b01      	cmp	r3, #1
  402038:	d9f8      	bls.n	40202c <prvIdleTask+0x2c>
				taskYIELD();
  40203a:	4b15      	ldr	r3, [pc, #84]	; (402090 <prvIdleTask+0x90>)
  40203c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402040:	601a      	str	r2, [r3, #0]
  402042:	f3bf 8f4f 	dsb	sy
  402046:	f3bf 8f6f 	isb	sy
  40204a:	e7ef      	b.n	40202c <prvIdleTask+0x2c>
				taskENTER_CRITICAL();
  40204c:	4b11      	ldr	r3, [pc, #68]	; (402094 <prvIdleTask+0x94>)
  40204e:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  402050:	68f3      	ldr	r3, [r6, #12]
  402052:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402056:	4b10      	ldr	r3, [pc, #64]	; (402098 <prvIdleTask+0x98>)
  402058:	f10b 0004 	add.w	r0, fp, #4
  40205c:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  40205e:	f8d9 3000 	ldr.w	r3, [r9]
  402062:	3b01      	subs	r3, #1
  402064:	f8c9 3000 	str.w	r3, [r9]
					--uxTasksDeleted;
  402068:	682b      	ldr	r3, [r5, #0]
  40206a:	3b01      	subs	r3, #1
  40206c:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  40206e:	4b0b      	ldr	r3, [pc, #44]	; (40209c <prvIdleTask+0x9c>)
  402070:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  402072:	f8db 0030 	ldr.w	r0, [fp, #48]	; 0x30
  402076:	47c0      	blx	r8
		vPortFree( pxTCB );
  402078:	4658      	mov	r0, fp
  40207a:	47c0      	blx	r8
  40207c:	e7d6      	b.n	40202c <prvIdleTask+0x2c>
  40207e:	bf00      	nop
  402080:	20400ad0 	.word	0x20400ad0
  402084:	20400b3c 	.word	0x20400b3c
  402088:	00401e51 	.word	0x00401e51
  40208c:	20400ad8 	.word	0x20400ad8
  402090:	e000ed04 	.word	0xe000ed04
  402094:	00400db9 	.word	0x00400db9
  402098:	00400cd5 	.word	0x00400cd5
  40209c:	00400e05 	.word	0x00400e05
  4020a0:	20400ac8 	.word	0x20400ac8
  4020a4:	0040103d 	.word	0x0040103d
  4020a8:	20400a64 	.word	0x20400a64

004020ac <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  4020ac:	4b25      	ldr	r3, [pc, #148]	; (402144 <vTaskSwitchContext+0x98>)
  4020ae:	681b      	ldr	r3, [r3, #0]
  4020b0:	2b00      	cmp	r3, #0
  4020b2:	d135      	bne.n	402120 <vTaskSwitchContext+0x74>
		xYieldPending = pdFALSE;
  4020b4:	4a24      	ldr	r2, [pc, #144]	; (402148 <vTaskSwitchContext+0x9c>)
{
  4020b6:	b510      	push	{r4, lr}
		taskCHECK_FOR_STACK_OVERFLOW();
  4020b8:	4c24      	ldr	r4, [pc, #144]	; (40214c <vTaskSwitchContext+0xa0>)
		xYieldPending = pdFALSE;
  4020ba:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  4020bc:	6823      	ldr	r3, [r4, #0]
  4020be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4020c0:	681a      	ldr	r2, [r3, #0]
  4020c2:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4020c6:	d103      	bne.n	4020d0 <vTaskSwitchContext+0x24>
  4020c8:	685a      	ldr	r2, [r3, #4]
  4020ca:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4020ce:	d02b      	beq.n	402128 <vTaskSwitchContext+0x7c>
  4020d0:	6820      	ldr	r0, [r4, #0]
  4020d2:	6821      	ldr	r1, [r4, #0]
  4020d4:	4b1e      	ldr	r3, [pc, #120]	; (402150 <vTaskSwitchContext+0xa4>)
  4020d6:	3134      	adds	r1, #52	; 0x34
  4020d8:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4020da:	4b1e      	ldr	r3, [pc, #120]	; (402154 <vTaskSwitchContext+0xa8>)
  4020dc:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  4020de:	fab3 f383 	clz	r3, r3
  4020e2:	b2db      	uxtb	r3, r3
  4020e4:	4a1c      	ldr	r2, [pc, #112]	; (402158 <vTaskSwitchContext+0xac>)
  4020e6:	f1c3 031f 	rsb	r3, r3, #31
  4020ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4020ee:	009b      	lsls	r3, r3, #2
  4020f0:	58d0      	ldr	r0, [r2, r3]
  4020f2:	18d1      	adds	r1, r2, r3
  4020f4:	b950      	cbnz	r0, 40210c <vTaskSwitchContext+0x60>
	__asm volatile
  4020f6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020fa:	b672      	cpsid	i
  4020fc:	f383 8811 	msr	BASEPRI, r3
  402100:	f3bf 8f6f 	isb	sy
  402104:	f3bf 8f4f 	dsb	sy
  402108:	b662      	cpsie	i
  40210a:	e7fe      	b.n	40210a <vTaskSwitchContext+0x5e>
  40210c:	3308      	adds	r3, #8
  40210e:	6848      	ldr	r0, [r1, #4]
  402110:	441a      	add	r2, r3
  402112:	6843      	ldr	r3, [r0, #4]
  402114:	4293      	cmp	r3, r2
  402116:	604b      	str	r3, [r1, #4]
  402118:	d00f      	beq.n	40213a <vTaskSwitchContext+0x8e>
  40211a:	68db      	ldr	r3, [r3, #12]
  40211c:	6023      	str	r3, [r4, #0]
  40211e:	bd10      	pop	{r4, pc}
		xYieldPending = pdTRUE;
  402120:	4b09      	ldr	r3, [pc, #36]	; (402148 <vTaskSwitchContext+0x9c>)
  402122:	2201      	movs	r2, #1
  402124:	601a      	str	r2, [r3, #0]
  402126:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  402128:	689a      	ldr	r2, [r3, #8]
  40212a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  40212e:	d1cf      	bne.n	4020d0 <vTaskSwitchContext+0x24>
  402130:	68db      	ldr	r3, [r3, #12]
  402132:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  402136:	d1cb      	bne.n	4020d0 <vTaskSwitchContext+0x24>
  402138:	e7cf      	b.n	4020da <vTaskSwitchContext+0x2e>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  40213a:	685b      	ldr	r3, [r3, #4]
  40213c:	604b      	str	r3, [r1, #4]
  40213e:	68db      	ldr	r3, [r3, #12]
  402140:	6023      	str	r3, [r4, #0]
  402142:	bd10      	pop	{r4, pc}
  402144:	20400ad0 	.word	0x20400ad0
  402148:	20400b54 	.word	0x20400b54
  40214c:	20400a58 	.word	0x20400a58
  402150:	00402ca9 	.word	0x00402ca9
  402154:	20400adc 	.word	0x20400adc
  402158:	20400a64 	.word	0x20400a64

0040215c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
  40215c:	b1e8      	cbz	r0, 40219a <vTaskPlaceOnEventList+0x3e>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  40215e:	4b18      	ldr	r3, [pc, #96]	; (4021c0 <vTaskPlaceOnEventList+0x64>)
{
  402160:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402162:	4d18      	ldr	r5, [pc, #96]	; (4021c4 <vTaskPlaceOnEventList+0x68>)
  402164:	460c      	mov	r4, r1
  402166:	6829      	ldr	r1, [r5, #0]
  402168:	3118      	adds	r1, #24
  40216a:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40216c:	6828      	ldr	r0, [r5, #0]
  40216e:	4b16      	ldr	r3, [pc, #88]	; (4021c8 <vTaskPlaceOnEventList+0x6c>)
  402170:	3004      	adds	r0, #4
  402172:	4798      	blx	r3
  402174:	b940      	cbnz	r0, 402188 <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402176:	682b      	ldr	r3, [r5, #0]
  402178:	2201      	movs	r2, #1
  40217a:	4914      	ldr	r1, [pc, #80]	; (4021cc <vTaskPlaceOnEventList+0x70>)
  40217c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  40217e:	680b      	ldr	r3, [r1, #0]
  402180:	4082      	lsls	r2, r0
  402182:	ea23 0302 	bic.w	r3, r3, r2
  402186:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  402188:	1c63      	adds	r3, r4, #1
  40218a:	d011      	beq.n	4021b0 <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  40218c:	4a10      	ldr	r2, [pc, #64]	; (4021d0 <vTaskPlaceOnEventList+0x74>)
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  40218e:	4b11      	ldr	r3, [pc, #68]	; (4021d4 <vTaskPlaceOnEventList+0x78>)
			xTimeToWake = xTickCount + xTicksToWait;
  402190:	6810      	ldr	r0, [r2, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  402192:	4420      	add	r0, r4
}
  402194:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  402198:	4718      	bx	r3
  40219a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40219e:	b672      	cpsid	i
  4021a0:	f383 8811 	msr	BASEPRI, r3
  4021a4:	f3bf 8f6f 	isb	sy
  4021a8:	f3bf 8f4f 	dsb	sy
  4021ac:	b662      	cpsie	i
  4021ae:	e7fe      	b.n	4021ae <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4021b0:	6829      	ldr	r1, [r5, #0]
  4021b2:	4809      	ldr	r0, [pc, #36]	; (4021d8 <vTaskPlaceOnEventList+0x7c>)
  4021b4:	3104      	adds	r1, #4
  4021b6:	4b09      	ldr	r3, [pc, #36]	; (4021dc <vTaskPlaceOnEventList+0x80>)
}
  4021b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4021bc:	4718      	bx	r3
  4021be:	bf00      	nop
  4021c0:	00400ca1 	.word	0x00400ca1
  4021c4:	20400a58 	.word	0x20400a58
  4021c8:	00400cd5 	.word	0x00400cd5
  4021cc:	20400adc 	.word	0x20400adc
  4021d0:	20400b50 	.word	0x20400b50
  4021d4:	00401969 	.word	0x00401969
  4021d8:	20400b28 	.word	0x20400b28
  4021dc:	00400c89 	.word	0x00400c89

004021e0 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  4021e0:	b1f8      	cbz	r0, 402222 <vTaskPlaceOnEventListRestricted+0x42>
	{
  4021e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4021e6:	4c18      	ldr	r4, [pc, #96]	; (402248 <vTaskPlaceOnEventListRestricted+0x68>)
  4021e8:	460d      	mov	r5, r1
  4021ea:	4f18      	ldr	r7, [pc, #96]	; (40224c <vTaskPlaceOnEventListRestricted+0x6c>)
  4021ec:	4616      	mov	r6, r2
  4021ee:	6821      	ldr	r1, [r4, #0]
  4021f0:	3118      	adds	r1, #24
  4021f2:	47b8      	blx	r7
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4021f4:	6820      	ldr	r0, [r4, #0]
  4021f6:	4b16      	ldr	r3, [pc, #88]	; (402250 <vTaskPlaceOnEventListRestricted+0x70>)
  4021f8:	3004      	adds	r0, #4
  4021fa:	4798      	blx	r3
  4021fc:	b940      	cbnz	r0, 402210 <vTaskPlaceOnEventListRestricted+0x30>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4021fe:	6823      	ldr	r3, [r4, #0]
  402200:	2201      	movs	r2, #1
  402202:	4914      	ldr	r1, [pc, #80]	; (402254 <vTaskPlaceOnEventListRestricted+0x74>)
  402204:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  402206:	680b      	ldr	r3, [r1, #0]
  402208:	4082      	lsls	r2, r0
  40220a:	ea23 0302 	bic.w	r3, r3, r2
  40220e:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  402210:	2e01      	cmp	r6, #1
  402212:	d011      	beq.n	402238 <vTaskPlaceOnEventListRestricted+0x58>
				xTimeToWake = xTickCount + xTicksToWait;
  402214:	4a10      	ldr	r2, [pc, #64]	; (402258 <vTaskPlaceOnEventListRestricted+0x78>)
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  402216:	4b11      	ldr	r3, [pc, #68]	; (40225c <vTaskPlaceOnEventListRestricted+0x7c>)
				xTimeToWake = xTickCount + xTicksToWait;
  402218:	6810      	ldr	r0, [r2, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  40221a:	4428      	add	r0, r5
	}
  40221c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  402220:	4718      	bx	r3
  402222:	f04f 0380 	mov.w	r3, #128	; 0x80
  402226:	b672      	cpsid	i
  402228:	f383 8811 	msr	BASEPRI, r3
  40222c:	f3bf 8f6f 	isb	sy
  402230:	f3bf 8f4f 	dsb	sy
  402234:	b662      	cpsie	i
  402236:	e7fe      	b.n	402236 <vTaskPlaceOnEventListRestricted+0x56>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402238:	6821      	ldr	r1, [r4, #0]
  40223a:	463b      	mov	r3, r7
  40223c:	4808      	ldr	r0, [pc, #32]	; (402260 <vTaskPlaceOnEventListRestricted+0x80>)
  40223e:	3104      	adds	r1, #4
	}
  402240:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402244:	4718      	bx	r3
  402246:	bf00      	nop
  402248:	20400a58 	.word	0x20400a58
  40224c:	00400c89 	.word	0x00400c89
  402250:	00400cd5 	.word	0x00400cd5
  402254:	20400adc 	.word	0x20400adc
  402258:	20400b50 	.word	0x20400b50
  40225c:	00401969 	.word	0x00401969
  402260:	20400b28 	.word	0x20400b28

00402264 <xTaskRemoveFromEventList>:
{
  402264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  402266:	68c3      	ldr	r3, [r0, #12]
  402268:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  40226a:	b31c      	cbz	r4, 4022b4 <xTaskRemoveFromEventList+0x50>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  40226c:	f104 0518 	add.w	r5, r4, #24
  402270:	4f19      	ldr	r7, [pc, #100]	; (4022d8 <xTaskRemoveFromEventList+0x74>)
  402272:	4628      	mov	r0, r5
  402274:	47b8      	blx	r7
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402276:	4b19      	ldr	r3, [pc, #100]	; (4022dc <xTaskRemoveFromEventList+0x78>)
  402278:	681b      	ldr	r3, [r3, #0]
  40227a:	bb43      	cbnz	r3, 4022ce <xTaskRemoveFromEventList+0x6a>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  40227c:	1d26      	adds	r6, r4, #4
		prvAddTaskToReadyList( pxUnblockedTCB );
  40227e:	4d18      	ldr	r5, [pc, #96]	; (4022e0 <xTaskRemoveFromEventList+0x7c>)
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  402280:	4630      	mov	r0, r6
  402282:	47b8      	blx	r7
		prvAddTaskToReadyList( pxUnblockedTCB );
  402284:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402286:	2301      	movs	r3, #1
  402288:	4816      	ldr	r0, [pc, #88]	; (4022e4 <xTaskRemoveFromEventList+0x80>)
  40228a:	eb02 0782 	add.w	r7, r2, r2, lsl #2
  40228e:	4631      	mov	r1, r6
  402290:	4093      	lsls	r3, r2
  402292:	682a      	ldr	r2, [r5, #0]
  402294:	eb00 0087 	add.w	r0, r0, r7, lsl #2
  402298:	4313      	orrs	r3, r2
  40229a:	4a13      	ldr	r2, [pc, #76]	; (4022e8 <xTaskRemoveFromEventList+0x84>)
  40229c:	602b      	str	r3, [r5, #0]
  40229e:	4790      	blx	r2
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  4022a0:	4b12      	ldr	r3, [pc, #72]	; (4022ec <xTaskRemoveFromEventList+0x88>)
  4022a2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4022a4:	681b      	ldr	r3, [r3, #0]
  4022a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4022a8:	429a      	cmp	r2, r3
  4022aa:	d90e      	bls.n	4022ca <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
  4022ac:	4b10      	ldr	r3, [pc, #64]	; (4022f0 <xTaskRemoveFromEventList+0x8c>)
  4022ae:	2001      	movs	r0, #1
  4022b0:	6018      	str	r0, [r3, #0]
  4022b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4022b4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022b8:	b672      	cpsid	i
  4022ba:	f383 8811 	msr	BASEPRI, r3
  4022be:	f3bf 8f6f 	isb	sy
  4022c2:	f3bf 8f4f 	dsb	sy
  4022c6:	b662      	cpsie	i
  4022c8:	e7fe      	b.n	4022c8 <xTaskRemoveFromEventList+0x64>
		xReturn = pdFALSE;
  4022ca:	2000      	movs	r0, #0
}
  4022cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  4022ce:	4629      	mov	r1, r5
  4022d0:	4808      	ldr	r0, [pc, #32]	; (4022f4 <xTaskRemoveFromEventList+0x90>)
  4022d2:	4b05      	ldr	r3, [pc, #20]	; (4022e8 <xTaskRemoveFromEventList+0x84>)
  4022d4:	4798      	blx	r3
  4022d6:	e7e3      	b.n	4022a0 <xTaskRemoveFromEventList+0x3c>
  4022d8:	00400cd5 	.word	0x00400cd5
  4022dc:	20400ad0 	.word	0x20400ad0
  4022e0:	20400adc 	.word	0x20400adc
  4022e4:	20400a64 	.word	0x20400a64
  4022e8:	00400c89 	.word	0x00400c89
  4022ec:	20400a58 	.word	0x20400a58
  4022f0:	20400b54 	.word	0x20400b54
  4022f4:	20400b10 	.word	0x20400b10

004022f8 <vTaskSetTimeOutState>:
{
  4022f8:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
  4022fa:	b130      	cbz	r0, 40230a <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  4022fc:	4a04      	ldr	r2, [pc, #16]	; (402310 <vTaskSetTimeOutState+0x18>)
	pxTimeOut->xTimeOnEntering = xTickCount;
  4022fe:	4b05      	ldr	r3, [pc, #20]	; (402314 <vTaskSetTimeOutState+0x1c>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  402300:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  402302:	681b      	ldr	r3, [r3, #0]
  402304:	e880 000c 	stmia.w	r0, {r2, r3}
  402308:	bd08      	pop	{r3, pc}
  40230a:	4b03      	ldr	r3, [pc, #12]	; (402318 <vTaskSetTimeOutState+0x20>)
  40230c:	4798      	blx	r3
  40230e:	bf00      	nop
  402310:	20400b0c 	.word	0x20400b0c
  402314:	20400b50 	.word	0x20400b50
  402318:	00401bcd 	.word	0x00401bcd

0040231c <xTaskCheckForTimeOut>:
{
  40231c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
  40231e:	2800      	cmp	r0, #0
  402320:	d030      	beq.n	402384 <xTaskCheckForTimeOut+0x68>
	configASSERT( pxTicksToWait );
  402322:	b321      	cbz	r1, 40236e <xTaskCheckForTimeOut+0x52>
  402324:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  402326:	4b1f      	ldr	r3, [pc, #124]	; (4023a4 <xTaskCheckForTimeOut+0x88>)
  402328:	4604      	mov	r4, r0
  40232a:	4798      	blx	r3
			if( *pxTicksToWait == portMAX_DELAY )
  40232c:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
  40232e:	481e      	ldr	r0, [pc, #120]	; (4023a8 <xTaskCheckForTimeOut+0x8c>)
			if( *pxTicksToWait == portMAX_DELAY )
  402330:	1c5a      	adds	r2, r3, #1
		const TickType_t xConstTickCount = xTickCount;
  402332:	6801      	ldr	r1, [r0, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  402334:	d031      	beq.n	40239a <xTaskCheckForTimeOut+0x7e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  402336:	4e1d      	ldr	r6, [pc, #116]	; (4023ac <xTaskCheckForTimeOut+0x90>)
  402338:	6827      	ldr	r7, [r4, #0]
  40233a:	6832      	ldr	r2, [r6, #0]
  40233c:	4297      	cmp	r7, r2
  40233e:	6862      	ldr	r2, [r4, #4]
  402340:	d006      	beq.n	402350 <xTaskCheckForTimeOut+0x34>
  402342:	4291      	cmp	r1, r2
  402344:	d304      	bcc.n	402350 <xTaskCheckForTimeOut+0x34>
			xReturn = pdTRUE;
  402346:	2601      	movs	r6, #1
	taskEXIT_CRITICAL();
  402348:	4b19      	ldr	r3, [pc, #100]	; (4023b0 <xTaskCheckForTimeOut+0x94>)
  40234a:	4798      	blx	r3
}
  40234c:	4630      	mov	r0, r6
  40234e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  402350:	1a8f      	subs	r7, r1, r2
  402352:	42bb      	cmp	r3, r7
  402354:	d9f7      	bls.n	402346 <xTaskCheckForTimeOut+0x2a>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  402356:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  402358:	6837      	ldr	r7, [r6, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  40235a:	6801      	ldr	r1, [r0, #0]
			xReturn = pdFALSE;
  40235c:	2600      	movs	r6, #0
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  40235e:	4413      	add	r3, r2
  402360:	602b      	str	r3, [r5, #0]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  402362:	6027      	str	r7, [r4, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  402364:	6061      	str	r1, [r4, #4]
	taskEXIT_CRITICAL();
  402366:	4b12      	ldr	r3, [pc, #72]	; (4023b0 <xTaskCheckForTimeOut+0x94>)
  402368:	4798      	blx	r3
}
  40236a:	4630      	mov	r0, r6
  40236c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40236e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402372:	b672      	cpsid	i
  402374:	f383 8811 	msr	BASEPRI, r3
  402378:	f3bf 8f6f 	isb	sy
  40237c:	f3bf 8f4f 	dsb	sy
  402380:	b662      	cpsie	i
  402382:	e7fe      	b.n	402382 <xTaskCheckForTimeOut+0x66>
  402384:	f04f 0380 	mov.w	r3, #128	; 0x80
  402388:	b672      	cpsid	i
  40238a:	f383 8811 	msr	BASEPRI, r3
  40238e:	f3bf 8f6f 	isb	sy
  402392:	f3bf 8f4f 	dsb	sy
  402396:	b662      	cpsie	i
  402398:	e7fe      	b.n	402398 <xTaskCheckForTimeOut+0x7c>
				xReturn = pdFALSE;
  40239a:	2600      	movs	r6, #0
	taskEXIT_CRITICAL();
  40239c:	4b04      	ldr	r3, [pc, #16]	; (4023b0 <xTaskCheckForTimeOut+0x94>)
  40239e:	4798      	blx	r3
}
  4023a0:	4630      	mov	r0, r6
  4023a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4023a4:	00400db9 	.word	0x00400db9
  4023a8:	20400b50 	.word	0x20400b50
  4023ac:	20400b0c 	.word	0x20400b0c
  4023b0:	00400e05 	.word	0x00400e05

004023b4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  4023b4:	4b01      	ldr	r3, [pc, #4]	; (4023bc <vTaskMissedYield+0x8>)
  4023b6:	2201      	movs	r2, #1
  4023b8:	601a      	str	r2, [r3, #0]
  4023ba:	4770      	bx	lr
  4023bc:	20400b54 	.word	0x20400b54

004023c0 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  4023c0:	4b05      	ldr	r3, [pc, #20]	; (4023d8 <xTaskGetSchedulerState+0x18>)
  4023c2:	681b      	ldr	r3, [r3, #0]
  4023c4:	b133      	cbz	r3, 4023d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4023c6:	4b05      	ldr	r3, [pc, #20]	; (4023dc <xTaskGetSchedulerState+0x1c>)
  4023c8:	681b      	ldr	r3, [r3, #0]
  4023ca:	2b00      	cmp	r3, #0
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  4023cc:	bf0c      	ite	eq
  4023ce:	2002      	moveq	r0, #2
  4023d0:	2000      	movne	r0, #0
  4023d2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  4023d4:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  4023d6:	4770      	bx	lr
  4023d8:	20400b24 	.word	0x20400b24
  4023dc:	20400ad0 	.word	0x20400ad0

004023e0 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  4023e0:	2800      	cmp	r0, #0
  4023e2:	d046      	beq.n	402472 <vTaskPriorityInherit+0x92>
	{
  4023e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  4023e8:	4c22      	ldr	r4, [pc, #136]	; (402474 <vTaskPriorityInherit+0x94>)
  4023ea:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  4023ec:	6822      	ldr	r2, [r4, #0]
  4023ee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  4023f0:	4293      	cmp	r3, r2
  4023f2:	d212      	bcs.n	40241a <vTaskPriorityInherit+0x3a>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  4023f4:	6982      	ldr	r2, [r0, #24]
  4023f6:	2a00      	cmp	r2, #0
  4023f8:	db04      	blt.n	402404 <vTaskPriorityInherit+0x24>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4023fa:	6822      	ldr	r2, [r4, #0]
  4023fc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  4023fe:	f1c2 0205 	rsb	r2, r2, #5
  402402:	6182      	str	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  402404:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402408:	4d1b      	ldr	r5, [pc, #108]	; (402478 <vTaskPriorityInherit+0x98>)
  40240a:	6942      	ldr	r2, [r0, #20]
  40240c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  402410:	429a      	cmp	r2, r3
  402412:	d004      	beq.n	40241e <vTaskPriorityInherit+0x3e>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402414:	6823      	ldr	r3, [r4, #0]
  402416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402418:	62c3      	str	r3, [r0, #44]	; 0x2c
  40241a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40241e:	1d07      	adds	r7, r0, #4
  402420:	4606      	mov	r6, r0
  402422:	4b16      	ldr	r3, [pc, #88]	; (40247c <vTaskPriorityInherit+0x9c>)
  402424:	4638      	mov	r0, r7
  402426:	4798      	blx	r3
  402428:	bb08      	cbnz	r0, 40246e <vTaskPriorityInherit+0x8e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  40242a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
  40242c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  402430:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  402434:	b9da      	cbnz	r2, 40246e <vTaskPriorityInherit+0x8e>
  402436:	4a12      	ldr	r2, [pc, #72]	; (402480 <vTaskPriorityInherit+0xa0>)
  402438:	2001      	movs	r0, #1
  40243a:	6811      	ldr	r1, [r2, #0]
  40243c:	fa00 f303 	lsl.w	r3, r0, r3
  402440:	ea21 0303 	bic.w	r3, r1, r3
  402444:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402446:	6820      	ldr	r0, [r4, #0]
					prvAddTaskToReadyList( pxTCB );
  402448:	2301      	movs	r3, #1
  40244a:	f8d2 e000 	ldr.w	lr, [r2]
  40244e:	4639      	mov	r1, r7
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402450:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  402452:	4c0c      	ldr	r4, [pc, #48]	; (402484 <vTaskPriorityInherit+0xa4>)
  402454:	4083      	lsls	r3, r0
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402456:	62f0      	str	r0, [r6, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  402458:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40245c:	ea43 030e 	orr.w	r3, r3, lr
  402460:	eb05 0080 	add.w	r0, r5, r0, lsl #2
  402464:	6013      	str	r3, [r2, #0]
  402466:	4623      	mov	r3, r4
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
  402468:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
  40246c:	4718      	bx	r3
  40246e:	4a04      	ldr	r2, [pc, #16]	; (402480 <vTaskPriorityInherit+0xa0>)
  402470:	e7e9      	b.n	402446 <vTaskPriorityInherit+0x66>
  402472:	4770      	bx	lr
  402474:	20400a58 	.word	0x20400a58
  402478:	20400a64 	.word	0x20400a64
  40247c:	00400cd5 	.word	0x00400cd5
  402480:	20400adc 	.word	0x20400adc
  402484:	00400c89 	.word	0x00400c89

00402488 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  402488:	2800      	cmp	r0, #0
  40248a:	d042      	beq.n	402512 <xTaskPriorityDisinherit+0x8a>
	{
  40248c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  40248e:	4b2b      	ldr	r3, [pc, #172]	; (40253c <xTaskPriorityDisinherit+0xb4>)
  402490:	681b      	ldr	r3, [r3, #0]
  402492:	4298      	cmp	r0, r3
  402494:	d00a      	beq.n	4024ac <xTaskPriorityDisinherit+0x24>
  402496:	f04f 0380 	mov.w	r3, #128	; 0x80
  40249a:	b672      	cpsid	i
  40249c:	f383 8811 	msr	BASEPRI, r3
  4024a0:	f3bf 8f6f 	isb	sy
  4024a4:	f3bf 8f4f 	dsb	sy
  4024a8:	b662      	cpsie	i
  4024aa:	e7fe      	b.n	4024aa <xTaskPriorityDisinherit+0x22>

			configASSERT( pxTCB->uxMutexesHeld );
  4024ac:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4024ae:	b953      	cbnz	r3, 4024c6 <xTaskPriorityDisinherit+0x3e>
  4024b0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4024b4:	b672      	cpsid	i
  4024b6:	f383 8811 	msr	BASEPRI, r3
  4024ba:	f3bf 8f6f 	isb	sy
  4024be:	f3bf 8f4f 	dsb	sy
  4024c2:	b662      	cpsie	i
  4024c4:	e7fe      	b.n	4024c4 <xTaskPriorityDisinherit+0x3c>
			( pxTCB->uxMutexesHeld )--;

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  4024c6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
  4024c8:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  4024ca:	6c82      	ldr	r2, [r0, #72]	; 0x48
			( pxTCB->uxMutexesHeld )--;
  4024cc:	64c3      	str	r3, [r0, #76]	; 0x4c
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  4024ce:	4291      	cmp	r1, r2
  4024d0:	d031      	beq.n	402536 <xTaskPriorityDisinherit+0xae>
  4024d2:	2b00      	cmp	r3, #0
  4024d4:	d12f      	bne.n	402536 <xTaskPriorityDisinherit+0xae>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4024d6:	1d07      	adds	r7, r0, #4
  4024d8:	4604      	mov	r4, r0
  4024da:	4b19      	ldr	r3, [pc, #100]	; (402540 <xTaskPriorityDisinherit+0xb8>)
  4024dc:	4638      	mov	r0, r7
  4024de:	4798      	blx	r3
  4024e0:	b1c8      	cbz	r0, 402516 <xTaskPriorityDisinherit+0x8e>
  4024e2:	4818      	ldr	r0, [pc, #96]	; (402544 <xTaskPriorityDisinherit+0xbc>)
  4024e4:	4a18      	ldr	r2, [pc, #96]	; (402548 <xTaskPriorityDisinherit+0xc0>)
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  4024e6:	6ca3      	ldr	r3, [r4, #72]	; 0x48

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
					prvAddTaskToReadyList( pxTCB );
  4024e8:	2501      	movs	r5, #1
  4024ea:	f8d2 e000 	ldr.w	lr, [r2]
  4024ee:	4639      	mov	r1, r7
  4024f0:	fa05 f603 	lsl.w	r6, r5, r3
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4024f4:	f1c3 0705 	rsb	r7, r3, #5
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  4024f8:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  4024fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4024fe:	ea46 060e 	orr.w	r6, r6, lr
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402502:	61a7      	str	r7, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  402504:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  402508:	4b10      	ldr	r3, [pc, #64]	; (40254c <xTaskPriorityDisinherit+0xc4>)
  40250a:	6016      	str	r6, [r2, #0]
  40250c:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  40250e:	4628      	mov	r0, r5
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  402510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BaseType_t xReturn = pdFALSE;
  402512:	2000      	movs	r0, #0
	}
  402514:	4770      	bx	lr
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402516:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  402518:	480a      	ldr	r0, [pc, #40]	; (402544 <xTaskPriorityDisinherit+0xbc>)
  40251a:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  40251e:	4a0a      	ldr	r2, [pc, #40]	; (402548 <xTaskPriorityDisinherit+0xc0>)
  402520:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  402524:	2b00      	cmp	r3, #0
  402526:	d1de      	bne.n	4024e6 <xTaskPriorityDisinherit+0x5e>
  402528:	2501      	movs	r5, #1
  40252a:	6813      	ldr	r3, [r2, #0]
  40252c:	40b5      	lsls	r5, r6
  40252e:	ea23 0305 	bic.w	r3, r3, r5
  402532:	6013      	str	r3, [r2, #0]
  402534:	e7d7      	b.n	4024e6 <xTaskPriorityDisinherit+0x5e>
	BaseType_t xReturn = pdFALSE;
  402536:	2000      	movs	r0, #0
  402538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40253a:	bf00      	nop
  40253c:	20400a58 	.word	0x20400a58
  402540:	00400cd5 	.word	0x00400cd5
  402544:	20400a64 	.word	0x20400a64
  402548:	20400adc 	.word	0x20400adc
  40254c:	00400c89 	.word	0x00400c89

00402550 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  402550:	4b04      	ldr	r3, [pc, #16]	; (402564 <pvTaskIncrementMutexHeldCount+0x14>)
  402552:	681a      	ldr	r2, [r3, #0]
  402554:	b11a      	cbz	r2, 40255e <pvTaskIncrementMutexHeldCount+0xe>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  402556:	6819      	ldr	r1, [r3, #0]
  402558:	6cca      	ldr	r2, [r1, #76]	; 0x4c
  40255a:	3201      	adds	r2, #1
  40255c:	64ca      	str	r2, [r1, #76]	; 0x4c
		}

		return pxCurrentTCB;
  40255e:	6818      	ldr	r0, [r3, #0]
	}
  402560:	4770      	bx	lr
  402562:	bf00      	nop
  402564:	20400a58 	.word	0x20400a58

00402568 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
  402568:	4291      	cmp	r1, r2
{
  40256a:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  40256c:	6100      	str	r0, [r0, #16]
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  40256e:	6041      	str	r1, [r0, #4]
	if( xNextExpiryTime <= xTimeNow )
  402570:	d805      	bhi.n	40257e <prvInsertTimerInActiveList+0x16>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  402572:	1ad2      	subs	r2, r2, r3
  402574:	6983      	ldr	r3, [r0, #24]
  402576:	429a      	cmp	r2, r3
  402578:	d307      	bcc.n	40258a <prvInsertTimerInActiveList+0x22>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  40257a:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  40257c:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  40257e:	429a      	cmp	r2, r3
  402580:	d201      	bcs.n	402586 <prvInsertTimerInActiveList+0x1e>
  402582:	4299      	cmp	r1, r3
  402584:	d2f9      	bcs.n	40257a <prvInsertTimerInActiveList+0x12>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402586:	4a04      	ldr	r2, [pc, #16]	; (402598 <prvInsertTimerInActiveList+0x30>)
  402588:	e000      	b.n	40258c <prvInsertTimerInActiveList+0x24>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  40258a:	4a04      	ldr	r2, [pc, #16]	; (40259c <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40258c:	1d01      	adds	r1, r0, #4
  40258e:	4b04      	ldr	r3, [pc, #16]	; (4025a0 <prvInsertTimerInActiveList+0x38>)
  402590:	6810      	ldr	r0, [r2, #0]
  402592:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402594:	2000      	movs	r0, #0
  402596:	bd08      	pop	{r3, pc}
  402598:	20400b58 	.word	0x20400b58
  40259c:	20400b5c 	.word	0x20400b5c
  4025a0:	00400ca1 	.word	0x00400ca1

004025a4 <prvCheckForValidListAndQueue.part.1>:
  4025a4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4025a8:	b672      	cpsid	i
  4025aa:	f383 8811 	msr	BASEPRI, r3
  4025ae:	f3bf 8f6f 	isb	sy
  4025b2:	f3bf 8f4f 	dsb	sy
  4025b6:	b662      	cpsie	i
  4025b8:	e7fe      	b.n	4025b8 <prvCheckForValidListAndQueue.part.1+0x14>
  4025ba:	bf00      	nop

004025bc <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  4025bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
  4025c0:	4c13      	ldr	r4, [pc, #76]	; (402610 <prvCheckForValidListAndQueue+0x54>)
	taskENTER_CRITICAL();
  4025c2:	4b14      	ldr	r3, [pc, #80]	; (402614 <prvCheckForValidListAndQueue+0x58>)
  4025c4:	4798      	blx	r3
		if( xTimerQueue == NULL )
  4025c6:	6827      	ldr	r7, [r4, #0]
  4025c8:	b11f      	cbz	r7, 4025d2 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  4025ca:	4b13      	ldr	r3, [pc, #76]	; (402618 <prvCheckForValidListAndQueue+0x5c>)
}
  4025cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	taskEXIT_CRITICAL();
  4025d0:	4718      	bx	r3
			vListInitialise( &xActiveTimerList1 );
  4025d2:	4e12      	ldr	r6, [pc, #72]	; (40261c <prvCheckForValidListAndQueue+0x60>)
			vListInitialise( &xActiveTimerList2 );
  4025d4:	4d12      	ldr	r5, [pc, #72]	; (402620 <prvCheckForValidListAndQueue+0x64>)
			vListInitialise( &xActiveTimerList1 );
  4025d6:	4630      	mov	r0, r6
  4025d8:	f8df 805c 	ldr.w	r8, [pc, #92]	; 402638 <prvCheckForValidListAndQueue+0x7c>
  4025dc:	47c0      	blx	r8
			vListInitialise( &xActiveTimerList2 );
  4025de:	4628      	mov	r0, r5
  4025e0:	47c0      	blx	r8
			pxCurrentTimerList = &xActiveTimerList1;
  4025e2:	4b10      	ldr	r3, [pc, #64]	; (402624 <prvCheckForValidListAndQueue+0x68>)
			pxOverflowTimerList = &xActiveTimerList2;
  4025e4:	f8df e054 	ldr.w	lr, [pc, #84]	; 40263c <prvCheckForValidListAndQueue+0x80>
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  4025e8:	463a      	mov	r2, r7
			pxCurrentTimerList = &xActiveTimerList1;
  4025ea:	601e      	str	r6, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  4025ec:	2110      	movs	r1, #16
  4025ee:	2005      	movs	r0, #5
  4025f0:	4b0d      	ldr	r3, [pc, #52]	; (402628 <prvCheckForValidListAndQueue+0x6c>)
			pxOverflowTimerList = &xActiveTimerList2;
  4025f2:	f8ce 5000 	str.w	r5, [lr]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  4025f6:	4798      	blx	r3
  4025f8:	6020      	str	r0, [r4, #0]
			configASSERT( xTimerQueue );
  4025fa:	b130      	cbz	r0, 40260a <prvCheckForValidListAndQueue+0x4e>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  4025fc:	4b0b      	ldr	r3, [pc, #44]	; (40262c <prvCheckForValidListAndQueue+0x70>)
  4025fe:	490c      	ldr	r1, [pc, #48]	; (402630 <prvCheckForValidListAndQueue+0x74>)
  402600:	4798      	blx	r3
	taskEXIT_CRITICAL();
  402602:	4b05      	ldr	r3, [pc, #20]	; (402618 <prvCheckForValidListAndQueue+0x5c>)
}
  402604:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	taskEXIT_CRITICAL();
  402608:	4718      	bx	r3
  40260a:	4b0a      	ldr	r3, [pc, #40]	; (402634 <prvCheckForValidListAndQueue+0x78>)
  40260c:	4798      	blx	r3
  40260e:	bf00      	nop
  402610:	20400b8c 	.word	0x20400b8c
  402614:	00400db9 	.word	0x00400db9
  402618:	00400e05 	.word	0x00400e05
  40261c:	20400b60 	.word	0x20400b60
  402620:	20400b74 	.word	0x20400b74
  402624:	20400b58 	.word	0x20400b58
  402628:	004012e9 	.word	0x004012e9
  40262c:	004018d5 	.word	0x004018d5
  402630:	00405eac 	.word	0x00405eac
  402634:	004025a5 	.word	0x004025a5
  402638:	00400c69 	.word	0x00400c69
  40263c:	20400b5c 	.word	0x20400b5c

00402640 <xTimerCreateTimerTask>:
{
  402640:	b510      	push	{r4, lr}
	prvCheckForValidListAndQueue();
  402642:	4b10      	ldr	r3, [pc, #64]	; (402684 <xTimerCreateTimerTask+0x44>)
{
  402644:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  402646:	4798      	blx	r3
	if( xTimerQueue != NULL )
  402648:	4b0f      	ldr	r3, [pc, #60]	; (402688 <xTimerCreateTimerTask+0x48>)
  40264a:	681b      	ldr	r3, [r3, #0]
  40264c:	b17b      	cbz	r3, 40266e <xTimerCreateTimerTask+0x2e>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  40264e:	2000      	movs	r0, #0
  402650:	2404      	movs	r4, #4
  402652:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  402656:	490d      	ldr	r1, [pc, #52]	; (40268c <xTimerCreateTimerTask+0x4c>)
  402658:	9003      	str	r0, [sp, #12]
  40265a:	4603      	mov	r3, r0
  40265c:	9002      	str	r0, [sp, #8]
  40265e:	9001      	str	r0, [sp, #4]
  402660:	9400      	str	r4, [sp, #0]
  402662:	480b      	ldr	r0, [pc, #44]	; (402690 <xTimerCreateTimerTask+0x50>)
  402664:	4c0b      	ldr	r4, [pc, #44]	; (402694 <xTimerCreateTimerTask+0x54>)
  402666:	47a0      	blx	r4
	configASSERT( xReturn );
  402668:	b108      	cbz	r0, 40266e <xTimerCreateTimerTask+0x2e>
}
  40266a:	b004      	add	sp, #16
  40266c:	bd10      	pop	{r4, pc}
  40266e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402672:	b672      	cpsid	i
  402674:	f383 8811 	msr	BASEPRI, r3
  402678:	f3bf 8f6f 	isb	sy
  40267c:	f3bf 8f4f 	dsb	sy
  402680:	b662      	cpsie	i
  402682:	e7fe      	b.n	402682 <xTimerCreateTimerTask+0x42>
  402684:	004025bd 	.word	0x004025bd
  402688:	20400b8c 	.word	0x20400b8c
  40268c:	00405eb4 	.word	0x00405eb4
  402690:	00402799 	.word	0x00402799
  402694:	00401be5 	.word	0x00401be5

00402698 <xTimerGenericCommand>:
{
  402698:	b530      	push	{r4, r5, lr}
  40269a:	b085      	sub	sp, #20
	configASSERT( xTimer );
  40269c:	b310      	cbz	r0, 4026e4 <xTimerGenericCommand+0x4c>
	if( xTimerQueue != NULL )
  40269e:	4c12      	ldr	r4, [pc, #72]	; (4026e8 <xTimerGenericCommand+0x50>)
  4026a0:	4605      	mov	r5, r0
  4026a2:	6820      	ldr	r0, [r4, #0]
  4026a4:	b168      	cbz	r0, 4026c2 <xTimerGenericCommand+0x2a>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  4026a6:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  4026a8:	e88d 0026 	stmia.w	sp, {r1, r2, r5}
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  4026ac:	dc0b      	bgt.n	4026c6 <xTimerGenericCommand+0x2e>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  4026ae:	4b0f      	ldr	r3, [pc, #60]	; (4026ec <xTimerGenericCommand+0x54>)
  4026b0:	4798      	blx	r3
  4026b2:	2802      	cmp	r0, #2
  4026b4:	d00e      	beq.n	4026d4 <xTimerGenericCommand+0x3c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  4026b6:	2300      	movs	r3, #0
  4026b8:	6820      	ldr	r0, [r4, #0]
  4026ba:	4669      	mov	r1, sp
  4026bc:	4c0c      	ldr	r4, [pc, #48]	; (4026f0 <xTimerGenericCommand+0x58>)
  4026be:	461a      	mov	r2, r3
  4026c0:	47a0      	blx	r4
}
  4026c2:	b005      	add	sp, #20
  4026c4:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  4026c6:	461a      	mov	r2, r3
  4026c8:	4669      	mov	r1, sp
  4026ca:	2300      	movs	r3, #0
  4026cc:	4c09      	ldr	r4, [pc, #36]	; (4026f4 <xTimerGenericCommand+0x5c>)
  4026ce:	47a0      	blx	r4
}
  4026d0:	b005      	add	sp, #20
  4026d2:	bd30      	pop	{r4, r5, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  4026d4:	6820      	ldr	r0, [r4, #0]
  4026d6:	2300      	movs	r3, #0
  4026d8:	9a08      	ldr	r2, [sp, #32]
  4026da:	4669      	mov	r1, sp
  4026dc:	4c04      	ldr	r4, [pc, #16]	; (4026f0 <xTimerGenericCommand+0x58>)
  4026de:	47a0      	blx	r4
}
  4026e0:	b005      	add	sp, #20
  4026e2:	bd30      	pop	{r4, r5, pc}
  4026e4:	4b04      	ldr	r3, [pc, #16]	; (4026f8 <xTimerGenericCommand+0x60>)
  4026e6:	4798      	blx	r3
  4026e8:	20400b8c 	.word	0x20400b8c
  4026ec:	004023c1 	.word	0x004023c1
  4026f0:	00401355 	.word	0x00401355
  4026f4:	00401535 	.word	0x00401535
  4026f8:	004025a5 	.word	0x004025a5

004026fc <prvSwitchTimerLists>:
{
  4026fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402700:	4e20      	ldr	r6, [pc, #128]	; (402784 <prvSwitchTimerLists+0x88>)
  402702:	b082      	sub	sp, #8
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402704:	4f20      	ldr	r7, [pc, #128]	; (402788 <prvSwitchTimerLists+0x8c>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402706:	f8df 8088 	ldr.w	r8, [pc, #136]	; 402790 <prvSwitchTimerLists+0x94>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40270a:	e00c      	b.n	402726 <prvSwitchTimerLists+0x2a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  40270c:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  40270e:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402710:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402714:	1d25      	adds	r5, r4, #4
  402716:	4628      	mov	r0, r5
  402718:	47b8      	blx	r7
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  40271a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40271c:	4620      	mov	r0, r4
  40271e:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402720:	69e3      	ldr	r3, [r4, #28]
  402722:	2b01      	cmp	r3, #1
  402724:	d00a      	beq.n	40273c <prvSwitchTimerLists+0x40>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402726:	6833      	ldr	r3, [r6, #0]
  402728:	681a      	ldr	r2, [r3, #0]
  40272a:	2a00      	cmp	r2, #0
  40272c:	d1ee      	bne.n	40270c <prvSwitchTimerLists+0x10>
	pxCurrentTimerList = pxOverflowTimerList;
  40272e:	4a17      	ldr	r2, [pc, #92]	; (40278c <prvSwitchTimerLists+0x90>)
  402730:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
  402732:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
  402734:	6031      	str	r1, [r6, #0]
}
  402736:	b002      	add	sp, #8
  402738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  40273c:	69a3      	ldr	r3, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40273e:	4629      	mov	r1, r5
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402740:	f04f 0e00 	mov.w	lr, #0
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402744:	f8df a04c 	ldr.w	sl, [pc, #76]	; 402794 <prvSwitchTimerLists+0x98>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402748:	eb09 0503 	add.w	r5, r9, r3
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  40274c:	464a      	mov	r2, r9
  40274e:	4673      	mov	r3, lr
  402750:	4620      	mov	r0, r4
			if( xReloadTime > xNextExpireTime )
  402752:	45a9      	cmp	r9, r5
  402754:	d204      	bcs.n	402760 <prvSwitchTimerLists+0x64>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  402756:	6065      	str	r5, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402758:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40275a:	6830      	ldr	r0, [r6, #0]
  40275c:	47d0      	blx	sl
  40275e:	e7e2      	b.n	402726 <prvSwitchTimerLists+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402760:	f8cd e000 	str.w	lr, [sp]
  402764:	4671      	mov	r1, lr
  402766:	47c0      	blx	r8
				configASSERT( xResult );
  402768:	2800      	cmp	r0, #0
  40276a:	d1dc      	bne.n	402726 <prvSwitchTimerLists+0x2a>
  40276c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402770:	b672      	cpsid	i
  402772:	f383 8811 	msr	BASEPRI, r3
  402776:	f3bf 8f6f 	isb	sy
  40277a:	f3bf 8f4f 	dsb	sy
  40277e:	b662      	cpsie	i
  402780:	e7fe      	b.n	402780 <prvSwitchTimerLists+0x84>
  402782:	bf00      	nop
  402784:	20400b58 	.word	0x20400b58
  402788:	00400cd5 	.word	0x00400cd5
  40278c:	20400b5c 	.word	0x20400b5c
  402790:	00402699 	.word	0x00402699
  402794:	00400ca1 	.word	0x00400ca1

00402798 <prvTimerTask>:
{
  402798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40279c:	f8df 9204 	ldr.w	r9, [pc, #516]	; 4029a4 <prvTimerTask+0x20c>
  4027a0:	b089      	sub	sp, #36	; 0x24
  4027a2:	f8df a204 	ldr.w	sl, [pc, #516]	; 4029a8 <prvTimerTask+0x210>
  4027a6:	f8df 8204 	ldr.w	r8, [pc, #516]	; 4029ac <prvTimerTask+0x214>
  4027aa:	4d72      	ldr	r5, [pc, #456]	; (402974 <prvTimerTask+0x1dc>)
  4027ac:	4e72      	ldr	r6, [pc, #456]	; (402978 <prvTimerTask+0x1e0>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  4027ae:	f8d9 3000 	ldr.w	r3, [r9]
	if( *pxListWasEmpty == pdFALSE )
  4027b2:	681c      	ldr	r4, [r3, #0]
  4027b4:	2c00      	cmp	r4, #0
  4027b6:	d04e      	beq.n	402856 <prvTimerTask+0xbe>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4027b8:	68db      	ldr	r3, [r3, #12]
  4027ba:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
  4027bc:	47d0      	blx	sl
	xTimeNow = xTaskGetTickCount();
  4027be:	47c0      	blx	r8
	if( xTimeNow < xLastTime )
  4027c0:	4a6e      	ldr	r2, [pc, #440]	; (40297c <prvTimerTask+0x1e4>)
	xTimeNow = xTaskGetTickCount();
  4027c2:	4603      	mov	r3, r0
	if( xTimeNow < xLastTime )
  4027c4:	6812      	ldr	r2, [r2, #0]
  4027c6:	4290      	cmp	r0, r2
  4027c8:	d356      	bcc.n	402878 <prvTimerTask+0xe0>
	xLastTime = xTimeNow;
  4027ca:	4a6c      	ldr	r2, [pc, #432]	; (40297c <prvTimerTask+0x1e4>)
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  4027cc:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
  4027ce:	6010      	str	r0, [r2, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  4027d0:	d960      	bls.n	402894 <prvTimerTask+0xfc>
  4027d2:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  4027d4:	1af9      	subs	r1, r7, r3
  4027d6:	6828      	ldr	r0, [r5, #0]
  4027d8:	4b69      	ldr	r3, [pc, #420]	; (402980 <prvTimerTask+0x1e8>)
  4027da:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4027dc:	4b69      	ldr	r3, [pc, #420]	; (402984 <prvTimerTask+0x1ec>)
  4027de:	4798      	blx	r3
  4027e0:	b938      	cbnz	r0, 4027f2 <prvTimerTask+0x5a>
					portYIELD_WITHIN_API();
  4027e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4027e6:	4a68      	ldr	r2, [pc, #416]	; (402988 <prvTimerTask+0x1f0>)
  4027e8:	6013      	str	r3, [r2, #0]
  4027ea:	f3bf 8f4f 	dsb	sy
  4027ee:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  4027f2:	2300      	movs	r3, #0
  4027f4:	a904      	add	r1, sp, #16
  4027f6:	6828      	ldr	r0, [r5, #0]
  4027f8:	461a      	mov	r2, r3
  4027fa:	47b0      	blx	r6
  4027fc:	2800      	cmp	r0, #0
  4027fe:	d0d6      	beq.n	4027ae <prvTimerTask+0x16>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  402800:	9b04      	ldr	r3, [sp, #16]
  402802:	2b00      	cmp	r3, #0
  402804:	db1f      	blt.n	402846 <prvTimerTask+0xae>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  402806:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  402808:	6963      	ldr	r3, [r4, #20]
  40280a:	b113      	cbz	r3, 402812 <prvTimerTask+0x7a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40280c:	1d20      	adds	r0, r4, #4
  40280e:	4b5f      	ldr	r3, [pc, #380]	; (40298c <prvTimerTask+0x1f4>)
  402810:	4798      	blx	r3
	xTimeNow = xTaskGetTickCount();
  402812:	47c0      	blx	r8
	if( xTimeNow < xLastTime )
  402814:	4b59      	ldr	r3, [pc, #356]	; (40297c <prvTimerTask+0x1e4>)
	xTimeNow = xTaskGetTickCount();
  402816:	4602      	mov	r2, r0
	if( xTimeNow < xLastTime )
  402818:	681b      	ldr	r3, [r3, #0]
  40281a:	4298      	cmp	r0, r3
  40281c:	d335      	bcc.n	40288a <prvTimerTask+0xf2>
  40281e:	9b04      	ldr	r3, [sp, #16]
	xLastTime = xTimeNow;
  402820:	4956      	ldr	r1, [pc, #344]	; (40297c <prvTimerTask+0x1e4>)
  402822:	2b09      	cmp	r3, #9
  402824:	600a      	str	r2, [r1, #0]
  402826:	d8e4      	bhi.n	4027f2 <prvTimerTask+0x5a>
  402828:	2101      	movs	r1, #1
  40282a:	fa01 f303 	lsl.w	r3, r1, r3
  40282e:	f413 7b04 	ands.w	fp, r3, #528	; 0x210
  402832:	d163      	bne.n	4028fc <prvTimerTask+0x164>
  402834:	f013 0fc7 	tst.w	r3, #199	; 0xc7
  402838:	d169      	bne.n	40290e <prvTimerTask+0x176>
  40283a:	069b      	lsls	r3, r3, #26
  40283c:	d5d9      	bpl.n	4027f2 <prvTimerTask+0x5a>
					vPortFree( pxTimer );
  40283e:	4620      	mov	r0, r4
  402840:	4b53      	ldr	r3, [pc, #332]	; (402990 <prvTimerTask+0x1f8>)
  402842:	4798      	blx	r3
  402844:	e7d5      	b.n	4027f2 <prvTimerTask+0x5a>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  402846:	9b05      	ldr	r3, [sp, #20]
  402848:	9907      	ldr	r1, [sp, #28]
  40284a:	9806      	ldr	r0, [sp, #24]
  40284c:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  40284e:	9b04      	ldr	r3, [sp, #16]
  402850:	2b00      	cmp	r3, #0
  402852:	dbce      	blt.n	4027f2 <prvTimerTask+0x5a>
  402854:	e7d7      	b.n	402806 <prvTimerTask+0x6e>
	vTaskSuspendAll();
  402856:	47d0      	blx	sl
	xTimeNow = xTaskGetTickCount();
  402858:	47c0      	blx	r8
	if( xTimeNow < xLastTime )
  40285a:	4a48      	ldr	r2, [pc, #288]	; (40297c <prvTimerTask+0x1e4>)
	xTimeNow = xTaskGetTickCount();
  40285c:	4603      	mov	r3, r0
	if( xTimeNow < xLastTime )
  40285e:	6812      	ldr	r2, [r2, #0]
  402860:	4282      	cmp	r2, r0
  402862:	d809      	bhi.n	402878 <prvTimerTask+0xe0>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  402864:	4a4b      	ldr	r2, [pc, #300]	; (402994 <prvTimerTask+0x1fc>)
  402866:	4627      	mov	r7, r4
	xLastTime = xTimeNow;
  402868:	4944      	ldr	r1, [pc, #272]	; (40297c <prvTimerTask+0x1e4>)
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  40286a:	6812      	ldr	r2, [r2, #0]
	xLastTime = xTimeNow;
  40286c:	600b      	str	r3, [r1, #0]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  40286e:	6812      	ldr	r2, [r2, #0]
  402870:	fab2 f282 	clz	r2, r2
  402874:	0952      	lsrs	r2, r2, #5
  402876:	e7ad      	b.n	4027d4 <prvTimerTask+0x3c>
  402878:	9303      	str	r3, [sp, #12]
		prvSwitchTimerLists();
  40287a:	4b47      	ldr	r3, [pc, #284]	; (402998 <prvTimerTask+0x200>)
  40287c:	4798      	blx	r3
	xLastTime = xTimeNow;
  40287e:	9b03      	ldr	r3, [sp, #12]
  402880:	4a3e      	ldr	r2, [pc, #248]	; (40297c <prvTimerTask+0x1e4>)
  402882:	6013      	str	r3, [r2, #0]
			( void ) xTaskResumeAll();
  402884:	4b3f      	ldr	r3, [pc, #252]	; (402984 <prvTimerTask+0x1ec>)
  402886:	4798      	blx	r3
  402888:	e7b3      	b.n	4027f2 <prvTimerTask+0x5a>
		prvSwitchTimerLists();
  40288a:	4b43      	ldr	r3, [pc, #268]	; (402998 <prvTimerTask+0x200>)
  40288c:	9003      	str	r0, [sp, #12]
  40288e:	4798      	blx	r3
  402890:	9a03      	ldr	r2, [sp, #12]
  402892:	e7c4      	b.n	40281e <prvTimerTask+0x86>
  402894:	9303      	str	r3, [sp, #12]
				( void ) xTaskResumeAll();
  402896:	4b3b      	ldr	r3, [pc, #236]	; (402984 <prvTimerTask+0x1ec>)
  402898:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  40289a:	f8d9 2000 	ldr.w	r2, [r9]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40289e:	4b3b      	ldr	r3, [pc, #236]	; (40298c <prvTimerTask+0x1f4>)
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4028a0:	68d2      	ldr	r2, [r2, #12]
  4028a2:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4028a6:	f10b 0004 	add.w	r0, fp, #4
  4028aa:	4798      	blx	r3
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4028ac:	f8db 201c 	ldr.w	r2, [fp, #28]
  4028b0:	9b03      	ldr	r3, [sp, #12]
  4028b2:	2a01      	cmp	r2, #1
  4028b4:	d004      	beq.n	4028c0 <prvTimerTask+0x128>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4028b6:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
  4028ba:	4658      	mov	r0, fp
  4028bc:	4798      	blx	r3
  4028be:	e798      	b.n	4027f2 <prvTimerTask+0x5a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  4028c0:	f8db 1018 	ldr.w	r1, [fp, #24]
  4028c4:	461a      	mov	r2, r3
  4028c6:	4658      	mov	r0, fp
  4028c8:	463b      	mov	r3, r7
  4028ca:	4439      	add	r1, r7
  4028cc:	4c33      	ldr	r4, [pc, #204]	; (40299c <prvTimerTask+0x204>)
  4028ce:	47a0      	blx	r4
  4028d0:	2801      	cmp	r0, #1
  4028d2:	d1f0      	bne.n	4028b6 <prvTimerTask+0x11e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4028d4:	2300      	movs	r3, #0
  4028d6:	463a      	mov	r2, r7
  4028d8:	4658      	mov	r0, fp
  4028da:	4c31      	ldr	r4, [pc, #196]	; (4029a0 <prvTimerTask+0x208>)
  4028dc:	9300      	str	r3, [sp, #0]
  4028de:	4619      	mov	r1, r3
  4028e0:	47a0      	blx	r4
			configASSERT( xResult );
  4028e2:	2800      	cmp	r0, #0
  4028e4:	d1e7      	bne.n	4028b6 <prvTimerTask+0x11e>
  4028e6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4028ea:	b672      	cpsid	i
  4028ec:	f383 8811 	msr	BASEPRI, r3
  4028f0:	f3bf 8f6f 	isb	sy
  4028f4:	f3bf 8f4f 	dsb	sy
  4028f8:	b662      	cpsie	i
  4028fa:	e7fe      	b.n	4028fa <prvTimerTask+0x162>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  4028fc:	9905      	ldr	r1, [sp, #20]
  4028fe:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  402900:	b369      	cbz	r1, 40295e <prvTimerTask+0x1c6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  402902:	4411      	add	r1, r2
  402904:	4620      	mov	r0, r4
  402906:	4613      	mov	r3, r2
  402908:	4c24      	ldr	r4, [pc, #144]	; (40299c <prvTimerTask+0x204>)
  40290a:	47a0      	blx	r4
  40290c:	e771      	b.n	4027f2 <prvTimerTask+0x5a>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  40290e:	9b05      	ldr	r3, [sp, #20]
  402910:	4620      	mov	r0, r4
  402912:	69a1      	ldr	r1, [r4, #24]
  402914:	4f21      	ldr	r7, [pc, #132]	; (40299c <prvTimerTask+0x204>)
  402916:	4419      	add	r1, r3
  402918:	47b8      	blx	r7
  40291a:	2801      	cmp	r0, #1
  40291c:	f47f af69 	bne.w	4027f2 <prvTimerTask+0x5a>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402920:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402922:	4620      	mov	r0, r4
  402924:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402926:	69e3      	ldr	r3, [r4, #28]
  402928:	2b01      	cmp	r3, #1
  40292a:	f47f af62 	bne.w	4027f2 <prvTimerTask+0x5a>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  40292e:	9a05      	ldr	r2, [sp, #20]
  402930:	4620      	mov	r0, r4
  402932:	69a4      	ldr	r4, [r4, #24]
  402934:	465b      	mov	r3, fp
  402936:	f8cd b000 	str.w	fp, [sp]
  40293a:	4659      	mov	r1, fp
  40293c:	4422      	add	r2, r4
  40293e:	4c18      	ldr	r4, [pc, #96]	; (4029a0 <prvTimerTask+0x208>)
  402940:	47a0      	blx	r4
							configASSERT( xResult );
  402942:	2800      	cmp	r0, #0
  402944:	f47f af55 	bne.w	4027f2 <prvTimerTask+0x5a>
  402948:	f04f 0380 	mov.w	r3, #128	; 0x80
  40294c:	b672      	cpsid	i
  40294e:	f383 8811 	msr	BASEPRI, r3
  402952:	f3bf 8f6f 	isb	sy
  402956:	f3bf 8f4f 	dsb	sy
  40295a:	b662      	cpsie	i
  40295c:	e7fe      	b.n	40295c <prvTimerTask+0x1c4>
  40295e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402962:	b672      	cpsid	i
  402964:	f383 8811 	msr	BASEPRI, r3
  402968:	f3bf 8f6f 	isb	sy
  40296c:	f3bf 8f4f 	dsb	sy
  402970:	b662      	cpsie	i
  402972:	e7fe      	b.n	402972 <prvTimerTask+0x1da>
  402974:	20400b8c 	.word	0x20400b8c
  402978:	0040170d 	.word	0x0040170d
  40297c:	20400b88 	.word	0x20400b88
  402980:	004018fd 	.word	0x004018fd
  402984:	00401e51 	.word	0x00401e51
  402988:	e000ed04 	.word	0xe000ed04
  40298c:	00400cd5 	.word	0x00400cd5
  402990:	0040103d 	.word	0x0040103d
  402994:	20400b5c 	.word	0x20400b5c
  402998:	004026fd 	.word	0x004026fd
  40299c:	00402569 	.word	0x00402569
  4029a0:	00402699 	.word	0x00402699
  4029a4:	20400b58 	.word	0x20400b58
  4029a8:	00401cc1 	.word	0x00401cc1
  4029ac:	00401cd1 	.word	0x00401cd1

004029b0 <but_callback>:

/************************************************************************/
/* handlers / callbacks                                                 */
/************************************************************************/

void but_callback(void) {
  4029b0:	b500      	push	{lr}
  4029b2:	b083      	sub	sp, #12
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    xSemaphoreGiveFromISR(xSemaphoreBut, &xHigherPriorityTaskWoken);
  4029b4:	4b05      	ldr	r3, [pc, #20]	; (4029cc <but_callback+0x1c>)
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  4029b6:	2200      	movs	r2, #0
  4029b8:	a902      	add	r1, sp, #8
    xSemaphoreGiveFromISR(xSemaphoreBut, &xHigherPriorityTaskWoken);
  4029ba:	6818      	ldr	r0, [r3, #0]
  4029bc:	4b04      	ldr	r3, [pc, #16]	; (4029d0 <but_callback+0x20>)
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  4029be:	f841 2d04 	str.w	r2, [r1, #-4]!
    xSemaphoreGiveFromISR(xSemaphoreBut, &xHigherPriorityTaskWoken);
  4029c2:	4798      	blx	r3
}
  4029c4:	b003      	add	sp, #12
  4029c6:	f85d fb04 	ldr.w	pc, [sp], #4
  4029ca:	bf00      	nop
  4029cc:	20400c10 	.word	0x20400c10
  4029d0:	00401635 	.word	0x00401635

004029d4 <task_but>:
        /* suspende por delayMs */
        vTaskDelay(delayMs);
    }
}

static void task_but(void *pvParameters) {
  4029d4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
};

static void BUT_init(void) {
    // Configura PIO para lidar com o pino do botão como entrada
    // com pull-up
    pio_configure(BUT_PIO, PIO_INPUT, BUT_PIO_PIN_MASK, PIO_PULLUP);
  4029d8:	4c39      	ldr	r4, [pc, #228]	; (402ac0 <task_but+0xec>)
static void task_but(void *pvParameters) {
  4029da:	b085      	sub	sp, #20
    pio_configure(BUT1_PIO, PIO_INPUT, BUT1_PIO_PIN_MASK, PIO_PULLUP);

    // Configura interrupção no pino referente ao botao e associa
    // função de callback caso uma interrupção for gerada
    // a função de callback é a: but_callback()
    pio_handler_set(BUT_PIO,
  4029dc:	4d39      	ldr	r5, [pc, #228]	; (402ac4 <task_but+0xf0>)
    pio_configure(BUT_PIO, PIO_INPUT, BUT_PIO_PIN_MASK, PIO_PULLUP);
  4029de:	2301      	movs	r3, #1
  4029e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4029e4:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4029e8:	4837      	ldr	r0, [pc, #220]	; (402ac8 <task_but+0xf4>)
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4029ea:	f44f 6780 	mov.w	r7, #1024	; 0x400
  4029ee:	47a0      	blx	r4
    pio_configure(BUT1_PIO, PIO_INPUT, BUT1_PIO_PIN_MASK, PIO_PULLUP);
  4029f0:	2301      	movs	r3, #1
  4029f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4029f6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4029fa:	4834      	ldr	r0, [pc, #208]	; (402acc <task_but+0xf8>)
    uint32_t delayTicks = 2000;
  4029fc:	ae04      	add	r6, sp, #16
    pio_configure(BUT1_PIO, PIO_INPUT, BUT1_PIO_PIN_MASK, PIO_PULLUP);
  4029fe:	47a0      	blx	r4
    pio_handler_set(BUT_PIO,
  402a00:	4c33      	ldr	r4, [pc, #204]	; (402ad0 <task_but+0xfc>)
  402a02:	9500      	str	r5, [sp, #0]
  402a04:	2350      	movs	r3, #80	; 0x50
  402a06:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402a0a:	210a      	movs	r1, #10
  402a0c:	482e      	ldr	r0, [pc, #184]	; (402ac8 <task_but+0xf4>)
  402a0e:	47a0      	blx	r4
                    BUT_PIO_ID,
                    BUT_PIO_PIN_MASK,
                    PIO_IT_FALL_EDGE,
                    but_callback);

    pio_handler_set(BUT1_PIO,
  402a10:	2350      	movs	r3, #80	; 0x50
  402a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402a16:	9500      	str	r5, [sp, #0]
  402a18:	2110      	movs	r1, #16
  402a1a:	482c      	ldr	r0, [pc, #176]	; (402acc <task_but+0xf8>)
  402a1c:	47a0      	blx	r4
                    BUT1_PIO_PIN_MASK,
                    PIO_IT_FALL_EDGE,
                    but_callback);

    // Ativa interrupção e limpa primeira IRQ gerada na ativacao
    pio_enable_interrupt(BUT_PIO, BUT_PIO_PIN_MASK);
  402a1e:	4d2d      	ldr	r5, [pc, #180]	; (402ad4 <task_but+0x100>)
  402a20:	f44f 6100 	mov.w	r1, #2048	; 0x800
  402a24:	4828      	ldr	r0, [pc, #160]	; (402ac8 <task_but+0xf4>)
  402a26:	47a8      	blx	r5
    pio_get_interrupt_status(BUT_PIO);
  402a28:	4c2b      	ldr	r4, [pc, #172]	; (402ad8 <task_but+0x104>)
  402a2a:	4827      	ldr	r0, [pc, #156]	; (402ac8 <task_but+0xf4>)
  402a2c:	47a0      	blx	r4
    pio_enable_interrupt(BUT1_PIO, BUT1_PIO_PIN_MASK);
  402a2e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402a32:	4826      	ldr	r0, [pc, #152]	; (402acc <task_but+0xf8>)
  402a34:	47a8      	blx	r5
    pio_get_interrupt_status(BUT1_PIO);
  402a36:	4825      	ldr	r0, [pc, #148]	; (402acc <task_but+0xf8>)
  402a38:	47a0      	blx	r4
  402a3a:	4b28      	ldr	r3, [pc, #160]	; (402adc <task_but+0x108>)
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402a3c:	2280      	movs	r2, #128	; 0x80
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402a3e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  402a42:	601f      	str	r7, [r3, #0]
            if (!pio_get(BUT1_PIO, PIO_INPUT, BUT1_PIO_PIN_MASK)) {
  402a44:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
    uint32_t delayTicks = 2000;
  402a48:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
  402a4c:	4d24      	ldr	r5, [pc, #144]	; (402ae0 <task_but+0x10c>)
  402a4e:	4c25      	ldr	r4, [pc, #148]	; (402ae4 <task_but+0x110>)
            if (!pio_get(BUT1_PIO, PIO_INPUT, BUT1_PIO_PIN_MASK)) {
  402a50:	f507 2761 	add.w	r7, r7, #921600	; 0xe1000
  402a54:	f8df b094 	ldr.w	fp, [pc, #148]	; 402aec <task_but+0x118>
  402a58:	f8df a094 	ldr.w	sl, [pc, #148]	; 402af0 <task_but+0x11c>
  402a5c:	f8df 9094 	ldr.w	r9, [pc, #148]	; 402af4 <task_but+0x120>
            printf("task_but: %d \n", delayTicks);
  402a60:	f8df 8094 	ldr.w	r8, [pc, #148]	; 402af8 <task_but+0x124>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402a64:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402a68:	6018      	str	r0, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402a6a:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
    uint32_t delayTicks = 2000;
  402a6e:	f846 1d04 	str.w	r1, [r6, #-4]!
        if (xSemaphoreTake(xSemaphoreBut, 1000)) {
  402a72:	2300      	movs	r3, #0
  402a74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  402a78:	6828      	ldr	r0, [r5, #0]
  402a7a:	4619      	mov	r1, r3
  402a7c:	47a0      	blx	r4
  402a7e:	2800      	cmp	r0, #0
  402a80:	d0f7      	beq.n	402a72 <task_but+0x9e>
            if (!pio_get(BUT1_PIO, PIO_INPUT, BUT1_PIO_PIN_MASK)) {
  402a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402a86:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  402a8a:	4638      	mov	r0, r7
  402a8c:	47d8      	blx	fp
                delayTicks += 100;
  402a8e:	9b03      	ldr	r3, [sp, #12]
            if (!pio_get(BUT1_PIO, PIO_INPUT, BUT1_PIO_PIN_MASK)) {
  402a90:	b990      	cbnz	r0, 402ab8 <task_but+0xe4>
                delayTicks += 100;
  402a92:	3364      	adds	r3, #100	; 0x64
  402a94:	9303      	str	r3, [sp, #12]
            xQueueSend(xQueueLedFreq, (void *)&delayTicks, 10);
  402a96:	2300      	movs	r3, #0
  402a98:	220a      	movs	r2, #10
  402a9a:	4631      	mov	r1, r6
  402a9c:	f8da 0000 	ldr.w	r0, [sl]
  402aa0:	47c8      	blx	r9
            printf("task_but: %d \n", delayTicks);
  402aa2:	4b11      	ldr	r3, [pc, #68]	; (402ae8 <task_but+0x114>)
  402aa4:	9903      	ldr	r1, [sp, #12]
  402aa6:	4640      	mov	r0, r8
  402aa8:	4798      	blx	r3
            if (delayTicks == 100) {
  402aaa:	9b03      	ldr	r3, [sp, #12]
  402aac:	2b64      	cmp	r3, #100	; 0x64
  402aae:	d1e0      	bne.n	402a72 <task_but+0x9e>
                delayTicks = 900;
  402ab0:	f44f 7361 	mov.w	r3, #900	; 0x384
  402ab4:	9303      	str	r3, [sp, #12]
  402ab6:	e7dc      	b.n	402a72 <task_but+0x9e>
                delayTicks -= 100;
  402ab8:	3b64      	subs	r3, #100	; 0x64
  402aba:	9303      	str	r3, [sp, #12]
  402abc:	e7eb      	b.n	402a96 <task_but+0xc2>
  402abe:	bf00      	nop
  402ac0:	00400531 	.word	0x00400531
  402ac4:	004029b1 	.word	0x004029b1
  402ac8:	400e0e00 	.word	0x400e0e00
  402acc:	400e1400 	.word	0x400e1400
  402ad0:	00400691 	.word	0x00400691
  402ad4:	004005fd 	.word	0x004005fd
  402ad8:	00400601 	.word	0x00400601
  402adc:	e000e100 	.word	0xe000e100
  402ae0:	20400c10 	.word	0x20400c10
  402ae4:	0040170d 	.word	0x0040170d
  402ae8:	00402f69 	.word	0x00402f69
  402aec:	00400449 	.word	0x00400449
  402af0:	20400c14 	.word	0x20400c14
  402af4:	00401355 	.word	0x00401355
  402af8:	00405f74 	.word	0x00405f74

00402afc <usart_serial_getchar>:
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402afc:	4b2d      	ldr	r3, [pc, #180]	; (402bb4 <usart_serial_getchar+0xb8>)
	uint32_t val = 0;
  402afe:	2200      	movs	r2, #0
{
  402b00:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (UART0 == (Uart*)p_usart) {
  402b02:	4298      	cmp	r0, r3
{
  402b04:	b083      	sub	sp, #12
  402b06:	4604      	mov	r4, r0
  402b08:	460d      	mov	r5, r1
	uint32_t val = 0;
  402b0a:	9201      	str	r2, [sp, #4]
	if (UART0 == (Uart*)p_usart) {
  402b0c:	d03a      	beq.n	402b84 <usart_serial_getchar+0x88>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  402b0e:	4b2a      	ldr	r3, [pc, #168]	; (402bb8 <usart_serial_getchar+0xbc>)
  402b10:	4298      	cmp	r0, r3
  402b12:	d03f      	beq.n	402b94 <usart_serial_getchar+0x98>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  402b14:	4b29      	ldr	r3, [pc, #164]	; (402bbc <usart_serial_getchar+0xc0>)
  402b16:	4298      	cmp	r0, r3
  402b18:	d044      	beq.n	402ba4 <usart_serial_getchar+0xa8>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  402b1a:	4b29      	ldr	r3, [pc, #164]	; (402bc0 <usart_serial_getchar+0xc4>)
  402b1c:	4298      	cmp	r0, r3
  402b1e:	d015      	beq.n	402b4c <usart_serial_getchar+0x50>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  402b20:	4b28      	ldr	r3, [pc, #160]	; (402bc4 <usart_serial_getchar+0xc8>)
  402b22:	4298      	cmp	r0, r3
  402b24:	d024      	beq.n	402b70 <usart_serial_getchar+0x74>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  402b26:	4b28      	ldr	r3, [pc, #160]	; (402bc8 <usart_serial_getchar+0xcc>)
  402b28:	429c      	cmp	r4, r3
  402b2a:	d017      	beq.n	402b5c <usart_serial_getchar+0x60>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402b2c:	4b27      	ldr	r3, [pc, #156]	; (402bcc <usart_serial_getchar+0xd0>)
  402b2e:	429c      	cmp	r4, r3
  402b30:	d001      	beq.n	402b36 <usart_serial_getchar+0x3a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  402b32:	b003      	add	sp, #12
  402b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402b36:	af01      	add	r7, sp, #4
  402b38:	4e25      	ldr	r6, [pc, #148]	; (402bd0 <usart_serial_getchar+0xd4>)
		while (usart_read(p_usart, &val));
  402b3a:	4639      	mov	r1, r7
  402b3c:	4620      	mov	r0, r4
  402b3e:	47b0      	blx	r6
  402b40:	2800      	cmp	r0, #0
  402b42:	d1fa      	bne.n	402b3a <usart_serial_getchar+0x3e>
		*data = (uint8_t)(val & 0xFF);
  402b44:	9b01      	ldr	r3, [sp, #4]
  402b46:	702b      	strb	r3, [r5, #0]
}
  402b48:	b003      	add	sp, #12
  402b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402b4c:	4e21      	ldr	r6, [pc, #132]	; (402bd4 <usart_serial_getchar+0xd8>)
		while (uart_read((Uart*)p_usart, data));
  402b4e:	4629      	mov	r1, r5
  402b50:	4620      	mov	r0, r4
  402b52:	47b0      	blx	r6
  402b54:	2800      	cmp	r0, #0
  402b56:	d1fa      	bne.n	402b4e <usart_serial_getchar+0x52>
}
  402b58:	b003      	add	sp, #12
  402b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402b5c:	af01      	add	r7, sp, #4
  402b5e:	4e1c      	ldr	r6, [pc, #112]	; (402bd0 <usart_serial_getchar+0xd4>)
		while (usart_read(p_usart, &val));
  402b60:	4639      	mov	r1, r7
  402b62:	4620      	mov	r0, r4
  402b64:	47b0      	blx	r6
  402b66:	2800      	cmp	r0, #0
  402b68:	d1fa      	bne.n	402b60 <usart_serial_getchar+0x64>
		*data = (uint8_t)(val & 0xFF);
  402b6a:	9b01      	ldr	r3, [sp, #4]
  402b6c:	702b      	strb	r3, [r5, #0]
  402b6e:	e7eb      	b.n	402b48 <usart_serial_getchar+0x4c>
  402b70:	af01      	add	r7, sp, #4
  402b72:	4e17      	ldr	r6, [pc, #92]	; (402bd0 <usart_serial_getchar+0xd4>)
		while (usart_read(p_usart, &val));
  402b74:	4639      	mov	r1, r7
  402b76:	4620      	mov	r0, r4
  402b78:	47b0      	blx	r6
  402b7a:	2800      	cmp	r0, #0
  402b7c:	d1fa      	bne.n	402b74 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
  402b7e:	9b01      	ldr	r3, [sp, #4]
  402b80:	702b      	strb	r3, [r5, #0]
  402b82:	e7e1      	b.n	402b48 <usart_serial_getchar+0x4c>
  402b84:	4e13      	ldr	r6, [pc, #76]	; (402bd4 <usart_serial_getchar+0xd8>)
		while (uart_read((Uart*)p_usart, data));
  402b86:	4607      	mov	r7, r0
  402b88:	4629      	mov	r1, r5
  402b8a:	4638      	mov	r0, r7
  402b8c:	47b0      	blx	r6
  402b8e:	2800      	cmp	r0, #0
  402b90:	d1fa      	bne.n	402b88 <usart_serial_getchar+0x8c>
  402b92:	e7c8      	b.n	402b26 <usart_serial_getchar+0x2a>
  402b94:	4e0f      	ldr	r6, [pc, #60]	; (402bd4 <usart_serial_getchar+0xd8>)
		while (uart_read((Uart*)p_usart, data));
  402b96:	4607      	mov	r7, r0
  402b98:	4629      	mov	r1, r5
  402b9a:	4638      	mov	r0, r7
  402b9c:	47b0      	blx	r6
  402b9e:	2800      	cmp	r0, #0
  402ba0:	d1fa      	bne.n	402b98 <usart_serial_getchar+0x9c>
  402ba2:	e7c0      	b.n	402b26 <usart_serial_getchar+0x2a>
  402ba4:	4e0b      	ldr	r6, [pc, #44]	; (402bd4 <usart_serial_getchar+0xd8>)
		while (uart_read((Uart*)p_usart, data));
  402ba6:	4607      	mov	r7, r0
  402ba8:	4629      	mov	r1, r5
  402baa:	4638      	mov	r0, r7
  402bac:	47b0      	blx	r6
  402bae:	2800      	cmp	r0, #0
  402bb0:	d1fa      	bne.n	402ba8 <usart_serial_getchar+0xac>
  402bb2:	e7bb      	b.n	402b2c <usart_serial_getchar+0x30>
  402bb4:	400e0800 	.word	0x400e0800
  402bb8:	400e0a00 	.word	0x400e0a00
  402bbc:	400e1a00 	.word	0x400e1a00
  402bc0:	400e1c00 	.word	0x400e1c00
  402bc4:	40024000 	.word	0x40024000
  402bc8:	40028000 	.word	0x40028000
  402bcc:	4002c000 	.word	0x4002c000
  402bd0:	004009bd 	.word	0x004009bd
  402bd4:	004008bd 	.word	0x004008bd

00402bd8 <usart_serial_putchar>:
	if (UART0 == (Uart*)p_usart) {
  402bd8:	4b2a      	ldr	r3, [pc, #168]	; (402c84 <usart_serial_putchar+0xac>)
  402bda:	4298      	cmp	r0, r3
{
  402bdc:	b570      	push	{r4, r5, r6, lr}
  402bde:	460d      	mov	r5, r1
	if (UART0 == (Uart*)p_usart) {
  402be0:	d01c      	beq.n	402c1c <usart_serial_putchar+0x44>
	if (UART1 == (Uart*)p_usart) {
  402be2:	4b29      	ldr	r3, [pc, #164]	; (402c88 <usart_serial_putchar+0xb0>)
  402be4:	4298      	cmp	r0, r3
  402be6:	d022      	beq.n	402c2e <usart_serial_putchar+0x56>
	if (UART2 == (Uart*)p_usart) {
  402be8:	4b28      	ldr	r3, [pc, #160]	; (402c8c <usart_serial_putchar+0xb4>)
  402bea:	4298      	cmp	r0, r3
  402bec:	d028      	beq.n	402c40 <usart_serial_putchar+0x68>
	if (UART3 == (Uart*)p_usart) {
  402bee:	4b28      	ldr	r3, [pc, #160]	; (402c90 <usart_serial_putchar+0xb8>)
  402bf0:	4298      	cmp	r0, r3
  402bf2:	d02e      	beq.n	402c52 <usart_serial_putchar+0x7a>
	if (USART0 == p_usart) {
  402bf4:	4b27      	ldr	r3, [pc, #156]	; (402c94 <usart_serial_putchar+0xbc>)
  402bf6:	4298      	cmp	r0, r3
  402bf8:	d007      	beq.n	402c0a <usart_serial_putchar+0x32>
	if (USART1 == p_usart) {
  402bfa:	4b27      	ldr	r3, [pc, #156]	; (402c98 <usart_serial_putchar+0xc0>)
  402bfc:	4298      	cmp	r0, r3
  402bfe:	d038      	beq.n	402c72 <usart_serial_putchar+0x9a>
	if (USART2 == p_usart) {
  402c00:	4b26      	ldr	r3, [pc, #152]	; (402c9c <usart_serial_putchar+0xc4>)
  402c02:	4298      	cmp	r0, r3
  402c04:	d02d      	beq.n	402c62 <usart_serial_putchar+0x8a>
	return 0;
  402c06:	2000      	movs	r0, #0
}
  402c08:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402c0a:	4604      	mov	r4, r0
  402c0c:	4e24      	ldr	r6, [pc, #144]	; (402ca0 <usart_serial_putchar+0xc8>)
  402c0e:	4629      	mov	r1, r5
  402c10:	4620      	mov	r0, r4
  402c12:	47b0      	blx	r6
  402c14:	2800      	cmp	r0, #0
  402c16:	d1fa      	bne.n	402c0e <usart_serial_putchar+0x36>
		return 1;
  402c18:	2001      	movs	r0, #1
  402c1a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402c1c:	4604      	mov	r4, r0
  402c1e:	4e21      	ldr	r6, [pc, #132]	; (402ca4 <usart_serial_putchar+0xcc>)
  402c20:	4629      	mov	r1, r5
  402c22:	4620      	mov	r0, r4
  402c24:	47b0      	blx	r6
  402c26:	2800      	cmp	r0, #0
  402c28:	d1fa      	bne.n	402c20 <usart_serial_putchar+0x48>
		return 1;
  402c2a:	2001      	movs	r0, #1
  402c2c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402c2e:	4604      	mov	r4, r0
  402c30:	4e1c      	ldr	r6, [pc, #112]	; (402ca4 <usart_serial_putchar+0xcc>)
  402c32:	4629      	mov	r1, r5
  402c34:	4620      	mov	r0, r4
  402c36:	47b0      	blx	r6
  402c38:	2800      	cmp	r0, #0
  402c3a:	d1fa      	bne.n	402c32 <usart_serial_putchar+0x5a>
		return 1;
  402c3c:	2001      	movs	r0, #1
  402c3e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402c40:	4604      	mov	r4, r0
  402c42:	4e18      	ldr	r6, [pc, #96]	; (402ca4 <usart_serial_putchar+0xcc>)
  402c44:	4629      	mov	r1, r5
  402c46:	4620      	mov	r0, r4
  402c48:	47b0      	blx	r6
  402c4a:	2800      	cmp	r0, #0
  402c4c:	d1fa      	bne.n	402c44 <usart_serial_putchar+0x6c>
		return 1;
  402c4e:	2001      	movs	r0, #1
  402c50:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402c52:	4604      	mov	r4, r0
  402c54:	4e13      	ldr	r6, [pc, #76]	; (402ca4 <usart_serial_putchar+0xcc>)
  402c56:	4629      	mov	r1, r5
  402c58:	4620      	mov	r0, r4
  402c5a:	47b0      	blx	r6
  402c5c:	2800      	cmp	r0, #0
  402c5e:	d1fa      	bne.n	402c56 <usart_serial_putchar+0x7e>
  402c60:	e7da      	b.n	402c18 <usart_serial_putchar+0x40>
		while (usart_write(p_usart, c)!=0);
  402c62:	4604      	mov	r4, r0
  402c64:	4e0e      	ldr	r6, [pc, #56]	; (402ca0 <usart_serial_putchar+0xc8>)
  402c66:	4629      	mov	r1, r5
  402c68:	4620      	mov	r0, r4
  402c6a:	47b0      	blx	r6
  402c6c:	2800      	cmp	r0, #0
  402c6e:	d1fa      	bne.n	402c66 <usart_serial_putchar+0x8e>
  402c70:	e7d2      	b.n	402c18 <usart_serial_putchar+0x40>
		while (usart_write(p_usart, c)!=0);
  402c72:	4604      	mov	r4, r0
  402c74:	4e0a      	ldr	r6, [pc, #40]	; (402ca0 <usart_serial_putchar+0xc8>)
  402c76:	4629      	mov	r1, r5
  402c78:	4620      	mov	r0, r4
  402c7a:	47b0      	blx	r6
  402c7c:	2800      	cmp	r0, #0
  402c7e:	d1fa      	bne.n	402c76 <usart_serial_putchar+0x9e>
  402c80:	e7ca      	b.n	402c18 <usart_serial_putchar+0x40>
  402c82:	bf00      	nop
  402c84:	400e0800 	.word	0x400e0800
  402c88:	400e0a00 	.word	0x400e0a00
  402c8c:	400e1a00 	.word	0x400e1a00
  402c90:	400e1c00 	.word	0x400e1c00
  402c94:	40024000 	.word	0x40024000
  402c98:	40028000 	.word	0x40028000
  402c9c:	4002c000 	.word	0x4002c000
  402ca0:	004009a5 	.word	0x004009a5
  402ca4:	004008ad 	.word	0x004008ad

00402ca8 <vApplicationStackOverflowHook>:
                                          signed char *pcTaskName) {
  402ca8:	b508      	push	{r3, lr}
    printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  402caa:	460a      	mov	r2, r1
  402cac:	4b02      	ldr	r3, [pc, #8]	; (402cb8 <vApplicationStackOverflowHook+0x10>)
  402cae:	4601      	mov	r1, r0
  402cb0:	4802      	ldr	r0, [pc, #8]	; (402cbc <vApplicationStackOverflowHook+0x14>)
  402cb2:	4798      	blx	r3
  402cb4:	e7fe      	b.n	402cb4 <vApplicationStackOverflowHook+0xc>
  402cb6:	bf00      	nop
  402cb8:	00402f69 	.word	0x00402f69
  402cbc:	00405f94 	.word	0x00405f94

00402cc0 <vApplicationTickHook>:
extern void vApplicationTickHook(void) {}
  402cc0:	4770      	bx	lr
  402cc2:	bf00      	nop

00402cc4 <vApplicationMallocFailedHook>:

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  402cc4:	f04f 0380 	mov.w	r3, #128	; 0x80
  402cc8:	b672      	cpsid	i
  402cca:	f383 8811 	msr	BASEPRI, r3
  402cce:	f3bf 8f6f 	isb	sy
  402cd2:	f3bf 8f4f 	dsb	sy
  402cd6:	b662      	cpsie	i
  402cd8:	e7fe      	b.n	402cd8 <vApplicationMallocFailedHook+0x14>
  402cda:	bf00      	nop

00402cdc <pin_toggle>:
void pin_toggle(Pio *pio, uint32_t mask) {
  402cdc:	b570      	push	{r4, r5, r6, lr}
  402cde:	460d      	mov	r5, r1
    if (pio_get_output_data_status(pio, mask))
  402ce0:	4b07      	ldr	r3, [pc, #28]	; (402d00 <pin_toggle+0x24>)
void pin_toggle(Pio *pio, uint32_t mask) {
  402ce2:	4604      	mov	r4, r0
    if (pio_get_output_data_status(pio, mask))
  402ce4:	4798      	blx	r3
        pio_clear(pio, mask);
  402ce6:	4629      	mov	r1, r5
    if (pio_get_output_data_status(pio, mask))
  402ce8:	b920      	cbnz	r0, 402cf4 <pin_toggle+0x18>
        pio_set(pio, mask);
  402cea:	4620      	mov	r0, r4
  402cec:	4b05      	ldr	r3, [pc, #20]	; (402d04 <pin_toggle+0x28>)
}
  402cee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        pio_set(pio, mask);
  402cf2:	4718      	bx	r3
        pio_clear(pio, mask);
  402cf4:	4620      	mov	r0, r4
  402cf6:	4b04      	ldr	r3, [pc, #16]	; (402d08 <pin_toggle+0x2c>)
}
  402cf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        pio_clear(pio, mask);
  402cfc:	4718      	bx	r3
  402cfe:	bf00      	nop
  402d00:	004005f1 	.word	0x004005f1
  402d04:	00400441 	.word	0x00400441
  402d08:	00400445 	.word	0x00400445

00402d0c <LED_init>:
void LED_init(int estado) {
  402d0c:	b510      	push	{r4, lr}
    pmc_enable_periph_clk(LED_PIO_ID);
  402d0e:	4b07      	ldr	r3, [pc, #28]	; (402d2c <LED_init+0x20>)
void LED_init(int estado) {
  402d10:	b082      	sub	sp, #8
  402d12:	4604      	mov	r4, r0
    pmc_enable_periph_clk(LED_PIO_ID);
  402d14:	200c      	movs	r0, #12
  402d16:	4798      	blx	r3
    pio_set_output(LED_PIO, LED_IDX_MASK, estado, 0, 0);
  402d18:	2300      	movs	r3, #0
  402d1a:	4622      	mov	r2, r4
  402d1c:	f44f 7180 	mov.w	r1, #256	; 0x100
  402d20:	4803      	ldr	r0, [pc, #12]	; (402d30 <LED_init+0x24>)
  402d22:	4c04      	ldr	r4, [pc, #16]	; (402d34 <LED_init+0x28>)
  402d24:	9300      	str	r3, [sp, #0]
  402d26:	47a0      	blx	r4
};
  402d28:	b002      	add	sp, #8
  402d2a:	bd10      	pop	{r4, pc}
  402d2c:	00400865 	.word	0x00400865
  402d30:	400e1200 	.word	0x400e1200
  402d34:	004004fd 	.word	0x004004fd

00402d38 <task_led>:
static void task_led(void *pvParameters) {
  402d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402d3c:	b083      	sub	sp, #12
    LED_init(1);
  402d3e:	4b14      	ldr	r3, [pc, #80]	; (402d90 <task_led+0x58>)
  402d40:	2001      	movs	r0, #1
    uint32_t delayMs = 2000;
  402d42:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
    LED_init(1);
  402d46:	4798      	blx	r3
    uint32_t msg = 0;
  402d48:	ad02      	add	r5, sp, #8
  402d4a:	2300      	movs	r3, #0
  402d4c:	f8df a050 	ldr.w	sl, [pc, #80]	; 402da0 <task_led+0x68>
  402d50:	f8df 9050 	ldr.w	r9, [pc, #80]	; 402da4 <task_led+0x6c>
  402d54:	f8df 8050 	ldr.w	r8, [pc, #80]	; 402da8 <task_led+0x70>
  402d58:	4f0e      	ldr	r7, [pc, #56]	; (402d94 <task_led+0x5c>)
            printf("task_led: %d \n", delayMs);
  402d5a:	f8df b050 	ldr.w	fp, [pc, #80]	; 402dac <task_led+0x74>
        pin_toggle(LED_PIO, LED_IDX_MASK);
  402d5e:	4e0e      	ldr	r6, [pc, #56]	; (402d98 <task_led+0x60>)
    uint32_t msg = 0;
  402d60:	f845 3d04 	str.w	r3, [r5, #-4]!
  402d64:	e005      	b.n	402d72 <task_led+0x3a>
        pin_toggle(LED_PIO, LED_IDX_MASK);
  402d66:	4630      	mov	r0, r6
  402d68:	f44f 7180 	mov.w	r1, #256	; 0x100
  402d6c:	47c0      	blx	r8
        vTaskDelay(delayMs);
  402d6e:	4620      	mov	r0, r4
  402d70:	47b8      	blx	r7
        if (xQueueReceive(xQueueLedFreq, &msg, (TickType_t)0)) {
  402d72:	2300      	movs	r3, #0
  402d74:	4629      	mov	r1, r5
  402d76:	f8da 0000 	ldr.w	r0, [sl]
  402d7a:	461a      	mov	r2, r3
  402d7c:	47c8      	blx	r9
  402d7e:	2800      	cmp	r0, #0
  402d80:	d0f1      	beq.n	402d66 <task_led+0x2e>
            delayMs = msg / portTICK_PERIOD_MS;
  402d82:	9c01      	ldr	r4, [sp, #4]
            printf("task_led: %d \n", delayMs);
  402d84:	4658      	mov	r0, fp
  402d86:	4b05      	ldr	r3, [pc, #20]	; (402d9c <task_led+0x64>)
  402d88:	4621      	mov	r1, r4
  402d8a:	4798      	blx	r3
  402d8c:	e7eb      	b.n	402d66 <task_led+0x2e>
  402d8e:	bf00      	nop
  402d90:	00402d0d 	.word	0x00402d0d
  402d94:	00401f71 	.word	0x00401f71
  402d98:	400e1200 	.word	0x400e1200
  402d9c:	00402f69 	.word	0x00402f69
  402da0:	20400c14 	.word	0x20400c14
  402da4:	0040170d 	.word	0x0040170d
  402da8:	00402cdd 	.word	0x00402cdd
  402dac:	00405f84 	.word	0x00405f84

00402db0 <main>:
/**
 *  \brief FreeRTOS Real Time Kernel example entry point.
 *
 *  \return Unused (ANSI-C compatibility).
 */
int main(void) {
  402db0:	b580      	push	{r7, lr}
    /* Initialize the SAM system */
    sysclk_init();
  402db2:	4b39      	ldr	r3, [pc, #228]	; (402e98 <main+0xe8>)
int main(void) {
  402db4:	b08a      	sub	sp, #40	; 0x28
    sysclk_init();
  402db6:	4798      	blx	r3
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  402db8:	4e38      	ldr	r6, [pc, #224]	; (402e9c <main+0xec>)
    board_init();
  402dba:	4b39      	ldr	r3, [pc, #228]	; (402ea0 <main+0xf0>)
	usart_settings.stop_bits= opt->stopbits;
  402dbc:	2500      	movs	r5, #0
  402dbe:	4f39      	ldr	r7, [pc, #228]	; (402ea4 <main+0xf4>)
  402dc0:	4798      	blx	r3
	stdio_base = (void *)usart;
  402dc2:	4c39      	ldr	r4, [pc, #228]	; (402ea8 <main+0xf8>)
	usart_settings.baudrate = opt->baudrate;
  402dc4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  402dc8:	4838      	ldr	r0, [pc, #224]	; (402eac <main+0xfc>)
	usart_settings.char_length = opt->charlength;
  402dca:	21c0      	movs	r1, #192	; 0xc0
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  402dcc:	6037      	str	r7, [r6, #0]
	usart_settings.parity_type = opt->paritytype;
  402dce:	f44f 6200 	mov.w	r2, #2048	; 0x800
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  402dd2:	4e37      	ldr	r6, [pc, #220]	; (402eb0 <main+0x100>)
  402dd4:	4f37      	ldr	r7, [pc, #220]	; (402eb4 <main+0x104>)
	stdio_base = (void *)usart;
  402dd6:	6004      	str	r4, [r0, #0]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  402dd8:	200e      	movs	r0, #14
	usart_settings.baudrate = opt->baudrate;
  402dda:	9304      	str	r3, [sp, #16]
  402ddc:	4b36      	ldr	r3, [pc, #216]	; (402eb8 <main+0x108>)
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  402dde:	6037      	str	r7, [r6, #0]
	usart_settings.char_length = opt->charlength;
  402de0:	9105      	str	r1, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  402de2:	9206      	str	r2, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  402de4:	9507      	str	r5, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  402de6:	9508      	str	r5, [sp, #32]
  402de8:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  402dea:	4a34      	ldr	r2, [pc, #208]	; (402ebc <main+0x10c>)
  402dec:	a904      	add	r1, sp, #16
  402dee:	4620      	mov	r0, r4
  402df0:	4b33      	ldr	r3, [pc, #204]	; (402ec0 <main+0x110>)
  402df2:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  402df4:	4f33      	ldr	r7, [pc, #204]	; (402ec4 <main+0x114>)
		usart_enable_tx(p_usart);
  402df6:	4620      	mov	r0, r4
  402df8:	4b33      	ldr	r3, [pc, #204]	; (402ec8 <main+0x118>)
  402dfa:	4798      	blx	r3
		usart_enable_rx(p_usart);
  402dfc:	4620      	mov	r0, r4
  402dfe:	4b33      	ldr	r3, [pc, #204]	; (402ecc <main+0x11c>)
  402e00:	4798      	blx	r3
  402e02:	683b      	ldr	r3, [r7, #0]
  402e04:	4e32      	ldr	r6, [pc, #200]	; (402ed0 <main+0x120>)
  402e06:	4629      	mov	r1, r5
  402e08:	6898      	ldr	r0, [r3, #8]
  402e0a:	47b0      	blx	r6
	setbuf(stdin, NULL);
  402e0c:	683b      	ldr	r3, [r7, #0]
  402e0e:	4629      	mov	r1, r5
    configure_console();

    printf("Sys init ok \n");
  402e10:	4c30      	ldr	r4, [pc, #192]	; (402ed4 <main+0x124>)
  402e12:	6858      	ldr	r0, [r3, #4]
  402e14:	47b0      	blx	r6
    setbuf(stdout, NULL);
  402e16:	683b      	ldr	r3, [r7, #0]
  402e18:	4629      	mov	r1, r5

    /* Attempt to create a semaphore. */
    xSemaphoreBut = xSemaphoreCreateBinary();
  402e1a:	4f2f      	ldr	r7, [pc, #188]	; (402ed8 <main+0x128>)
    setbuf(stdout, NULL);
  402e1c:	6898      	ldr	r0, [r3, #8]
  402e1e:	47b0      	blx	r6
    printf("Sys init ok \n");
  402e20:	482e      	ldr	r0, [pc, #184]	; (402edc <main+0x12c>)
  402e22:	47a0      	blx	r4
    xSemaphoreBut = xSemaphoreCreateBinary();
  402e24:	4629      	mov	r1, r5
  402e26:	2203      	movs	r2, #3
  402e28:	2001      	movs	r0, #1
  402e2a:	47b8      	blx	r7
  402e2c:	4b2c      	ldr	r3, [pc, #176]	; (402ee0 <main+0x130>)
  402e2e:	6018      	str	r0, [r3, #0]
    if (xSemaphoreBut == NULL)
  402e30:	2800      	cmp	r0, #0
  402e32:	d02d      	beq.n	402e90 <main+0xe0>
        printf("falha em criar o semaforo \n");

    /* cria queue com 32 "espacos" */
    /* cada espaço possui o tamanho de um inteiro*/
    xQueueLedFreq = xQueueCreate(32, sizeof(uint32_t));
  402e34:	2200      	movs	r2, #0
  402e36:	2104      	movs	r1, #4
  402e38:	2020      	movs	r0, #32
  402e3a:	47b8      	blx	r7
  402e3c:	4b29      	ldr	r3, [pc, #164]	; (402ee4 <main+0x134>)
  402e3e:	6018      	str	r0, [r3, #0]
    if (xQueueLedFreq == NULL)
  402e40:	b318      	cbz	r0, 402e8a <main+0xda>
        printf("falha em criar a queue \n");

    /* Create task to make led blink */
    if (xTaskCreate(task_led, "Led", TASK_LED_STACK_SIZE, NULL,
  402e42:	2000      	movs	r0, #0
  402e44:	f44f 6280 	mov.w	r2, #1024	; 0x400
  402e48:	4927      	ldr	r1, [pc, #156]	; (402ee8 <main+0x138>)
  402e4a:	4603      	mov	r3, r0
  402e4c:	9003      	str	r0, [sp, #12]
  402e4e:	9002      	str	r0, [sp, #8]
  402e50:	9001      	str	r0, [sp, #4]
  402e52:	9000      	str	r0, [sp, #0]
  402e54:	4d25      	ldr	r5, [pc, #148]	; (402eec <main+0x13c>)
  402e56:	4826      	ldr	r0, [pc, #152]	; (402ef0 <main+0x140>)
  402e58:	47a8      	blx	r5
  402e5a:	2801      	cmp	r0, #1
                    TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
        printf("Failed to create test led task\r\n");
  402e5c:	bf14      	ite	ne
  402e5e:	4825      	ldrne	r0, [pc, #148]	; (402ef4 <main+0x144>)
    } else {
        printf("task led created \r\n");
  402e60:	4825      	ldreq	r0, [pc, #148]	; (402ef8 <main+0x148>)
  402e62:	47a0      	blx	r4
    }
    /* Create task to monitor processor activity */
    if (xTaskCreate(task_but, "BUT", TASK_BUT_STACK_SIZE, NULL,
  402e64:	2000      	movs	r0, #0
  402e66:	f44f 6280 	mov.w	r2, #1024	; 0x400
  402e6a:	4924      	ldr	r1, [pc, #144]	; (402efc <main+0x14c>)
  402e6c:	4603      	mov	r3, r0
  402e6e:	9003      	str	r0, [sp, #12]
  402e70:	9002      	str	r0, [sp, #8]
  402e72:	9001      	str	r0, [sp, #4]
  402e74:	9000      	str	r0, [sp, #0]
  402e76:	4822      	ldr	r0, [pc, #136]	; (402f00 <main+0x150>)
  402e78:	47a8      	blx	r5
  402e7a:	2801      	cmp	r0, #1
                    TASK_BUT_STACK_PRIORITY, NULL) != pdPASS) {
        printf("Failed to create UartTx task\r\n");
  402e7c:	bf14      	ite	ne
  402e7e:	4821      	ldrne	r0, [pc, #132]	; (402f04 <main+0x154>)
    } else {
        printf("task led but \r\n");
  402e80:	4821      	ldreq	r0, [pc, #132]	; (402f08 <main+0x158>)
  402e82:	47a0      	blx	r4
    }

    /* Start the scheduler. */
    vTaskStartScheduler();
  402e84:	4b21      	ldr	r3, [pc, #132]	; (402f0c <main+0x15c>)
  402e86:	4798      	blx	r3
  402e88:	e7fe      	b.n	402e88 <main+0xd8>
        printf("falha em criar a queue \n");
  402e8a:	4821      	ldr	r0, [pc, #132]	; (402f10 <main+0x160>)
  402e8c:	47a0      	blx	r4
  402e8e:	e7d8      	b.n	402e42 <main+0x92>
        printf("falha em criar o semaforo \n");
  402e90:	4820      	ldr	r0, [pc, #128]	; (402f14 <main+0x164>)
  402e92:	47a0      	blx	r4
  402e94:	e7ce      	b.n	402e34 <main+0x84>
  402e96:	bf00      	nop
  402e98:	004001ad 	.word	0x004001ad
  402e9c:	20400bc8 	.word	0x20400bc8
  402ea0:	004002ad 	.word	0x004002ad
  402ea4:	00402bd9 	.word	0x00402bd9
  402ea8:	40028000 	.word	0x40028000
  402eac:	20400bcc 	.word	0x20400bcc
  402eb0:	20400bc4 	.word	0x20400bc4
  402eb4:	00402afd 	.word	0x00402afd
  402eb8:	00400865 	.word	0x00400865
  402ebc:	08f0d180 	.word	0x08f0d180
  402ec0:	00400931 	.word	0x00400931
  402ec4:	2040000c 	.word	0x2040000c
  402ec8:	00400995 	.word	0x00400995
  402ecc:	0040099d 	.word	0x0040099d
  402ed0:	0040371d 	.word	0x0040371d
  402ed4:	00402f69 	.word	0x00402f69
  402ed8:	004012e9 	.word	0x004012e9
  402edc:	00405ebc 	.word	0x00405ebc
  402ee0:	20400c10 	.word	0x20400c10
  402ee4:	20400c14 	.word	0x20400c14
  402ee8:	00405f04 	.word	0x00405f04
  402eec:	00401be5 	.word	0x00401be5
  402ef0:	00402d39 	.word	0x00402d39
  402ef4:	00405f08 	.word	0x00405f08
  402ef8:	00405f2c 	.word	0x00405f2c
  402efc:	00405f40 	.word	0x00405f40
  402f00:	004029d5 	.word	0x004029d5
  402f04:	00405f44 	.word	0x00405f44
  402f08:	00405f64 	.word	0x00405f64
  402f0c:	00401c31 	.word	0x00401c31
  402f10:	00405ee8 	.word	0x00405ee8
  402f14:	00405ecc 	.word	0x00405ecc

00402f18 <__libc_init_array>:
  402f18:	b570      	push	{r4, r5, r6, lr}
  402f1a:	4e0f      	ldr	r6, [pc, #60]	; (402f58 <__libc_init_array+0x40>)
  402f1c:	4d0f      	ldr	r5, [pc, #60]	; (402f5c <__libc_init_array+0x44>)
  402f1e:	1b76      	subs	r6, r6, r5
  402f20:	10b6      	asrs	r6, r6, #2
  402f22:	bf18      	it	ne
  402f24:	2400      	movne	r4, #0
  402f26:	d005      	beq.n	402f34 <__libc_init_array+0x1c>
  402f28:	3401      	adds	r4, #1
  402f2a:	f855 3b04 	ldr.w	r3, [r5], #4
  402f2e:	4798      	blx	r3
  402f30:	42a6      	cmp	r6, r4
  402f32:	d1f9      	bne.n	402f28 <__libc_init_array+0x10>
  402f34:	4e0a      	ldr	r6, [pc, #40]	; (402f60 <__libc_init_array+0x48>)
  402f36:	4d0b      	ldr	r5, [pc, #44]	; (402f64 <__libc_init_array+0x4c>)
  402f38:	1b76      	subs	r6, r6, r5
  402f3a:	f003 f8eb 	bl	406114 <_init>
  402f3e:	10b6      	asrs	r6, r6, #2
  402f40:	bf18      	it	ne
  402f42:	2400      	movne	r4, #0
  402f44:	d006      	beq.n	402f54 <__libc_init_array+0x3c>
  402f46:	3401      	adds	r4, #1
  402f48:	f855 3b04 	ldr.w	r3, [r5], #4
  402f4c:	4798      	blx	r3
  402f4e:	42a6      	cmp	r6, r4
  402f50:	d1f9      	bne.n	402f46 <__libc_init_array+0x2e>
  402f52:	bd70      	pop	{r4, r5, r6, pc}
  402f54:	bd70      	pop	{r4, r5, r6, pc}
  402f56:	bf00      	nop
  402f58:	00406120 	.word	0x00406120
  402f5c:	00406120 	.word	0x00406120
  402f60:	00406128 	.word	0x00406128
  402f64:	00406120 	.word	0x00406120

00402f68 <iprintf>:
  402f68:	b40f      	push	{r0, r1, r2, r3}
  402f6a:	b500      	push	{lr}
  402f6c:	4907      	ldr	r1, [pc, #28]	; (402f8c <iprintf+0x24>)
  402f6e:	b083      	sub	sp, #12
  402f70:	ab04      	add	r3, sp, #16
  402f72:	6808      	ldr	r0, [r1, #0]
  402f74:	f853 2b04 	ldr.w	r2, [r3], #4
  402f78:	6881      	ldr	r1, [r0, #8]
  402f7a:	9301      	str	r3, [sp, #4]
  402f7c:	f000 fd4e 	bl	403a1c <_vfiprintf_r>
  402f80:	b003      	add	sp, #12
  402f82:	f85d eb04 	ldr.w	lr, [sp], #4
  402f86:	b004      	add	sp, #16
  402f88:	4770      	bx	lr
  402f8a:	bf00      	nop
  402f8c:	2040000c 	.word	0x2040000c

00402f90 <malloc>:
  402f90:	4b02      	ldr	r3, [pc, #8]	; (402f9c <malloc+0xc>)
  402f92:	4601      	mov	r1, r0
  402f94:	6818      	ldr	r0, [r3, #0]
  402f96:	f000 b80b 	b.w	402fb0 <_malloc_r>
  402f9a:	bf00      	nop
  402f9c:	2040000c 	.word	0x2040000c

00402fa0 <free>:
  402fa0:	4b02      	ldr	r3, [pc, #8]	; (402fac <free+0xc>)
  402fa2:	4601      	mov	r1, r0
  402fa4:	6818      	ldr	r0, [r3, #0]
  402fa6:	f001 be55 	b.w	404c54 <_free_r>
  402faa:	bf00      	nop
  402fac:	2040000c 	.word	0x2040000c

00402fb0 <_malloc_r>:
  402fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402fb4:	f101 060b 	add.w	r6, r1, #11
  402fb8:	2e16      	cmp	r6, #22
  402fba:	b083      	sub	sp, #12
  402fbc:	4605      	mov	r5, r0
  402fbe:	f240 809e 	bls.w	4030fe <_malloc_r+0x14e>
  402fc2:	f036 0607 	bics.w	r6, r6, #7
  402fc6:	f100 80bd 	bmi.w	403144 <_malloc_r+0x194>
  402fca:	42b1      	cmp	r1, r6
  402fcc:	f200 80ba 	bhi.w	403144 <_malloc_r+0x194>
  402fd0:	f000 fb86 	bl	4036e0 <__malloc_lock>
  402fd4:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  402fd8:	f0c0 8293 	bcc.w	403502 <_malloc_r+0x552>
  402fdc:	0a73      	lsrs	r3, r6, #9
  402fde:	f000 80b8 	beq.w	403152 <_malloc_r+0x1a2>
  402fe2:	2b04      	cmp	r3, #4
  402fe4:	f200 8179 	bhi.w	4032da <_malloc_r+0x32a>
  402fe8:	09b3      	lsrs	r3, r6, #6
  402fea:	f103 0039 	add.w	r0, r3, #57	; 0x39
  402fee:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  402ff2:	00c3      	lsls	r3, r0, #3
  402ff4:	4fbf      	ldr	r7, [pc, #764]	; (4032f4 <_malloc_r+0x344>)
  402ff6:	443b      	add	r3, r7
  402ff8:	f1a3 0108 	sub.w	r1, r3, #8
  402ffc:	685c      	ldr	r4, [r3, #4]
  402ffe:	42a1      	cmp	r1, r4
  403000:	d106      	bne.n	403010 <_malloc_r+0x60>
  403002:	e00c      	b.n	40301e <_malloc_r+0x6e>
  403004:	2a00      	cmp	r2, #0
  403006:	f280 80aa 	bge.w	40315e <_malloc_r+0x1ae>
  40300a:	68e4      	ldr	r4, [r4, #12]
  40300c:	42a1      	cmp	r1, r4
  40300e:	d006      	beq.n	40301e <_malloc_r+0x6e>
  403010:	6863      	ldr	r3, [r4, #4]
  403012:	f023 0303 	bic.w	r3, r3, #3
  403016:	1b9a      	subs	r2, r3, r6
  403018:	2a0f      	cmp	r2, #15
  40301a:	ddf3      	ble.n	403004 <_malloc_r+0x54>
  40301c:	4670      	mov	r0, lr
  40301e:	693c      	ldr	r4, [r7, #16]
  403020:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 403308 <_malloc_r+0x358>
  403024:	4574      	cmp	r4, lr
  403026:	f000 81ab 	beq.w	403380 <_malloc_r+0x3d0>
  40302a:	6863      	ldr	r3, [r4, #4]
  40302c:	f023 0303 	bic.w	r3, r3, #3
  403030:	1b9a      	subs	r2, r3, r6
  403032:	2a0f      	cmp	r2, #15
  403034:	f300 8190 	bgt.w	403358 <_malloc_r+0x3a8>
  403038:	2a00      	cmp	r2, #0
  40303a:	f8c7 e014 	str.w	lr, [r7, #20]
  40303e:	f8c7 e010 	str.w	lr, [r7, #16]
  403042:	f280 809d 	bge.w	403180 <_malloc_r+0x1d0>
  403046:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40304a:	f080 8161 	bcs.w	403310 <_malloc_r+0x360>
  40304e:	08db      	lsrs	r3, r3, #3
  403050:	f103 0c01 	add.w	ip, r3, #1
  403054:	1099      	asrs	r1, r3, #2
  403056:	687a      	ldr	r2, [r7, #4]
  403058:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  40305c:	f8c4 8008 	str.w	r8, [r4, #8]
  403060:	2301      	movs	r3, #1
  403062:	408b      	lsls	r3, r1
  403064:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  403068:	4313      	orrs	r3, r2
  40306a:	3908      	subs	r1, #8
  40306c:	60e1      	str	r1, [r4, #12]
  40306e:	607b      	str	r3, [r7, #4]
  403070:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  403074:	f8c8 400c 	str.w	r4, [r8, #12]
  403078:	1082      	asrs	r2, r0, #2
  40307a:	2401      	movs	r4, #1
  40307c:	4094      	lsls	r4, r2
  40307e:	429c      	cmp	r4, r3
  403080:	f200 808b 	bhi.w	40319a <_malloc_r+0x1ea>
  403084:	421c      	tst	r4, r3
  403086:	d106      	bne.n	403096 <_malloc_r+0xe6>
  403088:	f020 0003 	bic.w	r0, r0, #3
  40308c:	0064      	lsls	r4, r4, #1
  40308e:	421c      	tst	r4, r3
  403090:	f100 0004 	add.w	r0, r0, #4
  403094:	d0fa      	beq.n	40308c <_malloc_r+0xdc>
  403096:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40309a:	46cc      	mov	ip, r9
  40309c:	4680      	mov	r8, r0
  40309e:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4030a2:	459c      	cmp	ip, r3
  4030a4:	d107      	bne.n	4030b6 <_malloc_r+0x106>
  4030a6:	e16d      	b.n	403384 <_malloc_r+0x3d4>
  4030a8:	2a00      	cmp	r2, #0
  4030aa:	f280 817b 	bge.w	4033a4 <_malloc_r+0x3f4>
  4030ae:	68db      	ldr	r3, [r3, #12]
  4030b0:	459c      	cmp	ip, r3
  4030b2:	f000 8167 	beq.w	403384 <_malloc_r+0x3d4>
  4030b6:	6859      	ldr	r1, [r3, #4]
  4030b8:	f021 0103 	bic.w	r1, r1, #3
  4030bc:	1b8a      	subs	r2, r1, r6
  4030be:	2a0f      	cmp	r2, #15
  4030c0:	ddf2      	ble.n	4030a8 <_malloc_r+0xf8>
  4030c2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4030c6:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4030ca:	9300      	str	r3, [sp, #0]
  4030cc:	199c      	adds	r4, r3, r6
  4030ce:	4628      	mov	r0, r5
  4030d0:	f046 0601 	orr.w	r6, r6, #1
  4030d4:	f042 0501 	orr.w	r5, r2, #1
  4030d8:	605e      	str	r6, [r3, #4]
  4030da:	f8c8 c00c 	str.w	ip, [r8, #12]
  4030de:	f8cc 8008 	str.w	r8, [ip, #8]
  4030e2:	617c      	str	r4, [r7, #20]
  4030e4:	613c      	str	r4, [r7, #16]
  4030e6:	f8c4 e00c 	str.w	lr, [r4, #12]
  4030ea:	f8c4 e008 	str.w	lr, [r4, #8]
  4030ee:	6065      	str	r5, [r4, #4]
  4030f0:	505a      	str	r2, [r3, r1]
  4030f2:	f000 fafb 	bl	4036ec <__malloc_unlock>
  4030f6:	9b00      	ldr	r3, [sp, #0]
  4030f8:	f103 0408 	add.w	r4, r3, #8
  4030fc:	e01e      	b.n	40313c <_malloc_r+0x18c>
  4030fe:	2910      	cmp	r1, #16
  403100:	d820      	bhi.n	403144 <_malloc_r+0x194>
  403102:	f000 faed 	bl	4036e0 <__malloc_lock>
  403106:	2610      	movs	r6, #16
  403108:	2318      	movs	r3, #24
  40310a:	2002      	movs	r0, #2
  40310c:	4f79      	ldr	r7, [pc, #484]	; (4032f4 <_malloc_r+0x344>)
  40310e:	443b      	add	r3, r7
  403110:	f1a3 0208 	sub.w	r2, r3, #8
  403114:	685c      	ldr	r4, [r3, #4]
  403116:	4294      	cmp	r4, r2
  403118:	f000 813d 	beq.w	403396 <_malloc_r+0x3e6>
  40311c:	6863      	ldr	r3, [r4, #4]
  40311e:	68e1      	ldr	r1, [r4, #12]
  403120:	68a6      	ldr	r6, [r4, #8]
  403122:	f023 0303 	bic.w	r3, r3, #3
  403126:	4423      	add	r3, r4
  403128:	4628      	mov	r0, r5
  40312a:	685a      	ldr	r2, [r3, #4]
  40312c:	60f1      	str	r1, [r6, #12]
  40312e:	f042 0201 	orr.w	r2, r2, #1
  403132:	608e      	str	r6, [r1, #8]
  403134:	605a      	str	r2, [r3, #4]
  403136:	f000 fad9 	bl	4036ec <__malloc_unlock>
  40313a:	3408      	adds	r4, #8
  40313c:	4620      	mov	r0, r4
  40313e:	b003      	add	sp, #12
  403140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403144:	2400      	movs	r4, #0
  403146:	230c      	movs	r3, #12
  403148:	4620      	mov	r0, r4
  40314a:	602b      	str	r3, [r5, #0]
  40314c:	b003      	add	sp, #12
  40314e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403152:	2040      	movs	r0, #64	; 0x40
  403154:	f44f 7300 	mov.w	r3, #512	; 0x200
  403158:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  40315c:	e74a      	b.n	402ff4 <_malloc_r+0x44>
  40315e:	4423      	add	r3, r4
  403160:	68e1      	ldr	r1, [r4, #12]
  403162:	685a      	ldr	r2, [r3, #4]
  403164:	68a6      	ldr	r6, [r4, #8]
  403166:	f042 0201 	orr.w	r2, r2, #1
  40316a:	60f1      	str	r1, [r6, #12]
  40316c:	4628      	mov	r0, r5
  40316e:	608e      	str	r6, [r1, #8]
  403170:	605a      	str	r2, [r3, #4]
  403172:	f000 fabb 	bl	4036ec <__malloc_unlock>
  403176:	3408      	adds	r4, #8
  403178:	4620      	mov	r0, r4
  40317a:	b003      	add	sp, #12
  40317c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403180:	4423      	add	r3, r4
  403182:	4628      	mov	r0, r5
  403184:	685a      	ldr	r2, [r3, #4]
  403186:	f042 0201 	orr.w	r2, r2, #1
  40318a:	605a      	str	r2, [r3, #4]
  40318c:	f000 faae 	bl	4036ec <__malloc_unlock>
  403190:	3408      	adds	r4, #8
  403192:	4620      	mov	r0, r4
  403194:	b003      	add	sp, #12
  403196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40319a:	68bc      	ldr	r4, [r7, #8]
  40319c:	6863      	ldr	r3, [r4, #4]
  40319e:	f023 0803 	bic.w	r8, r3, #3
  4031a2:	45b0      	cmp	r8, r6
  4031a4:	d304      	bcc.n	4031b0 <_malloc_r+0x200>
  4031a6:	eba8 0306 	sub.w	r3, r8, r6
  4031aa:	2b0f      	cmp	r3, #15
  4031ac:	f300 8085 	bgt.w	4032ba <_malloc_r+0x30a>
  4031b0:	f8df 9158 	ldr.w	r9, [pc, #344]	; 40330c <_malloc_r+0x35c>
  4031b4:	4b50      	ldr	r3, [pc, #320]	; (4032f8 <_malloc_r+0x348>)
  4031b6:	f8d9 2000 	ldr.w	r2, [r9]
  4031ba:	681b      	ldr	r3, [r3, #0]
  4031bc:	3201      	adds	r2, #1
  4031be:	4433      	add	r3, r6
  4031c0:	eb04 0a08 	add.w	sl, r4, r8
  4031c4:	f000 8155 	beq.w	403472 <_malloc_r+0x4c2>
  4031c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4031cc:	330f      	adds	r3, #15
  4031ce:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  4031d2:	f02b 0b0f 	bic.w	fp, fp, #15
  4031d6:	4659      	mov	r1, fp
  4031d8:	4628      	mov	r0, r5
  4031da:	f000 fa8d 	bl	4036f8 <_sbrk_r>
  4031de:	1c41      	adds	r1, r0, #1
  4031e0:	4602      	mov	r2, r0
  4031e2:	f000 80fc 	beq.w	4033de <_malloc_r+0x42e>
  4031e6:	4582      	cmp	sl, r0
  4031e8:	f200 80f7 	bhi.w	4033da <_malloc_r+0x42a>
  4031ec:	4b43      	ldr	r3, [pc, #268]	; (4032fc <_malloc_r+0x34c>)
  4031ee:	6819      	ldr	r1, [r3, #0]
  4031f0:	4459      	add	r1, fp
  4031f2:	6019      	str	r1, [r3, #0]
  4031f4:	f000 814d 	beq.w	403492 <_malloc_r+0x4e2>
  4031f8:	f8d9 0000 	ldr.w	r0, [r9]
  4031fc:	3001      	adds	r0, #1
  4031fe:	bf1b      	ittet	ne
  403200:	eba2 0a0a 	subne.w	sl, r2, sl
  403204:	4451      	addne	r1, sl
  403206:	f8c9 2000 	streq.w	r2, [r9]
  40320a:	6019      	strne	r1, [r3, #0]
  40320c:	f012 0107 	ands.w	r1, r2, #7
  403210:	f000 8115 	beq.w	40343e <_malloc_r+0x48e>
  403214:	f1c1 0008 	rsb	r0, r1, #8
  403218:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40321c:	4402      	add	r2, r0
  40321e:	3108      	adds	r1, #8
  403220:	eb02 090b 	add.w	r9, r2, fp
  403224:	f3c9 090b 	ubfx	r9, r9, #0, #12
  403228:	eba1 0909 	sub.w	r9, r1, r9
  40322c:	4649      	mov	r1, r9
  40322e:	4628      	mov	r0, r5
  403230:	9301      	str	r3, [sp, #4]
  403232:	9200      	str	r2, [sp, #0]
  403234:	f000 fa60 	bl	4036f8 <_sbrk_r>
  403238:	1c43      	adds	r3, r0, #1
  40323a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40323e:	f000 8143 	beq.w	4034c8 <_malloc_r+0x518>
  403242:	1a80      	subs	r0, r0, r2
  403244:	4448      	add	r0, r9
  403246:	f040 0001 	orr.w	r0, r0, #1
  40324a:	6819      	ldr	r1, [r3, #0]
  40324c:	60ba      	str	r2, [r7, #8]
  40324e:	4449      	add	r1, r9
  403250:	42bc      	cmp	r4, r7
  403252:	6050      	str	r0, [r2, #4]
  403254:	6019      	str	r1, [r3, #0]
  403256:	d017      	beq.n	403288 <_malloc_r+0x2d8>
  403258:	f1b8 0f0f 	cmp.w	r8, #15
  40325c:	f240 80fb 	bls.w	403456 <_malloc_r+0x4a6>
  403260:	6860      	ldr	r0, [r4, #4]
  403262:	f1a8 020c 	sub.w	r2, r8, #12
  403266:	f022 0207 	bic.w	r2, r2, #7
  40326a:	eb04 0e02 	add.w	lr, r4, r2
  40326e:	f000 0001 	and.w	r0, r0, #1
  403272:	f04f 0c05 	mov.w	ip, #5
  403276:	4310      	orrs	r0, r2
  403278:	2a0f      	cmp	r2, #15
  40327a:	6060      	str	r0, [r4, #4]
  40327c:	f8ce c004 	str.w	ip, [lr, #4]
  403280:	f8ce c008 	str.w	ip, [lr, #8]
  403284:	f200 8117 	bhi.w	4034b6 <_malloc_r+0x506>
  403288:	4b1d      	ldr	r3, [pc, #116]	; (403300 <_malloc_r+0x350>)
  40328a:	68bc      	ldr	r4, [r7, #8]
  40328c:	681a      	ldr	r2, [r3, #0]
  40328e:	4291      	cmp	r1, r2
  403290:	bf88      	it	hi
  403292:	6019      	strhi	r1, [r3, #0]
  403294:	4b1b      	ldr	r3, [pc, #108]	; (403304 <_malloc_r+0x354>)
  403296:	681a      	ldr	r2, [r3, #0]
  403298:	4291      	cmp	r1, r2
  40329a:	6862      	ldr	r2, [r4, #4]
  40329c:	bf88      	it	hi
  40329e:	6019      	strhi	r1, [r3, #0]
  4032a0:	f022 0203 	bic.w	r2, r2, #3
  4032a4:	4296      	cmp	r6, r2
  4032a6:	eba2 0306 	sub.w	r3, r2, r6
  4032aa:	d801      	bhi.n	4032b0 <_malloc_r+0x300>
  4032ac:	2b0f      	cmp	r3, #15
  4032ae:	dc04      	bgt.n	4032ba <_malloc_r+0x30a>
  4032b0:	4628      	mov	r0, r5
  4032b2:	f000 fa1b 	bl	4036ec <__malloc_unlock>
  4032b6:	2400      	movs	r4, #0
  4032b8:	e740      	b.n	40313c <_malloc_r+0x18c>
  4032ba:	19a2      	adds	r2, r4, r6
  4032bc:	f043 0301 	orr.w	r3, r3, #1
  4032c0:	f046 0601 	orr.w	r6, r6, #1
  4032c4:	6066      	str	r6, [r4, #4]
  4032c6:	4628      	mov	r0, r5
  4032c8:	60ba      	str	r2, [r7, #8]
  4032ca:	6053      	str	r3, [r2, #4]
  4032cc:	f000 fa0e 	bl	4036ec <__malloc_unlock>
  4032d0:	3408      	adds	r4, #8
  4032d2:	4620      	mov	r0, r4
  4032d4:	b003      	add	sp, #12
  4032d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4032da:	2b14      	cmp	r3, #20
  4032dc:	d971      	bls.n	4033c2 <_malloc_r+0x412>
  4032de:	2b54      	cmp	r3, #84	; 0x54
  4032e0:	f200 80a3 	bhi.w	40342a <_malloc_r+0x47a>
  4032e4:	0b33      	lsrs	r3, r6, #12
  4032e6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  4032ea:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  4032ee:	00c3      	lsls	r3, r0, #3
  4032f0:	e680      	b.n	402ff4 <_malloc_r+0x44>
  4032f2:	bf00      	nop
  4032f4:	20400438 	.word	0x20400438
  4032f8:	20400bc0 	.word	0x20400bc0
  4032fc:	20400b90 	.word	0x20400b90
  403300:	20400bb8 	.word	0x20400bb8
  403304:	20400bbc 	.word	0x20400bbc
  403308:	20400440 	.word	0x20400440
  40330c:	20400840 	.word	0x20400840
  403310:	0a5a      	lsrs	r2, r3, #9
  403312:	2a04      	cmp	r2, #4
  403314:	d95b      	bls.n	4033ce <_malloc_r+0x41e>
  403316:	2a14      	cmp	r2, #20
  403318:	f200 80ae 	bhi.w	403478 <_malloc_r+0x4c8>
  40331c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  403320:	00c9      	lsls	r1, r1, #3
  403322:	325b      	adds	r2, #91	; 0x5b
  403324:	eb07 0c01 	add.w	ip, r7, r1
  403328:	5879      	ldr	r1, [r7, r1]
  40332a:	f1ac 0c08 	sub.w	ip, ip, #8
  40332e:	458c      	cmp	ip, r1
  403330:	f000 8088 	beq.w	403444 <_malloc_r+0x494>
  403334:	684a      	ldr	r2, [r1, #4]
  403336:	f022 0203 	bic.w	r2, r2, #3
  40333a:	4293      	cmp	r3, r2
  40333c:	d273      	bcs.n	403426 <_malloc_r+0x476>
  40333e:	6889      	ldr	r1, [r1, #8]
  403340:	458c      	cmp	ip, r1
  403342:	d1f7      	bne.n	403334 <_malloc_r+0x384>
  403344:	f8dc 200c 	ldr.w	r2, [ip, #12]
  403348:	687b      	ldr	r3, [r7, #4]
  40334a:	60e2      	str	r2, [r4, #12]
  40334c:	f8c4 c008 	str.w	ip, [r4, #8]
  403350:	6094      	str	r4, [r2, #8]
  403352:	f8cc 400c 	str.w	r4, [ip, #12]
  403356:	e68f      	b.n	403078 <_malloc_r+0xc8>
  403358:	19a1      	adds	r1, r4, r6
  40335a:	f046 0c01 	orr.w	ip, r6, #1
  40335e:	f042 0601 	orr.w	r6, r2, #1
  403362:	f8c4 c004 	str.w	ip, [r4, #4]
  403366:	4628      	mov	r0, r5
  403368:	6179      	str	r1, [r7, #20]
  40336a:	6139      	str	r1, [r7, #16]
  40336c:	f8c1 e00c 	str.w	lr, [r1, #12]
  403370:	f8c1 e008 	str.w	lr, [r1, #8]
  403374:	604e      	str	r6, [r1, #4]
  403376:	50e2      	str	r2, [r4, r3]
  403378:	f000 f9b8 	bl	4036ec <__malloc_unlock>
  40337c:	3408      	adds	r4, #8
  40337e:	e6dd      	b.n	40313c <_malloc_r+0x18c>
  403380:	687b      	ldr	r3, [r7, #4]
  403382:	e679      	b.n	403078 <_malloc_r+0xc8>
  403384:	f108 0801 	add.w	r8, r8, #1
  403388:	f018 0f03 	tst.w	r8, #3
  40338c:	f10c 0c08 	add.w	ip, ip, #8
  403390:	f47f ae85 	bne.w	40309e <_malloc_r+0xee>
  403394:	e02d      	b.n	4033f2 <_malloc_r+0x442>
  403396:	68dc      	ldr	r4, [r3, #12]
  403398:	42a3      	cmp	r3, r4
  40339a:	bf08      	it	eq
  40339c:	3002      	addeq	r0, #2
  40339e:	f43f ae3e 	beq.w	40301e <_malloc_r+0x6e>
  4033a2:	e6bb      	b.n	40311c <_malloc_r+0x16c>
  4033a4:	4419      	add	r1, r3
  4033a6:	461c      	mov	r4, r3
  4033a8:	684a      	ldr	r2, [r1, #4]
  4033aa:	68db      	ldr	r3, [r3, #12]
  4033ac:	f854 6f08 	ldr.w	r6, [r4, #8]!
  4033b0:	f042 0201 	orr.w	r2, r2, #1
  4033b4:	604a      	str	r2, [r1, #4]
  4033b6:	4628      	mov	r0, r5
  4033b8:	60f3      	str	r3, [r6, #12]
  4033ba:	609e      	str	r6, [r3, #8]
  4033bc:	f000 f996 	bl	4036ec <__malloc_unlock>
  4033c0:	e6bc      	b.n	40313c <_malloc_r+0x18c>
  4033c2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4033c6:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4033ca:	00c3      	lsls	r3, r0, #3
  4033cc:	e612      	b.n	402ff4 <_malloc_r+0x44>
  4033ce:	099a      	lsrs	r2, r3, #6
  4033d0:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4033d4:	00c9      	lsls	r1, r1, #3
  4033d6:	3238      	adds	r2, #56	; 0x38
  4033d8:	e7a4      	b.n	403324 <_malloc_r+0x374>
  4033da:	42bc      	cmp	r4, r7
  4033dc:	d054      	beq.n	403488 <_malloc_r+0x4d8>
  4033de:	68bc      	ldr	r4, [r7, #8]
  4033e0:	6862      	ldr	r2, [r4, #4]
  4033e2:	f022 0203 	bic.w	r2, r2, #3
  4033e6:	e75d      	b.n	4032a4 <_malloc_r+0x2f4>
  4033e8:	f859 3908 	ldr.w	r3, [r9], #-8
  4033ec:	4599      	cmp	r9, r3
  4033ee:	f040 8086 	bne.w	4034fe <_malloc_r+0x54e>
  4033f2:	f010 0f03 	tst.w	r0, #3
  4033f6:	f100 30ff 	add.w	r0, r0, #4294967295
  4033fa:	d1f5      	bne.n	4033e8 <_malloc_r+0x438>
  4033fc:	687b      	ldr	r3, [r7, #4]
  4033fe:	ea23 0304 	bic.w	r3, r3, r4
  403402:	607b      	str	r3, [r7, #4]
  403404:	0064      	lsls	r4, r4, #1
  403406:	429c      	cmp	r4, r3
  403408:	f63f aec7 	bhi.w	40319a <_malloc_r+0x1ea>
  40340c:	2c00      	cmp	r4, #0
  40340e:	f43f aec4 	beq.w	40319a <_malloc_r+0x1ea>
  403412:	421c      	tst	r4, r3
  403414:	4640      	mov	r0, r8
  403416:	f47f ae3e 	bne.w	403096 <_malloc_r+0xe6>
  40341a:	0064      	lsls	r4, r4, #1
  40341c:	421c      	tst	r4, r3
  40341e:	f100 0004 	add.w	r0, r0, #4
  403422:	d0fa      	beq.n	40341a <_malloc_r+0x46a>
  403424:	e637      	b.n	403096 <_malloc_r+0xe6>
  403426:	468c      	mov	ip, r1
  403428:	e78c      	b.n	403344 <_malloc_r+0x394>
  40342a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40342e:	d815      	bhi.n	40345c <_malloc_r+0x4ac>
  403430:	0bf3      	lsrs	r3, r6, #15
  403432:	f103 0078 	add.w	r0, r3, #120	; 0x78
  403436:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40343a:	00c3      	lsls	r3, r0, #3
  40343c:	e5da      	b.n	402ff4 <_malloc_r+0x44>
  40343e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403442:	e6ed      	b.n	403220 <_malloc_r+0x270>
  403444:	687b      	ldr	r3, [r7, #4]
  403446:	1092      	asrs	r2, r2, #2
  403448:	2101      	movs	r1, #1
  40344a:	fa01 f202 	lsl.w	r2, r1, r2
  40344e:	4313      	orrs	r3, r2
  403450:	607b      	str	r3, [r7, #4]
  403452:	4662      	mov	r2, ip
  403454:	e779      	b.n	40334a <_malloc_r+0x39a>
  403456:	2301      	movs	r3, #1
  403458:	6053      	str	r3, [r2, #4]
  40345a:	e729      	b.n	4032b0 <_malloc_r+0x300>
  40345c:	f240 5254 	movw	r2, #1364	; 0x554
  403460:	4293      	cmp	r3, r2
  403462:	d822      	bhi.n	4034aa <_malloc_r+0x4fa>
  403464:	0cb3      	lsrs	r3, r6, #18
  403466:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40346a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40346e:	00c3      	lsls	r3, r0, #3
  403470:	e5c0      	b.n	402ff4 <_malloc_r+0x44>
  403472:	f103 0b10 	add.w	fp, r3, #16
  403476:	e6ae      	b.n	4031d6 <_malloc_r+0x226>
  403478:	2a54      	cmp	r2, #84	; 0x54
  40347a:	d829      	bhi.n	4034d0 <_malloc_r+0x520>
  40347c:	0b1a      	lsrs	r2, r3, #12
  40347e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403482:	00c9      	lsls	r1, r1, #3
  403484:	326e      	adds	r2, #110	; 0x6e
  403486:	e74d      	b.n	403324 <_malloc_r+0x374>
  403488:	4b20      	ldr	r3, [pc, #128]	; (40350c <_malloc_r+0x55c>)
  40348a:	6819      	ldr	r1, [r3, #0]
  40348c:	4459      	add	r1, fp
  40348e:	6019      	str	r1, [r3, #0]
  403490:	e6b2      	b.n	4031f8 <_malloc_r+0x248>
  403492:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403496:	2800      	cmp	r0, #0
  403498:	f47f aeae 	bne.w	4031f8 <_malloc_r+0x248>
  40349c:	eb08 030b 	add.w	r3, r8, fp
  4034a0:	68ba      	ldr	r2, [r7, #8]
  4034a2:	f043 0301 	orr.w	r3, r3, #1
  4034a6:	6053      	str	r3, [r2, #4]
  4034a8:	e6ee      	b.n	403288 <_malloc_r+0x2d8>
  4034aa:	207f      	movs	r0, #127	; 0x7f
  4034ac:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4034b0:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4034b4:	e59e      	b.n	402ff4 <_malloc_r+0x44>
  4034b6:	f104 0108 	add.w	r1, r4, #8
  4034ba:	4628      	mov	r0, r5
  4034bc:	9300      	str	r3, [sp, #0]
  4034be:	f001 fbc9 	bl	404c54 <_free_r>
  4034c2:	9b00      	ldr	r3, [sp, #0]
  4034c4:	6819      	ldr	r1, [r3, #0]
  4034c6:	e6df      	b.n	403288 <_malloc_r+0x2d8>
  4034c8:	2001      	movs	r0, #1
  4034ca:	f04f 0900 	mov.w	r9, #0
  4034ce:	e6bc      	b.n	40324a <_malloc_r+0x29a>
  4034d0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4034d4:	d805      	bhi.n	4034e2 <_malloc_r+0x532>
  4034d6:	0bda      	lsrs	r2, r3, #15
  4034d8:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4034dc:	00c9      	lsls	r1, r1, #3
  4034de:	3277      	adds	r2, #119	; 0x77
  4034e0:	e720      	b.n	403324 <_malloc_r+0x374>
  4034e2:	f240 5154 	movw	r1, #1364	; 0x554
  4034e6:	428a      	cmp	r2, r1
  4034e8:	d805      	bhi.n	4034f6 <_malloc_r+0x546>
  4034ea:	0c9a      	lsrs	r2, r3, #18
  4034ec:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4034f0:	00c9      	lsls	r1, r1, #3
  4034f2:	327c      	adds	r2, #124	; 0x7c
  4034f4:	e716      	b.n	403324 <_malloc_r+0x374>
  4034f6:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4034fa:	227e      	movs	r2, #126	; 0x7e
  4034fc:	e712      	b.n	403324 <_malloc_r+0x374>
  4034fe:	687b      	ldr	r3, [r7, #4]
  403500:	e780      	b.n	403404 <_malloc_r+0x454>
  403502:	08f0      	lsrs	r0, r6, #3
  403504:	f106 0308 	add.w	r3, r6, #8
  403508:	e600      	b.n	40310c <_malloc_r+0x15c>
  40350a:	bf00      	nop
  40350c:	20400b90 	.word	0x20400b90

00403510 <memcpy>:
  403510:	4684      	mov	ip, r0
  403512:	ea41 0300 	orr.w	r3, r1, r0
  403516:	f013 0303 	ands.w	r3, r3, #3
  40351a:	d16d      	bne.n	4035f8 <memcpy+0xe8>
  40351c:	3a40      	subs	r2, #64	; 0x40
  40351e:	d341      	bcc.n	4035a4 <memcpy+0x94>
  403520:	f851 3b04 	ldr.w	r3, [r1], #4
  403524:	f840 3b04 	str.w	r3, [r0], #4
  403528:	f851 3b04 	ldr.w	r3, [r1], #4
  40352c:	f840 3b04 	str.w	r3, [r0], #4
  403530:	f851 3b04 	ldr.w	r3, [r1], #4
  403534:	f840 3b04 	str.w	r3, [r0], #4
  403538:	f851 3b04 	ldr.w	r3, [r1], #4
  40353c:	f840 3b04 	str.w	r3, [r0], #4
  403540:	f851 3b04 	ldr.w	r3, [r1], #4
  403544:	f840 3b04 	str.w	r3, [r0], #4
  403548:	f851 3b04 	ldr.w	r3, [r1], #4
  40354c:	f840 3b04 	str.w	r3, [r0], #4
  403550:	f851 3b04 	ldr.w	r3, [r1], #4
  403554:	f840 3b04 	str.w	r3, [r0], #4
  403558:	f851 3b04 	ldr.w	r3, [r1], #4
  40355c:	f840 3b04 	str.w	r3, [r0], #4
  403560:	f851 3b04 	ldr.w	r3, [r1], #4
  403564:	f840 3b04 	str.w	r3, [r0], #4
  403568:	f851 3b04 	ldr.w	r3, [r1], #4
  40356c:	f840 3b04 	str.w	r3, [r0], #4
  403570:	f851 3b04 	ldr.w	r3, [r1], #4
  403574:	f840 3b04 	str.w	r3, [r0], #4
  403578:	f851 3b04 	ldr.w	r3, [r1], #4
  40357c:	f840 3b04 	str.w	r3, [r0], #4
  403580:	f851 3b04 	ldr.w	r3, [r1], #4
  403584:	f840 3b04 	str.w	r3, [r0], #4
  403588:	f851 3b04 	ldr.w	r3, [r1], #4
  40358c:	f840 3b04 	str.w	r3, [r0], #4
  403590:	f851 3b04 	ldr.w	r3, [r1], #4
  403594:	f840 3b04 	str.w	r3, [r0], #4
  403598:	f851 3b04 	ldr.w	r3, [r1], #4
  40359c:	f840 3b04 	str.w	r3, [r0], #4
  4035a0:	3a40      	subs	r2, #64	; 0x40
  4035a2:	d2bd      	bcs.n	403520 <memcpy+0x10>
  4035a4:	3230      	adds	r2, #48	; 0x30
  4035a6:	d311      	bcc.n	4035cc <memcpy+0xbc>
  4035a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4035ac:	f840 3b04 	str.w	r3, [r0], #4
  4035b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4035b4:	f840 3b04 	str.w	r3, [r0], #4
  4035b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4035bc:	f840 3b04 	str.w	r3, [r0], #4
  4035c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4035c4:	f840 3b04 	str.w	r3, [r0], #4
  4035c8:	3a10      	subs	r2, #16
  4035ca:	d2ed      	bcs.n	4035a8 <memcpy+0x98>
  4035cc:	320c      	adds	r2, #12
  4035ce:	d305      	bcc.n	4035dc <memcpy+0xcc>
  4035d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4035d4:	f840 3b04 	str.w	r3, [r0], #4
  4035d8:	3a04      	subs	r2, #4
  4035da:	d2f9      	bcs.n	4035d0 <memcpy+0xc0>
  4035dc:	3204      	adds	r2, #4
  4035de:	d008      	beq.n	4035f2 <memcpy+0xe2>
  4035e0:	07d2      	lsls	r2, r2, #31
  4035e2:	bf1c      	itt	ne
  4035e4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4035e8:	f800 3b01 	strbne.w	r3, [r0], #1
  4035ec:	d301      	bcc.n	4035f2 <memcpy+0xe2>
  4035ee:	880b      	ldrh	r3, [r1, #0]
  4035f0:	8003      	strh	r3, [r0, #0]
  4035f2:	4660      	mov	r0, ip
  4035f4:	4770      	bx	lr
  4035f6:	bf00      	nop
  4035f8:	2a08      	cmp	r2, #8
  4035fa:	d313      	bcc.n	403624 <memcpy+0x114>
  4035fc:	078b      	lsls	r3, r1, #30
  4035fe:	d08d      	beq.n	40351c <memcpy+0xc>
  403600:	f010 0303 	ands.w	r3, r0, #3
  403604:	d08a      	beq.n	40351c <memcpy+0xc>
  403606:	f1c3 0304 	rsb	r3, r3, #4
  40360a:	1ad2      	subs	r2, r2, r3
  40360c:	07db      	lsls	r3, r3, #31
  40360e:	bf1c      	itt	ne
  403610:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403614:	f800 3b01 	strbne.w	r3, [r0], #1
  403618:	d380      	bcc.n	40351c <memcpy+0xc>
  40361a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40361e:	f820 3b02 	strh.w	r3, [r0], #2
  403622:	e77b      	b.n	40351c <memcpy+0xc>
  403624:	3a04      	subs	r2, #4
  403626:	d3d9      	bcc.n	4035dc <memcpy+0xcc>
  403628:	3a01      	subs	r2, #1
  40362a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40362e:	f800 3b01 	strb.w	r3, [r0], #1
  403632:	d2f9      	bcs.n	403628 <memcpy+0x118>
  403634:	780b      	ldrb	r3, [r1, #0]
  403636:	7003      	strb	r3, [r0, #0]
  403638:	784b      	ldrb	r3, [r1, #1]
  40363a:	7043      	strb	r3, [r0, #1]
  40363c:	788b      	ldrb	r3, [r1, #2]
  40363e:	7083      	strb	r3, [r0, #2]
  403640:	4660      	mov	r0, ip
  403642:	4770      	bx	lr

00403644 <memset>:
  403644:	b470      	push	{r4, r5, r6}
  403646:	0786      	lsls	r6, r0, #30
  403648:	d046      	beq.n	4036d8 <memset+0x94>
  40364a:	1e54      	subs	r4, r2, #1
  40364c:	2a00      	cmp	r2, #0
  40364e:	d041      	beq.n	4036d4 <memset+0x90>
  403650:	b2ca      	uxtb	r2, r1
  403652:	4603      	mov	r3, r0
  403654:	e002      	b.n	40365c <memset+0x18>
  403656:	f114 34ff 	adds.w	r4, r4, #4294967295
  40365a:	d33b      	bcc.n	4036d4 <memset+0x90>
  40365c:	f803 2b01 	strb.w	r2, [r3], #1
  403660:	079d      	lsls	r5, r3, #30
  403662:	d1f8      	bne.n	403656 <memset+0x12>
  403664:	2c03      	cmp	r4, #3
  403666:	d92e      	bls.n	4036c6 <memset+0x82>
  403668:	b2cd      	uxtb	r5, r1
  40366a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40366e:	2c0f      	cmp	r4, #15
  403670:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403674:	d919      	bls.n	4036aa <memset+0x66>
  403676:	f103 0210 	add.w	r2, r3, #16
  40367a:	4626      	mov	r6, r4
  40367c:	3e10      	subs	r6, #16
  40367e:	2e0f      	cmp	r6, #15
  403680:	f842 5c10 	str.w	r5, [r2, #-16]
  403684:	f842 5c0c 	str.w	r5, [r2, #-12]
  403688:	f842 5c08 	str.w	r5, [r2, #-8]
  40368c:	f842 5c04 	str.w	r5, [r2, #-4]
  403690:	f102 0210 	add.w	r2, r2, #16
  403694:	d8f2      	bhi.n	40367c <memset+0x38>
  403696:	f1a4 0210 	sub.w	r2, r4, #16
  40369a:	f022 020f 	bic.w	r2, r2, #15
  40369e:	f004 040f 	and.w	r4, r4, #15
  4036a2:	3210      	adds	r2, #16
  4036a4:	2c03      	cmp	r4, #3
  4036a6:	4413      	add	r3, r2
  4036a8:	d90d      	bls.n	4036c6 <memset+0x82>
  4036aa:	461e      	mov	r6, r3
  4036ac:	4622      	mov	r2, r4
  4036ae:	3a04      	subs	r2, #4
  4036b0:	2a03      	cmp	r2, #3
  4036b2:	f846 5b04 	str.w	r5, [r6], #4
  4036b6:	d8fa      	bhi.n	4036ae <memset+0x6a>
  4036b8:	1f22      	subs	r2, r4, #4
  4036ba:	f022 0203 	bic.w	r2, r2, #3
  4036be:	3204      	adds	r2, #4
  4036c0:	4413      	add	r3, r2
  4036c2:	f004 0403 	and.w	r4, r4, #3
  4036c6:	b12c      	cbz	r4, 4036d4 <memset+0x90>
  4036c8:	b2c9      	uxtb	r1, r1
  4036ca:	441c      	add	r4, r3
  4036cc:	f803 1b01 	strb.w	r1, [r3], #1
  4036d0:	429c      	cmp	r4, r3
  4036d2:	d1fb      	bne.n	4036cc <memset+0x88>
  4036d4:	bc70      	pop	{r4, r5, r6}
  4036d6:	4770      	bx	lr
  4036d8:	4614      	mov	r4, r2
  4036da:	4603      	mov	r3, r0
  4036dc:	e7c2      	b.n	403664 <memset+0x20>
  4036de:	bf00      	nop

004036e0 <__malloc_lock>:
  4036e0:	4801      	ldr	r0, [pc, #4]	; (4036e8 <__malloc_lock+0x8>)
  4036e2:	f001 bd51 	b.w	405188 <__retarget_lock_acquire_recursive>
  4036e6:	bf00      	nop
  4036e8:	20400c28 	.word	0x20400c28

004036ec <__malloc_unlock>:
  4036ec:	4801      	ldr	r0, [pc, #4]	; (4036f4 <__malloc_unlock+0x8>)
  4036ee:	f001 bd4d 	b.w	40518c <__retarget_lock_release_recursive>
  4036f2:	bf00      	nop
  4036f4:	20400c28 	.word	0x20400c28

004036f8 <_sbrk_r>:
  4036f8:	b538      	push	{r3, r4, r5, lr}
  4036fa:	4c07      	ldr	r4, [pc, #28]	; (403718 <_sbrk_r+0x20>)
  4036fc:	2300      	movs	r3, #0
  4036fe:	4605      	mov	r5, r0
  403700:	4608      	mov	r0, r1
  403702:	6023      	str	r3, [r4, #0]
  403704:	f7fd fa80 	bl	400c08 <_sbrk>
  403708:	1c43      	adds	r3, r0, #1
  40370a:	d000      	beq.n	40370e <_sbrk_r+0x16>
  40370c:	bd38      	pop	{r3, r4, r5, pc}
  40370e:	6823      	ldr	r3, [r4, #0]
  403710:	2b00      	cmp	r3, #0
  403712:	d0fb      	beq.n	40370c <_sbrk_r+0x14>
  403714:	602b      	str	r3, [r5, #0]
  403716:	bd38      	pop	{r3, r4, r5, pc}
  403718:	20400c3c 	.word	0x20400c3c

0040371c <setbuf>:
  40371c:	2900      	cmp	r1, #0
  40371e:	bf0c      	ite	eq
  403720:	2202      	moveq	r2, #2
  403722:	2200      	movne	r2, #0
  403724:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403728:	f000 b800 	b.w	40372c <setvbuf>

0040372c <setvbuf>:
  40372c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403730:	4c61      	ldr	r4, [pc, #388]	; (4038b8 <setvbuf+0x18c>)
  403732:	6825      	ldr	r5, [r4, #0]
  403734:	b083      	sub	sp, #12
  403736:	4604      	mov	r4, r0
  403738:	460f      	mov	r7, r1
  40373a:	4690      	mov	r8, r2
  40373c:	461e      	mov	r6, r3
  40373e:	b115      	cbz	r5, 403746 <setvbuf+0x1a>
  403740:	6bab      	ldr	r3, [r5, #56]	; 0x38
  403742:	2b00      	cmp	r3, #0
  403744:	d064      	beq.n	403810 <setvbuf+0xe4>
  403746:	f1b8 0f02 	cmp.w	r8, #2
  40374a:	d006      	beq.n	40375a <setvbuf+0x2e>
  40374c:	f1b8 0f01 	cmp.w	r8, #1
  403750:	f200 809f 	bhi.w	403892 <setvbuf+0x166>
  403754:	2e00      	cmp	r6, #0
  403756:	f2c0 809c 	blt.w	403892 <setvbuf+0x166>
  40375a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40375c:	07d8      	lsls	r0, r3, #31
  40375e:	d534      	bpl.n	4037ca <setvbuf+0x9e>
  403760:	4621      	mov	r1, r4
  403762:	4628      	mov	r0, r5
  403764:	f001 f8f8 	bl	404958 <_fflush_r>
  403768:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40376a:	b141      	cbz	r1, 40377e <setvbuf+0x52>
  40376c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403770:	4299      	cmp	r1, r3
  403772:	d002      	beq.n	40377a <setvbuf+0x4e>
  403774:	4628      	mov	r0, r5
  403776:	f001 fa6d 	bl	404c54 <_free_r>
  40377a:	2300      	movs	r3, #0
  40377c:	6323      	str	r3, [r4, #48]	; 0x30
  40377e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403782:	2200      	movs	r2, #0
  403784:	61a2      	str	r2, [r4, #24]
  403786:	6062      	str	r2, [r4, #4]
  403788:	061a      	lsls	r2, r3, #24
  40378a:	d43a      	bmi.n	403802 <setvbuf+0xd6>
  40378c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  403790:	f023 0303 	bic.w	r3, r3, #3
  403794:	f1b8 0f02 	cmp.w	r8, #2
  403798:	81a3      	strh	r3, [r4, #12]
  40379a:	d01d      	beq.n	4037d8 <setvbuf+0xac>
  40379c:	ab01      	add	r3, sp, #4
  40379e:	466a      	mov	r2, sp
  4037a0:	4621      	mov	r1, r4
  4037a2:	4628      	mov	r0, r5
  4037a4:	f001 fcf4 	bl	405190 <__swhatbuf_r>
  4037a8:	89a3      	ldrh	r3, [r4, #12]
  4037aa:	4318      	orrs	r0, r3
  4037ac:	81a0      	strh	r0, [r4, #12]
  4037ae:	2e00      	cmp	r6, #0
  4037b0:	d132      	bne.n	403818 <setvbuf+0xec>
  4037b2:	9e00      	ldr	r6, [sp, #0]
  4037b4:	4630      	mov	r0, r6
  4037b6:	f7ff fbeb 	bl	402f90 <malloc>
  4037ba:	4607      	mov	r7, r0
  4037bc:	2800      	cmp	r0, #0
  4037be:	d06b      	beq.n	403898 <setvbuf+0x16c>
  4037c0:	89a3      	ldrh	r3, [r4, #12]
  4037c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4037c6:	81a3      	strh	r3, [r4, #12]
  4037c8:	e028      	b.n	40381c <setvbuf+0xf0>
  4037ca:	89a3      	ldrh	r3, [r4, #12]
  4037cc:	0599      	lsls	r1, r3, #22
  4037ce:	d4c7      	bmi.n	403760 <setvbuf+0x34>
  4037d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4037d2:	f001 fcd9 	bl	405188 <__retarget_lock_acquire_recursive>
  4037d6:	e7c3      	b.n	403760 <setvbuf+0x34>
  4037d8:	2500      	movs	r5, #0
  4037da:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4037dc:	2600      	movs	r6, #0
  4037de:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4037e2:	f043 0302 	orr.w	r3, r3, #2
  4037e6:	2001      	movs	r0, #1
  4037e8:	60a6      	str	r6, [r4, #8]
  4037ea:	07ce      	lsls	r6, r1, #31
  4037ec:	81a3      	strh	r3, [r4, #12]
  4037ee:	6022      	str	r2, [r4, #0]
  4037f0:	6122      	str	r2, [r4, #16]
  4037f2:	6160      	str	r0, [r4, #20]
  4037f4:	d401      	bmi.n	4037fa <setvbuf+0xce>
  4037f6:	0598      	lsls	r0, r3, #22
  4037f8:	d53e      	bpl.n	403878 <setvbuf+0x14c>
  4037fa:	4628      	mov	r0, r5
  4037fc:	b003      	add	sp, #12
  4037fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403802:	6921      	ldr	r1, [r4, #16]
  403804:	4628      	mov	r0, r5
  403806:	f001 fa25 	bl	404c54 <_free_r>
  40380a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40380e:	e7bd      	b.n	40378c <setvbuf+0x60>
  403810:	4628      	mov	r0, r5
  403812:	f001 f8f9 	bl	404a08 <__sinit>
  403816:	e796      	b.n	403746 <setvbuf+0x1a>
  403818:	2f00      	cmp	r7, #0
  40381a:	d0cb      	beq.n	4037b4 <setvbuf+0x88>
  40381c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40381e:	2b00      	cmp	r3, #0
  403820:	d033      	beq.n	40388a <setvbuf+0x15e>
  403822:	9b00      	ldr	r3, [sp, #0]
  403824:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403828:	6027      	str	r7, [r4, #0]
  40382a:	429e      	cmp	r6, r3
  40382c:	bf1c      	itt	ne
  40382e:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  403832:	81a2      	strhne	r2, [r4, #12]
  403834:	f1b8 0f01 	cmp.w	r8, #1
  403838:	bf04      	itt	eq
  40383a:	f042 0201 	orreq.w	r2, r2, #1
  40383e:	81a2      	strheq	r2, [r4, #12]
  403840:	b292      	uxth	r2, r2
  403842:	f012 0308 	ands.w	r3, r2, #8
  403846:	6127      	str	r7, [r4, #16]
  403848:	6166      	str	r6, [r4, #20]
  40384a:	d00e      	beq.n	40386a <setvbuf+0x13e>
  40384c:	07d1      	lsls	r1, r2, #31
  40384e:	d51a      	bpl.n	403886 <setvbuf+0x15a>
  403850:	6e65      	ldr	r5, [r4, #100]	; 0x64
  403852:	4276      	negs	r6, r6
  403854:	2300      	movs	r3, #0
  403856:	f015 0501 	ands.w	r5, r5, #1
  40385a:	61a6      	str	r6, [r4, #24]
  40385c:	60a3      	str	r3, [r4, #8]
  40385e:	d009      	beq.n	403874 <setvbuf+0x148>
  403860:	2500      	movs	r5, #0
  403862:	4628      	mov	r0, r5
  403864:	b003      	add	sp, #12
  403866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40386a:	60a3      	str	r3, [r4, #8]
  40386c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40386e:	f015 0501 	ands.w	r5, r5, #1
  403872:	d1f5      	bne.n	403860 <setvbuf+0x134>
  403874:	0593      	lsls	r3, r2, #22
  403876:	d4c0      	bmi.n	4037fa <setvbuf+0xce>
  403878:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40387a:	f001 fc87 	bl	40518c <__retarget_lock_release_recursive>
  40387e:	4628      	mov	r0, r5
  403880:	b003      	add	sp, #12
  403882:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403886:	60a6      	str	r6, [r4, #8]
  403888:	e7f0      	b.n	40386c <setvbuf+0x140>
  40388a:	4628      	mov	r0, r5
  40388c:	f001 f8bc 	bl	404a08 <__sinit>
  403890:	e7c7      	b.n	403822 <setvbuf+0xf6>
  403892:	f04f 35ff 	mov.w	r5, #4294967295
  403896:	e7b0      	b.n	4037fa <setvbuf+0xce>
  403898:	f8dd 9000 	ldr.w	r9, [sp]
  40389c:	45b1      	cmp	r9, r6
  40389e:	d004      	beq.n	4038aa <setvbuf+0x17e>
  4038a0:	4648      	mov	r0, r9
  4038a2:	f7ff fb75 	bl	402f90 <malloc>
  4038a6:	4607      	mov	r7, r0
  4038a8:	b920      	cbnz	r0, 4038b4 <setvbuf+0x188>
  4038aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4038ae:	f04f 35ff 	mov.w	r5, #4294967295
  4038b2:	e792      	b.n	4037da <setvbuf+0xae>
  4038b4:	464e      	mov	r6, r9
  4038b6:	e783      	b.n	4037c0 <setvbuf+0x94>
  4038b8:	2040000c 	.word	0x2040000c
  4038bc:	00000000 	.word	0x00000000

004038c0 <strlen>:
  4038c0:	f890 f000 	pld	[r0]
  4038c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4038c8:	f020 0107 	bic.w	r1, r0, #7
  4038cc:	f06f 0c00 	mvn.w	ip, #0
  4038d0:	f010 0407 	ands.w	r4, r0, #7
  4038d4:	f891 f020 	pld	[r1, #32]
  4038d8:	f040 8049 	bne.w	40396e <strlen+0xae>
  4038dc:	f04f 0400 	mov.w	r4, #0
  4038e0:	f06f 0007 	mvn.w	r0, #7
  4038e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4038e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4038ec:	f100 0008 	add.w	r0, r0, #8
  4038f0:	fa82 f24c 	uadd8	r2, r2, ip
  4038f4:	faa4 f28c 	sel	r2, r4, ip
  4038f8:	fa83 f34c 	uadd8	r3, r3, ip
  4038fc:	faa2 f38c 	sel	r3, r2, ip
  403900:	bb4b      	cbnz	r3, 403956 <strlen+0x96>
  403902:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  403906:	fa82 f24c 	uadd8	r2, r2, ip
  40390a:	f100 0008 	add.w	r0, r0, #8
  40390e:	faa4 f28c 	sel	r2, r4, ip
  403912:	fa83 f34c 	uadd8	r3, r3, ip
  403916:	faa2 f38c 	sel	r3, r2, ip
  40391a:	b9e3      	cbnz	r3, 403956 <strlen+0x96>
  40391c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  403920:	fa82 f24c 	uadd8	r2, r2, ip
  403924:	f100 0008 	add.w	r0, r0, #8
  403928:	faa4 f28c 	sel	r2, r4, ip
  40392c:	fa83 f34c 	uadd8	r3, r3, ip
  403930:	faa2 f38c 	sel	r3, r2, ip
  403934:	b97b      	cbnz	r3, 403956 <strlen+0x96>
  403936:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40393a:	f101 0120 	add.w	r1, r1, #32
  40393e:	fa82 f24c 	uadd8	r2, r2, ip
  403942:	f100 0008 	add.w	r0, r0, #8
  403946:	faa4 f28c 	sel	r2, r4, ip
  40394a:	fa83 f34c 	uadd8	r3, r3, ip
  40394e:	faa2 f38c 	sel	r3, r2, ip
  403952:	2b00      	cmp	r3, #0
  403954:	d0c6      	beq.n	4038e4 <strlen+0x24>
  403956:	2a00      	cmp	r2, #0
  403958:	bf04      	itt	eq
  40395a:	3004      	addeq	r0, #4
  40395c:	461a      	moveq	r2, r3
  40395e:	ba12      	rev	r2, r2
  403960:	fab2 f282 	clz	r2, r2
  403964:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  403968:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40396c:	4770      	bx	lr
  40396e:	e9d1 2300 	ldrd	r2, r3, [r1]
  403972:	f004 0503 	and.w	r5, r4, #3
  403976:	f1c4 0000 	rsb	r0, r4, #0
  40397a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40397e:	f014 0f04 	tst.w	r4, #4
  403982:	f891 f040 	pld	[r1, #64]	; 0x40
  403986:	fa0c f505 	lsl.w	r5, ip, r5
  40398a:	ea62 0205 	orn	r2, r2, r5
  40398e:	bf1c      	itt	ne
  403990:	ea63 0305 	ornne	r3, r3, r5
  403994:	4662      	movne	r2, ip
  403996:	f04f 0400 	mov.w	r4, #0
  40399a:	e7a9      	b.n	4038f0 <strlen+0x30>

0040399c <__sprint_r.part.0>:
  40399c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4039a0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4039a2:	049c      	lsls	r4, r3, #18
  4039a4:	4693      	mov	fp, r2
  4039a6:	d52f      	bpl.n	403a08 <__sprint_r.part.0+0x6c>
  4039a8:	6893      	ldr	r3, [r2, #8]
  4039aa:	6812      	ldr	r2, [r2, #0]
  4039ac:	b353      	cbz	r3, 403a04 <__sprint_r.part.0+0x68>
  4039ae:	460e      	mov	r6, r1
  4039b0:	4607      	mov	r7, r0
  4039b2:	f102 0908 	add.w	r9, r2, #8
  4039b6:	e919 0420 	ldmdb	r9, {r5, sl}
  4039ba:	ea5f 089a 	movs.w	r8, sl, lsr #2
  4039be:	d017      	beq.n	4039f0 <__sprint_r.part.0+0x54>
  4039c0:	3d04      	subs	r5, #4
  4039c2:	2400      	movs	r4, #0
  4039c4:	e001      	b.n	4039ca <__sprint_r.part.0+0x2e>
  4039c6:	45a0      	cmp	r8, r4
  4039c8:	d010      	beq.n	4039ec <__sprint_r.part.0+0x50>
  4039ca:	4632      	mov	r2, r6
  4039cc:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4039d0:	4638      	mov	r0, r7
  4039d2:	f001 f8bb 	bl	404b4c <_fputwc_r>
  4039d6:	1c43      	adds	r3, r0, #1
  4039d8:	f104 0401 	add.w	r4, r4, #1
  4039dc:	d1f3      	bne.n	4039c6 <__sprint_r.part.0+0x2a>
  4039de:	2300      	movs	r3, #0
  4039e0:	f8cb 3008 	str.w	r3, [fp, #8]
  4039e4:	f8cb 3004 	str.w	r3, [fp, #4]
  4039e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4039ec:	f8db 3008 	ldr.w	r3, [fp, #8]
  4039f0:	f02a 0a03 	bic.w	sl, sl, #3
  4039f4:	eba3 030a 	sub.w	r3, r3, sl
  4039f8:	f8cb 3008 	str.w	r3, [fp, #8]
  4039fc:	f109 0908 	add.w	r9, r9, #8
  403a00:	2b00      	cmp	r3, #0
  403a02:	d1d8      	bne.n	4039b6 <__sprint_r.part.0+0x1a>
  403a04:	2000      	movs	r0, #0
  403a06:	e7ea      	b.n	4039de <__sprint_r.part.0+0x42>
  403a08:	f001 fa0a 	bl	404e20 <__sfvwrite_r>
  403a0c:	2300      	movs	r3, #0
  403a0e:	f8cb 3008 	str.w	r3, [fp, #8]
  403a12:	f8cb 3004 	str.w	r3, [fp, #4]
  403a16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403a1a:	bf00      	nop

00403a1c <_vfiprintf_r>:
  403a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403a20:	b0ad      	sub	sp, #180	; 0xb4
  403a22:	461d      	mov	r5, r3
  403a24:	468b      	mov	fp, r1
  403a26:	4690      	mov	r8, r2
  403a28:	9307      	str	r3, [sp, #28]
  403a2a:	9006      	str	r0, [sp, #24]
  403a2c:	b118      	cbz	r0, 403a36 <_vfiprintf_r+0x1a>
  403a2e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403a30:	2b00      	cmp	r3, #0
  403a32:	f000 80f3 	beq.w	403c1c <_vfiprintf_r+0x200>
  403a36:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403a3a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  403a3e:	07df      	lsls	r7, r3, #31
  403a40:	b281      	uxth	r1, r0
  403a42:	d402      	bmi.n	403a4a <_vfiprintf_r+0x2e>
  403a44:	058e      	lsls	r6, r1, #22
  403a46:	f140 80fc 	bpl.w	403c42 <_vfiprintf_r+0x226>
  403a4a:	048c      	lsls	r4, r1, #18
  403a4c:	d40a      	bmi.n	403a64 <_vfiprintf_r+0x48>
  403a4e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403a52:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  403a56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  403a5a:	f8ab 100c 	strh.w	r1, [fp, #12]
  403a5e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  403a62:	b289      	uxth	r1, r1
  403a64:	0708      	lsls	r0, r1, #28
  403a66:	f140 80b3 	bpl.w	403bd0 <_vfiprintf_r+0x1b4>
  403a6a:	f8db 3010 	ldr.w	r3, [fp, #16]
  403a6e:	2b00      	cmp	r3, #0
  403a70:	f000 80ae 	beq.w	403bd0 <_vfiprintf_r+0x1b4>
  403a74:	f001 031a 	and.w	r3, r1, #26
  403a78:	2b0a      	cmp	r3, #10
  403a7a:	f000 80b5 	beq.w	403be8 <_vfiprintf_r+0x1cc>
  403a7e:	2300      	movs	r3, #0
  403a80:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  403a84:	930b      	str	r3, [sp, #44]	; 0x2c
  403a86:	9311      	str	r3, [sp, #68]	; 0x44
  403a88:	9310      	str	r3, [sp, #64]	; 0x40
  403a8a:	9303      	str	r3, [sp, #12]
  403a8c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  403a90:	46ca      	mov	sl, r9
  403a92:	f8cd b010 	str.w	fp, [sp, #16]
  403a96:	f898 3000 	ldrb.w	r3, [r8]
  403a9a:	4644      	mov	r4, r8
  403a9c:	b1fb      	cbz	r3, 403ade <_vfiprintf_r+0xc2>
  403a9e:	2b25      	cmp	r3, #37	; 0x25
  403aa0:	d102      	bne.n	403aa8 <_vfiprintf_r+0x8c>
  403aa2:	e01c      	b.n	403ade <_vfiprintf_r+0xc2>
  403aa4:	2b25      	cmp	r3, #37	; 0x25
  403aa6:	d003      	beq.n	403ab0 <_vfiprintf_r+0x94>
  403aa8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  403aac:	2b00      	cmp	r3, #0
  403aae:	d1f9      	bne.n	403aa4 <_vfiprintf_r+0x88>
  403ab0:	eba4 0508 	sub.w	r5, r4, r8
  403ab4:	b19d      	cbz	r5, 403ade <_vfiprintf_r+0xc2>
  403ab6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403ab8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403aba:	f8ca 8000 	str.w	r8, [sl]
  403abe:	3301      	adds	r3, #1
  403ac0:	442a      	add	r2, r5
  403ac2:	2b07      	cmp	r3, #7
  403ac4:	f8ca 5004 	str.w	r5, [sl, #4]
  403ac8:	9211      	str	r2, [sp, #68]	; 0x44
  403aca:	9310      	str	r3, [sp, #64]	; 0x40
  403acc:	dd7a      	ble.n	403bc4 <_vfiprintf_r+0x1a8>
  403ace:	2a00      	cmp	r2, #0
  403ad0:	f040 84b0 	bne.w	404434 <_vfiprintf_r+0xa18>
  403ad4:	9b03      	ldr	r3, [sp, #12]
  403ad6:	9210      	str	r2, [sp, #64]	; 0x40
  403ad8:	442b      	add	r3, r5
  403ada:	46ca      	mov	sl, r9
  403adc:	9303      	str	r3, [sp, #12]
  403ade:	7823      	ldrb	r3, [r4, #0]
  403ae0:	2b00      	cmp	r3, #0
  403ae2:	f000 83e0 	beq.w	4042a6 <_vfiprintf_r+0x88a>
  403ae6:	2000      	movs	r0, #0
  403ae8:	f04f 0300 	mov.w	r3, #0
  403aec:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  403af0:	f104 0801 	add.w	r8, r4, #1
  403af4:	7862      	ldrb	r2, [r4, #1]
  403af6:	4605      	mov	r5, r0
  403af8:	4606      	mov	r6, r0
  403afa:	4603      	mov	r3, r0
  403afc:	f04f 34ff 	mov.w	r4, #4294967295
  403b00:	f108 0801 	add.w	r8, r8, #1
  403b04:	f1a2 0120 	sub.w	r1, r2, #32
  403b08:	2958      	cmp	r1, #88	; 0x58
  403b0a:	f200 82de 	bhi.w	4040ca <_vfiprintf_r+0x6ae>
  403b0e:	e8df f011 	tbh	[pc, r1, lsl #1]
  403b12:	0221      	.short	0x0221
  403b14:	02dc02dc 	.word	0x02dc02dc
  403b18:	02dc0229 	.word	0x02dc0229
  403b1c:	02dc02dc 	.word	0x02dc02dc
  403b20:	02dc02dc 	.word	0x02dc02dc
  403b24:	028902dc 	.word	0x028902dc
  403b28:	02dc0295 	.word	0x02dc0295
  403b2c:	02bd00a2 	.word	0x02bd00a2
  403b30:	019f02dc 	.word	0x019f02dc
  403b34:	01a401a4 	.word	0x01a401a4
  403b38:	01a401a4 	.word	0x01a401a4
  403b3c:	01a401a4 	.word	0x01a401a4
  403b40:	01a401a4 	.word	0x01a401a4
  403b44:	02dc01a4 	.word	0x02dc01a4
  403b48:	02dc02dc 	.word	0x02dc02dc
  403b4c:	02dc02dc 	.word	0x02dc02dc
  403b50:	02dc02dc 	.word	0x02dc02dc
  403b54:	02dc02dc 	.word	0x02dc02dc
  403b58:	01b202dc 	.word	0x01b202dc
  403b5c:	02dc02dc 	.word	0x02dc02dc
  403b60:	02dc02dc 	.word	0x02dc02dc
  403b64:	02dc02dc 	.word	0x02dc02dc
  403b68:	02dc02dc 	.word	0x02dc02dc
  403b6c:	02dc02dc 	.word	0x02dc02dc
  403b70:	02dc0197 	.word	0x02dc0197
  403b74:	02dc02dc 	.word	0x02dc02dc
  403b78:	02dc02dc 	.word	0x02dc02dc
  403b7c:	02dc019b 	.word	0x02dc019b
  403b80:	025302dc 	.word	0x025302dc
  403b84:	02dc02dc 	.word	0x02dc02dc
  403b88:	02dc02dc 	.word	0x02dc02dc
  403b8c:	02dc02dc 	.word	0x02dc02dc
  403b90:	02dc02dc 	.word	0x02dc02dc
  403b94:	02dc02dc 	.word	0x02dc02dc
  403b98:	021b025a 	.word	0x021b025a
  403b9c:	02dc02dc 	.word	0x02dc02dc
  403ba0:	026e02dc 	.word	0x026e02dc
  403ba4:	02dc021b 	.word	0x02dc021b
  403ba8:	027302dc 	.word	0x027302dc
  403bac:	01f502dc 	.word	0x01f502dc
  403bb0:	02090182 	.word	0x02090182
  403bb4:	02dc02d7 	.word	0x02dc02d7
  403bb8:	02dc029a 	.word	0x02dc029a
  403bbc:	02dc00a7 	.word	0x02dc00a7
  403bc0:	022e02dc 	.word	0x022e02dc
  403bc4:	f10a 0a08 	add.w	sl, sl, #8
  403bc8:	9b03      	ldr	r3, [sp, #12]
  403bca:	442b      	add	r3, r5
  403bcc:	9303      	str	r3, [sp, #12]
  403bce:	e786      	b.n	403ade <_vfiprintf_r+0xc2>
  403bd0:	4659      	mov	r1, fp
  403bd2:	9806      	ldr	r0, [sp, #24]
  403bd4:	f000 fdac 	bl	404730 <__swsetup_r>
  403bd8:	bb18      	cbnz	r0, 403c22 <_vfiprintf_r+0x206>
  403bda:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  403bde:	f001 031a 	and.w	r3, r1, #26
  403be2:	2b0a      	cmp	r3, #10
  403be4:	f47f af4b 	bne.w	403a7e <_vfiprintf_r+0x62>
  403be8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  403bec:	2b00      	cmp	r3, #0
  403bee:	f6ff af46 	blt.w	403a7e <_vfiprintf_r+0x62>
  403bf2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403bf6:	07db      	lsls	r3, r3, #31
  403bf8:	d405      	bmi.n	403c06 <_vfiprintf_r+0x1ea>
  403bfa:	058f      	lsls	r7, r1, #22
  403bfc:	d403      	bmi.n	403c06 <_vfiprintf_r+0x1ea>
  403bfe:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  403c02:	f001 fac3 	bl	40518c <__retarget_lock_release_recursive>
  403c06:	462b      	mov	r3, r5
  403c08:	4642      	mov	r2, r8
  403c0a:	4659      	mov	r1, fp
  403c0c:	9806      	ldr	r0, [sp, #24]
  403c0e:	f000 fd4d 	bl	4046ac <__sbprintf>
  403c12:	9003      	str	r0, [sp, #12]
  403c14:	9803      	ldr	r0, [sp, #12]
  403c16:	b02d      	add	sp, #180	; 0xb4
  403c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c1c:	f000 fef4 	bl	404a08 <__sinit>
  403c20:	e709      	b.n	403a36 <_vfiprintf_r+0x1a>
  403c22:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403c26:	07d9      	lsls	r1, r3, #31
  403c28:	d404      	bmi.n	403c34 <_vfiprintf_r+0x218>
  403c2a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  403c2e:	059a      	lsls	r2, r3, #22
  403c30:	f140 84aa 	bpl.w	404588 <_vfiprintf_r+0xb6c>
  403c34:	f04f 33ff 	mov.w	r3, #4294967295
  403c38:	9303      	str	r3, [sp, #12]
  403c3a:	9803      	ldr	r0, [sp, #12]
  403c3c:	b02d      	add	sp, #180	; 0xb4
  403c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c42:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  403c46:	f001 fa9f 	bl	405188 <__retarget_lock_acquire_recursive>
  403c4a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  403c4e:	b281      	uxth	r1, r0
  403c50:	e6fb      	b.n	403a4a <_vfiprintf_r+0x2e>
  403c52:	4276      	negs	r6, r6
  403c54:	9207      	str	r2, [sp, #28]
  403c56:	f043 0304 	orr.w	r3, r3, #4
  403c5a:	f898 2000 	ldrb.w	r2, [r8]
  403c5e:	e74f      	b.n	403b00 <_vfiprintf_r+0xe4>
  403c60:	9608      	str	r6, [sp, #32]
  403c62:	069e      	lsls	r6, r3, #26
  403c64:	f100 8450 	bmi.w	404508 <_vfiprintf_r+0xaec>
  403c68:	9907      	ldr	r1, [sp, #28]
  403c6a:	06dd      	lsls	r5, r3, #27
  403c6c:	460a      	mov	r2, r1
  403c6e:	f100 83ef 	bmi.w	404450 <_vfiprintf_r+0xa34>
  403c72:	0658      	lsls	r0, r3, #25
  403c74:	f140 83ec 	bpl.w	404450 <_vfiprintf_r+0xa34>
  403c78:	880e      	ldrh	r6, [r1, #0]
  403c7a:	3104      	adds	r1, #4
  403c7c:	2700      	movs	r7, #0
  403c7e:	2201      	movs	r2, #1
  403c80:	9107      	str	r1, [sp, #28]
  403c82:	f04f 0100 	mov.w	r1, #0
  403c86:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  403c8a:	2500      	movs	r5, #0
  403c8c:	1c61      	adds	r1, r4, #1
  403c8e:	f000 8116 	beq.w	403ebe <_vfiprintf_r+0x4a2>
  403c92:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  403c96:	9102      	str	r1, [sp, #8]
  403c98:	ea56 0107 	orrs.w	r1, r6, r7
  403c9c:	f040 8114 	bne.w	403ec8 <_vfiprintf_r+0x4ac>
  403ca0:	2c00      	cmp	r4, #0
  403ca2:	f040 835c 	bne.w	40435e <_vfiprintf_r+0x942>
  403ca6:	2a00      	cmp	r2, #0
  403ca8:	f040 83b7 	bne.w	40441a <_vfiprintf_r+0x9fe>
  403cac:	f013 0301 	ands.w	r3, r3, #1
  403cb0:	9305      	str	r3, [sp, #20]
  403cb2:	f000 8457 	beq.w	404564 <_vfiprintf_r+0xb48>
  403cb6:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  403cba:	2330      	movs	r3, #48	; 0x30
  403cbc:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  403cc0:	9b05      	ldr	r3, [sp, #20]
  403cc2:	42a3      	cmp	r3, r4
  403cc4:	bfb8      	it	lt
  403cc6:	4623      	movlt	r3, r4
  403cc8:	9301      	str	r3, [sp, #4]
  403cca:	b10d      	cbz	r5, 403cd0 <_vfiprintf_r+0x2b4>
  403ccc:	3301      	adds	r3, #1
  403cce:	9301      	str	r3, [sp, #4]
  403cd0:	9b02      	ldr	r3, [sp, #8]
  403cd2:	f013 0302 	ands.w	r3, r3, #2
  403cd6:	9309      	str	r3, [sp, #36]	; 0x24
  403cd8:	d002      	beq.n	403ce0 <_vfiprintf_r+0x2c4>
  403cda:	9b01      	ldr	r3, [sp, #4]
  403cdc:	3302      	adds	r3, #2
  403cde:	9301      	str	r3, [sp, #4]
  403ce0:	9b02      	ldr	r3, [sp, #8]
  403ce2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  403ce6:	930a      	str	r3, [sp, #40]	; 0x28
  403ce8:	f040 8217 	bne.w	40411a <_vfiprintf_r+0x6fe>
  403cec:	9b08      	ldr	r3, [sp, #32]
  403cee:	9a01      	ldr	r2, [sp, #4]
  403cf0:	1a9d      	subs	r5, r3, r2
  403cf2:	2d00      	cmp	r5, #0
  403cf4:	f340 8211 	ble.w	40411a <_vfiprintf_r+0x6fe>
  403cf8:	2d10      	cmp	r5, #16
  403cfa:	f340 8490 	ble.w	40461e <_vfiprintf_r+0xc02>
  403cfe:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403d00:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403d02:	4ec4      	ldr	r6, [pc, #784]	; (404014 <_vfiprintf_r+0x5f8>)
  403d04:	46d6      	mov	lr, sl
  403d06:	2710      	movs	r7, #16
  403d08:	46a2      	mov	sl, r4
  403d0a:	4619      	mov	r1, r3
  403d0c:	9c06      	ldr	r4, [sp, #24]
  403d0e:	e007      	b.n	403d20 <_vfiprintf_r+0x304>
  403d10:	f101 0c02 	add.w	ip, r1, #2
  403d14:	f10e 0e08 	add.w	lr, lr, #8
  403d18:	4601      	mov	r1, r0
  403d1a:	3d10      	subs	r5, #16
  403d1c:	2d10      	cmp	r5, #16
  403d1e:	dd11      	ble.n	403d44 <_vfiprintf_r+0x328>
  403d20:	1c48      	adds	r0, r1, #1
  403d22:	3210      	adds	r2, #16
  403d24:	2807      	cmp	r0, #7
  403d26:	9211      	str	r2, [sp, #68]	; 0x44
  403d28:	e88e 00c0 	stmia.w	lr, {r6, r7}
  403d2c:	9010      	str	r0, [sp, #64]	; 0x40
  403d2e:	ddef      	ble.n	403d10 <_vfiprintf_r+0x2f4>
  403d30:	2a00      	cmp	r2, #0
  403d32:	f040 81e4 	bne.w	4040fe <_vfiprintf_r+0x6e2>
  403d36:	3d10      	subs	r5, #16
  403d38:	2d10      	cmp	r5, #16
  403d3a:	4611      	mov	r1, r2
  403d3c:	f04f 0c01 	mov.w	ip, #1
  403d40:	46ce      	mov	lr, r9
  403d42:	dced      	bgt.n	403d20 <_vfiprintf_r+0x304>
  403d44:	4654      	mov	r4, sl
  403d46:	4661      	mov	r1, ip
  403d48:	46f2      	mov	sl, lr
  403d4a:	442a      	add	r2, r5
  403d4c:	2907      	cmp	r1, #7
  403d4e:	9211      	str	r2, [sp, #68]	; 0x44
  403d50:	f8ca 6000 	str.w	r6, [sl]
  403d54:	f8ca 5004 	str.w	r5, [sl, #4]
  403d58:	9110      	str	r1, [sp, #64]	; 0x40
  403d5a:	f300 82ec 	bgt.w	404336 <_vfiprintf_r+0x91a>
  403d5e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403d62:	f10a 0a08 	add.w	sl, sl, #8
  403d66:	1c48      	adds	r0, r1, #1
  403d68:	2d00      	cmp	r5, #0
  403d6a:	f040 81de 	bne.w	40412a <_vfiprintf_r+0x70e>
  403d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403d70:	2b00      	cmp	r3, #0
  403d72:	f000 81f8 	beq.w	404166 <_vfiprintf_r+0x74a>
  403d76:	3202      	adds	r2, #2
  403d78:	a90e      	add	r1, sp, #56	; 0x38
  403d7a:	2302      	movs	r3, #2
  403d7c:	2807      	cmp	r0, #7
  403d7e:	9211      	str	r2, [sp, #68]	; 0x44
  403d80:	9010      	str	r0, [sp, #64]	; 0x40
  403d82:	e88a 000a 	stmia.w	sl, {r1, r3}
  403d86:	f340 81ea 	ble.w	40415e <_vfiprintf_r+0x742>
  403d8a:	2a00      	cmp	r2, #0
  403d8c:	f040 838c 	bne.w	4044a8 <_vfiprintf_r+0xa8c>
  403d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403d92:	2b80      	cmp	r3, #128	; 0x80
  403d94:	f04f 0001 	mov.w	r0, #1
  403d98:	4611      	mov	r1, r2
  403d9a:	46ca      	mov	sl, r9
  403d9c:	f040 81e7 	bne.w	40416e <_vfiprintf_r+0x752>
  403da0:	9b08      	ldr	r3, [sp, #32]
  403da2:	9d01      	ldr	r5, [sp, #4]
  403da4:	1b5e      	subs	r6, r3, r5
  403da6:	2e00      	cmp	r6, #0
  403da8:	f340 81e1 	ble.w	40416e <_vfiprintf_r+0x752>
  403dac:	2e10      	cmp	r6, #16
  403dae:	4d9a      	ldr	r5, [pc, #616]	; (404018 <_vfiprintf_r+0x5fc>)
  403db0:	f340 8450 	ble.w	404654 <_vfiprintf_r+0xc38>
  403db4:	46d4      	mov	ip, sl
  403db6:	2710      	movs	r7, #16
  403db8:	46a2      	mov	sl, r4
  403dba:	9c06      	ldr	r4, [sp, #24]
  403dbc:	e007      	b.n	403dce <_vfiprintf_r+0x3b2>
  403dbe:	f101 0e02 	add.w	lr, r1, #2
  403dc2:	f10c 0c08 	add.w	ip, ip, #8
  403dc6:	4601      	mov	r1, r0
  403dc8:	3e10      	subs	r6, #16
  403dca:	2e10      	cmp	r6, #16
  403dcc:	dd11      	ble.n	403df2 <_vfiprintf_r+0x3d6>
  403dce:	1c48      	adds	r0, r1, #1
  403dd0:	3210      	adds	r2, #16
  403dd2:	2807      	cmp	r0, #7
  403dd4:	9211      	str	r2, [sp, #68]	; 0x44
  403dd6:	e88c 00a0 	stmia.w	ip, {r5, r7}
  403dda:	9010      	str	r0, [sp, #64]	; 0x40
  403ddc:	ddef      	ble.n	403dbe <_vfiprintf_r+0x3a2>
  403dde:	2a00      	cmp	r2, #0
  403de0:	f040 829d 	bne.w	40431e <_vfiprintf_r+0x902>
  403de4:	3e10      	subs	r6, #16
  403de6:	2e10      	cmp	r6, #16
  403de8:	f04f 0e01 	mov.w	lr, #1
  403dec:	4611      	mov	r1, r2
  403dee:	46cc      	mov	ip, r9
  403df0:	dced      	bgt.n	403dce <_vfiprintf_r+0x3b2>
  403df2:	4654      	mov	r4, sl
  403df4:	46e2      	mov	sl, ip
  403df6:	4432      	add	r2, r6
  403df8:	f1be 0f07 	cmp.w	lr, #7
  403dfc:	9211      	str	r2, [sp, #68]	; 0x44
  403dfe:	e88a 0060 	stmia.w	sl, {r5, r6}
  403e02:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  403e06:	f300 8369 	bgt.w	4044dc <_vfiprintf_r+0xac0>
  403e0a:	f10a 0a08 	add.w	sl, sl, #8
  403e0e:	f10e 0001 	add.w	r0, lr, #1
  403e12:	4671      	mov	r1, lr
  403e14:	e1ab      	b.n	40416e <_vfiprintf_r+0x752>
  403e16:	9608      	str	r6, [sp, #32]
  403e18:	f013 0220 	ands.w	r2, r3, #32
  403e1c:	f040 838c 	bne.w	404538 <_vfiprintf_r+0xb1c>
  403e20:	f013 0110 	ands.w	r1, r3, #16
  403e24:	f040 831a 	bne.w	40445c <_vfiprintf_r+0xa40>
  403e28:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  403e2c:	f000 8316 	beq.w	40445c <_vfiprintf_r+0xa40>
  403e30:	9807      	ldr	r0, [sp, #28]
  403e32:	460a      	mov	r2, r1
  403e34:	4601      	mov	r1, r0
  403e36:	3104      	adds	r1, #4
  403e38:	8806      	ldrh	r6, [r0, #0]
  403e3a:	9107      	str	r1, [sp, #28]
  403e3c:	2700      	movs	r7, #0
  403e3e:	e720      	b.n	403c82 <_vfiprintf_r+0x266>
  403e40:	9608      	str	r6, [sp, #32]
  403e42:	f043 0310 	orr.w	r3, r3, #16
  403e46:	e7e7      	b.n	403e18 <_vfiprintf_r+0x3fc>
  403e48:	9608      	str	r6, [sp, #32]
  403e4a:	f043 0310 	orr.w	r3, r3, #16
  403e4e:	e708      	b.n	403c62 <_vfiprintf_r+0x246>
  403e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403e54:	f898 2000 	ldrb.w	r2, [r8]
  403e58:	e652      	b.n	403b00 <_vfiprintf_r+0xe4>
  403e5a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  403e5e:	2600      	movs	r6, #0
  403e60:	f818 2b01 	ldrb.w	r2, [r8], #1
  403e64:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  403e68:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  403e6c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  403e70:	2909      	cmp	r1, #9
  403e72:	d9f5      	bls.n	403e60 <_vfiprintf_r+0x444>
  403e74:	e646      	b.n	403b04 <_vfiprintf_r+0xe8>
  403e76:	9608      	str	r6, [sp, #32]
  403e78:	2800      	cmp	r0, #0
  403e7a:	f040 8408 	bne.w	40468e <_vfiprintf_r+0xc72>
  403e7e:	f043 0310 	orr.w	r3, r3, #16
  403e82:	069e      	lsls	r6, r3, #26
  403e84:	f100 834c 	bmi.w	404520 <_vfiprintf_r+0xb04>
  403e88:	06dd      	lsls	r5, r3, #27
  403e8a:	f100 82f3 	bmi.w	404474 <_vfiprintf_r+0xa58>
  403e8e:	0658      	lsls	r0, r3, #25
  403e90:	f140 82f0 	bpl.w	404474 <_vfiprintf_r+0xa58>
  403e94:	9d07      	ldr	r5, [sp, #28]
  403e96:	f9b5 6000 	ldrsh.w	r6, [r5]
  403e9a:	462a      	mov	r2, r5
  403e9c:	17f7      	asrs	r7, r6, #31
  403e9e:	3204      	adds	r2, #4
  403ea0:	4630      	mov	r0, r6
  403ea2:	4639      	mov	r1, r7
  403ea4:	9207      	str	r2, [sp, #28]
  403ea6:	2800      	cmp	r0, #0
  403ea8:	f171 0200 	sbcs.w	r2, r1, #0
  403eac:	f2c0 835d 	blt.w	40456a <_vfiprintf_r+0xb4e>
  403eb0:	1c61      	adds	r1, r4, #1
  403eb2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403eb6:	f04f 0201 	mov.w	r2, #1
  403eba:	f47f aeea 	bne.w	403c92 <_vfiprintf_r+0x276>
  403ebe:	ea56 0107 	orrs.w	r1, r6, r7
  403ec2:	f000 824d 	beq.w	404360 <_vfiprintf_r+0x944>
  403ec6:	9302      	str	r3, [sp, #8]
  403ec8:	2a01      	cmp	r2, #1
  403eca:	f000 828c 	beq.w	4043e6 <_vfiprintf_r+0x9ca>
  403ece:	2a02      	cmp	r2, #2
  403ed0:	f040 825c 	bne.w	40438c <_vfiprintf_r+0x970>
  403ed4:	980b      	ldr	r0, [sp, #44]	; 0x2c
  403ed6:	46cb      	mov	fp, r9
  403ed8:	0933      	lsrs	r3, r6, #4
  403eda:	f006 010f 	and.w	r1, r6, #15
  403ede:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  403ee2:	093a      	lsrs	r2, r7, #4
  403ee4:	461e      	mov	r6, r3
  403ee6:	4617      	mov	r7, r2
  403ee8:	5c43      	ldrb	r3, [r0, r1]
  403eea:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  403eee:	ea56 0307 	orrs.w	r3, r6, r7
  403ef2:	d1f1      	bne.n	403ed8 <_vfiprintf_r+0x4bc>
  403ef4:	eba9 030b 	sub.w	r3, r9, fp
  403ef8:	9305      	str	r3, [sp, #20]
  403efa:	e6e1      	b.n	403cc0 <_vfiprintf_r+0x2a4>
  403efc:	2800      	cmp	r0, #0
  403efe:	f040 83c0 	bne.w	404682 <_vfiprintf_r+0xc66>
  403f02:	0699      	lsls	r1, r3, #26
  403f04:	f100 8367 	bmi.w	4045d6 <_vfiprintf_r+0xbba>
  403f08:	06da      	lsls	r2, r3, #27
  403f0a:	f100 80f1 	bmi.w	4040f0 <_vfiprintf_r+0x6d4>
  403f0e:	065b      	lsls	r3, r3, #25
  403f10:	f140 80ee 	bpl.w	4040f0 <_vfiprintf_r+0x6d4>
  403f14:	9a07      	ldr	r2, [sp, #28]
  403f16:	6813      	ldr	r3, [r2, #0]
  403f18:	3204      	adds	r2, #4
  403f1a:	9207      	str	r2, [sp, #28]
  403f1c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  403f20:	801a      	strh	r2, [r3, #0]
  403f22:	e5b8      	b.n	403a96 <_vfiprintf_r+0x7a>
  403f24:	9807      	ldr	r0, [sp, #28]
  403f26:	4a3d      	ldr	r2, [pc, #244]	; (40401c <_vfiprintf_r+0x600>)
  403f28:	9608      	str	r6, [sp, #32]
  403f2a:	920b      	str	r2, [sp, #44]	; 0x2c
  403f2c:	6806      	ldr	r6, [r0, #0]
  403f2e:	2278      	movs	r2, #120	; 0x78
  403f30:	2130      	movs	r1, #48	; 0x30
  403f32:	3004      	adds	r0, #4
  403f34:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  403f38:	f043 0302 	orr.w	r3, r3, #2
  403f3c:	9007      	str	r0, [sp, #28]
  403f3e:	2700      	movs	r7, #0
  403f40:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  403f44:	2202      	movs	r2, #2
  403f46:	e69c      	b.n	403c82 <_vfiprintf_r+0x266>
  403f48:	9608      	str	r6, [sp, #32]
  403f4a:	2800      	cmp	r0, #0
  403f4c:	d099      	beq.n	403e82 <_vfiprintf_r+0x466>
  403f4e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403f52:	e796      	b.n	403e82 <_vfiprintf_r+0x466>
  403f54:	f898 2000 	ldrb.w	r2, [r8]
  403f58:	2d00      	cmp	r5, #0
  403f5a:	f47f add1 	bne.w	403b00 <_vfiprintf_r+0xe4>
  403f5e:	2001      	movs	r0, #1
  403f60:	2520      	movs	r5, #32
  403f62:	e5cd      	b.n	403b00 <_vfiprintf_r+0xe4>
  403f64:	f043 0301 	orr.w	r3, r3, #1
  403f68:	f898 2000 	ldrb.w	r2, [r8]
  403f6c:	e5c8      	b.n	403b00 <_vfiprintf_r+0xe4>
  403f6e:	9608      	str	r6, [sp, #32]
  403f70:	2800      	cmp	r0, #0
  403f72:	f040 8393 	bne.w	40469c <_vfiprintf_r+0xc80>
  403f76:	4929      	ldr	r1, [pc, #164]	; (40401c <_vfiprintf_r+0x600>)
  403f78:	910b      	str	r1, [sp, #44]	; 0x2c
  403f7a:	069f      	lsls	r7, r3, #26
  403f7c:	f100 82e8 	bmi.w	404550 <_vfiprintf_r+0xb34>
  403f80:	9807      	ldr	r0, [sp, #28]
  403f82:	06de      	lsls	r6, r3, #27
  403f84:	4601      	mov	r1, r0
  403f86:	f100 8270 	bmi.w	40446a <_vfiprintf_r+0xa4e>
  403f8a:	065d      	lsls	r5, r3, #25
  403f8c:	f140 826d 	bpl.w	40446a <_vfiprintf_r+0xa4e>
  403f90:	3104      	adds	r1, #4
  403f92:	8806      	ldrh	r6, [r0, #0]
  403f94:	9107      	str	r1, [sp, #28]
  403f96:	2700      	movs	r7, #0
  403f98:	07d8      	lsls	r0, r3, #31
  403f9a:	f140 8222 	bpl.w	4043e2 <_vfiprintf_r+0x9c6>
  403f9e:	ea56 0107 	orrs.w	r1, r6, r7
  403fa2:	f000 821e 	beq.w	4043e2 <_vfiprintf_r+0x9c6>
  403fa6:	2130      	movs	r1, #48	; 0x30
  403fa8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  403fac:	f043 0302 	orr.w	r3, r3, #2
  403fb0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  403fb4:	2202      	movs	r2, #2
  403fb6:	e664      	b.n	403c82 <_vfiprintf_r+0x266>
  403fb8:	9608      	str	r6, [sp, #32]
  403fba:	2800      	cmp	r0, #0
  403fbc:	f040 836b 	bne.w	404696 <_vfiprintf_r+0xc7a>
  403fc0:	4917      	ldr	r1, [pc, #92]	; (404020 <_vfiprintf_r+0x604>)
  403fc2:	910b      	str	r1, [sp, #44]	; 0x2c
  403fc4:	e7d9      	b.n	403f7a <_vfiprintf_r+0x55e>
  403fc6:	9907      	ldr	r1, [sp, #28]
  403fc8:	9608      	str	r6, [sp, #32]
  403fca:	680a      	ldr	r2, [r1, #0]
  403fcc:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  403fd0:	f04f 0000 	mov.w	r0, #0
  403fd4:	460a      	mov	r2, r1
  403fd6:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  403fda:	3204      	adds	r2, #4
  403fdc:	2001      	movs	r0, #1
  403fde:	9001      	str	r0, [sp, #4]
  403fe0:	9207      	str	r2, [sp, #28]
  403fe2:	9005      	str	r0, [sp, #20]
  403fe4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  403fe8:	9302      	str	r3, [sp, #8]
  403fea:	2400      	movs	r4, #0
  403fec:	e670      	b.n	403cd0 <_vfiprintf_r+0x2b4>
  403fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403ff2:	f898 2000 	ldrb.w	r2, [r8]
  403ff6:	e583      	b.n	403b00 <_vfiprintf_r+0xe4>
  403ff8:	f898 2000 	ldrb.w	r2, [r8]
  403ffc:	2a6c      	cmp	r2, #108	; 0x6c
  403ffe:	bf03      	ittte	eq
  404000:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  404004:	f043 0320 	orreq.w	r3, r3, #32
  404008:	f108 0801 	addeq.w	r8, r8, #1
  40400c:	f043 0310 	orrne.w	r3, r3, #16
  404010:	e576      	b.n	403b00 <_vfiprintf_r+0xe4>
  404012:	bf00      	nop
  404014:	00405fe0 	.word	0x00405fe0
  404018:	00405ff0 	.word	0x00405ff0
  40401c:	00405fc4 	.word	0x00405fc4
  404020:	00405fb0 	.word	0x00405fb0
  404024:	9907      	ldr	r1, [sp, #28]
  404026:	680e      	ldr	r6, [r1, #0]
  404028:	460a      	mov	r2, r1
  40402a:	2e00      	cmp	r6, #0
  40402c:	f102 0204 	add.w	r2, r2, #4
  404030:	f6ff ae0f 	blt.w	403c52 <_vfiprintf_r+0x236>
  404034:	9207      	str	r2, [sp, #28]
  404036:	f898 2000 	ldrb.w	r2, [r8]
  40403a:	e561      	b.n	403b00 <_vfiprintf_r+0xe4>
  40403c:	f898 2000 	ldrb.w	r2, [r8]
  404040:	2001      	movs	r0, #1
  404042:	252b      	movs	r5, #43	; 0x2b
  404044:	e55c      	b.n	403b00 <_vfiprintf_r+0xe4>
  404046:	9907      	ldr	r1, [sp, #28]
  404048:	9608      	str	r6, [sp, #32]
  40404a:	f8d1 b000 	ldr.w	fp, [r1]
  40404e:	f04f 0200 	mov.w	r2, #0
  404052:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  404056:	1d0e      	adds	r6, r1, #4
  404058:	f1bb 0f00 	cmp.w	fp, #0
  40405c:	f000 82e5 	beq.w	40462a <_vfiprintf_r+0xc0e>
  404060:	1c67      	adds	r7, r4, #1
  404062:	f000 82c4 	beq.w	4045ee <_vfiprintf_r+0xbd2>
  404066:	4622      	mov	r2, r4
  404068:	2100      	movs	r1, #0
  40406a:	4658      	mov	r0, fp
  40406c:	9301      	str	r3, [sp, #4]
  40406e:	f001 f91f 	bl	4052b0 <memchr>
  404072:	9b01      	ldr	r3, [sp, #4]
  404074:	2800      	cmp	r0, #0
  404076:	f000 82e5 	beq.w	404644 <_vfiprintf_r+0xc28>
  40407a:	eba0 020b 	sub.w	r2, r0, fp
  40407e:	9205      	str	r2, [sp, #20]
  404080:	9607      	str	r6, [sp, #28]
  404082:	9302      	str	r3, [sp, #8]
  404084:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404088:	2400      	movs	r4, #0
  40408a:	e619      	b.n	403cc0 <_vfiprintf_r+0x2a4>
  40408c:	f898 2000 	ldrb.w	r2, [r8]
  404090:	2a2a      	cmp	r2, #42	; 0x2a
  404092:	f108 0701 	add.w	r7, r8, #1
  404096:	f000 82e9 	beq.w	40466c <_vfiprintf_r+0xc50>
  40409a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40409e:	2909      	cmp	r1, #9
  4040a0:	46b8      	mov	r8, r7
  4040a2:	f04f 0400 	mov.w	r4, #0
  4040a6:	f63f ad2d 	bhi.w	403b04 <_vfiprintf_r+0xe8>
  4040aa:	f818 2b01 	ldrb.w	r2, [r8], #1
  4040ae:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4040b2:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  4040b6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4040ba:	2909      	cmp	r1, #9
  4040bc:	d9f5      	bls.n	4040aa <_vfiprintf_r+0x68e>
  4040be:	e521      	b.n	403b04 <_vfiprintf_r+0xe8>
  4040c0:	f043 0320 	orr.w	r3, r3, #32
  4040c4:	f898 2000 	ldrb.w	r2, [r8]
  4040c8:	e51a      	b.n	403b00 <_vfiprintf_r+0xe4>
  4040ca:	9608      	str	r6, [sp, #32]
  4040cc:	2800      	cmp	r0, #0
  4040ce:	f040 82db 	bne.w	404688 <_vfiprintf_r+0xc6c>
  4040d2:	2a00      	cmp	r2, #0
  4040d4:	f000 80e7 	beq.w	4042a6 <_vfiprintf_r+0x88a>
  4040d8:	2101      	movs	r1, #1
  4040da:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4040de:	f04f 0200 	mov.w	r2, #0
  4040e2:	9101      	str	r1, [sp, #4]
  4040e4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4040e8:	9105      	str	r1, [sp, #20]
  4040ea:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4040ee:	e77b      	b.n	403fe8 <_vfiprintf_r+0x5cc>
  4040f0:	9a07      	ldr	r2, [sp, #28]
  4040f2:	6813      	ldr	r3, [r2, #0]
  4040f4:	3204      	adds	r2, #4
  4040f6:	9207      	str	r2, [sp, #28]
  4040f8:	9a03      	ldr	r2, [sp, #12]
  4040fa:	601a      	str	r2, [r3, #0]
  4040fc:	e4cb      	b.n	403a96 <_vfiprintf_r+0x7a>
  4040fe:	aa0f      	add	r2, sp, #60	; 0x3c
  404100:	9904      	ldr	r1, [sp, #16]
  404102:	4620      	mov	r0, r4
  404104:	f7ff fc4a 	bl	40399c <__sprint_r.part.0>
  404108:	2800      	cmp	r0, #0
  40410a:	f040 8139 	bne.w	404380 <_vfiprintf_r+0x964>
  40410e:	9910      	ldr	r1, [sp, #64]	; 0x40
  404110:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404112:	f101 0c01 	add.w	ip, r1, #1
  404116:	46ce      	mov	lr, r9
  404118:	e5ff      	b.n	403d1a <_vfiprintf_r+0x2fe>
  40411a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40411c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40411e:	1c48      	adds	r0, r1, #1
  404120:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404124:	2d00      	cmp	r5, #0
  404126:	f43f ae22 	beq.w	403d6e <_vfiprintf_r+0x352>
  40412a:	3201      	adds	r2, #1
  40412c:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  404130:	2101      	movs	r1, #1
  404132:	2807      	cmp	r0, #7
  404134:	9211      	str	r2, [sp, #68]	; 0x44
  404136:	9010      	str	r0, [sp, #64]	; 0x40
  404138:	f8ca 5000 	str.w	r5, [sl]
  40413c:	f8ca 1004 	str.w	r1, [sl, #4]
  404140:	f340 8108 	ble.w	404354 <_vfiprintf_r+0x938>
  404144:	2a00      	cmp	r2, #0
  404146:	f040 81bc 	bne.w	4044c2 <_vfiprintf_r+0xaa6>
  40414a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40414c:	2b00      	cmp	r3, #0
  40414e:	f43f ae1f 	beq.w	403d90 <_vfiprintf_r+0x374>
  404152:	ab0e      	add	r3, sp, #56	; 0x38
  404154:	2202      	movs	r2, #2
  404156:	4608      	mov	r0, r1
  404158:	931c      	str	r3, [sp, #112]	; 0x70
  40415a:	921d      	str	r2, [sp, #116]	; 0x74
  40415c:	46ca      	mov	sl, r9
  40415e:	4601      	mov	r1, r0
  404160:	f10a 0a08 	add.w	sl, sl, #8
  404164:	3001      	adds	r0, #1
  404166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404168:	2b80      	cmp	r3, #128	; 0x80
  40416a:	f43f ae19 	beq.w	403da0 <_vfiprintf_r+0x384>
  40416e:	9b05      	ldr	r3, [sp, #20]
  404170:	1ae4      	subs	r4, r4, r3
  404172:	2c00      	cmp	r4, #0
  404174:	dd2e      	ble.n	4041d4 <_vfiprintf_r+0x7b8>
  404176:	2c10      	cmp	r4, #16
  404178:	4db3      	ldr	r5, [pc, #716]	; (404448 <_vfiprintf_r+0xa2c>)
  40417a:	dd1e      	ble.n	4041ba <_vfiprintf_r+0x79e>
  40417c:	46d6      	mov	lr, sl
  40417e:	2610      	movs	r6, #16
  404180:	9f06      	ldr	r7, [sp, #24]
  404182:	f8dd a010 	ldr.w	sl, [sp, #16]
  404186:	e006      	b.n	404196 <_vfiprintf_r+0x77a>
  404188:	1c88      	adds	r0, r1, #2
  40418a:	f10e 0e08 	add.w	lr, lr, #8
  40418e:	4619      	mov	r1, r3
  404190:	3c10      	subs	r4, #16
  404192:	2c10      	cmp	r4, #16
  404194:	dd10      	ble.n	4041b8 <_vfiprintf_r+0x79c>
  404196:	1c4b      	adds	r3, r1, #1
  404198:	3210      	adds	r2, #16
  40419a:	2b07      	cmp	r3, #7
  40419c:	9211      	str	r2, [sp, #68]	; 0x44
  40419e:	e88e 0060 	stmia.w	lr, {r5, r6}
  4041a2:	9310      	str	r3, [sp, #64]	; 0x40
  4041a4:	ddf0      	ble.n	404188 <_vfiprintf_r+0x76c>
  4041a6:	2a00      	cmp	r2, #0
  4041a8:	d165      	bne.n	404276 <_vfiprintf_r+0x85a>
  4041aa:	3c10      	subs	r4, #16
  4041ac:	2c10      	cmp	r4, #16
  4041ae:	f04f 0001 	mov.w	r0, #1
  4041b2:	4611      	mov	r1, r2
  4041b4:	46ce      	mov	lr, r9
  4041b6:	dcee      	bgt.n	404196 <_vfiprintf_r+0x77a>
  4041b8:	46f2      	mov	sl, lr
  4041ba:	4422      	add	r2, r4
  4041bc:	2807      	cmp	r0, #7
  4041be:	9211      	str	r2, [sp, #68]	; 0x44
  4041c0:	f8ca 5000 	str.w	r5, [sl]
  4041c4:	f8ca 4004 	str.w	r4, [sl, #4]
  4041c8:	9010      	str	r0, [sp, #64]	; 0x40
  4041ca:	f300 8085 	bgt.w	4042d8 <_vfiprintf_r+0x8bc>
  4041ce:	f10a 0a08 	add.w	sl, sl, #8
  4041d2:	3001      	adds	r0, #1
  4041d4:	9905      	ldr	r1, [sp, #20]
  4041d6:	f8ca b000 	str.w	fp, [sl]
  4041da:	440a      	add	r2, r1
  4041dc:	2807      	cmp	r0, #7
  4041de:	9211      	str	r2, [sp, #68]	; 0x44
  4041e0:	f8ca 1004 	str.w	r1, [sl, #4]
  4041e4:	9010      	str	r0, [sp, #64]	; 0x40
  4041e6:	f340 8082 	ble.w	4042ee <_vfiprintf_r+0x8d2>
  4041ea:	2a00      	cmp	r2, #0
  4041ec:	f040 8118 	bne.w	404420 <_vfiprintf_r+0xa04>
  4041f0:	9b02      	ldr	r3, [sp, #8]
  4041f2:	9210      	str	r2, [sp, #64]	; 0x40
  4041f4:	0758      	lsls	r0, r3, #29
  4041f6:	d535      	bpl.n	404264 <_vfiprintf_r+0x848>
  4041f8:	9b08      	ldr	r3, [sp, #32]
  4041fa:	9901      	ldr	r1, [sp, #4]
  4041fc:	1a5c      	subs	r4, r3, r1
  4041fe:	2c00      	cmp	r4, #0
  404200:	f340 80e7 	ble.w	4043d2 <_vfiprintf_r+0x9b6>
  404204:	46ca      	mov	sl, r9
  404206:	2c10      	cmp	r4, #16
  404208:	f340 8218 	ble.w	40463c <_vfiprintf_r+0xc20>
  40420c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40420e:	4e8f      	ldr	r6, [pc, #572]	; (40444c <_vfiprintf_r+0xa30>)
  404210:	9f06      	ldr	r7, [sp, #24]
  404212:	f8dd b010 	ldr.w	fp, [sp, #16]
  404216:	2510      	movs	r5, #16
  404218:	e006      	b.n	404228 <_vfiprintf_r+0x80c>
  40421a:	1c88      	adds	r0, r1, #2
  40421c:	f10a 0a08 	add.w	sl, sl, #8
  404220:	4619      	mov	r1, r3
  404222:	3c10      	subs	r4, #16
  404224:	2c10      	cmp	r4, #16
  404226:	dd11      	ble.n	40424c <_vfiprintf_r+0x830>
  404228:	1c4b      	adds	r3, r1, #1
  40422a:	3210      	adds	r2, #16
  40422c:	2b07      	cmp	r3, #7
  40422e:	9211      	str	r2, [sp, #68]	; 0x44
  404230:	f8ca 6000 	str.w	r6, [sl]
  404234:	f8ca 5004 	str.w	r5, [sl, #4]
  404238:	9310      	str	r3, [sp, #64]	; 0x40
  40423a:	ddee      	ble.n	40421a <_vfiprintf_r+0x7fe>
  40423c:	bb42      	cbnz	r2, 404290 <_vfiprintf_r+0x874>
  40423e:	3c10      	subs	r4, #16
  404240:	2c10      	cmp	r4, #16
  404242:	f04f 0001 	mov.w	r0, #1
  404246:	4611      	mov	r1, r2
  404248:	46ca      	mov	sl, r9
  40424a:	dced      	bgt.n	404228 <_vfiprintf_r+0x80c>
  40424c:	4422      	add	r2, r4
  40424e:	2807      	cmp	r0, #7
  404250:	9211      	str	r2, [sp, #68]	; 0x44
  404252:	f8ca 6000 	str.w	r6, [sl]
  404256:	f8ca 4004 	str.w	r4, [sl, #4]
  40425a:	9010      	str	r0, [sp, #64]	; 0x40
  40425c:	dd51      	ble.n	404302 <_vfiprintf_r+0x8e6>
  40425e:	2a00      	cmp	r2, #0
  404260:	f040 819b 	bne.w	40459a <_vfiprintf_r+0xb7e>
  404264:	9b03      	ldr	r3, [sp, #12]
  404266:	9a08      	ldr	r2, [sp, #32]
  404268:	9901      	ldr	r1, [sp, #4]
  40426a:	428a      	cmp	r2, r1
  40426c:	bfac      	ite	ge
  40426e:	189b      	addge	r3, r3, r2
  404270:	185b      	addlt	r3, r3, r1
  404272:	9303      	str	r3, [sp, #12]
  404274:	e04e      	b.n	404314 <_vfiprintf_r+0x8f8>
  404276:	aa0f      	add	r2, sp, #60	; 0x3c
  404278:	4651      	mov	r1, sl
  40427a:	4638      	mov	r0, r7
  40427c:	f7ff fb8e 	bl	40399c <__sprint_r.part.0>
  404280:	2800      	cmp	r0, #0
  404282:	f040 813f 	bne.w	404504 <_vfiprintf_r+0xae8>
  404286:	9910      	ldr	r1, [sp, #64]	; 0x40
  404288:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40428a:	1c48      	adds	r0, r1, #1
  40428c:	46ce      	mov	lr, r9
  40428e:	e77f      	b.n	404190 <_vfiprintf_r+0x774>
  404290:	aa0f      	add	r2, sp, #60	; 0x3c
  404292:	4659      	mov	r1, fp
  404294:	4638      	mov	r0, r7
  404296:	f7ff fb81 	bl	40399c <__sprint_r.part.0>
  40429a:	b960      	cbnz	r0, 4042b6 <_vfiprintf_r+0x89a>
  40429c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40429e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4042a0:	1c48      	adds	r0, r1, #1
  4042a2:	46ca      	mov	sl, r9
  4042a4:	e7bd      	b.n	404222 <_vfiprintf_r+0x806>
  4042a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4042a8:	f8dd b010 	ldr.w	fp, [sp, #16]
  4042ac:	2b00      	cmp	r3, #0
  4042ae:	f040 81d4 	bne.w	40465a <_vfiprintf_r+0xc3e>
  4042b2:	2300      	movs	r3, #0
  4042b4:	9310      	str	r3, [sp, #64]	; 0x40
  4042b6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4042ba:	f013 0f01 	tst.w	r3, #1
  4042be:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4042c2:	d102      	bne.n	4042ca <_vfiprintf_r+0x8ae>
  4042c4:	059a      	lsls	r2, r3, #22
  4042c6:	f140 80de 	bpl.w	404486 <_vfiprintf_r+0xa6a>
  4042ca:	065b      	lsls	r3, r3, #25
  4042cc:	f53f acb2 	bmi.w	403c34 <_vfiprintf_r+0x218>
  4042d0:	9803      	ldr	r0, [sp, #12]
  4042d2:	b02d      	add	sp, #180	; 0xb4
  4042d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4042d8:	2a00      	cmp	r2, #0
  4042da:	f040 8106 	bne.w	4044ea <_vfiprintf_r+0xace>
  4042de:	9a05      	ldr	r2, [sp, #20]
  4042e0:	921d      	str	r2, [sp, #116]	; 0x74
  4042e2:	2301      	movs	r3, #1
  4042e4:	9211      	str	r2, [sp, #68]	; 0x44
  4042e6:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  4042ea:	9310      	str	r3, [sp, #64]	; 0x40
  4042ec:	46ca      	mov	sl, r9
  4042ee:	f10a 0a08 	add.w	sl, sl, #8
  4042f2:	9b02      	ldr	r3, [sp, #8]
  4042f4:	0759      	lsls	r1, r3, #29
  4042f6:	d504      	bpl.n	404302 <_vfiprintf_r+0x8e6>
  4042f8:	9b08      	ldr	r3, [sp, #32]
  4042fa:	9901      	ldr	r1, [sp, #4]
  4042fc:	1a5c      	subs	r4, r3, r1
  4042fe:	2c00      	cmp	r4, #0
  404300:	dc81      	bgt.n	404206 <_vfiprintf_r+0x7ea>
  404302:	9b03      	ldr	r3, [sp, #12]
  404304:	9908      	ldr	r1, [sp, #32]
  404306:	9801      	ldr	r0, [sp, #4]
  404308:	4281      	cmp	r1, r0
  40430a:	bfac      	ite	ge
  40430c:	185b      	addge	r3, r3, r1
  40430e:	181b      	addlt	r3, r3, r0
  404310:	9303      	str	r3, [sp, #12]
  404312:	bb72      	cbnz	r2, 404372 <_vfiprintf_r+0x956>
  404314:	2300      	movs	r3, #0
  404316:	9310      	str	r3, [sp, #64]	; 0x40
  404318:	46ca      	mov	sl, r9
  40431a:	f7ff bbbc 	b.w	403a96 <_vfiprintf_r+0x7a>
  40431e:	aa0f      	add	r2, sp, #60	; 0x3c
  404320:	9904      	ldr	r1, [sp, #16]
  404322:	4620      	mov	r0, r4
  404324:	f7ff fb3a 	bl	40399c <__sprint_r.part.0>
  404328:	bb50      	cbnz	r0, 404380 <_vfiprintf_r+0x964>
  40432a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40432c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40432e:	f101 0e01 	add.w	lr, r1, #1
  404332:	46cc      	mov	ip, r9
  404334:	e548      	b.n	403dc8 <_vfiprintf_r+0x3ac>
  404336:	2a00      	cmp	r2, #0
  404338:	f040 8140 	bne.w	4045bc <_vfiprintf_r+0xba0>
  40433c:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  404340:	2900      	cmp	r1, #0
  404342:	f000 811b 	beq.w	40457c <_vfiprintf_r+0xb60>
  404346:	2201      	movs	r2, #1
  404348:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  40434c:	4610      	mov	r0, r2
  40434e:	921d      	str	r2, [sp, #116]	; 0x74
  404350:	911c      	str	r1, [sp, #112]	; 0x70
  404352:	46ca      	mov	sl, r9
  404354:	4601      	mov	r1, r0
  404356:	f10a 0a08 	add.w	sl, sl, #8
  40435a:	3001      	adds	r0, #1
  40435c:	e507      	b.n	403d6e <_vfiprintf_r+0x352>
  40435e:	9b02      	ldr	r3, [sp, #8]
  404360:	2a01      	cmp	r2, #1
  404362:	f000 8098 	beq.w	404496 <_vfiprintf_r+0xa7a>
  404366:	2a02      	cmp	r2, #2
  404368:	d10d      	bne.n	404386 <_vfiprintf_r+0x96a>
  40436a:	9302      	str	r3, [sp, #8]
  40436c:	2600      	movs	r6, #0
  40436e:	2700      	movs	r7, #0
  404370:	e5b0      	b.n	403ed4 <_vfiprintf_r+0x4b8>
  404372:	aa0f      	add	r2, sp, #60	; 0x3c
  404374:	9904      	ldr	r1, [sp, #16]
  404376:	9806      	ldr	r0, [sp, #24]
  404378:	f7ff fb10 	bl	40399c <__sprint_r.part.0>
  40437c:	2800      	cmp	r0, #0
  40437e:	d0c9      	beq.n	404314 <_vfiprintf_r+0x8f8>
  404380:	f8dd b010 	ldr.w	fp, [sp, #16]
  404384:	e797      	b.n	4042b6 <_vfiprintf_r+0x89a>
  404386:	9302      	str	r3, [sp, #8]
  404388:	2600      	movs	r6, #0
  40438a:	2700      	movs	r7, #0
  40438c:	4649      	mov	r1, r9
  40438e:	e000      	b.n	404392 <_vfiprintf_r+0x976>
  404390:	4659      	mov	r1, fp
  404392:	08f2      	lsrs	r2, r6, #3
  404394:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  404398:	08f8      	lsrs	r0, r7, #3
  40439a:	f006 0307 	and.w	r3, r6, #7
  40439e:	4607      	mov	r7, r0
  4043a0:	4616      	mov	r6, r2
  4043a2:	3330      	adds	r3, #48	; 0x30
  4043a4:	ea56 0207 	orrs.w	r2, r6, r7
  4043a8:	f801 3c01 	strb.w	r3, [r1, #-1]
  4043ac:	f101 3bff 	add.w	fp, r1, #4294967295
  4043b0:	d1ee      	bne.n	404390 <_vfiprintf_r+0x974>
  4043b2:	9a02      	ldr	r2, [sp, #8]
  4043b4:	07d6      	lsls	r6, r2, #31
  4043b6:	f57f ad9d 	bpl.w	403ef4 <_vfiprintf_r+0x4d8>
  4043ba:	2b30      	cmp	r3, #48	; 0x30
  4043bc:	f43f ad9a 	beq.w	403ef4 <_vfiprintf_r+0x4d8>
  4043c0:	3902      	subs	r1, #2
  4043c2:	2330      	movs	r3, #48	; 0x30
  4043c4:	f80b 3c01 	strb.w	r3, [fp, #-1]
  4043c8:	eba9 0301 	sub.w	r3, r9, r1
  4043cc:	9305      	str	r3, [sp, #20]
  4043ce:	468b      	mov	fp, r1
  4043d0:	e476      	b.n	403cc0 <_vfiprintf_r+0x2a4>
  4043d2:	9b03      	ldr	r3, [sp, #12]
  4043d4:	9a08      	ldr	r2, [sp, #32]
  4043d6:	428a      	cmp	r2, r1
  4043d8:	bfac      	ite	ge
  4043da:	189b      	addge	r3, r3, r2
  4043dc:	185b      	addlt	r3, r3, r1
  4043de:	9303      	str	r3, [sp, #12]
  4043e0:	e798      	b.n	404314 <_vfiprintf_r+0x8f8>
  4043e2:	2202      	movs	r2, #2
  4043e4:	e44d      	b.n	403c82 <_vfiprintf_r+0x266>
  4043e6:	2f00      	cmp	r7, #0
  4043e8:	bf08      	it	eq
  4043ea:	2e0a      	cmpeq	r6, #10
  4043ec:	d352      	bcc.n	404494 <_vfiprintf_r+0xa78>
  4043ee:	46cb      	mov	fp, r9
  4043f0:	4630      	mov	r0, r6
  4043f2:	4639      	mov	r1, r7
  4043f4:	220a      	movs	r2, #10
  4043f6:	2300      	movs	r3, #0
  4043f8:	f001 fbc6 	bl	405b88 <__aeabi_uldivmod>
  4043fc:	3230      	adds	r2, #48	; 0x30
  4043fe:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  404402:	4630      	mov	r0, r6
  404404:	4639      	mov	r1, r7
  404406:	2300      	movs	r3, #0
  404408:	220a      	movs	r2, #10
  40440a:	f001 fbbd 	bl	405b88 <__aeabi_uldivmod>
  40440e:	4606      	mov	r6, r0
  404410:	460f      	mov	r7, r1
  404412:	ea56 0307 	orrs.w	r3, r6, r7
  404416:	d1eb      	bne.n	4043f0 <_vfiprintf_r+0x9d4>
  404418:	e56c      	b.n	403ef4 <_vfiprintf_r+0x4d8>
  40441a:	9405      	str	r4, [sp, #20]
  40441c:	46cb      	mov	fp, r9
  40441e:	e44f      	b.n	403cc0 <_vfiprintf_r+0x2a4>
  404420:	aa0f      	add	r2, sp, #60	; 0x3c
  404422:	9904      	ldr	r1, [sp, #16]
  404424:	9806      	ldr	r0, [sp, #24]
  404426:	f7ff fab9 	bl	40399c <__sprint_r.part.0>
  40442a:	2800      	cmp	r0, #0
  40442c:	d1a8      	bne.n	404380 <_vfiprintf_r+0x964>
  40442e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404430:	46ca      	mov	sl, r9
  404432:	e75e      	b.n	4042f2 <_vfiprintf_r+0x8d6>
  404434:	aa0f      	add	r2, sp, #60	; 0x3c
  404436:	9904      	ldr	r1, [sp, #16]
  404438:	9806      	ldr	r0, [sp, #24]
  40443a:	f7ff faaf 	bl	40399c <__sprint_r.part.0>
  40443e:	2800      	cmp	r0, #0
  404440:	d19e      	bne.n	404380 <_vfiprintf_r+0x964>
  404442:	46ca      	mov	sl, r9
  404444:	f7ff bbc0 	b.w	403bc8 <_vfiprintf_r+0x1ac>
  404448:	00405ff0 	.word	0x00405ff0
  40444c:	00405fe0 	.word	0x00405fe0
  404450:	3104      	adds	r1, #4
  404452:	6816      	ldr	r6, [r2, #0]
  404454:	9107      	str	r1, [sp, #28]
  404456:	2201      	movs	r2, #1
  404458:	2700      	movs	r7, #0
  40445a:	e412      	b.n	403c82 <_vfiprintf_r+0x266>
  40445c:	9807      	ldr	r0, [sp, #28]
  40445e:	4601      	mov	r1, r0
  404460:	3104      	adds	r1, #4
  404462:	6806      	ldr	r6, [r0, #0]
  404464:	9107      	str	r1, [sp, #28]
  404466:	2700      	movs	r7, #0
  404468:	e40b      	b.n	403c82 <_vfiprintf_r+0x266>
  40446a:	680e      	ldr	r6, [r1, #0]
  40446c:	3104      	adds	r1, #4
  40446e:	9107      	str	r1, [sp, #28]
  404470:	2700      	movs	r7, #0
  404472:	e591      	b.n	403f98 <_vfiprintf_r+0x57c>
  404474:	9907      	ldr	r1, [sp, #28]
  404476:	680e      	ldr	r6, [r1, #0]
  404478:	460a      	mov	r2, r1
  40447a:	17f7      	asrs	r7, r6, #31
  40447c:	3204      	adds	r2, #4
  40447e:	9207      	str	r2, [sp, #28]
  404480:	4630      	mov	r0, r6
  404482:	4639      	mov	r1, r7
  404484:	e50f      	b.n	403ea6 <_vfiprintf_r+0x48a>
  404486:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40448a:	f000 fe7f 	bl	40518c <__retarget_lock_release_recursive>
  40448e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404492:	e71a      	b.n	4042ca <_vfiprintf_r+0x8ae>
  404494:	9b02      	ldr	r3, [sp, #8]
  404496:	9302      	str	r3, [sp, #8]
  404498:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40449c:	3630      	adds	r6, #48	; 0x30
  40449e:	2301      	movs	r3, #1
  4044a0:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  4044a4:	9305      	str	r3, [sp, #20]
  4044a6:	e40b      	b.n	403cc0 <_vfiprintf_r+0x2a4>
  4044a8:	aa0f      	add	r2, sp, #60	; 0x3c
  4044aa:	9904      	ldr	r1, [sp, #16]
  4044ac:	9806      	ldr	r0, [sp, #24]
  4044ae:	f7ff fa75 	bl	40399c <__sprint_r.part.0>
  4044b2:	2800      	cmp	r0, #0
  4044b4:	f47f af64 	bne.w	404380 <_vfiprintf_r+0x964>
  4044b8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4044ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4044bc:	1c48      	adds	r0, r1, #1
  4044be:	46ca      	mov	sl, r9
  4044c0:	e651      	b.n	404166 <_vfiprintf_r+0x74a>
  4044c2:	aa0f      	add	r2, sp, #60	; 0x3c
  4044c4:	9904      	ldr	r1, [sp, #16]
  4044c6:	9806      	ldr	r0, [sp, #24]
  4044c8:	f7ff fa68 	bl	40399c <__sprint_r.part.0>
  4044cc:	2800      	cmp	r0, #0
  4044ce:	f47f af57 	bne.w	404380 <_vfiprintf_r+0x964>
  4044d2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4044d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4044d6:	1c48      	adds	r0, r1, #1
  4044d8:	46ca      	mov	sl, r9
  4044da:	e448      	b.n	403d6e <_vfiprintf_r+0x352>
  4044dc:	2a00      	cmp	r2, #0
  4044de:	f040 8091 	bne.w	404604 <_vfiprintf_r+0xbe8>
  4044e2:	2001      	movs	r0, #1
  4044e4:	4611      	mov	r1, r2
  4044e6:	46ca      	mov	sl, r9
  4044e8:	e641      	b.n	40416e <_vfiprintf_r+0x752>
  4044ea:	aa0f      	add	r2, sp, #60	; 0x3c
  4044ec:	9904      	ldr	r1, [sp, #16]
  4044ee:	9806      	ldr	r0, [sp, #24]
  4044f0:	f7ff fa54 	bl	40399c <__sprint_r.part.0>
  4044f4:	2800      	cmp	r0, #0
  4044f6:	f47f af43 	bne.w	404380 <_vfiprintf_r+0x964>
  4044fa:	9810      	ldr	r0, [sp, #64]	; 0x40
  4044fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4044fe:	3001      	adds	r0, #1
  404500:	46ca      	mov	sl, r9
  404502:	e667      	b.n	4041d4 <_vfiprintf_r+0x7b8>
  404504:	46d3      	mov	fp, sl
  404506:	e6d6      	b.n	4042b6 <_vfiprintf_r+0x89a>
  404508:	9e07      	ldr	r6, [sp, #28]
  40450a:	3607      	adds	r6, #7
  40450c:	f026 0207 	bic.w	r2, r6, #7
  404510:	f102 0108 	add.w	r1, r2, #8
  404514:	e9d2 6700 	ldrd	r6, r7, [r2]
  404518:	9107      	str	r1, [sp, #28]
  40451a:	2201      	movs	r2, #1
  40451c:	f7ff bbb1 	b.w	403c82 <_vfiprintf_r+0x266>
  404520:	9e07      	ldr	r6, [sp, #28]
  404522:	3607      	adds	r6, #7
  404524:	f026 0607 	bic.w	r6, r6, #7
  404528:	e9d6 0100 	ldrd	r0, r1, [r6]
  40452c:	f106 0208 	add.w	r2, r6, #8
  404530:	9207      	str	r2, [sp, #28]
  404532:	4606      	mov	r6, r0
  404534:	460f      	mov	r7, r1
  404536:	e4b6      	b.n	403ea6 <_vfiprintf_r+0x48a>
  404538:	9e07      	ldr	r6, [sp, #28]
  40453a:	3607      	adds	r6, #7
  40453c:	f026 0207 	bic.w	r2, r6, #7
  404540:	f102 0108 	add.w	r1, r2, #8
  404544:	e9d2 6700 	ldrd	r6, r7, [r2]
  404548:	9107      	str	r1, [sp, #28]
  40454a:	2200      	movs	r2, #0
  40454c:	f7ff bb99 	b.w	403c82 <_vfiprintf_r+0x266>
  404550:	9e07      	ldr	r6, [sp, #28]
  404552:	3607      	adds	r6, #7
  404554:	f026 0107 	bic.w	r1, r6, #7
  404558:	f101 0008 	add.w	r0, r1, #8
  40455c:	9007      	str	r0, [sp, #28]
  40455e:	e9d1 6700 	ldrd	r6, r7, [r1]
  404562:	e519      	b.n	403f98 <_vfiprintf_r+0x57c>
  404564:	46cb      	mov	fp, r9
  404566:	f7ff bbab 	b.w	403cc0 <_vfiprintf_r+0x2a4>
  40456a:	252d      	movs	r5, #45	; 0x2d
  40456c:	4276      	negs	r6, r6
  40456e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  404572:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404576:	2201      	movs	r2, #1
  404578:	f7ff bb88 	b.w	403c8c <_vfiprintf_r+0x270>
  40457c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40457e:	b9b3      	cbnz	r3, 4045ae <_vfiprintf_r+0xb92>
  404580:	4611      	mov	r1, r2
  404582:	2001      	movs	r0, #1
  404584:	46ca      	mov	sl, r9
  404586:	e5f2      	b.n	40416e <_vfiprintf_r+0x752>
  404588:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40458c:	f000 fdfe 	bl	40518c <__retarget_lock_release_recursive>
  404590:	f04f 33ff 	mov.w	r3, #4294967295
  404594:	9303      	str	r3, [sp, #12]
  404596:	f7ff bb50 	b.w	403c3a <_vfiprintf_r+0x21e>
  40459a:	aa0f      	add	r2, sp, #60	; 0x3c
  40459c:	9904      	ldr	r1, [sp, #16]
  40459e:	9806      	ldr	r0, [sp, #24]
  4045a0:	f7ff f9fc 	bl	40399c <__sprint_r.part.0>
  4045a4:	2800      	cmp	r0, #0
  4045a6:	f47f aeeb 	bne.w	404380 <_vfiprintf_r+0x964>
  4045aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4045ac:	e6a9      	b.n	404302 <_vfiprintf_r+0x8e6>
  4045ae:	ab0e      	add	r3, sp, #56	; 0x38
  4045b0:	2202      	movs	r2, #2
  4045b2:	931c      	str	r3, [sp, #112]	; 0x70
  4045b4:	921d      	str	r2, [sp, #116]	; 0x74
  4045b6:	2001      	movs	r0, #1
  4045b8:	46ca      	mov	sl, r9
  4045ba:	e5d0      	b.n	40415e <_vfiprintf_r+0x742>
  4045bc:	aa0f      	add	r2, sp, #60	; 0x3c
  4045be:	9904      	ldr	r1, [sp, #16]
  4045c0:	9806      	ldr	r0, [sp, #24]
  4045c2:	f7ff f9eb 	bl	40399c <__sprint_r.part.0>
  4045c6:	2800      	cmp	r0, #0
  4045c8:	f47f aeda 	bne.w	404380 <_vfiprintf_r+0x964>
  4045cc:	9910      	ldr	r1, [sp, #64]	; 0x40
  4045ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4045d0:	1c48      	adds	r0, r1, #1
  4045d2:	46ca      	mov	sl, r9
  4045d4:	e5a4      	b.n	404120 <_vfiprintf_r+0x704>
  4045d6:	9a07      	ldr	r2, [sp, #28]
  4045d8:	9903      	ldr	r1, [sp, #12]
  4045da:	6813      	ldr	r3, [r2, #0]
  4045dc:	17cd      	asrs	r5, r1, #31
  4045de:	4608      	mov	r0, r1
  4045e0:	3204      	adds	r2, #4
  4045e2:	4629      	mov	r1, r5
  4045e4:	9207      	str	r2, [sp, #28]
  4045e6:	e9c3 0100 	strd	r0, r1, [r3]
  4045ea:	f7ff ba54 	b.w	403a96 <_vfiprintf_r+0x7a>
  4045ee:	4658      	mov	r0, fp
  4045f0:	9607      	str	r6, [sp, #28]
  4045f2:	9302      	str	r3, [sp, #8]
  4045f4:	f7ff f964 	bl	4038c0 <strlen>
  4045f8:	2400      	movs	r4, #0
  4045fa:	9005      	str	r0, [sp, #20]
  4045fc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404600:	f7ff bb5e 	b.w	403cc0 <_vfiprintf_r+0x2a4>
  404604:	aa0f      	add	r2, sp, #60	; 0x3c
  404606:	9904      	ldr	r1, [sp, #16]
  404608:	9806      	ldr	r0, [sp, #24]
  40460a:	f7ff f9c7 	bl	40399c <__sprint_r.part.0>
  40460e:	2800      	cmp	r0, #0
  404610:	f47f aeb6 	bne.w	404380 <_vfiprintf_r+0x964>
  404614:	9910      	ldr	r1, [sp, #64]	; 0x40
  404616:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404618:	1c48      	adds	r0, r1, #1
  40461a:	46ca      	mov	sl, r9
  40461c:	e5a7      	b.n	40416e <_vfiprintf_r+0x752>
  40461e:	9910      	ldr	r1, [sp, #64]	; 0x40
  404620:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404622:	4e20      	ldr	r6, [pc, #128]	; (4046a4 <_vfiprintf_r+0xc88>)
  404624:	3101      	adds	r1, #1
  404626:	f7ff bb90 	b.w	403d4a <_vfiprintf_r+0x32e>
  40462a:	2c06      	cmp	r4, #6
  40462c:	bf28      	it	cs
  40462e:	2406      	movcs	r4, #6
  404630:	9405      	str	r4, [sp, #20]
  404632:	9607      	str	r6, [sp, #28]
  404634:	9401      	str	r4, [sp, #4]
  404636:	f8df b070 	ldr.w	fp, [pc, #112]	; 4046a8 <_vfiprintf_r+0xc8c>
  40463a:	e4d5      	b.n	403fe8 <_vfiprintf_r+0x5cc>
  40463c:	9810      	ldr	r0, [sp, #64]	; 0x40
  40463e:	4e19      	ldr	r6, [pc, #100]	; (4046a4 <_vfiprintf_r+0xc88>)
  404640:	3001      	adds	r0, #1
  404642:	e603      	b.n	40424c <_vfiprintf_r+0x830>
  404644:	9405      	str	r4, [sp, #20]
  404646:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40464a:	9607      	str	r6, [sp, #28]
  40464c:	9302      	str	r3, [sp, #8]
  40464e:	4604      	mov	r4, r0
  404650:	f7ff bb36 	b.w	403cc0 <_vfiprintf_r+0x2a4>
  404654:	4686      	mov	lr, r0
  404656:	f7ff bbce 	b.w	403df6 <_vfiprintf_r+0x3da>
  40465a:	9806      	ldr	r0, [sp, #24]
  40465c:	aa0f      	add	r2, sp, #60	; 0x3c
  40465e:	4659      	mov	r1, fp
  404660:	f7ff f99c 	bl	40399c <__sprint_r.part.0>
  404664:	2800      	cmp	r0, #0
  404666:	f43f ae24 	beq.w	4042b2 <_vfiprintf_r+0x896>
  40466a:	e624      	b.n	4042b6 <_vfiprintf_r+0x89a>
  40466c:	9907      	ldr	r1, [sp, #28]
  40466e:	f898 2001 	ldrb.w	r2, [r8, #1]
  404672:	680c      	ldr	r4, [r1, #0]
  404674:	3104      	adds	r1, #4
  404676:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  40467a:	46b8      	mov	r8, r7
  40467c:	9107      	str	r1, [sp, #28]
  40467e:	f7ff ba3f 	b.w	403b00 <_vfiprintf_r+0xe4>
  404682:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404686:	e43c      	b.n	403f02 <_vfiprintf_r+0x4e6>
  404688:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40468c:	e521      	b.n	4040d2 <_vfiprintf_r+0x6b6>
  40468e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404692:	f7ff bbf4 	b.w	403e7e <_vfiprintf_r+0x462>
  404696:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40469a:	e491      	b.n	403fc0 <_vfiprintf_r+0x5a4>
  40469c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4046a0:	e469      	b.n	403f76 <_vfiprintf_r+0x55a>
  4046a2:	bf00      	nop
  4046a4:	00405fe0 	.word	0x00405fe0
  4046a8:	00405fd8 	.word	0x00405fd8

004046ac <__sbprintf>:
  4046ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4046b0:	460c      	mov	r4, r1
  4046b2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  4046b6:	8989      	ldrh	r1, [r1, #12]
  4046b8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4046ba:	89e5      	ldrh	r5, [r4, #14]
  4046bc:	9619      	str	r6, [sp, #100]	; 0x64
  4046be:	f021 0102 	bic.w	r1, r1, #2
  4046c2:	4606      	mov	r6, r0
  4046c4:	69e0      	ldr	r0, [r4, #28]
  4046c6:	f8ad 100c 	strh.w	r1, [sp, #12]
  4046ca:	4617      	mov	r7, r2
  4046cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4046d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
  4046d2:	f8ad 500e 	strh.w	r5, [sp, #14]
  4046d6:	4698      	mov	r8, r3
  4046d8:	ad1a      	add	r5, sp, #104	; 0x68
  4046da:	2300      	movs	r3, #0
  4046dc:	9007      	str	r0, [sp, #28]
  4046de:	a816      	add	r0, sp, #88	; 0x58
  4046e0:	9209      	str	r2, [sp, #36]	; 0x24
  4046e2:	9306      	str	r3, [sp, #24]
  4046e4:	9500      	str	r5, [sp, #0]
  4046e6:	9504      	str	r5, [sp, #16]
  4046e8:	9102      	str	r1, [sp, #8]
  4046ea:	9105      	str	r1, [sp, #20]
  4046ec:	f000 fd48 	bl	405180 <__retarget_lock_init_recursive>
  4046f0:	4643      	mov	r3, r8
  4046f2:	463a      	mov	r2, r7
  4046f4:	4669      	mov	r1, sp
  4046f6:	4630      	mov	r0, r6
  4046f8:	f7ff f990 	bl	403a1c <_vfiprintf_r>
  4046fc:	1e05      	subs	r5, r0, #0
  4046fe:	db07      	blt.n	404710 <__sbprintf+0x64>
  404700:	4630      	mov	r0, r6
  404702:	4669      	mov	r1, sp
  404704:	f000 f928 	bl	404958 <_fflush_r>
  404708:	2800      	cmp	r0, #0
  40470a:	bf18      	it	ne
  40470c:	f04f 35ff 	movne.w	r5, #4294967295
  404710:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  404714:	065b      	lsls	r3, r3, #25
  404716:	d503      	bpl.n	404720 <__sbprintf+0x74>
  404718:	89a3      	ldrh	r3, [r4, #12]
  40471a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40471e:	81a3      	strh	r3, [r4, #12]
  404720:	9816      	ldr	r0, [sp, #88]	; 0x58
  404722:	f000 fd2f 	bl	405184 <__retarget_lock_close_recursive>
  404726:	4628      	mov	r0, r5
  404728:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  40472c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00404730 <__swsetup_r>:
  404730:	b538      	push	{r3, r4, r5, lr}
  404732:	4b30      	ldr	r3, [pc, #192]	; (4047f4 <__swsetup_r+0xc4>)
  404734:	681b      	ldr	r3, [r3, #0]
  404736:	4605      	mov	r5, r0
  404738:	460c      	mov	r4, r1
  40473a:	b113      	cbz	r3, 404742 <__swsetup_r+0x12>
  40473c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40473e:	2a00      	cmp	r2, #0
  404740:	d038      	beq.n	4047b4 <__swsetup_r+0x84>
  404742:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404746:	b293      	uxth	r3, r2
  404748:	0718      	lsls	r0, r3, #28
  40474a:	d50c      	bpl.n	404766 <__swsetup_r+0x36>
  40474c:	6920      	ldr	r0, [r4, #16]
  40474e:	b1a8      	cbz	r0, 40477c <__swsetup_r+0x4c>
  404750:	f013 0201 	ands.w	r2, r3, #1
  404754:	d01e      	beq.n	404794 <__swsetup_r+0x64>
  404756:	6963      	ldr	r3, [r4, #20]
  404758:	2200      	movs	r2, #0
  40475a:	425b      	negs	r3, r3
  40475c:	61a3      	str	r3, [r4, #24]
  40475e:	60a2      	str	r2, [r4, #8]
  404760:	b1f0      	cbz	r0, 4047a0 <__swsetup_r+0x70>
  404762:	2000      	movs	r0, #0
  404764:	bd38      	pop	{r3, r4, r5, pc}
  404766:	06d9      	lsls	r1, r3, #27
  404768:	d53c      	bpl.n	4047e4 <__swsetup_r+0xb4>
  40476a:	0758      	lsls	r0, r3, #29
  40476c:	d426      	bmi.n	4047bc <__swsetup_r+0x8c>
  40476e:	6920      	ldr	r0, [r4, #16]
  404770:	f042 0308 	orr.w	r3, r2, #8
  404774:	81a3      	strh	r3, [r4, #12]
  404776:	b29b      	uxth	r3, r3
  404778:	2800      	cmp	r0, #0
  40477a:	d1e9      	bne.n	404750 <__swsetup_r+0x20>
  40477c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  404780:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  404784:	d0e4      	beq.n	404750 <__swsetup_r+0x20>
  404786:	4628      	mov	r0, r5
  404788:	4621      	mov	r1, r4
  40478a:	f000 fd2f 	bl	4051ec <__smakebuf_r>
  40478e:	89a3      	ldrh	r3, [r4, #12]
  404790:	6920      	ldr	r0, [r4, #16]
  404792:	e7dd      	b.n	404750 <__swsetup_r+0x20>
  404794:	0799      	lsls	r1, r3, #30
  404796:	bf58      	it	pl
  404798:	6962      	ldrpl	r2, [r4, #20]
  40479a:	60a2      	str	r2, [r4, #8]
  40479c:	2800      	cmp	r0, #0
  40479e:	d1e0      	bne.n	404762 <__swsetup_r+0x32>
  4047a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4047a4:	061a      	lsls	r2, r3, #24
  4047a6:	d5dd      	bpl.n	404764 <__swsetup_r+0x34>
  4047a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4047ac:	81a3      	strh	r3, [r4, #12]
  4047ae:	f04f 30ff 	mov.w	r0, #4294967295
  4047b2:	bd38      	pop	{r3, r4, r5, pc}
  4047b4:	4618      	mov	r0, r3
  4047b6:	f000 f927 	bl	404a08 <__sinit>
  4047ba:	e7c2      	b.n	404742 <__swsetup_r+0x12>
  4047bc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4047be:	b151      	cbz	r1, 4047d6 <__swsetup_r+0xa6>
  4047c0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4047c4:	4299      	cmp	r1, r3
  4047c6:	d004      	beq.n	4047d2 <__swsetup_r+0xa2>
  4047c8:	4628      	mov	r0, r5
  4047ca:	f000 fa43 	bl	404c54 <_free_r>
  4047ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4047d2:	2300      	movs	r3, #0
  4047d4:	6323      	str	r3, [r4, #48]	; 0x30
  4047d6:	2300      	movs	r3, #0
  4047d8:	6920      	ldr	r0, [r4, #16]
  4047da:	6063      	str	r3, [r4, #4]
  4047dc:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4047e0:	6020      	str	r0, [r4, #0]
  4047e2:	e7c5      	b.n	404770 <__swsetup_r+0x40>
  4047e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4047e8:	2309      	movs	r3, #9
  4047ea:	602b      	str	r3, [r5, #0]
  4047ec:	f04f 30ff 	mov.w	r0, #4294967295
  4047f0:	81a2      	strh	r2, [r4, #12]
  4047f2:	bd38      	pop	{r3, r4, r5, pc}
  4047f4:	2040000c 	.word	0x2040000c

004047f8 <register_fini>:
  4047f8:	4b02      	ldr	r3, [pc, #8]	; (404804 <register_fini+0xc>)
  4047fa:	b113      	cbz	r3, 404802 <register_fini+0xa>
  4047fc:	4802      	ldr	r0, [pc, #8]	; (404808 <register_fini+0x10>)
  4047fe:	f000 b805 	b.w	40480c <atexit>
  404802:	4770      	bx	lr
  404804:	00000000 	.word	0x00000000
  404808:	00404a79 	.word	0x00404a79

0040480c <atexit>:
  40480c:	2300      	movs	r3, #0
  40480e:	4601      	mov	r1, r0
  404810:	461a      	mov	r2, r3
  404812:	4618      	mov	r0, r3
  404814:	f001 b890 	b.w	405938 <__register_exitproc>

00404818 <__sflush_r>:
  404818:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40481c:	b29a      	uxth	r2, r3
  40481e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404822:	460d      	mov	r5, r1
  404824:	0711      	lsls	r1, r2, #28
  404826:	4680      	mov	r8, r0
  404828:	d43a      	bmi.n	4048a0 <__sflush_r+0x88>
  40482a:	686a      	ldr	r2, [r5, #4]
  40482c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  404830:	2a00      	cmp	r2, #0
  404832:	81ab      	strh	r3, [r5, #12]
  404834:	dd6f      	ble.n	404916 <__sflush_r+0xfe>
  404836:	6aac      	ldr	r4, [r5, #40]	; 0x28
  404838:	2c00      	cmp	r4, #0
  40483a:	d049      	beq.n	4048d0 <__sflush_r+0xb8>
  40483c:	2200      	movs	r2, #0
  40483e:	b29b      	uxth	r3, r3
  404840:	f8d8 6000 	ldr.w	r6, [r8]
  404844:	f8c8 2000 	str.w	r2, [r8]
  404848:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40484c:	d067      	beq.n	40491e <__sflush_r+0x106>
  40484e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  404850:	075f      	lsls	r7, r3, #29
  404852:	d505      	bpl.n	404860 <__sflush_r+0x48>
  404854:	6869      	ldr	r1, [r5, #4]
  404856:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  404858:	1a52      	subs	r2, r2, r1
  40485a:	b10b      	cbz	r3, 404860 <__sflush_r+0x48>
  40485c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40485e:	1ad2      	subs	r2, r2, r3
  404860:	2300      	movs	r3, #0
  404862:	69e9      	ldr	r1, [r5, #28]
  404864:	4640      	mov	r0, r8
  404866:	47a0      	blx	r4
  404868:	1c44      	adds	r4, r0, #1
  40486a:	d03c      	beq.n	4048e6 <__sflush_r+0xce>
  40486c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  404870:	692a      	ldr	r2, [r5, #16]
  404872:	602a      	str	r2, [r5, #0]
  404874:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  404878:	2200      	movs	r2, #0
  40487a:	81ab      	strh	r3, [r5, #12]
  40487c:	04db      	lsls	r3, r3, #19
  40487e:	606a      	str	r2, [r5, #4]
  404880:	d447      	bmi.n	404912 <__sflush_r+0xfa>
  404882:	6b29      	ldr	r1, [r5, #48]	; 0x30
  404884:	f8c8 6000 	str.w	r6, [r8]
  404888:	b311      	cbz	r1, 4048d0 <__sflush_r+0xb8>
  40488a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40488e:	4299      	cmp	r1, r3
  404890:	d002      	beq.n	404898 <__sflush_r+0x80>
  404892:	4640      	mov	r0, r8
  404894:	f000 f9de 	bl	404c54 <_free_r>
  404898:	2000      	movs	r0, #0
  40489a:	6328      	str	r0, [r5, #48]	; 0x30
  40489c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4048a0:	692e      	ldr	r6, [r5, #16]
  4048a2:	b1ae      	cbz	r6, 4048d0 <__sflush_r+0xb8>
  4048a4:	682c      	ldr	r4, [r5, #0]
  4048a6:	602e      	str	r6, [r5, #0]
  4048a8:	0791      	lsls	r1, r2, #30
  4048aa:	bf0c      	ite	eq
  4048ac:	696b      	ldreq	r3, [r5, #20]
  4048ae:	2300      	movne	r3, #0
  4048b0:	1ba4      	subs	r4, r4, r6
  4048b2:	60ab      	str	r3, [r5, #8]
  4048b4:	e00a      	b.n	4048cc <__sflush_r+0xb4>
  4048b6:	4623      	mov	r3, r4
  4048b8:	4632      	mov	r2, r6
  4048ba:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4048bc:	69e9      	ldr	r1, [r5, #28]
  4048be:	4640      	mov	r0, r8
  4048c0:	47b8      	blx	r7
  4048c2:	2800      	cmp	r0, #0
  4048c4:	eba4 0400 	sub.w	r4, r4, r0
  4048c8:	4406      	add	r6, r0
  4048ca:	dd04      	ble.n	4048d6 <__sflush_r+0xbe>
  4048cc:	2c00      	cmp	r4, #0
  4048ce:	dcf2      	bgt.n	4048b6 <__sflush_r+0x9e>
  4048d0:	2000      	movs	r0, #0
  4048d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4048d6:	89ab      	ldrh	r3, [r5, #12]
  4048d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4048dc:	81ab      	strh	r3, [r5, #12]
  4048de:	f04f 30ff 	mov.w	r0, #4294967295
  4048e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4048e6:	f8d8 4000 	ldr.w	r4, [r8]
  4048ea:	2c1d      	cmp	r4, #29
  4048ec:	d8f3      	bhi.n	4048d6 <__sflush_r+0xbe>
  4048ee:	4b19      	ldr	r3, [pc, #100]	; (404954 <__sflush_r+0x13c>)
  4048f0:	40e3      	lsrs	r3, r4
  4048f2:	43db      	mvns	r3, r3
  4048f4:	f013 0301 	ands.w	r3, r3, #1
  4048f8:	d1ed      	bne.n	4048d6 <__sflush_r+0xbe>
  4048fa:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4048fe:	606b      	str	r3, [r5, #4]
  404900:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  404904:	6929      	ldr	r1, [r5, #16]
  404906:	81ab      	strh	r3, [r5, #12]
  404908:	04da      	lsls	r2, r3, #19
  40490a:	6029      	str	r1, [r5, #0]
  40490c:	d5b9      	bpl.n	404882 <__sflush_r+0x6a>
  40490e:	2c00      	cmp	r4, #0
  404910:	d1b7      	bne.n	404882 <__sflush_r+0x6a>
  404912:	6528      	str	r0, [r5, #80]	; 0x50
  404914:	e7b5      	b.n	404882 <__sflush_r+0x6a>
  404916:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  404918:	2a00      	cmp	r2, #0
  40491a:	dc8c      	bgt.n	404836 <__sflush_r+0x1e>
  40491c:	e7d8      	b.n	4048d0 <__sflush_r+0xb8>
  40491e:	2301      	movs	r3, #1
  404920:	69e9      	ldr	r1, [r5, #28]
  404922:	4640      	mov	r0, r8
  404924:	47a0      	blx	r4
  404926:	1c43      	adds	r3, r0, #1
  404928:	4602      	mov	r2, r0
  40492a:	d002      	beq.n	404932 <__sflush_r+0x11a>
  40492c:	89ab      	ldrh	r3, [r5, #12]
  40492e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  404930:	e78e      	b.n	404850 <__sflush_r+0x38>
  404932:	f8d8 3000 	ldr.w	r3, [r8]
  404936:	2b00      	cmp	r3, #0
  404938:	d0f8      	beq.n	40492c <__sflush_r+0x114>
  40493a:	2b1d      	cmp	r3, #29
  40493c:	d001      	beq.n	404942 <__sflush_r+0x12a>
  40493e:	2b16      	cmp	r3, #22
  404940:	d102      	bne.n	404948 <__sflush_r+0x130>
  404942:	f8c8 6000 	str.w	r6, [r8]
  404946:	e7c3      	b.n	4048d0 <__sflush_r+0xb8>
  404948:	89ab      	ldrh	r3, [r5, #12]
  40494a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40494e:	81ab      	strh	r3, [r5, #12]
  404950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404954:	20400001 	.word	0x20400001

00404958 <_fflush_r>:
  404958:	b538      	push	{r3, r4, r5, lr}
  40495a:	460d      	mov	r5, r1
  40495c:	4604      	mov	r4, r0
  40495e:	b108      	cbz	r0, 404964 <_fflush_r+0xc>
  404960:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404962:	b1bb      	cbz	r3, 404994 <_fflush_r+0x3c>
  404964:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  404968:	b188      	cbz	r0, 40498e <_fflush_r+0x36>
  40496a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40496c:	07db      	lsls	r3, r3, #31
  40496e:	d401      	bmi.n	404974 <_fflush_r+0x1c>
  404970:	0581      	lsls	r1, r0, #22
  404972:	d517      	bpl.n	4049a4 <_fflush_r+0x4c>
  404974:	4620      	mov	r0, r4
  404976:	4629      	mov	r1, r5
  404978:	f7ff ff4e 	bl	404818 <__sflush_r>
  40497c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40497e:	07da      	lsls	r2, r3, #31
  404980:	4604      	mov	r4, r0
  404982:	d402      	bmi.n	40498a <_fflush_r+0x32>
  404984:	89ab      	ldrh	r3, [r5, #12]
  404986:	059b      	lsls	r3, r3, #22
  404988:	d507      	bpl.n	40499a <_fflush_r+0x42>
  40498a:	4620      	mov	r0, r4
  40498c:	bd38      	pop	{r3, r4, r5, pc}
  40498e:	4604      	mov	r4, r0
  404990:	4620      	mov	r0, r4
  404992:	bd38      	pop	{r3, r4, r5, pc}
  404994:	f000 f838 	bl	404a08 <__sinit>
  404998:	e7e4      	b.n	404964 <_fflush_r+0xc>
  40499a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40499c:	f000 fbf6 	bl	40518c <__retarget_lock_release_recursive>
  4049a0:	4620      	mov	r0, r4
  4049a2:	bd38      	pop	{r3, r4, r5, pc}
  4049a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4049a6:	f000 fbef 	bl	405188 <__retarget_lock_acquire_recursive>
  4049aa:	e7e3      	b.n	404974 <_fflush_r+0x1c>

004049ac <_cleanup_r>:
  4049ac:	4901      	ldr	r1, [pc, #4]	; (4049b4 <_cleanup_r+0x8>)
  4049ae:	f000 bbaf 	b.w	405110 <_fwalk_reent>
  4049b2:	bf00      	nop
  4049b4:	00405a21 	.word	0x00405a21

004049b8 <std.isra.0>:
  4049b8:	b510      	push	{r4, lr}
  4049ba:	2300      	movs	r3, #0
  4049bc:	4604      	mov	r4, r0
  4049be:	8181      	strh	r1, [r0, #12]
  4049c0:	81c2      	strh	r2, [r0, #14]
  4049c2:	6003      	str	r3, [r0, #0]
  4049c4:	6043      	str	r3, [r0, #4]
  4049c6:	6083      	str	r3, [r0, #8]
  4049c8:	6643      	str	r3, [r0, #100]	; 0x64
  4049ca:	6103      	str	r3, [r0, #16]
  4049cc:	6143      	str	r3, [r0, #20]
  4049ce:	6183      	str	r3, [r0, #24]
  4049d0:	4619      	mov	r1, r3
  4049d2:	2208      	movs	r2, #8
  4049d4:	305c      	adds	r0, #92	; 0x5c
  4049d6:	f7fe fe35 	bl	403644 <memset>
  4049da:	4807      	ldr	r0, [pc, #28]	; (4049f8 <std.isra.0+0x40>)
  4049dc:	4907      	ldr	r1, [pc, #28]	; (4049fc <std.isra.0+0x44>)
  4049de:	4a08      	ldr	r2, [pc, #32]	; (404a00 <std.isra.0+0x48>)
  4049e0:	4b08      	ldr	r3, [pc, #32]	; (404a04 <std.isra.0+0x4c>)
  4049e2:	6220      	str	r0, [r4, #32]
  4049e4:	61e4      	str	r4, [r4, #28]
  4049e6:	6261      	str	r1, [r4, #36]	; 0x24
  4049e8:	62a2      	str	r2, [r4, #40]	; 0x28
  4049ea:	62e3      	str	r3, [r4, #44]	; 0x2c
  4049ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4049f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4049f4:	f000 bbc4 	b.w	405180 <__retarget_lock_init_recursive>
  4049f8:	00405765 	.word	0x00405765
  4049fc:	00405789 	.word	0x00405789
  404a00:	004057c5 	.word	0x004057c5
  404a04:	004057e5 	.word	0x004057e5

00404a08 <__sinit>:
  404a08:	b510      	push	{r4, lr}
  404a0a:	4604      	mov	r4, r0
  404a0c:	4812      	ldr	r0, [pc, #72]	; (404a58 <__sinit+0x50>)
  404a0e:	f000 fbbb 	bl	405188 <__retarget_lock_acquire_recursive>
  404a12:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  404a14:	b9d2      	cbnz	r2, 404a4c <__sinit+0x44>
  404a16:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  404a1a:	4810      	ldr	r0, [pc, #64]	; (404a5c <__sinit+0x54>)
  404a1c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  404a20:	2103      	movs	r1, #3
  404a22:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  404a26:	63e0      	str	r0, [r4, #60]	; 0x3c
  404a28:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  404a2c:	6860      	ldr	r0, [r4, #4]
  404a2e:	2104      	movs	r1, #4
  404a30:	f7ff ffc2 	bl	4049b8 <std.isra.0>
  404a34:	2201      	movs	r2, #1
  404a36:	2109      	movs	r1, #9
  404a38:	68a0      	ldr	r0, [r4, #8]
  404a3a:	f7ff ffbd 	bl	4049b8 <std.isra.0>
  404a3e:	2202      	movs	r2, #2
  404a40:	2112      	movs	r1, #18
  404a42:	68e0      	ldr	r0, [r4, #12]
  404a44:	f7ff ffb8 	bl	4049b8 <std.isra.0>
  404a48:	2301      	movs	r3, #1
  404a4a:	63a3      	str	r3, [r4, #56]	; 0x38
  404a4c:	4802      	ldr	r0, [pc, #8]	; (404a58 <__sinit+0x50>)
  404a4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  404a52:	f000 bb9b 	b.w	40518c <__retarget_lock_release_recursive>
  404a56:	bf00      	nop
  404a58:	20400c24 	.word	0x20400c24
  404a5c:	004049ad 	.word	0x004049ad

00404a60 <__sfp_lock_acquire>:
  404a60:	4801      	ldr	r0, [pc, #4]	; (404a68 <__sfp_lock_acquire+0x8>)
  404a62:	f000 bb91 	b.w	405188 <__retarget_lock_acquire_recursive>
  404a66:	bf00      	nop
  404a68:	20400c38 	.word	0x20400c38

00404a6c <__sfp_lock_release>:
  404a6c:	4801      	ldr	r0, [pc, #4]	; (404a74 <__sfp_lock_release+0x8>)
  404a6e:	f000 bb8d 	b.w	40518c <__retarget_lock_release_recursive>
  404a72:	bf00      	nop
  404a74:	20400c38 	.word	0x20400c38

00404a78 <__libc_fini_array>:
  404a78:	b538      	push	{r3, r4, r5, lr}
  404a7a:	4c0a      	ldr	r4, [pc, #40]	; (404aa4 <__libc_fini_array+0x2c>)
  404a7c:	4d0a      	ldr	r5, [pc, #40]	; (404aa8 <__libc_fini_array+0x30>)
  404a7e:	1b64      	subs	r4, r4, r5
  404a80:	10a4      	asrs	r4, r4, #2
  404a82:	d00a      	beq.n	404a9a <__libc_fini_array+0x22>
  404a84:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  404a88:	3b01      	subs	r3, #1
  404a8a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  404a8e:	3c01      	subs	r4, #1
  404a90:	f855 3904 	ldr.w	r3, [r5], #-4
  404a94:	4798      	blx	r3
  404a96:	2c00      	cmp	r4, #0
  404a98:	d1f9      	bne.n	404a8e <__libc_fini_array+0x16>
  404a9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404a9e:	f001 bb43 	b.w	406128 <_fini>
  404aa2:	bf00      	nop
  404aa4:	00406138 	.word	0x00406138
  404aa8:	00406134 	.word	0x00406134

00404aac <__fputwc>:
  404aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404ab0:	b082      	sub	sp, #8
  404ab2:	4680      	mov	r8, r0
  404ab4:	4689      	mov	r9, r1
  404ab6:	4614      	mov	r4, r2
  404ab8:	f000 fb54 	bl	405164 <__locale_mb_cur_max>
  404abc:	2801      	cmp	r0, #1
  404abe:	d036      	beq.n	404b2e <__fputwc+0x82>
  404ac0:	464a      	mov	r2, r9
  404ac2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  404ac6:	a901      	add	r1, sp, #4
  404ac8:	4640      	mov	r0, r8
  404aca:	f000 fee7 	bl	40589c <_wcrtomb_r>
  404ace:	1c42      	adds	r2, r0, #1
  404ad0:	4606      	mov	r6, r0
  404ad2:	d025      	beq.n	404b20 <__fputwc+0x74>
  404ad4:	b3a8      	cbz	r0, 404b42 <__fputwc+0x96>
  404ad6:	f89d e004 	ldrb.w	lr, [sp, #4]
  404ada:	2500      	movs	r5, #0
  404adc:	f10d 0a04 	add.w	sl, sp, #4
  404ae0:	e009      	b.n	404af6 <__fputwc+0x4a>
  404ae2:	6823      	ldr	r3, [r4, #0]
  404ae4:	1c5a      	adds	r2, r3, #1
  404ae6:	6022      	str	r2, [r4, #0]
  404ae8:	f883 e000 	strb.w	lr, [r3]
  404aec:	3501      	adds	r5, #1
  404aee:	42b5      	cmp	r5, r6
  404af0:	d227      	bcs.n	404b42 <__fputwc+0x96>
  404af2:	f815 e00a 	ldrb.w	lr, [r5, sl]
  404af6:	68a3      	ldr	r3, [r4, #8]
  404af8:	3b01      	subs	r3, #1
  404afa:	2b00      	cmp	r3, #0
  404afc:	60a3      	str	r3, [r4, #8]
  404afe:	daf0      	bge.n	404ae2 <__fputwc+0x36>
  404b00:	69a7      	ldr	r7, [r4, #24]
  404b02:	42bb      	cmp	r3, r7
  404b04:	4671      	mov	r1, lr
  404b06:	4622      	mov	r2, r4
  404b08:	4640      	mov	r0, r8
  404b0a:	db02      	blt.n	404b12 <__fputwc+0x66>
  404b0c:	f1be 0f0a 	cmp.w	lr, #10
  404b10:	d1e7      	bne.n	404ae2 <__fputwc+0x36>
  404b12:	f000 fe6b 	bl	4057ec <__swbuf_r>
  404b16:	1c43      	adds	r3, r0, #1
  404b18:	d1e8      	bne.n	404aec <__fputwc+0x40>
  404b1a:	b002      	add	sp, #8
  404b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404b20:	89a3      	ldrh	r3, [r4, #12]
  404b22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404b26:	81a3      	strh	r3, [r4, #12]
  404b28:	b002      	add	sp, #8
  404b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404b2e:	f109 33ff 	add.w	r3, r9, #4294967295
  404b32:	2bfe      	cmp	r3, #254	; 0xfe
  404b34:	d8c4      	bhi.n	404ac0 <__fputwc+0x14>
  404b36:	fa5f fe89 	uxtb.w	lr, r9
  404b3a:	4606      	mov	r6, r0
  404b3c:	f88d e004 	strb.w	lr, [sp, #4]
  404b40:	e7cb      	b.n	404ada <__fputwc+0x2e>
  404b42:	4648      	mov	r0, r9
  404b44:	b002      	add	sp, #8
  404b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404b4a:	bf00      	nop

00404b4c <_fputwc_r>:
  404b4c:	b530      	push	{r4, r5, lr}
  404b4e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  404b50:	f013 0f01 	tst.w	r3, #1
  404b54:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  404b58:	4614      	mov	r4, r2
  404b5a:	b083      	sub	sp, #12
  404b5c:	4605      	mov	r5, r0
  404b5e:	b29a      	uxth	r2, r3
  404b60:	d101      	bne.n	404b66 <_fputwc_r+0x1a>
  404b62:	0590      	lsls	r0, r2, #22
  404b64:	d51c      	bpl.n	404ba0 <_fputwc_r+0x54>
  404b66:	0490      	lsls	r0, r2, #18
  404b68:	d406      	bmi.n	404b78 <_fputwc_r+0x2c>
  404b6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  404b6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  404b70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  404b74:	81a3      	strh	r3, [r4, #12]
  404b76:	6662      	str	r2, [r4, #100]	; 0x64
  404b78:	4628      	mov	r0, r5
  404b7a:	4622      	mov	r2, r4
  404b7c:	f7ff ff96 	bl	404aac <__fputwc>
  404b80:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404b82:	07da      	lsls	r2, r3, #31
  404b84:	4605      	mov	r5, r0
  404b86:	d402      	bmi.n	404b8e <_fputwc_r+0x42>
  404b88:	89a3      	ldrh	r3, [r4, #12]
  404b8a:	059b      	lsls	r3, r3, #22
  404b8c:	d502      	bpl.n	404b94 <_fputwc_r+0x48>
  404b8e:	4628      	mov	r0, r5
  404b90:	b003      	add	sp, #12
  404b92:	bd30      	pop	{r4, r5, pc}
  404b94:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404b96:	f000 faf9 	bl	40518c <__retarget_lock_release_recursive>
  404b9a:	4628      	mov	r0, r5
  404b9c:	b003      	add	sp, #12
  404b9e:	bd30      	pop	{r4, r5, pc}
  404ba0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404ba2:	9101      	str	r1, [sp, #4]
  404ba4:	f000 faf0 	bl	405188 <__retarget_lock_acquire_recursive>
  404ba8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404bac:	9901      	ldr	r1, [sp, #4]
  404bae:	b29a      	uxth	r2, r3
  404bb0:	e7d9      	b.n	404b66 <_fputwc_r+0x1a>
  404bb2:	bf00      	nop

00404bb4 <_malloc_trim_r>:
  404bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404bb6:	4f24      	ldr	r7, [pc, #144]	; (404c48 <_malloc_trim_r+0x94>)
  404bb8:	460c      	mov	r4, r1
  404bba:	4606      	mov	r6, r0
  404bbc:	f7fe fd90 	bl	4036e0 <__malloc_lock>
  404bc0:	68bb      	ldr	r3, [r7, #8]
  404bc2:	685d      	ldr	r5, [r3, #4]
  404bc4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  404bc8:	310f      	adds	r1, #15
  404bca:	f025 0503 	bic.w	r5, r5, #3
  404bce:	4429      	add	r1, r5
  404bd0:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  404bd4:	f021 010f 	bic.w	r1, r1, #15
  404bd8:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  404bdc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  404be0:	db07      	blt.n	404bf2 <_malloc_trim_r+0x3e>
  404be2:	2100      	movs	r1, #0
  404be4:	4630      	mov	r0, r6
  404be6:	f7fe fd87 	bl	4036f8 <_sbrk_r>
  404bea:	68bb      	ldr	r3, [r7, #8]
  404bec:	442b      	add	r3, r5
  404bee:	4298      	cmp	r0, r3
  404bf0:	d004      	beq.n	404bfc <_malloc_trim_r+0x48>
  404bf2:	4630      	mov	r0, r6
  404bf4:	f7fe fd7a 	bl	4036ec <__malloc_unlock>
  404bf8:	2000      	movs	r0, #0
  404bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404bfc:	4261      	negs	r1, r4
  404bfe:	4630      	mov	r0, r6
  404c00:	f7fe fd7a 	bl	4036f8 <_sbrk_r>
  404c04:	3001      	adds	r0, #1
  404c06:	d00d      	beq.n	404c24 <_malloc_trim_r+0x70>
  404c08:	4b10      	ldr	r3, [pc, #64]	; (404c4c <_malloc_trim_r+0x98>)
  404c0a:	68ba      	ldr	r2, [r7, #8]
  404c0c:	6819      	ldr	r1, [r3, #0]
  404c0e:	1b2d      	subs	r5, r5, r4
  404c10:	f045 0501 	orr.w	r5, r5, #1
  404c14:	4630      	mov	r0, r6
  404c16:	1b09      	subs	r1, r1, r4
  404c18:	6055      	str	r5, [r2, #4]
  404c1a:	6019      	str	r1, [r3, #0]
  404c1c:	f7fe fd66 	bl	4036ec <__malloc_unlock>
  404c20:	2001      	movs	r0, #1
  404c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404c24:	2100      	movs	r1, #0
  404c26:	4630      	mov	r0, r6
  404c28:	f7fe fd66 	bl	4036f8 <_sbrk_r>
  404c2c:	68ba      	ldr	r2, [r7, #8]
  404c2e:	1a83      	subs	r3, r0, r2
  404c30:	2b0f      	cmp	r3, #15
  404c32:	ddde      	ble.n	404bf2 <_malloc_trim_r+0x3e>
  404c34:	4c06      	ldr	r4, [pc, #24]	; (404c50 <_malloc_trim_r+0x9c>)
  404c36:	4905      	ldr	r1, [pc, #20]	; (404c4c <_malloc_trim_r+0x98>)
  404c38:	6824      	ldr	r4, [r4, #0]
  404c3a:	f043 0301 	orr.w	r3, r3, #1
  404c3e:	1b00      	subs	r0, r0, r4
  404c40:	6053      	str	r3, [r2, #4]
  404c42:	6008      	str	r0, [r1, #0]
  404c44:	e7d5      	b.n	404bf2 <_malloc_trim_r+0x3e>
  404c46:	bf00      	nop
  404c48:	20400438 	.word	0x20400438
  404c4c:	20400b90 	.word	0x20400b90
  404c50:	20400840 	.word	0x20400840

00404c54 <_free_r>:
  404c54:	2900      	cmp	r1, #0
  404c56:	d044      	beq.n	404ce2 <_free_r+0x8e>
  404c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404c5c:	460d      	mov	r5, r1
  404c5e:	4680      	mov	r8, r0
  404c60:	f7fe fd3e 	bl	4036e0 <__malloc_lock>
  404c64:	f855 7c04 	ldr.w	r7, [r5, #-4]
  404c68:	4969      	ldr	r1, [pc, #420]	; (404e10 <_free_r+0x1bc>)
  404c6a:	f027 0301 	bic.w	r3, r7, #1
  404c6e:	f1a5 0408 	sub.w	r4, r5, #8
  404c72:	18e2      	adds	r2, r4, r3
  404c74:	688e      	ldr	r6, [r1, #8]
  404c76:	6850      	ldr	r0, [r2, #4]
  404c78:	42b2      	cmp	r2, r6
  404c7a:	f020 0003 	bic.w	r0, r0, #3
  404c7e:	d05e      	beq.n	404d3e <_free_r+0xea>
  404c80:	07fe      	lsls	r6, r7, #31
  404c82:	6050      	str	r0, [r2, #4]
  404c84:	d40b      	bmi.n	404c9e <_free_r+0x4a>
  404c86:	f855 7c08 	ldr.w	r7, [r5, #-8]
  404c8a:	1be4      	subs	r4, r4, r7
  404c8c:	f101 0e08 	add.w	lr, r1, #8
  404c90:	68a5      	ldr	r5, [r4, #8]
  404c92:	4575      	cmp	r5, lr
  404c94:	443b      	add	r3, r7
  404c96:	d06d      	beq.n	404d74 <_free_r+0x120>
  404c98:	68e7      	ldr	r7, [r4, #12]
  404c9a:	60ef      	str	r7, [r5, #12]
  404c9c:	60bd      	str	r5, [r7, #8]
  404c9e:	1815      	adds	r5, r2, r0
  404ca0:	686d      	ldr	r5, [r5, #4]
  404ca2:	07ed      	lsls	r5, r5, #31
  404ca4:	d53e      	bpl.n	404d24 <_free_r+0xd0>
  404ca6:	f043 0201 	orr.w	r2, r3, #1
  404caa:	6062      	str	r2, [r4, #4]
  404cac:	50e3      	str	r3, [r4, r3]
  404cae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404cb2:	d217      	bcs.n	404ce4 <_free_r+0x90>
  404cb4:	08db      	lsrs	r3, r3, #3
  404cb6:	1c58      	adds	r0, r3, #1
  404cb8:	109a      	asrs	r2, r3, #2
  404cba:	684d      	ldr	r5, [r1, #4]
  404cbc:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  404cc0:	60a7      	str	r7, [r4, #8]
  404cc2:	2301      	movs	r3, #1
  404cc4:	4093      	lsls	r3, r2
  404cc6:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  404cca:	432b      	orrs	r3, r5
  404ccc:	3a08      	subs	r2, #8
  404cce:	60e2      	str	r2, [r4, #12]
  404cd0:	604b      	str	r3, [r1, #4]
  404cd2:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  404cd6:	60fc      	str	r4, [r7, #12]
  404cd8:	4640      	mov	r0, r8
  404cda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404cde:	f7fe bd05 	b.w	4036ec <__malloc_unlock>
  404ce2:	4770      	bx	lr
  404ce4:	0a5a      	lsrs	r2, r3, #9
  404ce6:	2a04      	cmp	r2, #4
  404ce8:	d852      	bhi.n	404d90 <_free_r+0x13c>
  404cea:	099a      	lsrs	r2, r3, #6
  404cec:	f102 0739 	add.w	r7, r2, #57	; 0x39
  404cf0:	00ff      	lsls	r7, r7, #3
  404cf2:	f102 0538 	add.w	r5, r2, #56	; 0x38
  404cf6:	19c8      	adds	r0, r1, r7
  404cf8:	59ca      	ldr	r2, [r1, r7]
  404cfa:	3808      	subs	r0, #8
  404cfc:	4290      	cmp	r0, r2
  404cfe:	d04f      	beq.n	404da0 <_free_r+0x14c>
  404d00:	6851      	ldr	r1, [r2, #4]
  404d02:	f021 0103 	bic.w	r1, r1, #3
  404d06:	428b      	cmp	r3, r1
  404d08:	d232      	bcs.n	404d70 <_free_r+0x11c>
  404d0a:	6892      	ldr	r2, [r2, #8]
  404d0c:	4290      	cmp	r0, r2
  404d0e:	d1f7      	bne.n	404d00 <_free_r+0xac>
  404d10:	68c3      	ldr	r3, [r0, #12]
  404d12:	60a0      	str	r0, [r4, #8]
  404d14:	60e3      	str	r3, [r4, #12]
  404d16:	609c      	str	r4, [r3, #8]
  404d18:	60c4      	str	r4, [r0, #12]
  404d1a:	4640      	mov	r0, r8
  404d1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404d20:	f7fe bce4 	b.w	4036ec <__malloc_unlock>
  404d24:	6895      	ldr	r5, [r2, #8]
  404d26:	4f3b      	ldr	r7, [pc, #236]	; (404e14 <_free_r+0x1c0>)
  404d28:	42bd      	cmp	r5, r7
  404d2a:	4403      	add	r3, r0
  404d2c:	d040      	beq.n	404db0 <_free_r+0x15c>
  404d2e:	68d0      	ldr	r0, [r2, #12]
  404d30:	60e8      	str	r0, [r5, #12]
  404d32:	f043 0201 	orr.w	r2, r3, #1
  404d36:	6085      	str	r5, [r0, #8]
  404d38:	6062      	str	r2, [r4, #4]
  404d3a:	50e3      	str	r3, [r4, r3]
  404d3c:	e7b7      	b.n	404cae <_free_r+0x5a>
  404d3e:	07ff      	lsls	r7, r7, #31
  404d40:	4403      	add	r3, r0
  404d42:	d407      	bmi.n	404d54 <_free_r+0x100>
  404d44:	f855 2c08 	ldr.w	r2, [r5, #-8]
  404d48:	1aa4      	subs	r4, r4, r2
  404d4a:	4413      	add	r3, r2
  404d4c:	68a0      	ldr	r0, [r4, #8]
  404d4e:	68e2      	ldr	r2, [r4, #12]
  404d50:	60c2      	str	r2, [r0, #12]
  404d52:	6090      	str	r0, [r2, #8]
  404d54:	4a30      	ldr	r2, [pc, #192]	; (404e18 <_free_r+0x1c4>)
  404d56:	6812      	ldr	r2, [r2, #0]
  404d58:	f043 0001 	orr.w	r0, r3, #1
  404d5c:	4293      	cmp	r3, r2
  404d5e:	6060      	str	r0, [r4, #4]
  404d60:	608c      	str	r4, [r1, #8]
  404d62:	d3b9      	bcc.n	404cd8 <_free_r+0x84>
  404d64:	4b2d      	ldr	r3, [pc, #180]	; (404e1c <_free_r+0x1c8>)
  404d66:	4640      	mov	r0, r8
  404d68:	6819      	ldr	r1, [r3, #0]
  404d6a:	f7ff ff23 	bl	404bb4 <_malloc_trim_r>
  404d6e:	e7b3      	b.n	404cd8 <_free_r+0x84>
  404d70:	4610      	mov	r0, r2
  404d72:	e7cd      	b.n	404d10 <_free_r+0xbc>
  404d74:	1811      	adds	r1, r2, r0
  404d76:	6849      	ldr	r1, [r1, #4]
  404d78:	07c9      	lsls	r1, r1, #31
  404d7a:	d444      	bmi.n	404e06 <_free_r+0x1b2>
  404d7c:	6891      	ldr	r1, [r2, #8]
  404d7e:	68d2      	ldr	r2, [r2, #12]
  404d80:	60ca      	str	r2, [r1, #12]
  404d82:	4403      	add	r3, r0
  404d84:	f043 0001 	orr.w	r0, r3, #1
  404d88:	6091      	str	r1, [r2, #8]
  404d8a:	6060      	str	r0, [r4, #4]
  404d8c:	50e3      	str	r3, [r4, r3]
  404d8e:	e7a3      	b.n	404cd8 <_free_r+0x84>
  404d90:	2a14      	cmp	r2, #20
  404d92:	d816      	bhi.n	404dc2 <_free_r+0x16e>
  404d94:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  404d98:	00ff      	lsls	r7, r7, #3
  404d9a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  404d9e:	e7aa      	b.n	404cf6 <_free_r+0xa2>
  404da0:	10aa      	asrs	r2, r5, #2
  404da2:	2301      	movs	r3, #1
  404da4:	684d      	ldr	r5, [r1, #4]
  404da6:	4093      	lsls	r3, r2
  404da8:	432b      	orrs	r3, r5
  404daa:	604b      	str	r3, [r1, #4]
  404dac:	4603      	mov	r3, r0
  404dae:	e7b0      	b.n	404d12 <_free_r+0xbe>
  404db0:	f043 0201 	orr.w	r2, r3, #1
  404db4:	614c      	str	r4, [r1, #20]
  404db6:	610c      	str	r4, [r1, #16]
  404db8:	60e5      	str	r5, [r4, #12]
  404dba:	60a5      	str	r5, [r4, #8]
  404dbc:	6062      	str	r2, [r4, #4]
  404dbe:	50e3      	str	r3, [r4, r3]
  404dc0:	e78a      	b.n	404cd8 <_free_r+0x84>
  404dc2:	2a54      	cmp	r2, #84	; 0x54
  404dc4:	d806      	bhi.n	404dd4 <_free_r+0x180>
  404dc6:	0b1a      	lsrs	r2, r3, #12
  404dc8:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  404dcc:	00ff      	lsls	r7, r7, #3
  404dce:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  404dd2:	e790      	b.n	404cf6 <_free_r+0xa2>
  404dd4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404dd8:	d806      	bhi.n	404de8 <_free_r+0x194>
  404dda:	0bda      	lsrs	r2, r3, #15
  404ddc:	f102 0778 	add.w	r7, r2, #120	; 0x78
  404de0:	00ff      	lsls	r7, r7, #3
  404de2:	f102 0577 	add.w	r5, r2, #119	; 0x77
  404de6:	e786      	b.n	404cf6 <_free_r+0xa2>
  404de8:	f240 5054 	movw	r0, #1364	; 0x554
  404dec:	4282      	cmp	r2, r0
  404dee:	d806      	bhi.n	404dfe <_free_r+0x1aa>
  404df0:	0c9a      	lsrs	r2, r3, #18
  404df2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  404df6:	00ff      	lsls	r7, r7, #3
  404df8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  404dfc:	e77b      	b.n	404cf6 <_free_r+0xa2>
  404dfe:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  404e02:	257e      	movs	r5, #126	; 0x7e
  404e04:	e777      	b.n	404cf6 <_free_r+0xa2>
  404e06:	f043 0101 	orr.w	r1, r3, #1
  404e0a:	6061      	str	r1, [r4, #4]
  404e0c:	6013      	str	r3, [r2, #0]
  404e0e:	e763      	b.n	404cd8 <_free_r+0x84>
  404e10:	20400438 	.word	0x20400438
  404e14:	20400440 	.word	0x20400440
  404e18:	20400844 	.word	0x20400844
  404e1c:	20400bc0 	.word	0x20400bc0

00404e20 <__sfvwrite_r>:
  404e20:	6893      	ldr	r3, [r2, #8]
  404e22:	2b00      	cmp	r3, #0
  404e24:	d073      	beq.n	404f0e <__sfvwrite_r+0xee>
  404e26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404e2a:	898b      	ldrh	r3, [r1, #12]
  404e2c:	b083      	sub	sp, #12
  404e2e:	460c      	mov	r4, r1
  404e30:	0719      	lsls	r1, r3, #28
  404e32:	9000      	str	r0, [sp, #0]
  404e34:	4616      	mov	r6, r2
  404e36:	d526      	bpl.n	404e86 <__sfvwrite_r+0x66>
  404e38:	6922      	ldr	r2, [r4, #16]
  404e3a:	b322      	cbz	r2, 404e86 <__sfvwrite_r+0x66>
  404e3c:	f013 0002 	ands.w	r0, r3, #2
  404e40:	6835      	ldr	r5, [r6, #0]
  404e42:	d02c      	beq.n	404e9e <__sfvwrite_r+0x7e>
  404e44:	f04f 0900 	mov.w	r9, #0
  404e48:	4fb0      	ldr	r7, [pc, #704]	; (40510c <__sfvwrite_r+0x2ec>)
  404e4a:	46c8      	mov	r8, r9
  404e4c:	46b2      	mov	sl, r6
  404e4e:	45b8      	cmp	r8, r7
  404e50:	4643      	mov	r3, r8
  404e52:	464a      	mov	r2, r9
  404e54:	bf28      	it	cs
  404e56:	463b      	movcs	r3, r7
  404e58:	9800      	ldr	r0, [sp, #0]
  404e5a:	f1b8 0f00 	cmp.w	r8, #0
  404e5e:	d050      	beq.n	404f02 <__sfvwrite_r+0xe2>
  404e60:	69e1      	ldr	r1, [r4, #28]
  404e62:	6a66      	ldr	r6, [r4, #36]	; 0x24
  404e64:	47b0      	blx	r6
  404e66:	2800      	cmp	r0, #0
  404e68:	dd58      	ble.n	404f1c <__sfvwrite_r+0xfc>
  404e6a:	f8da 3008 	ldr.w	r3, [sl, #8]
  404e6e:	1a1b      	subs	r3, r3, r0
  404e70:	4481      	add	r9, r0
  404e72:	eba8 0800 	sub.w	r8, r8, r0
  404e76:	f8ca 3008 	str.w	r3, [sl, #8]
  404e7a:	2b00      	cmp	r3, #0
  404e7c:	d1e7      	bne.n	404e4e <__sfvwrite_r+0x2e>
  404e7e:	2000      	movs	r0, #0
  404e80:	b003      	add	sp, #12
  404e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404e86:	4621      	mov	r1, r4
  404e88:	9800      	ldr	r0, [sp, #0]
  404e8a:	f7ff fc51 	bl	404730 <__swsetup_r>
  404e8e:	2800      	cmp	r0, #0
  404e90:	f040 8133 	bne.w	4050fa <__sfvwrite_r+0x2da>
  404e94:	89a3      	ldrh	r3, [r4, #12]
  404e96:	6835      	ldr	r5, [r6, #0]
  404e98:	f013 0002 	ands.w	r0, r3, #2
  404e9c:	d1d2      	bne.n	404e44 <__sfvwrite_r+0x24>
  404e9e:	f013 0901 	ands.w	r9, r3, #1
  404ea2:	d145      	bne.n	404f30 <__sfvwrite_r+0x110>
  404ea4:	464f      	mov	r7, r9
  404ea6:	9601      	str	r6, [sp, #4]
  404ea8:	b337      	cbz	r7, 404ef8 <__sfvwrite_r+0xd8>
  404eaa:	059a      	lsls	r2, r3, #22
  404eac:	f8d4 8008 	ldr.w	r8, [r4, #8]
  404eb0:	f140 8083 	bpl.w	404fba <__sfvwrite_r+0x19a>
  404eb4:	4547      	cmp	r7, r8
  404eb6:	46c3      	mov	fp, r8
  404eb8:	f0c0 80ab 	bcc.w	405012 <__sfvwrite_r+0x1f2>
  404ebc:	f413 6f90 	tst.w	r3, #1152	; 0x480
  404ec0:	f040 80ac 	bne.w	40501c <__sfvwrite_r+0x1fc>
  404ec4:	6820      	ldr	r0, [r4, #0]
  404ec6:	46ba      	mov	sl, r7
  404ec8:	465a      	mov	r2, fp
  404eca:	4649      	mov	r1, r9
  404ecc:	f000 fa40 	bl	405350 <memmove>
  404ed0:	68a2      	ldr	r2, [r4, #8]
  404ed2:	6823      	ldr	r3, [r4, #0]
  404ed4:	eba2 0208 	sub.w	r2, r2, r8
  404ed8:	445b      	add	r3, fp
  404eda:	60a2      	str	r2, [r4, #8]
  404edc:	6023      	str	r3, [r4, #0]
  404ede:	9a01      	ldr	r2, [sp, #4]
  404ee0:	6893      	ldr	r3, [r2, #8]
  404ee2:	eba3 030a 	sub.w	r3, r3, sl
  404ee6:	44d1      	add	r9, sl
  404ee8:	eba7 070a 	sub.w	r7, r7, sl
  404eec:	6093      	str	r3, [r2, #8]
  404eee:	2b00      	cmp	r3, #0
  404ef0:	d0c5      	beq.n	404e7e <__sfvwrite_r+0x5e>
  404ef2:	89a3      	ldrh	r3, [r4, #12]
  404ef4:	2f00      	cmp	r7, #0
  404ef6:	d1d8      	bne.n	404eaa <__sfvwrite_r+0x8a>
  404ef8:	f8d5 9000 	ldr.w	r9, [r5]
  404efc:	686f      	ldr	r7, [r5, #4]
  404efe:	3508      	adds	r5, #8
  404f00:	e7d2      	b.n	404ea8 <__sfvwrite_r+0x88>
  404f02:	f8d5 9000 	ldr.w	r9, [r5]
  404f06:	f8d5 8004 	ldr.w	r8, [r5, #4]
  404f0a:	3508      	adds	r5, #8
  404f0c:	e79f      	b.n	404e4e <__sfvwrite_r+0x2e>
  404f0e:	2000      	movs	r0, #0
  404f10:	4770      	bx	lr
  404f12:	4621      	mov	r1, r4
  404f14:	9800      	ldr	r0, [sp, #0]
  404f16:	f7ff fd1f 	bl	404958 <_fflush_r>
  404f1a:	b370      	cbz	r0, 404f7a <__sfvwrite_r+0x15a>
  404f1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404f20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404f24:	f04f 30ff 	mov.w	r0, #4294967295
  404f28:	81a3      	strh	r3, [r4, #12]
  404f2a:	b003      	add	sp, #12
  404f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404f30:	4681      	mov	r9, r0
  404f32:	4633      	mov	r3, r6
  404f34:	464e      	mov	r6, r9
  404f36:	46a8      	mov	r8, r5
  404f38:	469a      	mov	sl, r3
  404f3a:	464d      	mov	r5, r9
  404f3c:	b34e      	cbz	r6, 404f92 <__sfvwrite_r+0x172>
  404f3e:	b380      	cbz	r0, 404fa2 <__sfvwrite_r+0x182>
  404f40:	6820      	ldr	r0, [r4, #0]
  404f42:	6923      	ldr	r3, [r4, #16]
  404f44:	6962      	ldr	r2, [r4, #20]
  404f46:	45b1      	cmp	r9, r6
  404f48:	46cb      	mov	fp, r9
  404f4a:	bf28      	it	cs
  404f4c:	46b3      	movcs	fp, r6
  404f4e:	4298      	cmp	r0, r3
  404f50:	465f      	mov	r7, fp
  404f52:	d904      	bls.n	404f5e <__sfvwrite_r+0x13e>
  404f54:	68a3      	ldr	r3, [r4, #8]
  404f56:	4413      	add	r3, r2
  404f58:	459b      	cmp	fp, r3
  404f5a:	f300 80a6 	bgt.w	4050aa <__sfvwrite_r+0x28a>
  404f5e:	4593      	cmp	fp, r2
  404f60:	db4b      	blt.n	404ffa <__sfvwrite_r+0x1da>
  404f62:	4613      	mov	r3, r2
  404f64:	6a67      	ldr	r7, [r4, #36]	; 0x24
  404f66:	69e1      	ldr	r1, [r4, #28]
  404f68:	9800      	ldr	r0, [sp, #0]
  404f6a:	462a      	mov	r2, r5
  404f6c:	47b8      	blx	r7
  404f6e:	1e07      	subs	r7, r0, #0
  404f70:	ddd4      	ble.n	404f1c <__sfvwrite_r+0xfc>
  404f72:	ebb9 0907 	subs.w	r9, r9, r7
  404f76:	d0cc      	beq.n	404f12 <__sfvwrite_r+0xf2>
  404f78:	2001      	movs	r0, #1
  404f7a:	f8da 3008 	ldr.w	r3, [sl, #8]
  404f7e:	1bdb      	subs	r3, r3, r7
  404f80:	443d      	add	r5, r7
  404f82:	1bf6      	subs	r6, r6, r7
  404f84:	f8ca 3008 	str.w	r3, [sl, #8]
  404f88:	2b00      	cmp	r3, #0
  404f8a:	f43f af78 	beq.w	404e7e <__sfvwrite_r+0x5e>
  404f8e:	2e00      	cmp	r6, #0
  404f90:	d1d5      	bne.n	404f3e <__sfvwrite_r+0x11e>
  404f92:	f108 0308 	add.w	r3, r8, #8
  404f96:	e913 0060 	ldmdb	r3, {r5, r6}
  404f9a:	4698      	mov	r8, r3
  404f9c:	3308      	adds	r3, #8
  404f9e:	2e00      	cmp	r6, #0
  404fa0:	d0f9      	beq.n	404f96 <__sfvwrite_r+0x176>
  404fa2:	4632      	mov	r2, r6
  404fa4:	210a      	movs	r1, #10
  404fa6:	4628      	mov	r0, r5
  404fa8:	f000 f982 	bl	4052b0 <memchr>
  404fac:	2800      	cmp	r0, #0
  404fae:	f000 80a1 	beq.w	4050f4 <__sfvwrite_r+0x2d4>
  404fb2:	3001      	adds	r0, #1
  404fb4:	eba0 0905 	sub.w	r9, r0, r5
  404fb8:	e7c2      	b.n	404f40 <__sfvwrite_r+0x120>
  404fba:	6820      	ldr	r0, [r4, #0]
  404fbc:	6923      	ldr	r3, [r4, #16]
  404fbe:	4298      	cmp	r0, r3
  404fc0:	d802      	bhi.n	404fc8 <__sfvwrite_r+0x1a8>
  404fc2:	6963      	ldr	r3, [r4, #20]
  404fc4:	429f      	cmp	r7, r3
  404fc6:	d25d      	bcs.n	405084 <__sfvwrite_r+0x264>
  404fc8:	45b8      	cmp	r8, r7
  404fca:	bf28      	it	cs
  404fcc:	46b8      	movcs	r8, r7
  404fce:	4642      	mov	r2, r8
  404fd0:	4649      	mov	r1, r9
  404fd2:	f000 f9bd 	bl	405350 <memmove>
  404fd6:	68a3      	ldr	r3, [r4, #8]
  404fd8:	6822      	ldr	r2, [r4, #0]
  404fda:	eba3 0308 	sub.w	r3, r3, r8
  404fde:	4442      	add	r2, r8
  404fe0:	60a3      	str	r3, [r4, #8]
  404fe2:	6022      	str	r2, [r4, #0]
  404fe4:	b10b      	cbz	r3, 404fea <__sfvwrite_r+0x1ca>
  404fe6:	46c2      	mov	sl, r8
  404fe8:	e779      	b.n	404ede <__sfvwrite_r+0xbe>
  404fea:	4621      	mov	r1, r4
  404fec:	9800      	ldr	r0, [sp, #0]
  404fee:	f7ff fcb3 	bl	404958 <_fflush_r>
  404ff2:	2800      	cmp	r0, #0
  404ff4:	d192      	bne.n	404f1c <__sfvwrite_r+0xfc>
  404ff6:	46c2      	mov	sl, r8
  404ff8:	e771      	b.n	404ede <__sfvwrite_r+0xbe>
  404ffa:	465a      	mov	r2, fp
  404ffc:	4629      	mov	r1, r5
  404ffe:	f000 f9a7 	bl	405350 <memmove>
  405002:	68a2      	ldr	r2, [r4, #8]
  405004:	6823      	ldr	r3, [r4, #0]
  405006:	eba2 020b 	sub.w	r2, r2, fp
  40500a:	445b      	add	r3, fp
  40500c:	60a2      	str	r2, [r4, #8]
  40500e:	6023      	str	r3, [r4, #0]
  405010:	e7af      	b.n	404f72 <__sfvwrite_r+0x152>
  405012:	6820      	ldr	r0, [r4, #0]
  405014:	46b8      	mov	r8, r7
  405016:	46ba      	mov	sl, r7
  405018:	46bb      	mov	fp, r7
  40501a:	e755      	b.n	404ec8 <__sfvwrite_r+0xa8>
  40501c:	6962      	ldr	r2, [r4, #20]
  40501e:	6820      	ldr	r0, [r4, #0]
  405020:	6921      	ldr	r1, [r4, #16]
  405022:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  405026:	eba0 0a01 	sub.w	sl, r0, r1
  40502a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40502e:	f10a 0001 	add.w	r0, sl, #1
  405032:	ea4f 0868 	mov.w	r8, r8, asr #1
  405036:	4438      	add	r0, r7
  405038:	4540      	cmp	r0, r8
  40503a:	4642      	mov	r2, r8
  40503c:	bf84      	itt	hi
  40503e:	4680      	movhi	r8, r0
  405040:	4642      	movhi	r2, r8
  405042:	055b      	lsls	r3, r3, #21
  405044:	d544      	bpl.n	4050d0 <__sfvwrite_r+0x2b0>
  405046:	4611      	mov	r1, r2
  405048:	9800      	ldr	r0, [sp, #0]
  40504a:	f7fd ffb1 	bl	402fb0 <_malloc_r>
  40504e:	4683      	mov	fp, r0
  405050:	2800      	cmp	r0, #0
  405052:	d055      	beq.n	405100 <__sfvwrite_r+0x2e0>
  405054:	4652      	mov	r2, sl
  405056:	6921      	ldr	r1, [r4, #16]
  405058:	f7fe fa5a 	bl	403510 <memcpy>
  40505c:	89a3      	ldrh	r3, [r4, #12]
  40505e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  405062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405066:	81a3      	strh	r3, [r4, #12]
  405068:	eb0b 000a 	add.w	r0, fp, sl
  40506c:	eba8 030a 	sub.w	r3, r8, sl
  405070:	f8c4 b010 	str.w	fp, [r4, #16]
  405074:	f8c4 8014 	str.w	r8, [r4, #20]
  405078:	6020      	str	r0, [r4, #0]
  40507a:	60a3      	str	r3, [r4, #8]
  40507c:	46b8      	mov	r8, r7
  40507e:	46ba      	mov	sl, r7
  405080:	46bb      	mov	fp, r7
  405082:	e721      	b.n	404ec8 <__sfvwrite_r+0xa8>
  405084:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  405088:	42b9      	cmp	r1, r7
  40508a:	bf28      	it	cs
  40508c:	4639      	movcs	r1, r7
  40508e:	464a      	mov	r2, r9
  405090:	fb91 f1f3 	sdiv	r1, r1, r3
  405094:	9800      	ldr	r0, [sp, #0]
  405096:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405098:	fb03 f301 	mul.w	r3, r3, r1
  40509c:	69e1      	ldr	r1, [r4, #28]
  40509e:	47b0      	blx	r6
  4050a0:	f1b0 0a00 	subs.w	sl, r0, #0
  4050a4:	f73f af1b 	bgt.w	404ede <__sfvwrite_r+0xbe>
  4050a8:	e738      	b.n	404f1c <__sfvwrite_r+0xfc>
  4050aa:	461a      	mov	r2, r3
  4050ac:	4629      	mov	r1, r5
  4050ae:	9301      	str	r3, [sp, #4]
  4050b0:	f000 f94e 	bl	405350 <memmove>
  4050b4:	6822      	ldr	r2, [r4, #0]
  4050b6:	9b01      	ldr	r3, [sp, #4]
  4050b8:	9800      	ldr	r0, [sp, #0]
  4050ba:	441a      	add	r2, r3
  4050bc:	6022      	str	r2, [r4, #0]
  4050be:	4621      	mov	r1, r4
  4050c0:	f7ff fc4a 	bl	404958 <_fflush_r>
  4050c4:	9b01      	ldr	r3, [sp, #4]
  4050c6:	2800      	cmp	r0, #0
  4050c8:	f47f af28 	bne.w	404f1c <__sfvwrite_r+0xfc>
  4050cc:	461f      	mov	r7, r3
  4050ce:	e750      	b.n	404f72 <__sfvwrite_r+0x152>
  4050d0:	9800      	ldr	r0, [sp, #0]
  4050d2:	f000 f9a1 	bl	405418 <_realloc_r>
  4050d6:	4683      	mov	fp, r0
  4050d8:	2800      	cmp	r0, #0
  4050da:	d1c5      	bne.n	405068 <__sfvwrite_r+0x248>
  4050dc:	9d00      	ldr	r5, [sp, #0]
  4050de:	6921      	ldr	r1, [r4, #16]
  4050e0:	4628      	mov	r0, r5
  4050e2:	f7ff fdb7 	bl	404c54 <_free_r>
  4050e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4050ea:	220c      	movs	r2, #12
  4050ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4050f0:	602a      	str	r2, [r5, #0]
  4050f2:	e715      	b.n	404f20 <__sfvwrite_r+0x100>
  4050f4:	f106 0901 	add.w	r9, r6, #1
  4050f8:	e722      	b.n	404f40 <__sfvwrite_r+0x120>
  4050fa:	f04f 30ff 	mov.w	r0, #4294967295
  4050fe:	e6bf      	b.n	404e80 <__sfvwrite_r+0x60>
  405100:	9a00      	ldr	r2, [sp, #0]
  405102:	230c      	movs	r3, #12
  405104:	6013      	str	r3, [r2, #0]
  405106:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40510a:	e709      	b.n	404f20 <__sfvwrite_r+0x100>
  40510c:	7ffffc00 	.word	0x7ffffc00

00405110 <_fwalk_reent>:
  405110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405114:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  405118:	d01f      	beq.n	40515a <_fwalk_reent+0x4a>
  40511a:	4688      	mov	r8, r1
  40511c:	4606      	mov	r6, r0
  40511e:	f04f 0900 	mov.w	r9, #0
  405122:	687d      	ldr	r5, [r7, #4]
  405124:	68bc      	ldr	r4, [r7, #8]
  405126:	3d01      	subs	r5, #1
  405128:	d411      	bmi.n	40514e <_fwalk_reent+0x3e>
  40512a:	89a3      	ldrh	r3, [r4, #12]
  40512c:	2b01      	cmp	r3, #1
  40512e:	f105 35ff 	add.w	r5, r5, #4294967295
  405132:	d908      	bls.n	405146 <_fwalk_reent+0x36>
  405134:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  405138:	3301      	adds	r3, #1
  40513a:	4621      	mov	r1, r4
  40513c:	4630      	mov	r0, r6
  40513e:	d002      	beq.n	405146 <_fwalk_reent+0x36>
  405140:	47c0      	blx	r8
  405142:	ea49 0900 	orr.w	r9, r9, r0
  405146:	1c6b      	adds	r3, r5, #1
  405148:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40514c:	d1ed      	bne.n	40512a <_fwalk_reent+0x1a>
  40514e:	683f      	ldr	r7, [r7, #0]
  405150:	2f00      	cmp	r7, #0
  405152:	d1e6      	bne.n	405122 <_fwalk_reent+0x12>
  405154:	4648      	mov	r0, r9
  405156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40515a:	46b9      	mov	r9, r7
  40515c:	4648      	mov	r0, r9
  40515e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405162:	bf00      	nop

00405164 <__locale_mb_cur_max>:
  405164:	4b04      	ldr	r3, [pc, #16]	; (405178 <__locale_mb_cur_max+0x14>)
  405166:	4a05      	ldr	r2, [pc, #20]	; (40517c <__locale_mb_cur_max+0x18>)
  405168:	681b      	ldr	r3, [r3, #0]
  40516a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40516c:	2b00      	cmp	r3, #0
  40516e:	bf08      	it	eq
  405170:	4613      	moveq	r3, r2
  405172:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  405176:	4770      	bx	lr
  405178:	2040000c 	.word	0x2040000c
  40517c:	2040084c 	.word	0x2040084c

00405180 <__retarget_lock_init_recursive>:
  405180:	4770      	bx	lr
  405182:	bf00      	nop

00405184 <__retarget_lock_close_recursive>:
  405184:	4770      	bx	lr
  405186:	bf00      	nop

00405188 <__retarget_lock_acquire_recursive>:
  405188:	4770      	bx	lr
  40518a:	bf00      	nop

0040518c <__retarget_lock_release_recursive>:
  40518c:	4770      	bx	lr
  40518e:	bf00      	nop

00405190 <__swhatbuf_r>:
  405190:	b570      	push	{r4, r5, r6, lr}
  405192:	460c      	mov	r4, r1
  405194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405198:	2900      	cmp	r1, #0
  40519a:	b090      	sub	sp, #64	; 0x40
  40519c:	4615      	mov	r5, r2
  40519e:	461e      	mov	r6, r3
  4051a0:	db14      	blt.n	4051cc <__swhatbuf_r+0x3c>
  4051a2:	aa01      	add	r2, sp, #4
  4051a4:	f000 fc9e 	bl	405ae4 <_fstat_r>
  4051a8:	2800      	cmp	r0, #0
  4051aa:	db0f      	blt.n	4051cc <__swhatbuf_r+0x3c>
  4051ac:	9a02      	ldr	r2, [sp, #8]
  4051ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4051b2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4051b6:	fab2 f282 	clz	r2, r2
  4051ba:	0952      	lsrs	r2, r2, #5
  4051bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4051c0:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4051c4:	6032      	str	r2, [r6, #0]
  4051c6:	602b      	str	r3, [r5, #0]
  4051c8:	b010      	add	sp, #64	; 0x40
  4051ca:	bd70      	pop	{r4, r5, r6, pc}
  4051cc:	89a2      	ldrh	r2, [r4, #12]
  4051ce:	2300      	movs	r3, #0
  4051d0:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  4051d4:	6033      	str	r3, [r6, #0]
  4051d6:	d004      	beq.n	4051e2 <__swhatbuf_r+0x52>
  4051d8:	2240      	movs	r2, #64	; 0x40
  4051da:	4618      	mov	r0, r3
  4051dc:	602a      	str	r2, [r5, #0]
  4051de:	b010      	add	sp, #64	; 0x40
  4051e0:	bd70      	pop	{r4, r5, r6, pc}
  4051e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4051e6:	602b      	str	r3, [r5, #0]
  4051e8:	b010      	add	sp, #64	; 0x40
  4051ea:	bd70      	pop	{r4, r5, r6, pc}

004051ec <__smakebuf_r>:
  4051ec:	898a      	ldrh	r2, [r1, #12]
  4051ee:	0792      	lsls	r2, r2, #30
  4051f0:	460b      	mov	r3, r1
  4051f2:	d506      	bpl.n	405202 <__smakebuf_r+0x16>
  4051f4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4051f8:	2101      	movs	r1, #1
  4051fa:	601a      	str	r2, [r3, #0]
  4051fc:	611a      	str	r2, [r3, #16]
  4051fe:	6159      	str	r1, [r3, #20]
  405200:	4770      	bx	lr
  405202:	b5f0      	push	{r4, r5, r6, r7, lr}
  405204:	b083      	sub	sp, #12
  405206:	ab01      	add	r3, sp, #4
  405208:	466a      	mov	r2, sp
  40520a:	460c      	mov	r4, r1
  40520c:	4606      	mov	r6, r0
  40520e:	f7ff ffbf 	bl	405190 <__swhatbuf_r>
  405212:	9900      	ldr	r1, [sp, #0]
  405214:	4605      	mov	r5, r0
  405216:	4630      	mov	r0, r6
  405218:	f7fd feca 	bl	402fb0 <_malloc_r>
  40521c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405220:	b1d8      	cbz	r0, 40525a <__smakebuf_r+0x6e>
  405222:	9a01      	ldr	r2, [sp, #4]
  405224:	4f15      	ldr	r7, [pc, #84]	; (40527c <__smakebuf_r+0x90>)
  405226:	9900      	ldr	r1, [sp, #0]
  405228:	63f7      	str	r7, [r6, #60]	; 0x3c
  40522a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40522e:	81a3      	strh	r3, [r4, #12]
  405230:	6020      	str	r0, [r4, #0]
  405232:	6120      	str	r0, [r4, #16]
  405234:	6161      	str	r1, [r4, #20]
  405236:	b91a      	cbnz	r2, 405240 <__smakebuf_r+0x54>
  405238:	432b      	orrs	r3, r5
  40523a:	81a3      	strh	r3, [r4, #12]
  40523c:	b003      	add	sp, #12
  40523e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405240:	4630      	mov	r0, r6
  405242:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405246:	f000 fc61 	bl	405b0c <_isatty_r>
  40524a:	b1a0      	cbz	r0, 405276 <__smakebuf_r+0x8a>
  40524c:	89a3      	ldrh	r3, [r4, #12]
  40524e:	f023 0303 	bic.w	r3, r3, #3
  405252:	f043 0301 	orr.w	r3, r3, #1
  405256:	b21b      	sxth	r3, r3
  405258:	e7ee      	b.n	405238 <__smakebuf_r+0x4c>
  40525a:	059a      	lsls	r2, r3, #22
  40525c:	d4ee      	bmi.n	40523c <__smakebuf_r+0x50>
  40525e:	f023 0303 	bic.w	r3, r3, #3
  405262:	f104 0243 	add.w	r2, r4, #67	; 0x43
  405266:	f043 0302 	orr.w	r3, r3, #2
  40526a:	2101      	movs	r1, #1
  40526c:	81a3      	strh	r3, [r4, #12]
  40526e:	6022      	str	r2, [r4, #0]
  405270:	6122      	str	r2, [r4, #16]
  405272:	6161      	str	r1, [r4, #20]
  405274:	e7e2      	b.n	40523c <__smakebuf_r+0x50>
  405276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40527a:	e7dd      	b.n	405238 <__smakebuf_r+0x4c>
  40527c:	004049ad 	.word	0x004049ad

00405280 <__ascii_mbtowc>:
  405280:	b082      	sub	sp, #8
  405282:	b149      	cbz	r1, 405298 <__ascii_mbtowc+0x18>
  405284:	b15a      	cbz	r2, 40529e <__ascii_mbtowc+0x1e>
  405286:	b16b      	cbz	r3, 4052a4 <__ascii_mbtowc+0x24>
  405288:	7813      	ldrb	r3, [r2, #0]
  40528a:	600b      	str	r3, [r1, #0]
  40528c:	7812      	ldrb	r2, [r2, #0]
  40528e:	1c10      	adds	r0, r2, #0
  405290:	bf18      	it	ne
  405292:	2001      	movne	r0, #1
  405294:	b002      	add	sp, #8
  405296:	4770      	bx	lr
  405298:	a901      	add	r1, sp, #4
  40529a:	2a00      	cmp	r2, #0
  40529c:	d1f3      	bne.n	405286 <__ascii_mbtowc+0x6>
  40529e:	4610      	mov	r0, r2
  4052a0:	b002      	add	sp, #8
  4052a2:	4770      	bx	lr
  4052a4:	f06f 0001 	mvn.w	r0, #1
  4052a8:	e7f4      	b.n	405294 <__ascii_mbtowc+0x14>
  4052aa:	bf00      	nop
  4052ac:	0000      	movs	r0, r0
	...

004052b0 <memchr>:
  4052b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4052b4:	2a10      	cmp	r2, #16
  4052b6:	db2b      	blt.n	405310 <memchr+0x60>
  4052b8:	f010 0f07 	tst.w	r0, #7
  4052bc:	d008      	beq.n	4052d0 <memchr+0x20>
  4052be:	f810 3b01 	ldrb.w	r3, [r0], #1
  4052c2:	3a01      	subs	r2, #1
  4052c4:	428b      	cmp	r3, r1
  4052c6:	d02d      	beq.n	405324 <memchr+0x74>
  4052c8:	f010 0f07 	tst.w	r0, #7
  4052cc:	b342      	cbz	r2, 405320 <memchr+0x70>
  4052ce:	d1f6      	bne.n	4052be <memchr+0xe>
  4052d0:	b4f0      	push	{r4, r5, r6, r7}
  4052d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4052d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4052da:	f022 0407 	bic.w	r4, r2, #7
  4052de:	f07f 0700 	mvns.w	r7, #0
  4052e2:	2300      	movs	r3, #0
  4052e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4052e8:	3c08      	subs	r4, #8
  4052ea:	ea85 0501 	eor.w	r5, r5, r1
  4052ee:	ea86 0601 	eor.w	r6, r6, r1
  4052f2:	fa85 f547 	uadd8	r5, r5, r7
  4052f6:	faa3 f587 	sel	r5, r3, r7
  4052fa:	fa86 f647 	uadd8	r6, r6, r7
  4052fe:	faa5 f687 	sel	r6, r5, r7
  405302:	b98e      	cbnz	r6, 405328 <memchr+0x78>
  405304:	d1ee      	bne.n	4052e4 <memchr+0x34>
  405306:	bcf0      	pop	{r4, r5, r6, r7}
  405308:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40530c:	f002 0207 	and.w	r2, r2, #7
  405310:	b132      	cbz	r2, 405320 <memchr+0x70>
  405312:	f810 3b01 	ldrb.w	r3, [r0], #1
  405316:	3a01      	subs	r2, #1
  405318:	ea83 0301 	eor.w	r3, r3, r1
  40531c:	b113      	cbz	r3, 405324 <memchr+0x74>
  40531e:	d1f8      	bne.n	405312 <memchr+0x62>
  405320:	2000      	movs	r0, #0
  405322:	4770      	bx	lr
  405324:	3801      	subs	r0, #1
  405326:	4770      	bx	lr
  405328:	2d00      	cmp	r5, #0
  40532a:	bf06      	itte	eq
  40532c:	4635      	moveq	r5, r6
  40532e:	3803      	subeq	r0, #3
  405330:	3807      	subne	r0, #7
  405332:	f015 0f01 	tst.w	r5, #1
  405336:	d107      	bne.n	405348 <memchr+0x98>
  405338:	3001      	adds	r0, #1
  40533a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40533e:	bf02      	ittt	eq
  405340:	3001      	addeq	r0, #1
  405342:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  405346:	3001      	addeq	r0, #1
  405348:	bcf0      	pop	{r4, r5, r6, r7}
  40534a:	3801      	subs	r0, #1
  40534c:	4770      	bx	lr
  40534e:	bf00      	nop

00405350 <memmove>:
  405350:	4288      	cmp	r0, r1
  405352:	b5f0      	push	{r4, r5, r6, r7, lr}
  405354:	d90d      	bls.n	405372 <memmove+0x22>
  405356:	188b      	adds	r3, r1, r2
  405358:	4298      	cmp	r0, r3
  40535a:	d20a      	bcs.n	405372 <memmove+0x22>
  40535c:	1884      	adds	r4, r0, r2
  40535e:	2a00      	cmp	r2, #0
  405360:	d051      	beq.n	405406 <memmove+0xb6>
  405362:	4622      	mov	r2, r4
  405364:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  405368:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40536c:	4299      	cmp	r1, r3
  40536e:	d1f9      	bne.n	405364 <memmove+0x14>
  405370:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405372:	2a0f      	cmp	r2, #15
  405374:	d948      	bls.n	405408 <memmove+0xb8>
  405376:	ea41 0300 	orr.w	r3, r1, r0
  40537a:	079b      	lsls	r3, r3, #30
  40537c:	d146      	bne.n	40540c <memmove+0xbc>
  40537e:	f100 0410 	add.w	r4, r0, #16
  405382:	f101 0310 	add.w	r3, r1, #16
  405386:	4615      	mov	r5, r2
  405388:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40538c:	f844 6c10 	str.w	r6, [r4, #-16]
  405390:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  405394:	f844 6c0c 	str.w	r6, [r4, #-12]
  405398:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40539c:	f844 6c08 	str.w	r6, [r4, #-8]
  4053a0:	3d10      	subs	r5, #16
  4053a2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4053a6:	f844 6c04 	str.w	r6, [r4, #-4]
  4053aa:	2d0f      	cmp	r5, #15
  4053ac:	f103 0310 	add.w	r3, r3, #16
  4053b0:	f104 0410 	add.w	r4, r4, #16
  4053b4:	d8e8      	bhi.n	405388 <memmove+0x38>
  4053b6:	f1a2 0310 	sub.w	r3, r2, #16
  4053ba:	f023 030f 	bic.w	r3, r3, #15
  4053be:	f002 0e0f 	and.w	lr, r2, #15
  4053c2:	3310      	adds	r3, #16
  4053c4:	f1be 0f03 	cmp.w	lr, #3
  4053c8:	4419      	add	r1, r3
  4053ca:	4403      	add	r3, r0
  4053cc:	d921      	bls.n	405412 <memmove+0xc2>
  4053ce:	1f1e      	subs	r6, r3, #4
  4053d0:	460d      	mov	r5, r1
  4053d2:	4674      	mov	r4, lr
  4053d4:	3c04      	subs	r4, #4
  4053d6:	f855 7b04 	ldr.w	r7, [r5], #4
  4053da:	f846 7f04 	str.w	r7, [r6, #4]!
  4053de:	2c03      	cmp	r4, #3
  4053e0:	d8f8      	bhi.n	4053d4 <memmove+0x84>
  4053e2:	f1ae 0404 	sub.w	r4, lr, #4
  4053e6:	f024 0403 	bic.w	r4, r4, #3
  4053ea:	3404      	adds	r4, #4
  4053ec:	4421      	add	r1, r4
  4053ee:	4423      	add	r3, r4
  4053f0:	f002 0203 	and.w	r2, r2, #3
  4053f4:	b162      	cbz	r2, 405410 <memmove+0xc0>
  4053f6:	3b01      	subs	r3, #1
  4053f8:	440a      	add	r2, r1
  4053fa:	f811 4b01 	ldrb.w	r4, [r1], #1
  4053fe:	f803 4f01 	strb.w	r4, [r3, #1]!
  405402:	428a      	cmp	r2, r1
  405404:	d1f9      	bne.n	4053fa <memmove+0xaa>
  405406:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405408:	4603      	mov	r3, r0
  40540a:	e7f3      	b.n	4053f4 <memmove+0xa4>
  40540c:	4603      	mov	r3, r0
  40540e:	e7f2      	b.n	4053f6 <memmove+0xa6>
  405410:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405412:	4672      	mov	r2, lr
  405414:	e7ee      	b.n	4053f4 <memmove+0xa4>
  405416:	bf00      	nop

00405418 <_realloc_r>:
  405418:	2900      	cmp	r1, #0
  40541a:	f000 8095 	beq.w	405548 <_realloc_r+0x130>
  40541e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405422:	460d      	mov	r5, r1
  405424:	4616      	mov	r6, r2
  405426:	b083      	sub	sp, #12
  405428:	4680      	mov	r8, r0
  40542a:	f106 070b 	add.w	r7, r6, #11
  40542e:	f7fe f957 	bl	4036e0 <__malloc_lock>
  405432:	f855 ec04 	ldr.w	lr, [r5, #-4]
  405436:	2f16      	cmp	r7, #22
  405438:	f02e 0403 	bic.w	r4, lr, #3
  40543c:	f1a5 0908 	sub.w	r9, r5, #8
  405440:	d83c      	bhi.n	4054bc <_realloc_r+0xa4>
  405442:	2210      	movs	r2, #16
  405444:	4617      	mov	r7, r2
  405446:	42be      	cmp	r6, r7
  405448:	d83d      	bhi.n	4054c6 <_realloc_r+0xae>
  40544a:	4294      	cmp	r4, r2
  40544c:	da43      	bge.n	4054d6 <_realloc_r+0xbe>
  40544e:	4bc4      	ldr	r3, [pc, #784]	; (405760 <_realloc_r+0x348>)
  405450:	6899      	ldr	r1, [r3, #8]
  405452:	eb09 0004 	add.w	r0, r9, r4
  405456:	4288      	cmp	r0, r1
  405458:	f000 80b4 	beq.w	4055c4 <_realloc_r+0x1ac>
  40545c:	6843      	ldr	r3, [r0, #4]
  40545e:	f023 0101 	bic.w	r1, r3, #1
  405462:	4401      	add	r1, r0
  405464:	6849      	ldr	r1, [r1, #4]
  405466:	07c9      	lsls	r1, r1, #31
  405468:	d54c      	bpl.n	405504 <_realloc_r+0xec>
  40546a:	f01e 0f01 	tst.w	lr, #1
  40546e:	f000 809b 	beq.w	4055a8 <_realloc_r+0x190>
  405472:	4631      	mov	r1, r6
  405474:	4640      	mov	r0, r8
  405476:	f7fd fd9b 	bl	402fb0 <_malloc_r>
  40547a:	4606      	mov	r6, r0
  40547c:	2800      	cmp	r0, #0
  40547e:	d03a      	beq.n	4054f6 <_realloc_r+0xde>
  405480:	f855 3c04 	ldr.w	r3, [r5, #-4]
  405484:	f023 0301 	bic.w	r3, r3, #1
  405488:	444b      	add	r3, r9
  40548a:	f1a0 0208 	sub.w	r2, r0, #8
  40548e:	429a      	cmp	r2, r3
  405490:	f000 8121 	beq.w	4056d6 <_realloc_r+0x2be>
  405494:	1f22      	subs	r2, r4, #4
  405496:	2a24      	cmp	r2, #36	; 0x24
  405498:	f200 8107 	bhi.w	4056aa <_realloc_r+0x292>
  40549c:	2a13      	cmp	r2, #19
  40549e:	f200 80db 	bhi.w	405658 <_realloc_r+0x240>
  4054a2:	4603      	mov	r3, r0
  4054a4:	462a      	mov	r2, r5
  4054a6:	6811      	ldr	r1, [r2, #0]
  4054a8:	6019      	str	r1, [r3, #0]
  4054aa:	6851      	ldr	r1, [r2, #4]
  4054ac:	6059      	str	r1, [r3, #4]
  4054ae:	6892      	ldr	r2, [r2, #8]
  4054b0:	609a      	str	r2, [r3, #8]
  4054b2:	4629      	mov	r1, r5
  4054b4:	4640      	mov	r0, r8
  4054b6:	f7ff fbcd 	bl	404c54 <_free_r>
  4054ba:	e01c      	b.n	4054f6 <_realloc_r+0xde>
  4054bc:	f027 0707 	bic.w	r7, r7, #7
  4054c0:	2f00      	cmp	r7, #0
  4054c2:	463a      	mov	r2, r7
  4054c4:	dabf      	bge.n	405446 <_realloc_r+0x2e>
  4054c6:	2600      	movs	r6, #0
  4054c8:	230c      	movs	r3, #12
  4054ca:	4630      	mov	r0, r6
  4054cc:	f8c8 3000 	str.w	r3, [r8]
  4054d0:	b003      	add	sp, #12
  4054d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4054d6:	462e      	mov	r6, r5
  4054d8:	1be3      	subs	r3, r4, r7
  4054da:	2b0f      	cmp	r3, #15
  4054dc:	d81e      	bhi.n	40551c <_realloc_r+0x104>
  4054de:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4054e2:	f003 0301 	and.w	r3, r3, #1
  4054e6:	4323      	orrs	r3, r4
  4054e8:	444c      	add	r4, r9
  4054ea:	f8c9 3004 	str.w	r3, [r9, #4]
  4054ee:	6863      	ldr	r3, [r4, #4]
  4054f0:	f043 0301 	orr.w	r3, r3, #1
  4054f4:	6063      	str	r3, [r4, #4]
  4054f6:	4640      	mov	r0, r8
  4054f8:	f7fe f8f8 	bl	4036ec <__malloc_unlock>
  4054fc:	4630      	mov	r0, r6
  4054fe:	b003      	add	sp, #12
  405500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405504:	f023 0303 	bic.w	r3, r3, #3
  405508:	18e1      	adds	r1, r4, r3
  40550a:	4291      	cmp	r1, r2
  40550c:	db1f      	blt.n	40554e <_realloc_r+0x136>
  40550e:	68c3      	ldr	r3, [r0, #12]
  405510:	6882      	ldr	r2, [r0, #8]
  405512:	462e      	mov	r6, r5
  405514:	60d3      	str	r3, [r2, #12]
  405516:	460c      	mov	r4, r1
  405518:	609a      	str	r2, [r3, #8]
  40551a:	e7dd      	b.n	4054d8 <_realloc_r+0xc0>
  40551c:	f8d9 2004 	ldr.w	r2, [r9, #4]
  405520:	eb09 0107 	add.w	r1, r9, r7
  405524:	f002 0201 	and.w	r2, r2, #1
  405528:	444c      	add	r4, r9
  40552a:	f043 0301 	orr.w	r3, r3, #1
  40552e:	4317      	orrs	r7, r2
  405530:	f8c9 7004 	str.w	r7, [r9, #4]
  405534:	604b      	str	r3, [r1, #4]
  405536:	6863      	ldr	r3, [r4, #4]
  405538:	f043 0301 	orr.w	r3, r3, #1
  40553c:	3108      	adds	r1, #8
  40553e:	6063      	str	r3, [r4, #4]
  405540:	4640      	mov	r0, r8
  405542:	f7ff fb87 	bl	404c54 <_free_r>
  405546:	e7d6      	b.n	4054f6 <_realloc_r+0xde>
  405548:	4611      	mov	r1, r2
  40554a:	f7fd bd31 	b.w	402fb0 <_malloc_r>
  40554e:	f01e 0f01 	tst.w	lr, #1
  405552:	d18e      	bne.n	405472 <_realloc_r+0x5a>
  405554:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405558:	eba9 0a01 	sub.w	sl, r9, r1
  40555c:	f8da 1004 	ldr.w	r1, [sl, #4]
  405560:	f021 0103 	bic.w	r1, r1, #3
  405564:	440b      	add	r3, r1
  405566:	4423      	add	r3, r4
  405568:	4293      	cmp	r3, r2
  40556a:	db25      	blt.n	4055b8 <_realloc_r+0x1a0>
  40556c:	68c2      	ldr	r2, [r0, #12]
  40556e:	6881      	ldr	r1, [r0, #8]
  405570:	4656      	mov	r6, sl
  405572:	60ca      	str	r2, [r1, #12]
  405574:	6091      	str	r1, [r2, #8]
  405576:	f8da 100c 	ldr.w	r1, [sl, #12]
  40557a:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40557e:	1f22      	subs	r2, r4, #4
  405580:	2a24      	cmp	r2, #36	; 0x24
  405582:	60c1      	str	r1, [r0, #12]
  405584:	6088      	str	r0, [r1, #8]
  405586:	f200 8094 	bhi.w	4056b2 <_realloc_r+0x29a>
  40558a:	2a13      	cmp	r2, #19
  40558c:	d96f      	bls.n	40566e <_realloc_r+0x256>
  40558e:	6829      	ldr	r1, [r5, #0]
  405590:	f8ca 1008 	str.w	r1, [sl, #8]
  405594:	6869      	ldr	r1, [r5, #4]
  405596:	f8ca 100c 	str.w	r1, [sl, #12]
  40559a:	2a1b      	cmp	r2, #27
  40559c:	f200 80a2 	bhi.w	4056e4 <_realloc_r+0x2cc>
  4055a0:	3508      	adds	r5, #8
  4055a2:	f10a 0210 	add.w	r2, sl, #16
  4055a6:	e063      	b.n	405670 <_realloc_r+0x258>
  4055a8:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4055ac:	eba9 0a03 	sub.w	sl, r9, r3
  4055b0:	f8da 1004 	ldr.w	r1, [sl, #4]
  4055b4:	f021 0103 	bic.w	r1, r1, #3
  4055b8:	1863      	adds	r3, r4, r1
  4055ba:	4293      	cmp	r3, r2
  4055bc:	f6ff af59 	blt.w	405472 <_realloc_r+0x5a>
  4055c0:	4656      	mov	r6, sl
  4055c2:	e7d8      	b.n	405576 <_realloc_r+0x15e>
  4055c4:	6841      	ldr	r1, [r0, #4]
  4055c6:	f021 0b03 	bic.w	fp, r1, #3
  4055ca:	44a3      	add	fp, r4
  4055cc:	f107 0010 	add.w	r0, r7, #16
  4055d0:	4583      	cmp	fp, r0
  4055d2:	da56      	bge.n	405682 <_realloc_r+0x26a>
  4055d4:	f01e 0f01 	tst.w	lr, #1
  4055d8:	f47f af4b 	bne.w	405472 <_realloc_r+0x5a>
  4055dc:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4055e0:	eba9 0a01 	sub.w	sl, r9, r1
  4055e4:	f8da 1004 	ldr.w	r1, [sl, #4]
  4055e8:	f021 0103 	bic.w	r1, r1, #3
  4055ec:	448b      	add	fp, r1
  4055ee:	4558      	cmp	r0, fp
  4055f0:	dce2      	bgt.n	4055b8 <_realloc_r+0x1a0>
  4055f2:	4656      	mov	r6, sl
  4055f4:	f8da 100c 	ldr.w	r1, [sl, #12]
  4055f8:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4055fc:	1f22      	subs	r2, r4, #4
  4055fe:	2a24      	cmp	r2, #36	; 0x24
  405600:	60c1      	str	r1, [r0, #12]
  405602:	6088      	str	r0, [r1, #8]
  405604:	f200 808f 	bhi.w	405726 <_realloc_r+0x30e>
  405608:	2a13      	cmp	r2, #19
  40560a:	f240 808a 	bls.w	405722 <_realloc_r+0x30a>
  40560e:	6829      	ldr	r1, [r5, #0]
  405610:	f8ca 1008 	str.w	r1, [sl, #8]
  405614:	6869      	ldr	r1, [r5, #4]
  405616:	f8ca 100c 	str.w	r1, [sl, #12]
  40561a:	2a1b      	cmp	r2, #27
  40561c:	f200 808a 	bhi.w	405734 <_realloc_r+0x31c>
  405620:	3508      	adds	r5, #8
  405622:	f10a 0210 	add.w	r2, sl, #16
  405626:	6829      	ldr	r1, [r5, #0]
  405628:	6011      	str	r1, [r2, #0]
  40562a:	6869      	ldr	r1, [r5, #4]
  40562c:	6051      	str	r1, [r2, #4]
  40562e:	68a9      	ldr	r1, [r5, #8]
  405630:	6091      	str	r1, [r2, #8]
  405632:	eb0a 0107 	add.w	r1, sl, r7
  405636:	ebab 0207 	sub.w	r2, fp, r7
  40563a:	f042 0201 	orr.w	r2, r2, #1
  40563e:	6099      	str	r1, [r3, #8]
  405640:	604a      	str	r2, [r1, #4]
  405642:	f8da 3004 	ldr.w	r3, [sl, #4]
  405646:	f003 0301 	and.w	r3, r3, #1
  40564a:	431f      	orrs	r7, r3
  40564c:	4640      	mov	r0, r8
  40564e:	f8ca 7004 	str.w	r7, [sl, #4]
  405652:	f7fe f84b 	bl	4036ec <__malloc_unlock>
  405656:	e751      	b.n	4054fc <_realloc_r+0xe4>
  405658:	682b      	ldr	r3, [r5, #0]
  40565a:	6003      	str	r3, [r0, #0]
  40565c:	686b      	ldr	r3, [r5, #4]
  40565e:	6043      	str	r3, [r0, #4]
  405660:	2a1b      	cmp	r2, #27
  405662:	d82d      	bhi.n	4056c0 <_realloc_r+0x2a8>
  405664:	f100 0308 	add.w	r3, r0, #8
  405668:	f105 0208 	add.w	r2, r5, #8
  40566c:	e71b      	b.n	4054a6 <_realloc_r+0x8e>
  40566e:	4632      	mov	r2, r6
  405670:	6829      	ldr	r1, [r5, #0]
  405672:	6011      	str	r1, [r2, #0]
  405674:	6869      	ldr	r1, [r5, #4]
  405676:	6051      	str	r1, [r2, #4]
  405678:	68a9      	ldr	r1, [r5, #8]
  40567a:	6091      	str	r1, [r2, #8]
  40567c:	461c      	mov	r4, r3
  40567e:	46d1      	mov	r9, sl
  405680:	e72a      	b.n	4054d8 <_realloc_r+0xc0>
  405682:	eb09 0107 	add.w	r1, r9, r7
  405686:	ebab 0b07 	sub.w	fp, fp, r7
  40568a:	f04b 0201 	orr.w	r2, fp, #1
  40568e:	6099      	str	r1, [r3, #8]
  405690:	604a      	str	r2, [r1, #4]
  405692:	f855 3c04 	ldr.w	r3, [r5, #-4]
  405696:	f003 0301 	and.w	r3, r3, #1
  40569a:	431f      	orrs	r7, r3
  40569c:	4640      	mov	r0, r8
  40569e:	f845 7c04 	str.w	r7, [r5, #-4]
  4056a2:	f7fe f823 	bl	4036ec <__malloc_unlock>
  4056a6:	462e      	mov	r6, r5
  4056a8:	e728      	b.n	4054fc <_realloc_r+0xe4>
  4056aa:	4629      	mov	r1, r5
  4056ac:	f7ff fe50 	bl	405350 <memmove>
  4056b0:	e6ff      	b.n	4054b2 <_realloc_r+0x9a>
  4056b2:	4629      	mov	r1, r5
  4056b4:	4630      	mov	r0, r6
  4056b6:	461c      	mov	r4, r3
  4056b8:	46d1      	mov	r9, sl
  4056ba:	f7ff fe49 	bl	405350 <memmove>
  4056be:	e70b      	b.n	4054d8 <_realloc_r+0xc0>
  4056c0:	68ab      	ldr	r3, [r5, #8]
  4056c2:	6083      	str	r3, [r0, #8]
  4056c4:	68eb      	ldr	r3, [r5, #12]
  4056c6:	60c3      	str	r3, [r0, #12]
  4056c8:	2a24      	cmp	r2, #36	; 0x24
  4056ca:	d017      	beq.n	4056fc <_realloc_r+0x2e4>
  4056cc:	f100 0310 	add.w	r3, r0, #16
  4056d0:	f105 0210 	add.w	r2, r5, #16
  4056d4:	e6e7      	b.n	4054a6 <_realloc_r+0x8e>
  4056d6:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4056da:	f023 0303 	bic.w	r3, r3, #3
  4056de:	441c      	add	r4, r3
  4056e0:	462e      	mov	r6, r5
  4056e2:	e6f9      	b.n	4054d8 <_realloc_r+0xc0>
  4056e4:	68a9      	ldr	r1, [r5, #8]
  4056e6:	f8ca 1010 	str.w	r1, [sl, #16]
  4056ea:	68e9      	ldr	r1, [r5, #12]
  4056ec:	f8ca 1014 	str.w	r1, [sl, #20]
  4056f0:	2a24      	cmp	r2, #36	; 0x24
  4056f2:	d00c      	beq.n	40570e <_realloc_r+0x2f6>
  4056f4:	3510      	adds	r5, #16
  4056f6:	f10a 0218 	add.w	r2, sl, #24
  4056fa:	e7b9      	b.n	405670 <_realloc_r+0x258>
  4056fc:	692b      	ldr	r3, [r5, #16]
  4056fe:	6103      	str	r3, [r0, #16]
  405700:	696b      	ldr	r3, [r5, #20]
  405702:	6143      	str	r3, [r0, #20]
  405704:	f105 0218 	add.w	r2, r5, #24
  405708:	f100 0318 	add.w	r3, r0, #24
  40570c:	e6cb      	b.n	4054a6 <_realloc_r+0x8e>
  40570e:	692a      	ldr	r2, [r5, #16]
  405710:	f8ca 2018 	str.w	r2, [sl, #24]
  405714:	696a      	ldr	r2, [r5, #20]
  405716:	f8ca 201c 	str.w	r2, [sl, #28]
  40571a:	3518      	adds	r5, #24
  40571c:	f10a 0220 	add.w	r2, sl, #32
  405720:	e7a6      	b.n	405670 <_realloc_r+0x258>
  405722:	4632      	mov	r2, r6
  405724:	e77f      	b.n	405626 <_realloc_r+0x20e>
  405726:	4629      	mov	r1, r5
  405728:	4630      	mov	r0, r6
  40572a:	9301      	str	r3, [sp, #4]
  40572c:	f7ff fe10 	bl	405350 <memmove>
  405730:	9b01      	ldr	r3, [sp, #4]
  405732:	e77e      	b.n	405632 <_realloc_r+0x21a>
  405734:	68a9      	ldr	r1, [r5, #8]
  405736:	f8ca 1010 	str.w	r1, [sl, #16]
  40573a:	68e9      	ldr	r1, [r5, #12]
  40573c:	f8ca 1014 	str.w	r1, [sl, #20]
  405740:	2a24      	cmp	r2, #36	; 0x24
  405742:	d003      	beq.n	40574c <_realloc_r+0x334>
  405744:	3510      	adds	r5, #16
  405746:	f10a 0218 	add.w	r2, sl, #24
  40574a:	e76c      	b.n	405626 <_realloc_r+0x20e>
  40574c:	692a      	ldr	r2, [r5, #16]
  40574e:	f8ca 2018 	str.w	r2, [sl, #24]
  405752:	696a      	ldr	r2, [r5, #20]
  405754:	f8ca 201c 	str.w	r2, [sl, #28]
  405758:	3518      	adds	r5, #24
  40575a:	f10a 0220 	add.w	r2, sl, #32
  40575e:	e762      	b.n	405626 <_realloc_r+0x20e>
  405760:	20400438 	.word	0x20400438

00405764 <__sread>:
  405764:	b510      	push	{r4, lr}
  405766:	460c      	mov	r4, r1
  405768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40576c:	f000 f9f6 	bl	405b5c <_read_r>
  405770:	2800      	cmp	r0, #0
  405772:	db03      	blt.n	40577c <__sread+0x18>
  405774:	6d23      	ldr	r3, [r4, #80]	; 0x50
  405776:	4403      	add	r3, r0
  405778:	6523      	str	r3, [r4, #80]	; 0x50
  40577a:	bd10      	pop	{r4, pc}
  40577c:	89a3      	ldrh	r3, [r4, #12]
  40577e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  405782:	81a3      	strh	r3, [r4, #12]
  405784:	bd10      	pop	{r4, pc}
  405786:	bf00      	nop

00405788 <__swrite>:
  405788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40578c:	4616      	mov	r6, r2
  40578e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  405792:	461f      	mov	r7, r3
  405794:	05d3      	lsls	r3, r2, #23
  405796:	460c      	mov	r4, r1
  405798:	4605      	mov	r5, r0
  40579a:	d507      	bpl.n	4057ac <__swrite+0x24>
  40579c:	2200      	movs	r2, #0
  40579e:	2302      	movs	r3, #2
  4057a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4057a4:	f000 f9c4 	bl	405b30 <_lseek_r>
  4057a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4057ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4057b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4057b4:	81a2      	strh	r2, [r4, #12]
  4057b6:	463b      	mov	r3, r7
  4057b8:	4632      	mov	r2, r6
  4057ba:	4628      	mov	r0, r5
  4057bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4057c0:	f000 b8a4 	b.w	40590c <_write_r>

004057c4 <__sseek>:
  4057c4:	b510      	push	{r4, lr}
  4057c6:	460c      	mov	r4, r1
  4057c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4057cc:	f000 f9b0 	bl	405b30 <_lseek_r>
  4057d0:	89a3      	ldrh	r3, [r4, #12]
  4057d2:	1c42      	adds	r2, r0, #1
  4057d4:	bf0e      	itee	eq
  4057d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4057da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4057de:	6520      	strne	r0, [r4, #80]	; 0x50
  4057e0:	81a3      	strh	r3, [r4, #12]
  4057e2:	bd10      	pop	{r4, pc}

004057e4 <__sclose>:
  4057e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4057e8:	f000 b908 	b.w	4059fc <_close_r>

004057ec <__swbuf_r>:
  4057ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4057ee:	460d      	mov	r5, r1
  4057f0:	4614      	mov	r4, r2
  4057f2:	4606      	mov	r6, r0
  4057f4:	b110      	cbz	r0, 4057fc <__swbuf_r+0x10>
  4057f6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4057f8:	2b00      	cmp	r3, #0
  4057fa:	d04b      	beq.n	405894 <__swbuf_r+0xa8>
  4057fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405800:	69a3      	ldr	r3, [r4, #24]
  405802:	60a3      	str	r3, [r4, #8]
  405804:	b291      	uxth	r1, r2
  405806:	0708      	lsls	r0, r1, #28
  405808:	d539      	bpl.n	40587e <__swbuf_r+0x92>
  40580a:	6923      	ldr	r3, [r4, #16]
  40580c:	2b00      	cmp	r3, #0
  40580e:	d036      	beq.n	40587e <__swbuf_r+0x92>
  405810:	b2ed      	uxtb	r5, r5
  405812:	0489      	lsls	r1, r1, #18
  405814:	462f      	mov	r7, r5
  405816:	d515      	bpl.n	405844 <__swbuf_r+0x58>
  405818:	6822      	ldr	r2, [r4, #0]
  40581a:	6961      	ldr	r1, [r4, #20]
  40581c:	1ad3      	subs	r3, r2, r3
  40581e:	428b      	cmp	r3, r1
  405820:	da1c      	bge.n	40585c <__swbuf_r+0x70>
  405822:	3301      	adds	r3, #1
  405824:	68a1      	ldr	r1, [r4, #8]
  405826:	1c50      	adds	r0, r2, #1
  405828:	3901      	subs	r1, #1
  40582a:	60a1      	str	r1, [r4, #8]
  40582c:	6020      	str	r0, [r4, #0]
  40582e:	7015      	strb	r5, [r2, #0]
  405830:	6962      	ldr	r2, [r4, #20]
  405832:	429a      	cmp	r2, r3
  405834:	d01a      	beq.n	40586c <__swbuf_r+0x80>
  405836:	89a3      	ldrh	r3, [r4, #12]
  405838:	07db      	lsls	r3, r3, #31
  40583a:	d501      	bpl.n	405840 <__swbuf_r+0x54>
  40583c:	2d0a      	cmp	r5, #10
  40583e:	d015      	beq.n	40586c <__swbuf_r+0x80>
  405840:	4638      	mov	r0, r7
  405842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405844:	6e61      	ldr	r1, [r4, #100]	; 0x64
  405846:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40584a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40584e:	81a2      	strh	r2, [r4, #12]
  405850:	6822      	ldr	r2, [r4, #0]
  405852:	6661      	str	r1, [r4, #100]	; 0x64
  405854:	6961      	ldr	r1, [r4, #20]
  405856:	1ad3      	subs	r3, r2, r3
  405858:	428b      	cmp	r3, r1
  40585a:	dbe2      	blt.n	405822 <__swbuf_r+0x36>
  40585c:	4621      	mov	r1, r4
  40585e:	4630      	mov	r0, r6
  405860:	f7ff f87a 	bl	404958 <_fflush_r>
  405864:	b940      	cbnz	r0, 405878 <__swbuf_r+0x8c>
  405866:	6822      	ldr	r2, [r4, #0]
  405868:	2301      	movs	r3, #1
  40586a:	e7db      	b.n	405824 <__swbuf_r+0x38>
  40586c:	4621      	mov	r1, r4
  40586e:	4630      	mov	r0, r6
  405870:	f7ff f872 	bl	404958 <_fflush_r>
  405874:	2800      	cmp	r0, #0
  405876:	d0e3      	beq.n	405840 <__swbuf_r+0x54>
  405878:	f04f 37ff 	mov.w	r7, #4294967295
  40587c:	e7e0      	b.n	405840 <__swbuf_r+0x54>
  40587e:	4621      	mov	r1, r4
  405880:	4630      	mov	r0, r6
  405882:	f7fe ff55 	bl	404730 <__swsetup_r>
  405886:	2800      	cmp	r0, #0
  405888:	d1f6      	bne.n	405878 <__swbuf_r+0x8c>
  40588a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40588e:	6923      	ldr	r3, [r4, #16]
  405890:	b291      	uxth	r1, r2
  405892:	e7bd      	b.n	405810 <__swbuf_r+0x24>
  405894:	f7ff f8b8 	bl	404a08 <__sinit>
  405898:	e7b0      	b.n	4057fc <__swbuf_r+0x10>
  40589a:	bf00      	nop

0040589c <_wcrtomb_r>:
  40589c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40589e:	4606      	mov	r6, r0
  4058a0:	b085      	sub	sp, #20
  4058a2:	461f      	mov	r7, r3
  4058a4:	b189      	cbz	r1, 4058ca <_wcrtomb_r+0x2e>
  4058a6:	4c10      	ldr	r4, [pc, #64]	; (4058e8 <_wcrtomb_r+0x4c>)
  4058a8:	4d10      	ldr	r5, [pc, #64]	; (4058ec <_wcrtomb_r+0x50>)
  4058aa:	6824      	ldr	r4, [r4, #0]
  4058ac:	6b64      	ldr	r4, [r4, #52]	; 0x34
  4058ae:	2c00      	cmp	r4, #0
  4058b0:	bf08      	it	eq
  4058b2:	462c      	moveq	r4, r5
  4058b4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  4058b8:	47a0      	blx	r4
  4058ba:	1c43      	adds	r3, r0, #1
  4058bc:	d103      	bne.n	4058c6 <_wcrtomb_r+0x2a>
  4058be:	2200      	movs	r2, #0
  4058c0:	238a      	movs	r3, #138	; 0x8a
  4058c2:	603a      	str	r2, [r7, #0]
  4058c4:	6033      	str	r3, [r6, #0]
  4058c6:	b005      	add	sp, #20
  4058c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4058ca:	460c      	mov	r4, r1
  4058cc:	4906      	ldr	r1, [pc, #24]	; (4058e8 <_wcrtomb_r+0x4c>)
  4058ce:	4a07      	ldr	r2, [pc, #28]	; (4058ec <_wcrtomb_r+0x50>)
  4058d0:	6809      	ldr	r1, [r1, #0]
  4058d2:	6b49      	ldr	r1, [r1, #52]	; 0x34
  4058d4:	2900      	cmp	r1, #0
  4058d6:	bf08      	it	eq
  4058d8:	4611      	moveq	r1, r2
  4058da:	4622      	mov	r2, r4
  4058dc:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  4058e0:	a901      	add	r1, sp, #4
  4058e2:	47a0      	blx	r4
  4058e4:	e7e9      	b.n	4058ba <_wcrtomb_r+0x1e>
  4058e6:	bf00      	nop
  4058e8:	2040000c 	.word	0x2040000c
  4058ec:	2040084c 	.word	0x2040084c

004058f0 <__ascii_wctomb>:
  4058f0:	b121      	cbz	r1, 4058fc <__ascii_wctomb+0xc>
  4058f2:	2aff      	cmp	r2, #255	; 0xff
  4058f4:	d804      	bhi.n	405900 <__ascii_wctomb+0x10>
  4058f6:	700a      	strb	r2, [r1, #0]
  4058f8:	2001      	movs	r0, #1
  4058fa:	4770      	bx	lr
  4058fc:	4608      	mov	r0, r1
  4058fe:	4770      	bx	lr
  405900:	238a      	movs	r3, #138	; 0x8a
  405902:	6003      	str	r3, [r0, #0]
  405904:	f04f 30ff 	mov.w	r0, #4294967295
  405908:	4770      	bx	lr
  40590a:	bf00      	nop

0040590c <_write_r>:
  40590c:	b570      	push	{r4, r5, r6, lr}
  40590e:	460d      	mov	r5, r1
  405910:	4c08      	ldr	r4, [pc, #32]	; (405934 <_write_r+0x28>)
  405912:	4611      	mov	r1, r2
  405914:	4606      	mov	r6, r0
  405916:	461a      	mov	r2, r3
  405918:	4628      	mov	r0, r5
  40591a:	2300      	movs	r3, #0
  40591c:	6023      	str	r3, [r4, #0]
  40591e:	f7fa fc9b 	bl	400258 <_write>
  405922:	1c43      	adds	r3, r0, #1
  405924:	d000      	beq.n	405928 <_write_r+0x1c>
  405926:	bd70      	pop	{r4, r5, r6, pc}
  405928:	6823      	ldr	r3, [r4, #0]
  40592a:	2b00      	cmp	r3, #0
  40592c:	d0fb      	beq.n	405926 <_write_r+0x1a>
  40592e:	6033      	str	r3, [r6, #0]
  405930:	bd70      	pop	{r4, r5, r6, pc}
  405932:	bf00      	nop
  405934:	20400c3c 	.word	0x20400c3c

00405938 <__register_exitproc>:
  405938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40593c:	4d2c      	ldr	r5, [pc, #176]	; (4059f0 <__register_exitproc+0xb8>)
  40593e:	4606      	mov	r6, r0
  405940:	6828      	ldr	r0, [r5, #0]
  405942:	4698      	mov	r8, r3
  405944:	460f      	mov	r7, r1
  405946:	4691      	mov	r9, r2
  405948:	f7ff fc1e 	bl	405188 <__retarget_lock_acquire_recursive>
  40594c:	4b29      	ldr	r3, [pc, #164]	; (4059f4 <__register_exitproc+0xbc>)
  40594e:	681c      	ldr	r4, [r3, #0]
  405950:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  405954:	2b00      	cmp	r3, #0
  405956:	d03e      	beq.n	4059d6 <__register_exitproc+0x9e>
  405958:	685a      	ldr	r2, [r3, #4]
  40595a:	2a1f      	cmp	r2, #31
  40595c:	dc1c      	bgt.n	405998 <__register_exitproc+0x60>
  40595e:	f102 0e01 	add.w	lr, r2, #1
  405962:	b176      	cbz	r6, 405982 <__register_exitproc+0x4a>
  405964:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  405968:	2401      	movs	r4, #1
  40596a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40596e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  405972:	4094      	lsls	r4, r2
  405974:	4320      	orrs	r0, r4
  405976:	2e02      	cmp	r6, #2
  405978:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40597c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  405980:	d023      	beq.n	4059ca <__register_exitproc+0x92>
  405982:	3202      	adds	r2, #2
  405984:	f8c3 e004 	str.w	lr, [r3, #4]
  405988:	6828      	ldr	r0, [r5, #0]
  40598a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40598e:	f7ff fbfd 	bl	40518c <__retarget_lock_release_recursive>
  405992:	2000      	movs	r0, #0
  405994:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405998:	4b17      	ldr	r3, [pc, #92]	; (4059f8 <__register_exitproc+0xc0>)
  40599a:	b30b      	cbz	r3, 4059e0 <__register_exitproc+0xa8>
  40599c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4059a0:	f7fd faf6 	bl	402f90 <malloc>
  4059a4:	4603      	mov	r3, r0
  4059a6:	b1d8      	cbz	r0, 4059e0 <__register_exitproc+0xa8>
  4059a8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4059ac:	6002      	str	r2, [r0, #0]
  4059ae:	2100      	movs	r1, #0
  4059b0:	6041      	str	r1, [r0, #4]
  4059b2:	460a      	mov	r2, r1
  4059b4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4059b8:	f04f 0e01 	mov.w	lr, #1
  4059bc:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4059c0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4059c4:	2e00      	cmp	r6, #0
  4059c6:	d0dc      	beq.n	405982 <__register_exitproc+0x4a>
  4059c8:	e7cc      	b.n	405964 <__register_exitproc+0x2c>
  4059ca:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4059ce:	430c      	orrs	r4, r1
  4059d0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4059d4:	e7d5      	b.n	405982 <__register_exitproc+0x4a>
  4059d6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4059da:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4059de:	e7bb      	b.n	405958 <__register_exitproc+0x20>
  4059e0:	6828      	ldr	r0, [r5, #0]
  4059e2:	f7ff fbd3 	bl	40518c <__retarget_lock_release_recursive>
  4059e6:	f04f 30ff 	mov.w	r0, #4294967295
  4059ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4059ee:	bf00      	nop
  4059f0:	20400848 	.word	0x20400848
  4059f4:	00405fac 	.word	0x00405fac
  4059f8:	00402f91 	.word	0x00402f91

004059fc <_close_r>:
  4059fc:	b538      	push	{r3, r4, r5, lr}
  4059fe:	4c07      	ldr	r4, [pc, #28]	; (405a1c <_close_r+0x20>)
  405a00:	2300      	movs	r3, #0
  405a02:	4605      	mov	r5, r0
  405a04:	4608      	mov	r0, r1
  405a06:	6023      	str	r3, [r4, #0]
  405a08:	f7fb f920 	bl	400c4c <_close>
  405a0c:	1c43      	adds	r3, r0, #1
  405a0e:	d000      	beq.n	405a12 <_close_r+0x16>
  405a10:	bd38      	pop	{r3, r4, r5, pc}
  405a12:	6823      	ldr	r3, [r4, #0]
  405a14:	2b00      	cmp	r3, #0
  405a16:	d0fb      	beq.n	405a10 <_close_r+0x14>
  405a18:	602b      	str	r3, [r5, #0]
  405a1a:	bd38      	pop	{r3, r4, r5, pc}
  405a1c:	20400c3c 	.word	0x20400c3c

00405a20 <_fclose_r>:
  405a20:	b570      	push	{r4, r5, r6, lr}
  405a22:	b159      	cbz	r1, 405a3c <_fclose_r+0x1c>
  405a24:	4605      	mov	r5, r0
  405a26:	460c      	mov	r4, r1
  405a28:	b110      	cbz	r0, 405a30 <_fclose_r+0x10>
  405a2a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405a2c:	2b00      	cmp	r3, #0
  405a2e:	d03c      	beq.n	405aaa <_fclose_r+0x8a>
  405a30:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405a32:	07d8      	lsls	r0, r3, #31
  405a34:	d505      	bpl.n	405a42 <_fclose_r+0x22>
  405a36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405a3a:	b92b      	cbnz	r3, 405a48 <_fclose_r+0x28>
  405a3c:	2600      	movs	r6, #0
  405a3e:	4630      	mov	r0, r6
  405a40:	bd70      	pop	{r4, r5, r6, pc}
  405a42:	89a3      	ldrh	r3, [r4, #12]
  405a44:	0599      	lsls	r1, r3, #22
  405a46:	d53c      	bpl.n	405ac2 <_fclose_r+0xa2>
  405a48:	4621      	mov	r1, r4
  405a4a:	4628      	mov	r0, r5
  405a4c:	f7fe fee4 	bl	404818 <__sflush_r>
  405a50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  405a52:	4606      	mov	r6, r0
  405a54:	b133      	cbz	r3, 405a64 <_fclose_r+0x44>
  405a56:	69e1      	ldr	r1, [r4, #28]
  405a58:	4628      	mov	r0, r5
  405a5a:	4798      	blx	r3
  405a5c:	2800      	cmp	r0, #0
  405a5e:	bfb8      	it	lt
  405a60:	f04f 36ff 	movlt.w	r6, #4294967295
  405a64:	89a3      	ldrh	r3, [r4, #12]
  405a66:	061a      	lsls	r2, r3, #24
  405a68:	d422      	bmi.n	405ab0 <_fclose_r+0x90>
  405a6a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  405a6c:	b141      	cbz	r1, 405a80 <_fclose_r+0x60>
  405a6e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405a72:	4299      	cmp	r1, r3
  405a74:	d002      	beq.n	405a7c <_fclose_r+0x5c>
  405a76:	4628      	mov	r0, r5
  405a78:	f7ff f8ec 	bl	404c54 <_free_r>
  405a7c:	2300      	movs	r3, #0
  405a7e:	6323      	str	r3, [r4, #48]	; 0x30
  405a80:	6c61      	ldr	r1, [r4, #68]	; 0x44
  405a82:	b121      	cbz	r1, 405a8e <_fclose_r+0x6e>
  405a84:	4628      	mov	r0, r5
  405a86:	f7ff f8e5 	bl	404c54 <_free_r>
  405a8a:	2300      	movs	r3, #0
  405a8c:	6463      	str	r3, [r4, #68]	; 0x44
  405a8e:	f7fe ffe7 	bl	404a60 <__sfp_lock_acquire>
  405a92:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405a94:	2200      	movs	r2, #0
  405a96:	07db      	lsls	r3, r3, #31
  405a98:	81a2      	strh	r2, [r4, #12]
  405a9a:	d50e      	bpl.n	405aba <_fclose_r+0x9a>
  405a9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405a9e:	f7ff fb71 	bl	405184 <__retarget_lock_close_recursive>
  405aa2:	f7fe ffe3 	bl	404a6c <__sfp_lock_release>
  405aa6:	4630      	mov	r0, r6
  405aa8:	bd70      	pop	{r4, r5, r6, pc}
  405aaa:	f7fe ffad 	bl	404a08 <__sinit>
  405aae:	e7bf      	b.n	405a30 <_fclose_r+0x10>
  405ab0:	6921      	ldr	r1, [r4, #16]
  405ab2:	4628      	mov	r0, r5
  405ab4:	f7ff f8ce 	bl	404c54 <_free_r>
  405ab8:	e7d7      	b.n	405a6a <_fclose_r+0x4a>
  405aba:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405abc:	f7ff fb66 	bl	40518c <__retarget_lock_release_recursive>
  405ac0:	e7ec      	b.n	405a9c <_fclose_r+0x7c>
  405ac2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405ac4:	f7ff fb60 	bl	405188 <__retarget_lock_acquire_recursive>
  405ac8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405acc:	2b00      	cmp	r3, #0
  405ace:	d1bb      	bne.n	405a48 <_fclose_r+0x28>
  405ad0:	6e66      	ldr	r6, [r4, #100]	; 0x64
  405ad2:	f016 0601 	ands.w	r6, r6, #1
  405ad6:	d1b1      	bne.n	405a3c <_fclose_r+0x1c>
  405ad8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405ada:	f7ff fb57 	bl	40518c <__retarget_lock_release_recursive>
  405ade:	4630      	mov	r0, r6
  405ae0:	bd70      	pop	{r4, r5, r6, pc}
  405ae2:	bf00      	nop

00405ae4 <_fstat_r>:
  405ae4:	b538      	push	{r3, r4, r5, lr}
  405ae6:	460b      	mov	r3, r1
  405ae8:	4c07      	ldr	r4, [pc, #28]	; (405b08 <_fstat_r+0x24>)
  405aea:	4605      	mov	r5, r0
  405aec:	4611      	mov	r1, r2
  405aee:	4618      	mov	r0, r3
  405af0:	2300      	movs	r3, #0
  405af2:	6023      	str	r3, [r4, #0]
  405af4:	f7fb f8ae 	bl	400c54 <_fstat>
  405af8:	1c43      	adds	r3, r0, #1
  405afa:	d000      	beq.n	405afe <_fstat_r+0x1a>
  405afc:	bd38      	pop	{r3, r4, r5, pc}
  405afe:	6823      	ldr	r3, [r4, #0]
  405b00:	2b00      	cmp	r3, #0
  405b02:	d0fb      	beq.n	405afc <_fstat_r+0x18>
  405b04:	602b      	str	r3, [r5, #0]
  405b06:	bd38      	pop	{r3, r4, r5, pc}
  405b08:	20400c3c 	.word	0x20400c3c

00405b0c <_isatty_r>:
  405b0c:	b538      	push	{r3, r4, r5, lr}
  405b0e:	4c07      	ldr	r4, [pc, #28]	; (405b2c <_isatty_r+0x20>)
  405b10:	2300      	movs	r3, #0
  405b12:	4605      	mov	r5, r0
  405b14:	4608      	mov	r0, r1
  405b16:	6023      	str	r3, [r4, #0]
  405b18:	f7fb f8a2 	bl	400c60 <_isatty>
  405b1c:	1c43      	adds	r3, r0, #1
  405b1e:	d000      	beq.n	405b22 <_isatty_r+0x16>
  405b20:	bd38      	pop	{r3, r4, r5, pc}
  405b22:	6823      	ldr	r3, [r4, #0]
  405b24:	2b00      	cmp	r3, #0
  405b26:	d0fb      	beq.n	405b20 <_isatty_r+0x14>
  405b28:	602b      	str	r3, [r5, #0]
  405b2a:	bd38      	pop	{r3, r4, r5, pc}
  405b2c:	20400c3c 	.word	0x20400c3c

00405b30 <_lseek_r>:
  405b30:	b570      	push	{r4, r5, r6, lr}
  405b32:	460d      	mov	r5, r1
  405b34:	4c08      	ldr	r4, [pc, #32]	; (405b58 <_lseek_r+0x28>)
  405b36:	4611      	mov	r1, r2
  405b38:	4606      	mov	r6, r0
  405b3a:	461a      	mov	r2, r3
  405b3c:	4628      	mov	r0, r5
  405b3e:	2300      	movs	r3, #0
  405b40:	6023      	str	r3, [r4, #0]
  405b42:	f7fb f88f 	bl	400c64 <_lseek>
  405b46:	1c43      	adds	r3, r0, #1
  405b48:	d000      	beq.n	405b4c <_lseek_r+0x1c>
  405b4a:	bd70      	pop	{r4, r5, r6, pc}
  405b4c:	6823      	ldr	r3, [r4, #0]
  405b4e:	2b00      	cmp	r3, #0
  405b50:	d0fb      	beq.n	405b4a <_lseek_r+0x1a>
  405b52:	6033      	str	r3, [r6, #0]
  405b54:	bd70      	pop	{r4, r5, r6, pc}
  405b56:	bf00      	nop
  405b58:	20400c3c 	.word	0x20400c3c

00405b5c <_read_r>:
  405b5c:	b570      	push	{r4, r5, r6, lr}
  405b5e:	460d      	mov	r5, r1
  405b60:	4c08      	ldr	r4, [pc, #32]	; (405b84 <_read_r+0x28>)
  405b62:	4611      	mov	r1, r2
  405b64:	4606      	mov	r6, r0
  405b66:	461a      	mov	r2, r3
  405b68:	4628      	mov	r0, r5
  405b6a:	2300      	movs	r3, #0
  405b6c:	6023      	str	r3, [r4, #0]
  405b6e:	f7fa fb55 	bl	40021c <_read>
  405b72:	1c43      	adds	r3, r0, #1
  405b74:	d000      	beq.n	405b78 <_read_r+0x1c>
  405b76:	bd70      	pop	{r4, r5, r6, pc}
  405b78:	6823      	ldr	r3, [r4, #0]
  405b7a:	2b00      	cmp	r3, #0
  405b7c:	d0fb      	beq.n	405b76 <_read_r+0x1a>
  405b7e:	6033      	str	r3, [r6, #0]
  405b80:	bd70      	pop	{r4, r5, r6, pc}
  405b82:	bf00      	nop
  405b84:	20400c3c 	.word	0x20400c3c

00405b88 <__aeabi_uldivmod>:
  405b88:	b953      	cbnz	r3, 405ba0 <__aeabi_uldivmod+0x18>
  405b8a:	b94a      	cbnz	r2, 405ba0 <__aeabi_uldivmod+0x18>
  405b8c:	2900      	cmp	r1, #0
  405b8e:	bf08      	it	eq
  405b90:	2800      	cmpeq	r0, #0
  405b92:	bf1c      	itt	ne
  405b94:	f04f 31ff 	movne.w	r1, #4294967295
  405b98:	f04f 30ff 	movne.w	r0, #4294967295
  405b9c:	f000 b97a 	b.w	405e94 <__aeabi_idiv0>
  405ba0:	f1ad 0c08 	sub.w	ip, sp, #8
  405ba4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  405ba8:	f000 f806 	bl	405bb8 <__udivmoddi4>
  405bac:	f8dd e004 	ldr.w	lr, [sp, #4]
  405bb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  405bb4:	b004      	add	sp, #16
  405bb6:	4770      	bx	lr

00405bb8 <__udivmoddi4>:
  405bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405bbc:	468c      	mov	ip, r1
  405bbe:	460d      	mov	r5, r1
  405bc0:	4604      	mov	r4, r0
  405bc2:	9e08      	ldr	r6, [sp, #32]
  405bc4:	2b00      	cmp	r3, #0
  405bc6:	d151      	bne.n	405c6c <__udivmoddi4+0xb4>
  405bc8:	428a      	cmp	r2, r1
  405bca:	4617      	mov	r7, r2
  405bcc:	d96d      	bls.n	405caa <__udivmoddi4+0xf2>
  405bce:	fab2 fe82 	clz	lr, r2
  405bd2:	f1be 0f00 	cmp.w	lr, #0
  405bd6:	d00b      	beq.n	405bf0 <__udivmoddi4+0x38>
  405bd8:	f1ce 0c20 	rsb	ip, lr, #32
  405bdc:	fa01 f50e 	lsl.w	r5, r1, lr
  405be0:	fa20 fc0c 	lsr.w	ip, r0, ip
  405be4:	fa02 f70e 	lsl.w	r7, r2, lr
  405be8:	ea4c 0c05 	orr.w	ip, ip, r5
  405bec:	fa00 f40e 	lsl.w	r4, r0, lr
  405bf0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  405bf4:	0c25      	lsrs	r5, r4, #16
  405bf6:	fbbc f8fa 	udiv	r8, ip, sl
  405bfa:	fa1f f987 	uxth.w	r9, r7
  405bfe:	fb0a cc18 	mls	ip, sl, r8, ip
  405c02:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  405c06:	fb08 f309 	mul.w	r3, r8, r9
  405c0a:	42ab      	cmp	r3, r5
  405c0c:	d90a      	bls.n	405c24 <__udivmoddi4+0x6c>
  405c0e:	19ed      	adds	r5, r5, r7
  405c10:	f108 32ff 	add.w	r2, r8, #4294967295
  405c14:	f080 8123 	bcs.w	405e5e <__udivmoddi4+0x2a6>
  405c18:	42ab      	cmp	r3, r5
  405c1a:	f240 8120 	bls.w	405e5e <__udivmoddi4+0x2a6>
  405c1e:	f1a8 0802 	sub.w	r8, r8, #2
  405c22:	443d      	add	r5, r7
  405c24:	1aed      	subs	r5, r5, r3
  405c26:	b2a4      	uxth	r4, r4
  405c28:	fbb5 f0fa 	udiv	r0, r5, sl
  405c2c:	fb0a 5510 	mls	r5, sl, r0, r5
  405c30:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  405c34:	fb00 f909 	mul.w	r9, r0, r9
  405c38:	45a1      	cmp	r9, r4
  405c3a:	d909      	bls.n	405c50 <__udivmoddi4+0x98>
  405c3c:	19e4      	adds	r4, r4, r7
  405c3e:	f100 33ff 	add.w	r3, r0, #4294967295
  405c42:	f080 810a 	bcs.w	405e5a <__udivmoddi4+0x2a2>
  405c46:	45a1      	cmp	r9, r4
  405c48:	f240 8107 	bls.w	405e5a <__udivmoddi4+0x2a2>
  405c4c:	3802      	subs	r0, #2
  405c4e:	443c      	add	r4, r7
  405c50:	eba4 0409 	sub.w	r4, r4, r9
  405c54:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  405c58:	2100      	movs	r1, #0
  405c5a:	2e00      	cmp	r6, #0
  405c5c:	d061      	beq.n	405d22 <__udivmoddi4+0x16a>
  405c5e:	fa24 f40e 	lsr.w	r4, r4, lr
  405c62:	2300      	movs	r3, #0
  405c64:	6034      	str	r4, [r6, #0]
  405c66:	6073      	str	r3, [r6, #4]
  405c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405c6c:	428b      	cmp	r3, r1
  405c6e:	d907      	bls.n	405c80 <__udivmoddi4+0xc8>
  405c70:	2e00      	cmp	r6, #0
  405c72:	d054      	beq.n	405d1e <__udivmoddi4+0x166>
  405c74:	2100      	movs	r1, #0
  405c76:	e886 0021 	stmia.w	r6, {r0, r5}
  405c7a:	4608      	mov	r0, r1
  405c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405c80:	fab3 f183 	clz	r1, r3
  405c84:	2900      	cmp	r1, #0
  405c86:	f040 808e 	bne.w	405da6 <__udivmoddi4+0x1ee>
  405c8a:	42ab      	cmp	r3, r5
  405c8c:	d302      	bcc.n	405c94 <__udivmoddi4+0xdc>
  405c8e:	4282      	cmp	r2, r0
  405c90:	f200 80fa 	bhi.w	405e88 <__udivmoddi4+0x2d0>
  405c94:	1a84      	subs	r4, r0, r2
  405c96:	eb65 0503 	sbc.w	r5, r5, r3
  405c9a:	2001      	movs	r0, #1
  405c9c:	46ac      	mov	ip, r5
  405c9e:	2e00      	cmp	r6, #0
  405ca0:	d03f      	beq.n	405d22 <__udivmoddi4+0x16a>
  405ca2:	e886 1010 	stmia.w	r6, {r4, ip}
  405ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405caa:	b912      	cbnz	r2, 405cb2 <__udivmoddi4+0xfa>
  405cac:	2701      	movs	r7, #1
  405cae:	fbb7 f7f2 	udiv	r7, r7, r2
  405cb2:	fab7 fe87 	clz	lr, r7
  405cb6:	f1be 0f00 	cmp.w	lr, #0
  405cba:	d134      	bne.n	405d26 <__udivmoddi4+0x16e>
  405cbc:	1beb      	subs	r3, r5, r7
  405cbe:	0c3a      	lsrs	r2, r7, #16
  405cc0:	fa1f fc87 	uxth.w	ip, r7
  405cc4:	2101      	movs	r1, #1
  405cc6:	fbb3 f8f2 	udiv	r8, r3, r2
  405cca:	0c25      	lsrs	r5, r4, #16
  405ccc:	fb02 3318 	mls	r3, r2, r8, r3
  405cd0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  405cd4:	fb0c f308 	mul.w	r3, ip, r8
  405cd8:	42ab      	cmp	r3, r5
  405cda:	d907      	bls.n	405cec <__udivmoddi4+0x134>
  405cdc:	19ed      	adds	r5, r5, r7
  405cde:	f108 30ff 	add.w	r0, r8, #4294967295
  405ce2:	d202      	bcs.n	405cea <__udivmoddi4+0x132>
  405ce4:	42ab      	cmp	r3, r5
  405ce6:	f200 80d1 	bhi.w	405e8c <__udivmoddi4+0x2d4>
  405cea:	4680      	mov	r8, r0
  405cec:	1aed      	subs	r5, r5, r3
  405cee:	b2a3      	uxth	r3, r4
  405cf0:	fbb5 f0f2 	udiv	r0, r5, r2
  405cf4:	fb02 5510 	mls	r5, r2, r0, r5
  405cf8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  405cfc:	fb0c fc00 	mul.w	ip, ip, r0
  405d00:	45a4      	cmp	ip, r4
  405d02:	d907      	bls.n	405d14 <__udivmoddi4+0x15c>
  405d04:	19e4      	adds	r4, r4, r7
  405d06:	f100 33ff 	add.w	r3, r0, #4294967295
  405d0a:	d202      	bcs.n	405d12 <__udivmoddi4+0x15a>
  405d0c:	45a4      	cmp	ip, r4
  405d0e:	f200 80b8 	bhi.w	405e82 <__udivmoddi4+0x2ca>
  405d12:	4618      	mov	r0, r3
  405d14:	eba4 040c 	sub.w	r4, r4, ip
  405d18:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  405d1c:	e79d      	b.n	405c5a <__udivmoddi4+0xa2>
  405d1e:	4631      	mov	r1, r6
  405d20:	4630      	mov	r0, r6
  405d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405d26:	f1ce 0420 	rsb	r4, lr, #32
  405d2a:	fa05 f30e 	lsl.w	r3, r5, lr
  405d2e:	fa07 f70e 	lsl.w	r7, r7, lr
  405d32:	fa20 f804 	lsr.w	r8, r0, r4
  405d36:	0c3a      	lsrs	r2, r7, #16
  405d38:	fa25 f404 	lsr.w	r4, r5, r4
  405d3c:	ea48 0803 	orr.w	r8, r8, r3
  405d40:	fbb4 f1f2 	udiv	r1, r4, r2
  405d44:	ea4f 4518 	mov.w	r5, r8, lsr #16
  405d48:	fb02 4411 	mls	r4, r2, r1, r4
  405d4c:	fa1f fc87 	uxth.w	ip, r7
  405d50:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  405d54:	fb01 f30c 	mul.w	r3, r1, ip
  405d58:	42ab      	cmp	r3, r5
  405d5a:	fa00 f40e 	lsl.w	r4, r0, lr
  405d5e:	d909      	bls.n	405d74 <__udivmoddi4+0x1bc>
  405d60:	19ed      	adds	r5, r5, r7
  405d62:	f101 30ff 	add.w	r0, r1, #4294967295
  405d66:	f080 808a 	bcs.w	405e7e <__udivmoddi4+0x2c6>
  405d6a:	42ab      	cmp	r3, r5
  405d6c:	f240 8087 	bls.w	405e7e <__udivmoddi4+0x2c6>
  405d70:	3902      	subs	r1, #2
  405d72:	443d      	add	r5, r7
  405d74:	1aeb      	subs	r3, r5, r3
  405d76:	fa1f f588 	uxth.w	r5, r8
  405d7a:	fbb3 f0f2 	udiv	r0, r3, r2
  405d7e:	fb02 3310 	mls	r3, r2, r0, r3
  405d82:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  405d86:	fb00 f30c 	mul.w	r3, r0, ip
  405d8a:	42ab      	cmp	r3, r5
  405d8c:	d907      	bls.n	405d9e <__udivmoddi4+0x1e6>
  405d8e:	19ed      	adds	r5, r5, r7
  405d90:	f100 38ff 	add.w	r8, r0, #4294967295
  405d94:	d26f      	bcs.n	405e76 <__udivmoddi4+0x2be>
  405d96:	42ab      	cmp	r3, r5
  405d98:	d96d      	bls.n	405e76 <__udivmoddi4+0x2be>
  405d9a:	3802      	subs	r0, #2
  405d9c:	443d      	add	r5, r7
  405d9e:	1aeb      	subs	r3, r5, r3
  405da0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  405da4:	e78f      	b.n	405cc6 <__udivmoddi4+0x10e>
  405da6:	f1c1 0720 	rsb	r7, r1, #32
  405daa:	fa22 f807 	lsr.w	r8, r2, r7
  405dae:	408b      	lsls	r3, r1
  405db0:	fa05 f401 	lsl.w	r4, r5, r1
  405db4:	ea48 0303 	orr.w	r3, r8, r3
  405db8:	fa20 fe07 	lsr.w	lr, r0, r7
  405dbc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  405dc0:	40fd      	lsrs	r5, r7
  405dc2:	ea4e 0e04 	orr.w	lr, lr, r4
  405dc6:	fbb5 f9fc 	udiv	r9, r5, ip
  405dca:	ea4f 441e 	mov.w	r4, lr, lsr #16
  405dce:	fb0c 5519 	mls	r5, ip, r9, r5
  405dd2:	fa1f f883 	uxth.w	r8, r3
  405dd6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  405dda:	fb09 f408 	mul.w	r4, r9, r8
  405dde:	42ac      	cmp	r4, r5
  405de0:	fa02 f201 	lsl.w	r2, r2, r1
  405de4:	fa00 fa01 	lsl.w	sl, r0, r1
  405de8:	d908      	bls.n	405dfc <__udivmoddi4+0x244>
  405dea:	18ed      	adds	r5, r5, r3
  405dec:	f109 30ff 	add.w	r0, r9, #4294967295
  405df0:	d243      	bcs.n	405e7a <__udivmoddi4+0x2c2>
  405df2:	42ac      	cmp	r4, r5
  405df4:	d941      	bls.n	405e7a <__udivmoddi4+0x2c2>
  405df6:	f1a9 0902 	sub.w	r9, r9, #2
  405dfa:	441d      	add	r5, r3
  405dfc:	1b2d      	subs	r5, r5, r4
  405dfe:	fa1f fe8e 	uxth.w	lr, lr
  405e02:	fbb5 f0fc 	udiv	r0, r5, ip
  405e06:	fb0c 5510 	mls	r5, ip, r0, r5
  405e0a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  405e0e:	fb00 f808 	mul.w	r8, r0, r8
  405e12:	45a0      	cmp	r8, r4
  405e14:	d907      	bls.n	405e26 <__udivmoddi4+0x26e>
  405e16:	18e4      	adds	r4, r4, r3
  405e18:	f100 35ff 	add.w	r5, r0, #4294967295
  405e1c:	d229      	bcs.n	405e72 <__udivmoddi4+0x2ba>
  405e1e:	45a0      	cmp	r8, r4
  405e20:	d927      	bls.n	405e72 <__udivmoddi4+0x2ba>
  405e22:	3802      	subs	r0, #2
  405e24:	441c      	add	r4, r3
  405e26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  405e2a:	eba4 0408 	sub.w	r4, r4, r8
  405e2e:	fba0 8902 	umull	r8, r9, r0, r2
  405e32:	454c      	cmp	r4, r9
  405e34:	46c6      	mov	lr, r8
  405e36:	464d      	mov	r5, r9
  405e38:	d315      	bcc.n	405e66 <__udivmoddi4+0x2ae>
  405e3a:	d012      	beq.n	405e62 <__udivmoddi4+0x2aa>
  405e3c:	b156      	cbz	r6, 405e54 <__udivmoddi4+0x29c>
  405e3e:	ebba 030e 	subs.w	r3, sl, lr
  405e42:	eb64 0405 	sbc.w	r4, r4, r5
  405e46:	fa04 f707 	lsl.w	r7, r4, r7
  405e4a:	40cb      	lsrs	r3, r1
  405e4c:	431f      	orrs	r7, r3
  405e4e:	40cc      	lsrs	r4, r1
  405e50:	6037      	str	r7, [r6, #0]
  405e52:	6074      	str	r4, [r6, #4]
  405e54:	2100      	movs	r1, #0
  405e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405e5a:	4618      	mov	r0, r3
  405e5c:	e6f8      	b.n	405c50 <__udivmoddi4+0x98>
  405e5e:	4690      	mov	r8, r2
  405e60:	e6e0      	b.n	405c24 <__udivmoddi4+0x6c>
  405e62:	45c2      	cmp	sl, r8
  405e64:	d2ea      	bcs.n	405e3c <__udivmoddi4+0x284>
  405e66:	ebb8 0e02 	subs.w	lr, r8, r2
  405e6a:	eb69 0503 	sbc.w	r5, r9, r3
  405e6e:	3801      	subs	r0, #1
  405e70:	e7e4      	b.n	405e3c <__udivmoddi4+0x284>
  405e72:	4628      	mov	r0, r5
  405e74:	e7d7      	b.n	405e26 <__udivmoddi4+0x26e>
  405e76:	4640      	mov	r0, r8
  405e78:	e791      	b.n	405d9e <__udivmoddi4+0x1e6>
  405e7a:	4681      	mov	r9, r0
  405e7c:	e7be      	b.n	405dfc <__udivmoddi4+0x244>
  405e7e:	4601      	mov	r1, r0
  405e80:	e778      	b.n	405d74 <__udivmoddi4+0x1bc>
  405e82:	3802      	subs	r0, #2
  405e84:	443c      	add	r4, r7
  405e86:	e745      	b.n	405d14 <__udivmoddi4+0x15c>
  405e88:	4608      	mov	r0, r1
  405e8a:	e708      	b.n	405c9e <__udivmoddi4+0xe6>
  405e8c:	f1a8 0802 	sub.w	r8, r8, #2
  405e90:	443d      	add	r5, r7
  405e92:	e72b      	b.n	405cec <__udivmoddi4+0x134>

00405e94 <__aeabi_idiv0>:
  405e94:	4770      	bx	lr
  405e96:	bf00      	nop

00405e98 <CSWTCH.7>:
  405e98:	0100 0000 0300 0000 0200 0000 4449 454c     ............IDLE
  405ea8:	0000 0000 6d54 5172 0000 0000 6d54 2072     ....TmrQ....Tmr 
  405eb8:	7653 0063 7953 2073 6e69 7469 6f20 206b     Svc.Sys init ok 
  405ec8:	000a 0000 6166 686c 2061 6d65 6320 6972     ....falha em cri
  405ed8:	7261 6f20 7320 6d65 6661 726f 206f 000a     ar o semaforo ..
  405ee8:	6166 686c 2061 6d65 6320 6972 7261 6120     falha em criar a
  405ef8:	7120 6575 6575 0a20 0000 0000 654c 0064      queue .....Led.
  405f08:	6146 6c69 6465 7420 206f 7263 6165 6574     Failed to create
  405f18:	7420 7365 2074 656c 2064 6174 6b73 0a0d      test led task..
  405f28:	0000 0000 6174 6b73 6c20 6465 6320 6572     ....task led cre
  405f38:	7461 6465 0d20 000a 5542 0054 6146 6c69     ated ...BUT.Fail
  405f48:	6465 7420 206f 7263 6165 6574 5520 7261     ed to create Uar
  405f58:	5474 2078 6174 6b73 0a0d 0000 6174 6b73     tTx task....task
  405f68:	6c20 6465 6220 7475 0d20 000a 6174 6b73      led but ...task
  405f78:	625f 7475 203a 6425 0a20 0000 6174 6b73     _but: %d ...task
  405f88:	6c5f 6465 203a 6425 0a20 0000 7473 6361     _led: %d ...stac
  405f98:	206b 766f 7265 6c66 776f 2520 2078 7325     k overflow %x %s
  405fa8:	0a0d 0000                                   ....

00405fac <_global_impure_ptr>:
  405fac:	0010 2040 3130 3332 3534 3736 3938 4241     ..@ 0123456789AB
  405fbc:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  405fcc:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  405fdc:	296c 0000                                   l)..

00405fe0 <blanks.7217>:
  405fe0:	2020 2020 2020 2020 2020 2020 2020 2020                     

00405ff0 <zeroes.7218>:
  405ff0:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  406000:	0043 0000 4f50 4953 0058 0000 002e 0000     C...POSIX.......

00406010 <_ctype_>:
  406010:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  406020:	2020 2020 2020 2020 2020 2020 2020 2020                     
  406030:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  406040:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  406050:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  406060:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  406070:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  406080:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  406090:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00406114 <_init>:
  406114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406116:	bf00      	nop
  406118:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40611a:	bc08      	pop	{r3}
  40611c:	469e      	mov	lr, r3
  40611e:	4770      	bx	lr

00406120 <__init_array_start>:
  406120:	004047f9 	.word	0x004047f9

00406124 <__frame_dummy_init_array_entry>:
  406124:	00400165                                e.@.

00406128 <_fini>:
  406128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40612a:	bf00      	nop
  40612c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40612e:	bc08      	pop	{r3}
  406130:	469e      	mov	lr, r3
  406132:	4770      	bx	lr

00406134 <__fini_array_start>:
  406134:	00400141 	.word	0x00400141
