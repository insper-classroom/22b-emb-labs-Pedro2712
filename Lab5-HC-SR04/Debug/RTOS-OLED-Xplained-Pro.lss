
RTOS-OLED-Xplained-Pro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a974  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040a974  0040a974  0001a974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d0  20400000  0040a97c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000518  204009d0  0040b34c  000209d0  2**2
                  ALLOC
  4 .stack        00002000  20400ee8  0040b864  000209d0  2**0
                  ALLOC
  5 .heap         00000200  20402ee8  0040d864  000209d0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209d0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209fe  2**0
                  CONTENTS, READONLY
  8 .debug_info   0002e9f4  00000000  00000000  00020a57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000061ba  00000000  00000000  0004f44b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000e42f  00000000  00000000  00055605  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001220  00000000  00000000  00063a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001430  00000000  00000000  00064c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00028477  00000000  00000000  00066084  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001b22e  00000000  00000000  0008e4fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000986df  00000000  00000000  000a9729  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003f70  00000000  00000000  00141e08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	e8 2e 40 20 c1 18 40 00 bf 18 40 00 bf 18 40 00     ..@ ..@...@...@.
  400010:	bf 18 40 00 bf 18 40 00 bf 18 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	99 1c 40 00 bf 18 40 00 00 00 00 00 39 1d 40 00     ..@...@.....9.@.
  40003c:	a1 1d 40 00 bf 18 40 00 bf 18 40 00 bf 18 40 00     ..@...@...@...@.
  40004c:	bf 18 40 00 bf 18 40 00 bf 18 40 00 bf 18 40 00     ..@...@...@...@.
  40005c:	bf 18 40 00 bf 18 40 00 00 00 00 00 b1 15 40 00     ..@...@.......@.
  40006c:	c5 15 40 00 d9 15 40 00 bf 18 40 00 bf 18 40 00     ..@...@...@...@.
  40007c:	bf 18 40 00 ed 15 40 00 01 16 40 00 bf 18 40 00     ..@...@...@...@.
  40008c:	bf 18 40 00 bf 18 40 00 bf 18 40 00 bf 18 40 00     ..@...@...@...@.
  40009c:	bf 18 40 00 bf 18 40 00 bf 18 40 00 bf 18 40 00     ..@...@...@...@.
  4000ac:	bf 18 40 00 bf 18 40 00 a5 07 40 00 bf 18 40 00     ..@...@...@...@.
  4000bc:	bf 18 40 00 bf 18 40 00 bf 18 40 00 bf 18 40 00     ..@...@...@...@.
  4000cc:	bf 18 40 00 00 00 00 00 bf 18 40 00 00 00 00 00     ..@.......@.....
  4000dc:	bf 18 40 00 b9 07 40 00 bf 18 40 00 bf 18 40 00     ..@...@...@...@.
  4000ec:	bf 18 40 00 bf 18 40 00 bf 18 40 00 bf 18 40 00     ..@...@...@...@.
  4000fc:	bf 18 40 00 bf 18 40 00 bf 18 40 00 bf 18 40 00     ..@...@...@...@.
  40010c:	bf 18 40 00 bf 18 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 bf 18 40 00 bf 18 40 00 bf 18 40 00     ......@...@...@.
  40012c:	bf 18 40 00 bf 18 40 00 00 00 00 00 bf 18 40 00     ..@...@.......@.
  40013c:	bf 18 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009d0 	.word	0x204009d0
  40015c:	00000000 	.word	0x00000000
  400160:	0040a97c 	.word	0x0040a97c

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040a97c 	.word	0x0040a97c
  4001a0:	204009d4 	.word	0x204009d4
  4001a4:	0040a97c 	.word	0x0040a97c
  4001a8:	00000000 	.word	0x00000000

004001ac <ili9341_send_command>:
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4001ac:	2208      	movs	r2, #8
  4001ae:	4b0b      	ldr	r3, [pc, #44]	; (4001dc <ili9341_send_command+0x30>)
  4001b0:	635a      	str	r2, [r3, #52]	; 0x34
  4001b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4001b6:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
  4001ba:	635a      	str	r2, [r3, #52]	; 0x34
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4001bc:	4a08      	ldr	r2, [pc, #32]	; (4001e0 <ili9341_send_command+0x34>)
  4001be:	6913      	ldr	r3, [r2, #16]
		/* Do nothing */
	}
#  endif
#elif defined(CONF_ILI9341_SPI)
	/* Wait for TX to complete */
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  4001c0:	f413 7f00 	tst.w	r3, #512	; 0x200
  4001c4:	d0fb      	beq.n	4001be <ili9341_send_command+0x12>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4001c6:	4b06      	ldr	r3, [pc, #24]	; (4001e0 <ili9341_send_command+0x34>)
  4001c8:	60d8      	str	r0, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4001ca:	461a      	mov	r2, r3
  4001cc:	6913      	ldr	r3, [r2, #16]
  4001ce:	f413 7f00 	tst.w	r3, #512	; 0x200
  4001d2:	d0fb      	beq.n	4001cc <ili9341_send_command+0x20>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4001d4:	2208      	movs	r2, #8
  4001d6:	4b01      	ldr	r3, [pc, #4]	; (4001dc <ili9341_send_command+0x30>)
  4001d8:	631a      	str	r2, [r3, #48]	; 0x30
  4001da:	4770      	bx	lr
  4001dc:	400e1000 	.word	0x400e1000
  4001e0:	40008000 	.word	0x40008000

004001e4 <ili9341_send_draw_limits>:
 * drawing limits to the display, as set through the various limit functions.
 *
 * \param send_end_limits  True to also send the lower-right drawing limits
 */
static void ili9341_send_draw_limits(const bool send_end_limits)
{
  4001e4:	b510      	push	{r4, lr}
  4001e6:	4604      	mov	r4, r0
	ili9341_send_command(ILI9341_CMD_COLUMN_ADDRESS_SET);
  4001e8:	202a      	movs	r0, #42	; 0x2a
  4001ea:	4b35      	ldr	r3, [pc, #212]	; (4002c0 <ili9341_send_draw_limits+0xdc>)
  4001ec:	4798      	blx	r3
	ili9341_send_byte(limit_start_x >> 8);
  4001ee:	4b35      	ldr	r3, [pc, #212]	; (4002c4 <ili9341_send_draw_limits+0xe0>)
  4001f0:	f9b3 1000 	ldrsh.w	r1, [r3]
  4001f4:	f3c1 2007 	ubfx	r0, r1, #8, #8
  4001f8:	4a33      	ldr	r2, [pc, #204]	; (4002c8 <ili9341_send_draw_limits+0xe4>)
  4001fa:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  4001fc:	f413 7f00 	tst.w	r3, #512	; 0x200
  400200:	d0fb      	beq.n	4001fa <ili9341_send_draw_limits+0x16>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400202:	4b31      	ldr	r3, [pc, #196]	; (4002c8 <ili9341_send_draw_limits+0xe4>)
  400204:	60d8      	str	r0, [r3, #12]
	ili9341_send_byte(limit_start_x & 0xFF);
  400206:	b2c9      	uxtb	r1, r1
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400208:	461a      	mov	r2, r3
  40020a:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  40020c:	f413 7f00 	tst.w	r3, #512	; 0x200
  400210:	d0fb      	beq.n	40020a <ili9341_send_draw_limits+0x26>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400212:	4b2d      	ldr	r3, [pc, #180]	; (4002c8 <ili9341_send_draw_limits+0xe4>)
  400214:	60d9      	str	r1, [r3, #12]
	if (send_end_limits) {
  400216:	b19c      	cbz	r4, 400240 <ili9341_send_draw_limits+0x5c>
		ili9341_send_byte(limit_end_x >> 8);
  400218:	4b2c      	ldr	r3, [pc, #176]	; (4002cc <ili9341_send_draw_limits+0xe8>)
  40021a:	f9b3 1000 	ldrsh.w	r1, [r3]
  40021e:	f3c1 2007 	ubfx	r0, r1, #8, #8
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400222:	4a29      	ldr	r2, [pc, #164]	; (4002c8 <ili9341_send_draw_limits+0xe4>)
  400224:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400226:	f413 7f00 	tst.w	r3, #512	; 0x200
  40022a:	d0fb      	beq.n	400224 <ili9341_send_draw_limits+0x40>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  40022c:	4b26      	ldr	r3, [pc, #152]	; (4002c8 <ili9341_send_draw_limits+0xe4>)
  40022e:	60d8      	str	r0, [r3, #12]
		ili9341_send_byte(limit_end_x & 0xFF);
  400230:	b2c9      	uxtb	r1, r1
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400232:	461a      	mov	r2, r3
  400234:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400236:	f413 7f00 	tst.w	r3, #512	; 0x200
  40023a:	d0fb      	beq.n	400234 <ili9341_send_draw_limits+0x50>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  40023c:	4b22      	ldr	r3, [pc, #136]	; (4002c8 <ili9341_send_draw_limits+0xe4>)
  40023e:	60d9      	str	r1, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400240:	4a21      	ldr	r2, [pc, #132]	; (4002c8 <ili9341_send_draw_limits+0xe4>)
  400242:	6913      	ldr	r3, [r2, #16]
  400244:	f413 7f00 	tst.w	r3, #512	; 0x200
  400248:	d0fb      	beq.n	400242 <ili9341_send_draw_limits+0x5e>
  40024a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40024e:	4b20      	ldr	r3, [pc, #128]	; (4002d0 <ili9341_send_draw_limits+0xec>)
  400250:	631a      	str	r2, [r3, #48]	; 0x30
	}
	ili9341_wait_for_send_done();
	ili9341_deselect_chip();

	ili9341_send_command(ILI9341_CMD_PAGE_ADDRESS_SET);
  400252:	202b      	movs	r0, #43	; 0x2b
  400254:	4b1a      	ldr	r3, [pc, #104]	; (4002c0 <ili9341_send_draw_limits+0xdc>)
  400256:	4798      	blx	r3
	ili9341_send_byte(limit_start_y >> 8);
  400258:	4b1e      	ldr	r3, [pc, #120]	; (4002d4 <ili9341_send_draw_limits+0xf0>)
  40025a:	f9b3 1000 	ldrsh.w	r1, [r3]
  40025e:	f3c1 2007 	ubfx	r0, r1, #8, #8
  400262:	4a19      	ldr	r2, [pc, #100]	; (4002c8 <ili9341_send_draw_limits+0xe4>)
  400264:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400266:	f413 7f00 	tst.w	r3, #512	; 0x200
  40026a:	d0fb      	beq.n	400264 <ili9341_send_draw_limits+0x80>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  40026c:	4b16      	ldr	r3, [pc, #88]	; (4002c8 <ili9341_send_draw_limits+0xe4>)
  40026e:	60d8      	str	r0, [r3, #12]
	ili9341_send_byte(limit_start_y & 0xFF);
  400270:	b2c9      	uxtb	r1, r1
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400272:	461a      	mov	r2, r3
  400274:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400276:	f413 7f00 	tst.w	r3, #512	; 0x200
  40027a:	d0fb      	beq.n	400274 <ili9341_send_draw_limits+0x90>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  40027c:	4b12      	ldr	r3, [pc, #72]	; (4002c8 <ili9341_send_draw_limits+0xe4>)
  40027e:	60d9      	str	r1, [r3, #12]
	if (send_end_limits) {
  400280:	b19c      	cbz	r4, 4002aa <ili9341_send_draw_limits+0xc6>
		ili9341_send_byte(limit_end_y >> 8);
  400282:	4b15      	ldr	r3, [pc, #84]	; (4002d8 <ili9341_send_draw_limits+0xf4>)
  400284:	f9b3 1000 	ldrsh.w	r1, [r3]
  400288:	f3c1 2007 	ubfx	r0, r1, #8, #8
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  40028c:	4a0e      	ldr	r2, [pc, #56]	; (4002c8 <ili9341_send_draw_limits+0xe4>)
  40028e:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400290:	f413 7f00 	tst.w	r3, #512	; 0x200
  400294:	d0fb      	beq.n	40028e <ili9341_send_draw_limits+0xaa>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400296:	4b0c      	ldr	r3, [pc, #48]	; (4002c8 <ili9341_send_draw_limits+0xe4>)
  400298:	60d8      	str	r0, [r3, #12]
		ili9341_send_byte(limit_end_y & 0xFF);
  40029a:	b2c9      	uxtb	r1, r1
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  40029c:	461a      	mov	r2, r3
  40029e:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  4002a0:	f413 7f00 	tst.w	r3, #512	; 0x200
  4002a4:	d0fb      	beq.n	40029e <ili9341_send_draw_limits+0xba>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4002a6:	4b08      	ldr	r3, [pc, #32]	; (4002c8 <ili9341_send_draw_limits+0xe4>)
  4002a8:	60d9      	str	r1, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4002aa:	4a07      	ldr	r2, [pc, #28]	; (4002c8 <ili9341_send_draw_limits+0xe4>)
  4002ac:	6913      	ldr	r3, [r2, #16]
  4002ae:	f413 7f00 	tst.w	r3, #512	; 0x200
  4002b2:	d0fb      	beq.n	4002ac <ili9341_send_draw_limits+0xc8>
  4002b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4002b8:	4b05      	ldr	r3, [pc, #20]	; (4002d0 <ili9341_send_draw_limits+0xec>)
  4002ba:	631a      	str	r2, [r3, #48]	; 0x30
  4002bc:	bd10      	pop	{r4, pc}
  4002be:	bf00      	nop
  4002c0:	004001ad 	.word	0x004001ad
  4002c4:	204009f0 	.word	0x204009f0
  4002c8:	40008000 	.word	0x40008000
  4002cc:	204009ec 	.word	0x204009ec
  4002d0:	400e0e00 	.word	0x400e0e00
  4002d4:	204009f2 	.word	0x204009f2
  4002d8:	204009ee 	.word	0x204009ee

004002dc <ili9341_set_limits>:
 * \param end_x The x coordinate of the bottom right corner
 * \param end_y The y coordinate of the bottom right corner
 */
void ili9341_set_limits(ili9341_coord_t start_x, ili9341_coord_t start_y,
		ili9341_coord_t end_x, ili9341_coord_t end_y)
{
  4002dc:	b510      	push	{r4, lr}
	limit_start_x = start_x;
  4002de:	4c06      	ldr	r4, [pc, #24]	; (4002f8 <ili9341_set_limits+0x1c>)
  4002e0:	8020      	strh	r0, [r4, #0]
	limit_start_y = start_y;
  4002e2:	4806      	ldr	r0, [pc, #24]	; (4002fc <ili9341_set_limits+0x20>)
  4002e4:	8001      	strh	r1, [r0, #0]
	limit_end_x = end_x;
  4002e6:	4906      	ldr	r1, [pc, #24]	; (400300 <ili9341_set_limits+0x24>)
  4002e8:	800a      	strh	r2, [r1, #0]
	limit_end_y = end_y;
  4002ea:	4a06      	ldr	r2, [pc, #24]	; (400304 <ili9341_set_limits+0x28>)
  4002ec:	8013      	strh	r3, [r2, #0]

	ili9341_send_draw_limits(true);
  4002ee:	2001      	movs	r0, #1
  4002f0:	4b05      	ldr	r3, [pc, #20]	; (400308 <ili9341_set_limits+0x2c>)
  4002f2:	4798      	blx	r3
  4002f4:	bd10      	pop	{r4, pc}
  4002f6:	bf00      	nop
  4002f8:	204009f0 	.word	0x204009f0
  4002fc:	204009f2 	.word	0x204009f2
  400300:	204009ec 	.word	0x204009ec
  400304:	204009ee 	.word	0x204009ee
  400308:	004001e5 	.word	0x004001e5

0040030c <ili9341_set_orientation>:
 *
 * \param flags Orientation flags to use, see \ref ILI9341_FLIP_X, \ref ILI9341_FLIP_Y
 *        and \ref ILI9341_SWITCH_XY.
 */
void ili9341_set_orientation(uint8_t flags)
{
  40030c:	b510      	push	{r4, lr}
	uint8_t madctl = 0x48;

	/* Pretend the display is in landscape mode by default to match other display drivers */
	flags ^= ILI9341_SWITCH_XY | ILI9341_FLIP_X;
  40030e:	f080 0005 	eor.w	r0, r0, #5

	if (flags & ILI9341_FLIP_X) {
  400312:	f000 0301 	and.w	r3, r0, #1
		madctl &= ~(1 << 6);
  400316:	2b00      	cmp	r3, #0
  400318:	bf0c      	ite	eq
  40031a:	2448      	moveq	r4, #72	; 0x48
  40031c:	2408      	movne	r4, #8
	}

	if (flags & ILI9341_FLIP_Y) {
  40031e:	f010 0f02 	tst.w	r0, #2
		madctl |= 1 << 7;
  400322:	bf18      	it	ne
  400324:	f044 0480 	orrne.w	r4, r4, #128	; 0x80
	}

	if (flags & ILI9341_SWITCH_XY) {
  400328:	f010 0f04 	tst.w	r0, #4
		madctl |= 1 << 5;
  40032c:	bf18      	it	ne
  40032e:	f044 0420 	orrne.w	r4, r4, #32
	}

	ili9341_send_command(ILI9341_CMD_MEMORY_ACCESS_CONTROL);
  400332:	2036      	movs	r0, #54	; 0x36
  400334:	4b09      	ldr	r3, [pc, #36]	; (40035c <ili9341_set_orientation+0x50>)
  400336:	4798      	blx	r3
  400338:	4a09      	ldr	r2, [pc, #36]	; (400360 <ili9341_set_orientation+0x54>)
  40033a:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  40033c:	f413 7f00 	tst.w	r3, #512	; 0x200
  400340:	d0fb      	beq.n	40033a <ili9341_set_orientation+0x2e>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400342:	4b07      	ldr	r3, [pc, #28]	; (400360 <ili9341_set_orientation+0x54>)
  400344:	60dc      	str	r4, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400346:	461a      	mov	r2, r3
  400348:	6913      	ldr	r3, [r2, #16]
  40034a:	f413 7f00 	tst.w	r3, #512	; 0x200
  40034e:	d0fb      	beq.n	400348 <ili9341_set_orientation+0x3c>
  400350:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400354:	4b03      	ldr	r3, [pc, #12]	; (400364 <ili9341_set_orientation+0x58>)
  400356:	631a      	str	r2, [r3, #48]	; 0x30
  400358:	bd10      	pop	{r4, pc}
  40035a:	bf00      	nop
  40035c:	004001ad 	.word	0x004001ad
  400360:	40008000 	.word	0x40008000
  400364:	400e0e00 	.word	0x400e0e00

00400368 <ili9341_init>:
{
  400368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40036c:	b084      	sub	sp, #16
	struct spi_device device = {
  40036e:	2500      	movs	r5, #0
  400370:	ae04      	add	r6, sp, #16
  400372:	f846 5d04 	str.w	r5, [r6, #-4]!
	spi_master_init(CONF_ILI9341_SPI);
  400376:	4ca5      	ldr	r4, [pc, #660]	; (40060c <ili9341_init+0x2a4>)
  400378:	4620      	mov	r0, r4
  40037a:	4ba5      	ldr	r3, [pc, #660]	; (400610 <ili9341_init+0x2a8>)
  40037c:	4798      	blx	r3
	spi_master_setup_device(CONF_ILI9341_SPI, &device, spi_flags,
  40037e:	9500      	str	r5, [sp, #0]
  400380:	4ba4      	ldr	r3, [pc, #656]	; (400614 <ili9341_init+0x2ac>)
  400382:	462a      	mov	r2, r5
  400384:	4631      	mov	r1, r6
  400386:	4620      	mov	r0, r4
  400388:	4ea3      	ldr	r6, [pc, #652]	; (400618 <ili9341_init+0x2b0>)
  40038a:	47b0      	blx	r6
	p_spi->SPI_CR = SPI_CR_SPIEN;
  40038c:	2301      	movs	r3, #1
  40038e:	6023      	str	r3, [r4, #0]
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400390:	60e5      	str	r5, [r4, #12]
  400392:	4da2      	ldr	r5, [pc, #648]	; (40061c <ili9341_init+0x2b4>)
  400394:	f44f 5600 	mov.w	r6, #8192	; 0x2000
  400398:	632e      	str	r6, [r5, #48]	; 0x30
	delay_ms(10);
  40039a:	4fa1      	ldr	r7, [pc, #644]	; (400620 <ili9341_init+0x2b8>)
  40039c:	4638      	mov	r0, r7
  40039e:	4ca1      	ldr	r4, [pc, #644]	; (400624 <ili9341_init+0x2bc>)
  4003a0:	47a0      	blx	r4
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4003a2:	636e      	str	r6, [r5, #52]	; 0x34
	delay_ms(10);
  4003a4:	4638      	mov	r0, r7
  4003a6:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4003a8:	632e      	str	r6, [r5, #48]	; 0x30
	delay_ms(150);
  4003aa:	f8df 8288 	ldr.w	r8, [pc, #648]	; 400634 <ili9341_init+0x2cc>
  4003ae:	4640      	mov	r0, r8
  4003b0:	47a0      	blx	r4
	ili9341_send_command(ILI9341_CMD_SLEEP_OUT);
  4003b2:	2011      	movs	r0, #17
  4003b4:	4d9c      	ldr	r5, [pc, #624]	; (400628 <ili9341_init+0x2c0>)
  4003b6:	47a8      	blx	r5
  4003b8:	4e9c      	ldr	r6, [pc, #624]	; (40062c <ili9341_init+0x2c4>)
  4003ba:	f44f 6700 	mov.w	r7, #2048	; 0x800
  4003be:	6337      	str	r7, [r6, #48]	; 0x30
	delay_ms(150);
  4003c0:	4640      	mov	r0, r8
  4003c2:	47a0      	blx	r4
	ili9341_send_command(ILI9341_CMD_DISPLAY_ON);
  4003c4:	2029      	movs	r0, #41	; 0x29
  4003c6:	47a8      	blx	r5
  4003c8:	6337      	str	r7, [r6, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_A);
  4003ca:	20cd      	movs	r0, #205	; 0xcd
  4003cc:	47a8      	blx	r5
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4003ce:	4a8f      	ldr	r2, [pc, #572]	; (40060c <ili9341_init+0x2a4>)
  4003d0:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  4003d2:	f413 7f00 	tst.w	r3, #512	; 0x200
  4003d6:	d0fb      	beq.n	4003d0 <ili9341_init+0x68>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4003d8:	2239      	movs	r2, #57	; 0x39
  4003da:	4b8c      	ldr	r3, [pc, #560]	; (40060c <ili9341_init+0x2a4>)
  4003dc:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4003de:	461a      	mov	r2, r3
  4003e0:	6913      	ldr	r3, [r2, #16]
  4003e2:	f413 7f00 	tst.w	r3, #512	; 0x200
  4003e6:	d0fb      	beq.n	4003e0 <ili9341_init+0x78>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4003e8:	222c      	movs	r2, #44	; 0x2c
  4003ea:	4b88      	ldr	r3, [pc, #544]	; (40060c <ili9341_init+0x2a4>)
  4003ec:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4003ee:	461a      	mov	r2, r3
  4003f0:	6913      	ldr	r3, [r2, #16]
  4003f2:	f413 7f00 	tst.w	r3, #512	; 0x200
  4003f6:	d0fb      	beq.n	4003f0 <ili9341_init+0x88>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4003f8:	2200      	movs	r2, #0
  4003fa:	4b84      	ldr	r3, [pc, #528]	; (40060c <ili9341_init+0x2a4>)
  4003fc:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4003fe:	461a      	mov	r2, r3
  400400:	6913      	ldr	r3, [r2, #16]
  400402:	f413 7f00 	tst.w	r3, #512	; 0x200
  400406:	d0fb      	beq.n	400400 <ili9341_init+0x98>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400408:	2234      	movs	r2, #52	; 0x34
  40040a:	4b80      	ldr	r3, [pc, #512]	; (40060c <ili9341_init+0x2a4>)
  40040c:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  40040e:	461a      	mov	r2, r3
  400410:	6913      	ldr	r3, [r2, #16]
  400412:	f413 7f00 	tst.w	r3, #512	; 0x200
  400416:	d0fb      	beq.n	400410 <ili9341_init+0xa8>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400418:	2202      	movs	r2, #2
  40041a:	4b7c      	ldr	r3, [pc, #496]	; (40060c <ili9341_init+0x2a4>)
  40041c:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  40041e:	461a      	mov	r2, r3
  400420:	6913      	ldr	r3, [r2, #16]
  400422:	f413 7f00 	tst.w	r3, #512	; 0x200
  400426:	d0fb      	beq.n	400420 <ili9341_init+0xb8>
  400428:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40042c:	4b7f      	ldr	r3, [pc, #508]	; (40062c <ili9341_init+0x2c4>)
  40042e:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_B);
  400430:	20cf      	movs	r0, #207	; 0xcf
  400432:	4b7d      	ldr	r3, [pc, #500]	; (400628 <ili9341_init+0x2c0>)
  400434:	4798      	blx	r3
  400436:	4a75      	ldr	r2, [pc, #468]	; (40060c <ili9341_init+0x2a4>)
  400438:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  40043a:	f413 7f00 	tst.w	r3, #512	; 0x200
  40043e:	d0fb      	beq.n	400438 <ili9341_init+0xd0>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400440:	2200      	movs	r2, #0
  400442:	4b72      	ldr	r3, [pc, #456]	; (40060c <ili9341_init+0x2a4>)
  400444:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400446:	461a      	mov	r2, r3
  400448:	6913      	ldr	r3, [r2, #16]
  40044a:	f413 7f00 	tst.w	r3, #512	; 0x200
  40044e:	d0fb      	beq.n	400448 <ili9341_init+0xe0>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400450:	22aa      	movs	r2, #170	; 0xaa
  400452:	4b6e      	ldr	r3, [pc, #440]	; (40060c <ili9341_init+0x2a4>)
  400454:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400456:	461a      	mov	r2, r3
  400458:	6913      	ldr	r3, [r2, #16]
  40045a:	f413 7f00 	tst.w	r3, #512	; 0x200
  40045e:	d0fb      	beq.n	400458 <ili9341_init+0xf0>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400460:	22b0      	movs	r2, #176	; 0xb0
  400462:	4b6a      	ldr	r3, [pc, #424]	; (40060c <ili9341_init+0x2a4>)
  400464:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400466:	461a      	mov	r2, r3
  400468:	6913      	ldr	r3, [r2, #16]
  40046a:	f413 7f00 	tst.w	r3, #512	; 0x200
  40046e:	d0fb      	beq.n	400468 <ili9341_init+0x100>
  400470:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400474:	4b6d      	ldr	r3, [pc, #436]	; (40062c <ili9341_init+0x2c4>)
  400476:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_PUMP_RATIO_CONTROL);
  400478:	20f7      	movs	r0, #247	; 0xf7
  40047a:	4b6b      	ldr	r3, [pc, #428]	; (400628 <ili9341_init+0x2c0>)
  40047c:	4798      	blx	r3
  40047e:	4a63      	ldr	r2, [pc, #396]	; (40060c <ili9341_init+0x2a4>)
  400480:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400482:	f413 7f00 	tst.w	r3, #512	; 0x200
  400486:	d0fb      	beq.n	400480 <ili9341_init+0x118>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400488:	2230      	movs	r2, #48	; 0x30
  40048a:	4b60      	ldr	r3, [pc, #384]	; (40060c <ili9341_init+0x2a4>)
  40048c:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  40048e:	461a      	mov	r2, r3
  400490:	6913      	ldr	r3, [r2, #16]
  400492:	f413 7f00 	tst.w	r3, #512	; 0x200
  400496:	d0fb      	beq.n	400490 <ili9341_init+0x128>
  400498:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40049c:	4b63      	ldr	r3, [pc, #396]	; (40062c <ili9341_init+0x2c4>)
  40049e:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_1);
  4004a0:	20c0      	movs	r0, #192	; 0xc0
  4004a2:	4b61      	ldr	r3, [pc, #388]	; (400628 <ili9341_init+0x2c0>)
  4004a4:	4798      	blx	r3
  4004a6:	4a59      	ldr	r2, [pc, #356]	; (40060c <ili9341_init+0x2a4>)
  4004a8:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  4004aa:	f413 7f00 	tst.w	r3, #512	; 0x200
  4004ae:	d0fb      	beq.n	4004a8 <ili9341_init+0x140>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4004b0:	2225      	movs	r2, #37	; 0x25
  4004b2:	4b56      	ldr	r3, [pc, #344]	; (40060c <ili9341_init+0x2a4>)
  4004b4:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4004b6:	461a      	mov	r2, r3
  4004b8:	6913      	ldr	r3, [r2, #16]
  4004ba:	f413 7f00 	tst.w	r3, #512	; 0x200
  4004be:	d0fb      	beq.n	4004b8 <ili9341_init+0x150>
  4004c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4004c4:	4b59      	ldr	r3, [pc, #356]	; (40062c <ili9341_init+0x2c4>)
  4004c6:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_2);
  4004c8:	20c1      	movs	r0, #193	; 0xc1
  4004ca:	4b57      	ldr	r3, [pc, #348]	; (400628 <ili9341_init+0x2c0>)
  4004cc:	4798      	blx	r3
  4004ce:	4a4f      	ldr	r2, [pc, #316]	; (40060c <ili9341_init+0x2a4>)
  4004d0:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  4004d2:	f413 7f00 	tst.w	r3, #512	; 0x200
  4004d6:	d0fb      	beq.n	4004d0 <ili9341_init+0x168>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4004d8:	2211      	movs	r2, #17
  4004da:	4b4c      	ldr	r3, [pc, #304]	; (40060c <ili9341_init+0x2a4>)
  4004dc:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4004de:	461a      	mov	r2, r3
  4004e0:	6913      	ldr	r3, [r2, #16]
  4004e2:	f413 7f00 	tst.w	r3, #512	; 0x200
  4004e6:	d0fb      	beq.n	4004e0 <ili9341_init+0x178>
  4004e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4004ec:	4b4f      	ldr	r3, [pc, #316]	; (40062c <ili9341_init+0x2c4>)
  4004ee:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_VCOM_CONTROL_1);
  4004f0:	20c5      	movs	r0, #197	; 0xc5
  4004f2:	4b4d      	ldr	r3, [pc, #308]	; (400628 <ili9341_init+0x2c0>)
  4004f4:	4798      	blx	r3
  4004f6:	4a45      	ldr	r2, [pc, #276]	; (40060c <ili9341_init+0x2a4>)
  4004f8:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  4004fa:	f413 7f00 	tst.w	r3, #512	; 0x200
  4004fe:	d0fb      	beq.n	4004f8 <ili9341_init+0x190>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400500:	225c      	movs	r2, #92	; 0x5c
  400502:	4b42      	ldr	r3, [pc, #264]	; (40060c <ili9341_init+0x2a4>)
  400504:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400506:	461a      	mov	r2, r3
  400508:	6913      	ldr	r3, [r2, #16]
  40050a:	f413 7f00 	tst.w	r3, #512	; 0x200
  40050e:	d0fb      	beq.n	400508 <ili9341_init+0x1a0>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400510:	224c      	movs	r2, #76	; 0x4c
  400512:	4b3e      	ldr	r3, [pc, #248]	; (40060c <ili9341_init+0x2a4>)
  400514:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400516:	461a      	mov	r2, r3
  400518:	6913      	ldr	r3, [r2, #16]
  40051a:	f413 7f00 	tst.w	r3, #512	; 0x200
  40051e:	d0fb      	beq.n	400518 <ili9341_init+0x1b0>
  400520:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400524:	4b41      	ldr	r3, [pc, #260]	; (40062c <ili9341_init+0x2c4>)
  400526:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_VCOM_CONTROL_2);
  400528:	20c7      	movs	r0, #199	; 0xc7
  40052a:	4b3f      	ldr	r3, [pc, #252]	; (400628 <ili9341_init+0x2c0>)
  40052c:	4798      	blx	r3
  40052e:	4a37      	ldr	r2, [pc, #220]	; (40060c <ili9341_init+0x2a4>)
  400530:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400532:	f413 7f00 	tst.w	r3, #512	; 0x200
  400536:	d0fb      	beq.n	400530 <ili9341_init+0x1c8>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400538:	2294      	movs	r2, #148	; 0x94
  40053a:	4b34      	ldr	r3, [pc, #208]	; (40060c <ili9341_init+0x2a4>)
  40053c:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  40053e:	461a      	mov	r2, r3
  400540:	6913      	ldr	r3, [r2, #16]
  400542:	f413 7f00 	tst.w	r3, #512	; 0x200
  400546:	d0fb      	beq.n	400540 <ili9341_init+0x1d8>
  400548:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40054c:	4b37      	ldr	r3, [pc, #220]	; (40062c <ili9341_init+0x2c4>)
  40054e:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_DRIVER_TIMING_CONTROL_A);
  400550:	20e8      	movs	r0, #232	; 0xe8
  400552:	4b35      	ldr	r3, [pc, #212]	; (400628 <ili9341_init+0x2c0>)
  400554:	4798      	blx	r3
  400556:	4a2d      	ldr	r2, [pc, #180]	; (40060c <ili9341_init+0x2a4>)
  400558:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  40055a:	f413 7f00 	tst.w	r3, #512	; 0x200
  40055e:	d0fb      	beq.n	400558 <ili9341_init+0x1f0>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400560:	2285      	movs	r2, #133	; 0x85
  400562:	4b2a      	ldr	r3, [pc, #168]	; (40060c <ili9341_init+0x2a4>)
  400564:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400566:	461a      	mov	r2, r3
  400568:	6913      	ldr	r3, [r2, #16]
  40056a:	f413 7f00 	tst.w	r3, #512	; 0x200
  40056e:	d0fb      	beq.n	400568 <ili9341_init+0x200>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400570:	2201      	movs	r2, #1
  400572:	4b26      	ldr	r3, [pc, #152]	; (40060c <ili9341_init+0x2a4>)
  400574:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400576:	461a      	mov	r2, r3
  400578:	6913      	ldr	r3, [r2, #16]
  40057a:	f413 7f00 	tst.w	r3, #512	; 0x200
  40057e:	d0fb      	beq.n	400578 <ili9341_init+0x210>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400580:	2278      	movs	r2, #120	; 0x78
  400582:	4b22      	ldr	r3, [pc, #136]	; (40060c <ili9341_init+0x2a4>)
  400584:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400586:	461a      	mov	r2, r3
  400588:	6913      	ldr	r3, [r2, #16]
  40058a:	f413 7f00 	tst.w	r3, #512	; 0x200
  40058e:	d0fb      	beq.n	400588 <ili9341_init+0x220>
  400590:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400594:	4b25      	ldr	r3, [pc, #148]	; (40062c <ili9341_init+0x2c4>)
  400596:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_DRIVER_TIMING_CONTROL_B);
  400598:	20ea      	movs	r0, #234	; 0xea
  40059a:	4b23      	ldr	r3, [pc, #140]	; (400628 <ili9341_init+0x2c0>)
  40059c:	4798      	blx	r3
  40059e:	4a1b      	ldr	r2, [pc, #108]	; (40060c <ili9341_init+0x2a4>)
  4005a0:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  4005a2:	f413 7f00 	tst.w	r3, #512	; 0x200
  4005a6:	d0fb      	beq.n	4005a0 <ili9341_init+0x238>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4005a8:	2200      	movs	r2, #0
  4005aa:	4b18      	ldr	r3, [pc, #96]	; (40060c <ili9341_init+0x2a4>)
  4005ac:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4005ae:	461a      	mov	r2, r3
  4005b0:	6913      	ldr	r3, [r2, #16]
  4005b2:	f413 7f00 	tst.w	r3, #512	; 0x200
  4005b6:	d0fb      	beq.n	4005b0 <ili9341_init+0x248>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4005b8:	2200      	movs	r2, #0
  4005ba:	4b14      	ldr	r3, [pc, #80]	; (40060c <ili9341_init+0x2a4>)
  4005bc:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4005be:	461a      	mov	r2, r3
  4005c0:	6913      	ldr	r3, [r2, #16]
  4005c2:	f413 7f00 	tst.w	r3, #512	; 0x200
  4005c6:	d0fb      	beq.n	4005c0 <ili9341_init+0x258>
  4005c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4005cc:	4b17      	ldr	r3, [pc, #92]	; (40062c <ili9341_init+0x2c4>)
  4005ce:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_COLMOD_PIXEL_FORMAT_SET);
  4005d0:	203a      	movs	r0, #58	; 0x3a
  4005d2:	4b15      	ldr	r3, [pc, #84]	; (400628 <ili9341_init+0x2c0>)
  4005d4:	4798      	blx	r3
  4005d6:	4a0d      	ldr	r2, [pc, #52]	; (40060c <ili9341_init+0x2a4>)
  4005d8:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  4005da:	f413 7f00 	tst.w	r3, #512	; 0x200
  4005de:	d0fb      	beq.n	4005d8 <ili9341_init+0x270>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4005e0:	2205      	movs	r2, #5
  4005e2:	4b0a      	ldr	r3, [pc, #40]	; (40060c <ili9341_init+0x2a4>)
  4005e4:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4005e6:	461a      	mov	r2, r3
  4005e8:	6913      	ldr	r3, [r2, #16]
  4005ea:	f413 7f00 	tst.w	r3, #512	; 0x200
  4005ee:	d0fb      	beq.n	4005e8 <ili9341_init+0x280>
  4005f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4005f4:	4b0d      	ldr	r3, [pc, #52]	; (40062c <ili9341_init+0x2c4>)
  4005f6:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_set_orientation(0);
  4005f8:	2000      	movs	r0, #0
  4005fa:	4b0d      	ldr	r3, [pc, #52]	; (400630 <ili9341_init+0x2c8>)
  4005fc:	4798      	blx	r3
	ili9341_set_limits(0, 0, ILI9341_DEFAULT_WIDTH,
  4005fe:	23f0      	movs	r3, #240	; 0xf0
  400600:	f44f 72a0 	mov.w	r2, #320	; 0x140
  400604:	2100      	movs	r1, #0
  400606:	4608      	mov	r0, r1
  400608:	e016      	b.n	400638 <ili9341_init+0x2d0>
  40060a:	bf00      	nop
  40060c:	40008000 	.word	0x40008000
  400610:	00400649 	.word	0x00400649
  400614:	007a1200 	.word	0x007a1200
  400618:	0040069d 	.word	0x0040069d
  40061c:	400e1200 	.word	0x400e1200
  400620:	0007b784 	.word	0x0007b784
  400624:	20400001 	.word	0x20400001
  400628:	004001ad 	.word	0x004001ad
  40062c:	400e0e00 	.word	0x400e0e00
  400630:	0040030d 	.word	0x0040030d
  400634:	0073c0b7 	.word	0x0073c0b7
  400638:	4c02      	ldr	r4, [pc, #8]	; (400644 <ili9341_init+0x2dc>)
  40063a:	47a0      	blx	r4
}
  40063c:	b004      	add	sp, #16
  40063e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400642:	bf00      	nop
  400644:	004002dd 	.word	0x004002dd

00400648 <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  400648:	b510      	push	{r4, lr}
  40064a:	4604      	mov	r4, r0
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
  40064c:	4b10      	ldr	r3, [pc, #64]	; (400690 <spi_master_init+0x48>)
  40064e:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SWRST;
  400650:	2380      	movs	r3, #128	; 0x80
  400652:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  400654:	6863      	ldr	r3, [r4, #4]
  400656:	f043 0301 	orr.w	r3, r3, #1
  40065a:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  40065c:	6863      	ldr	r3, [r4, #4]
  40065e:	f043 0310 	orr.w	r3, r3, #16
  400662:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  400664:	6863      	ldr	r3, [r4, #4]
  400666:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40066a:	6063      	str	r3, [r4, #4]
#endif
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  40066c:	2100      	movs	r1, #0
  40066e:	4620      	mov	r0, r4
  400670:	4b08      	ldr	r3, [pc, #32]	; (400694 <spi_master_init+0x4c>)
  400672:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400674:	6863      	ldr	r3, [r4, #4]
  400676:	f023 0302 	bic.w	r3, r3, #2
  40067a:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  40067c:	6863      	ldr	r3, [r4, #4]
  40067e:	f023 0304 	bic.w	r3, r3, #4
  400682:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  400684:	2100      	movs	r1, #0
  400686:	4620      	mov	r0, r4
  400688:	4b03      	ldr	r3, [pc, #12]	; (400698 <spi_master_init+0x50>)
  40068a:	4798      	blx	r3
  40068c:	bd10      	pop	{r4, pc}
  40068e:	bf00      	nop
  400690:	00400835 	.word	0x00400835
  400694:	00400861 	.word	0x00400861
  400698:	00400877 	.word	0x00400877

0040069c <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  40069c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4006a0:	4604      	mov	r4, r0
  4006a2:	460d      	mov	r5, r1
  4006a4:	4616      	mov	r6, r2
#if (SAM4L)
    int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_pba_hz());
#else
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_peripheral_hz());
  4006a6:	4915      	ldr	r1, [pc, #84]	; (4006fc <spi_master_setup_device+0x60>)
  4006a8:	4618      	mov	r0, r3
  4006aa:	4b15      	ldr	r3, [pc, #84]	; (400700 <spi_master_setup_device+0x64>)
  4006ac:	4798      	blx	r3
  4006ae:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  4006b0:	2300      	movs	r3, #0
  4006b2:	461a      	mov	r2, r3
  4006b4:	6829      	ldr	r1, [r5, #0]
  4006b6:	4620      	mov	r0, r4
  4006b8:	f8df 805c 	ldr.w	r8, [pc, #92]	; 400718 <spi_master_setup_device+0x7c>
  4006bc:	47c0      	blx	r8
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  4006be:	2208      	movs	r2, #8
  4006c0:	6829      	ldr	r1, [r5, #0]
  4006c2:	4620      	mov	r0, r4
  4006c4:	4b0f      	ldr	r3, [pc, #60]	; (400704 <spi_master_setup_device+0x68>)
  4006c6:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  4006c8:	b2fa      	uxtb	r2, r7
  4006ca:	6829      	ldr	r1, [r5, #0]
  4006cc:	4620      	mov	r0, r4
  4006ce:	4b0e      	ldr	r3, [pc, #56]	; (400708 <spi_master_setup_device+0x6c>)
  4006d0:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  4006d2:	2208      	movs	r2, #8
  4006d4:	6829      	ldr	r1, [r5, #0]
  4006d6:	4620      	mov	r0, r4
  4006d8:	4b0c      	ldr	r3, [pc, #48]	; (40070c <spi_master_setup_device+0x70>)
  4006da:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  4006dc:	0872      	lsrs	r2, r6, #1
  4006de:	6829      	ldr	r1, [r5, #0]
  4006e0:	4620      	mov	r0, r4
  4006e2:	4b0b      	ldr	r3, [pc, #44]	; (400710 <spi_master_setup_device+0x74>)
  4006e4:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  4006e6:	f086 0201 	eor.w	r2, r6, #1
  4006ea:	f002 0201 	and.w	r2, r2, #1
  4006ee:	6829      	ldr	r1, [r5, #0]
  4006f0:	4620      	mov	r0, r4
  4006f2:	4b08      	ldr	r3, [pc, #32]	; (400714 <spi_master_setup_device+0x78>)
  4006f4:	4798      	blx	r3
  4006f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4006fa:	bf00      	nop
  4006fc:	08f0d180 	.word	0x08f0d180
  400700:	00400953 	.word	0x00400953
  400704:	0040093f 	.word	0x0040093f
  400708:	00400969 	.word	0x00400969
  40070c:	004008f9 	.word	0x004008f9
  400710:	004008bd 	.word	0x004008bd
  400714:	004008db 	.word	0x004008db
  400718:	00400991 	.word	0x00400991

0040071c <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  40071c:	b570      	push	{r4, r5, r6, lr}
  40071e:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  400720:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  400722:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  400724:	4013      	ands	r3, r2
  400726:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400728:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  40072a:	4e1c      	ldr	r6, [pc, #112]	; (40079c <afec_process_callback+0x80>)
  40072c:	4d1c      	ldr	r5, [pc, #112]	; (4007a0 <afec_process_callback+0x84>)
  40072e:	42a8      	cmp	r0, r5
  400730:	bf14      	ite	ne
  400732:	2000      	movne	r0, #0
  400734:	2001      	moveq	r0, #1
  400736:	0105      	lsls	r5, r0, #4
  400738:	e00b      	b.n	400752 <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  40073a:	2c0e      	cmp	r4, #14
  40073c:	d81e      	bhi.n	40077c <afec_process_callback+0x60>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  40073e:	9a01      	ldr	r2, [sp, #4]
  400740:	f104 010c 	add.w	r1, r4, #12
  400744:	2301      	movs	r3, #1
  400746:	408b      	lsls	r3, r1
  400748:	4213      	tst	r3, r2
  40074a:	d110      	bne.n	40076e <afec_process_callback+0x52>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  40074c:	3401      	adds	r4, #1
  40074e:	2c10      	cmp	r4, #16
  400750:	d022      	beq.n	400798 <afec_process_callback+0x7c>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  400752:	2c0b      	cmp	r4, #11
  400754:	d8f1      	bhi.n	40073a <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  400756:	9a01      	ldr	r2, [sp, #4]
  400758:	2301      	movs	r3, #1
  40075a:	40a3      	lsls	r3, r4
  40075c:	4213      	tst	r3, r2
  40075e:	d0f5      	beq.n	40074c <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400760:	192b      	adds	r3, r5, r4
  400762:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400766:	2b00      	cmp	r3, #0
  400768:	d0f0      	beq.n	40074c <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  40076a:	4798      	blx	r3
  40076c:	e7ee      	b.n	40074c <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  40076e:	192b      	adds	r3, r5, r4
  400770:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400774:	2b00      	cmp	r3, #0
  400776:	d0e9      	beq.n	40074c <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400778:	4798      	blx	r3
  40077a:	e7e7      	b.n	40074c <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  40077c:	9a01      	ldr	r2, [sp, #4]
  40077e:	f104 010f 	add.w	r1, r4, #15
  400782:	2301      	movs	r3, #1
  400784:	408b      	lsls	r3, r1
  400786:	4213      	tst	r3, r2
  400788:	d0e0      	beq.n	40074c <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  40078a:	192b      	adds	r3, r5, r4
  40078c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400790:	2b00      	cmp	r3, #0
  400792:	d0db      	beq.n	40074c <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400794:	4798      	blx	r3
  400796:	e7d9      	b.n	40074c <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400798:	b002      	add	sp, #8
  40079a:	bd70      	pop	{r4, r5, r6, pc}
  40079c:	20400dec 	.word	0x20400dec
  4007a0:	40064000 	.word	0x40064000

004007a4 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  4007a4:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  4007a6:	4802      	ldr	r0, [pc, #8]	; (4007b0 <AFEC0_Handler+0xc>)
  4007a8:	4b02      	ldr	r3, [pc, #8]	; (4007b4 <AFEC0_Handler+0x10>)
  4007aa:	4798      	blx	r3
  4007ac:	bd08      	pop	{r3, pc}
  4007ae:	bf00      	nop
  4007b0:	4003c000 	.word	0x4003c000
  4007b4:	0040071d 	.word	0x0040071d

004007b8 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  4007b8:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  4007ba:	4802      	ldr	r0, [pc, #8]	; (4007c4 <AFEC1_Handler+0xc>)
  4007bc:	4b02      	ldr	r3, [pc, #8]	; (4007c8 <AFEC1_Handler+0x10>)
  4007be:	4798      	blx	r3
  4007c0:	bd08      	pop	{r3, pc}
  4007c2:	bf00      	nop
  4007c4:	40064000 	.word	0x40064000
  4007c8:	0040071d 	.word	0x0040071d

004007cc <rtt_init>:
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  4007cc:	4b03      	ldr	r3, [pc, #12]	; (4007dc <rtt_init+0x10>)
  4007ce:	681b      	ldr	r3, [r3, #0]
  4007d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  4007d4:	4319      	orrs	r1, r3
  4007d6:	6001      	str	r1, [r0, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
}
  4007d8:	2000      	movs	r0, #0
  4007da:	4770      	bx	lr
  4007dc:	204009f4 	.word	0x204009f4

004007e0 <rtt_sel_source>:
 * \param p_rtt Pointer to an RTT instance.
 * \param is_rtc_sel RTC 1Hz Clock Selection.
 */
void rtt_sel_source(Rtt *p_rtt, bool is_rtc_sel)
{
	if(is_rtc_sel) {
  4007e0:	b941      	cbnz	r1, 4007f4 <rtt_sel_source+0x14>
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
	} else {
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
  4007e2:	4a09      	ldr	r2, [pc, #36]	; (400808 <rtt_sel_source+0x28>)
  4007e4:	6813      	ldr	r3, [r2, #0]
  4007e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  4007ea:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  4007ec:	6802      	ldr	r2, [r0, #0]
  4007ee:	4313      	orrs	r3, r2
  4007f0:	6003      	str	r3, [r0, #0]
  4007f2:	4770      	bx	lr
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
  4007f4:	4a04      	ldr	r2, [pc, #16]	; (400808 <rtt_sel_source+0x28>)
  4007f6:	6813      	ldr	r3, [r2, #0]
  4007f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  4007fc:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  4007fe:	6802      	ldr	r2, [r0, #0]
  400800:	4313      	orrs	r3, r2
  400802:	6003      	str	r3, [r0, #0]
  400804:	4770      	bx	lr
  400806:	bf00      	nop
  400808:	204009f4 	.word	0x204009f4

0040080c <rtt_disable_interrupt>:
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp = 0;

	temp = p_rtt->RTT_MR;
  40080c:	6803      	ldr	r3, [r0, #0]
	temp &= (~ul_sources);
  40080e:	ea23 0101 	bic.w	r1, r3, r1
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  400812:	4b02      	ldr	r3, [pc, #8]	; (40081c <rtt_disable_interrupt+0x10>)
  400814:	681b      	ldr	r3, [r3, #0]
  400816:	4319      	orrs	r1, r3
#endif
	p_rtt->RTT_MR = temp;
  400818:	6001      	str	r1, [r0, #0]
  40081a:	4770      	bx	lr
  40081c:	204009f4 	.word	0x204009f4

00400820 <rtt_read_timer_value>:
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
	uint32_t rtt_val = p_rtt->RTT_VR;
  400820:	6882      	ldr	r2, [r0, #8]

	while (rtt_val != p_rtt->RTT_VR) {
  400822:	6883      	ldr	r3, [r0, #8]
  400824:	429a      	cmp	r2, r3
  400826:	d003      	beq.n	400830 <rtt_read_timer_value+0x10>
		rtt_val = p_rtt->RTT_VR;
  400828:	6882      	ldr	r2, [r0, #8]
	while (rtt_val != p_rtt->RTT_VR) {
  40082a:	6883      	ldr	r3, [r0, #8]
  40082c:	4293      	cmp	r3, r2
  40082e:	d1fb      	bne.n	400828 <rtt_read_timer_value+0x8>
	}

	return rtt_val;
}
  400830:	4618      	mov	r0, r3
  400832:	4770      	bx	lr

00400834 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  400834:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  400836:	4b07      	ldr	r3, [pc, #28]	; (400854 <spi_enable_clock+0x20>)
  400838:	4298      	cmp	r0, r3
  40083a:	d003      	beq.n	400844 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  40083c:	4b06      	ldr	r3, [pc, #24]	; (400858 <spi_enable_clock+0x24>)
  40083e:	4298      	cmp	r0, r3
  400840:	d004      	beq.n	40084c <spi_enable_clock+0x18>
  400842:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400844:	2015      	movs	r0, #21
  400846:	4b05      	ldr	r3, [pc, #20]	; (40085c <spi_enable_clock+0x28>)
  400848:	4798      	blx	r3
  40084a:	bd08      	pop	{r3, pc}
  40084c:	202a      	movs	r0, #42	; 0x2a
  40084e:	4b03      	ldr	r3, [pc, #12]	; (40085c <spi_enable_clock+0x28>)
  400850:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  400852:	e7f6      	b.n	400842 <spi_enable_clock+0xe>
  400854:	40008000 	.word	0x40008000
  400858:	40058000 	.word	0x40058000
  40085c:	00401735 	.word	0x00401735

00400860 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  400860:	6843      	ldr	r3, [r0, #4]
  400862:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  400866:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  400868:	6843      	ldr	r3, [r0, #4]
  40086a:	0409      	lsls	r1, r1, #16
  40086c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  400870:	4319      	orrs	r1, r3
  400872:	6041      	str	r1, [r0, #4]
  400874:	4770      	bx	lr

00400876 <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  400876:	6843      	ldr	r3, [r0, #4]
  400878:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  40087c:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  40087e:	6843      	ldr	r3, [r0, #4]
  400880:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  400884:	6041      	str	r1, [r0, #4]
  400886:	4770      	bx	lr

00400888 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  400888:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  40088a:	f643 2499 	movw	r4, #15001	; 0x3a99
  40088e:	6905      	ldr	r5, [r0, #16]
  400890:	f015 0f02 	tst.w	r5, #2
  400894:	d103      	bne.n	40089e <spi_write+0x16>
		if (!timeout--) {
  400896:	3c01      	subs	r4, #1
  400898:	d1f9      	bne.n	40088e <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  40089a:	2001      	movs	r0, #1
  40089c:	e00c      	b.n	4008b8 <spi_write+0x30>
	if (p_spi->SPI_MR & SPI_MR_PS) {
  40089e:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  4008a0:	f014 0f02 	tst.w	r4, #2
  4008a4:	d006      	beq.n	4008b4 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  4008a6:	0412      	lsls	r2, r2, #16
  4008a8:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  4008ac:	4311      	orrs	r1, r2
		if (uc_last) {
  4008ae:	b10b      	cbz	r3, 4008b4 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  4008b0:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  4008b4:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  4008b6:	2000      	movs	r0, #0
}
  4008b8:	bc30      	pop	{r4, r5}
  4008ba:	4770      	bx	lr

004008bc <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  4008bc:	b932      	cbnz	r2, 4008cc <spi_set_clock_polarity+0x10>
  4008be:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4008c2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4008c4:	f023 0301 	bic.w	r3, r3, #1
  4008c8:	6303      	str	r3, [r0, #48]	; 0x30
  4008ca:	4770      	bx	lr
  4008cc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4008d0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4008d2:	f043 0301 	orr.w	r3, r3, #1
  4008d6:	6303      	str	r3, [r0, #48]	; 0x30
  4008d8:	4770      	bx	lr

004008da <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  4008da:	b932      	cbnz	r2, 4008ea <spi_set_clock_phase+0x10>
  4008dc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  4008e0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4008e2:	f023 0302 	bic.w	r3, r3, #2
  4008e6:	6303      	str	r3, [r0, #48]	; 0x30
  4008e8:	4770      	bx	lr
  4008ea:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  4008ee:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4008f0:	f043 0302 	orr.w	r3, r3, #2
  4008f4:	6303      	str	r3, [r0, #48]	; 0x30
  4008f6:	4770      	bx	lr

004008f8 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  4008f8:	2a04      	cmp	r2, #4
  4008fa:	d003      	beq.n	400904 <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  4008fc:	b16a      	cbz	r2, 40091a <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  4008fe:	2a08      	cmp	r2, #8
  400900:	d016      	beq.n	400930 <spi_configure_cs_behavior+0x38>
  400902:	4770      	bx	lr
  400904:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400908:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40090a:	f023 0308 	bic.w	r3, r3, #8
  40090e:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  400910:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400912:	f043 0304 	orr.w	r3, r3, #4
  400916:	6303      	str	r3, [r0, #48]	; 0x30
  400918:	4770      	bx	lr
  40091a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40091e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400920:	f023 0308 	bic.w	r3, r3, #8
  400924:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  400926:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400928:	f023 0304 	bic.w	r3, r3, #4
  40092c:	6303      	str	r3, [r0, #48]	; 0x30
  40092e:	4770      	bx	lr
  400930:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  400934:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400936:	f043 0308 	orr.w	r3, r3, #8
  40093a:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  40093c:	e7e1      	b.n	400902 <spi_configure_cs_behavior+0xa>

0040093e <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  40093e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  400942:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400944:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  400948:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  40094a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40094c:	431a      	orrs	r2, r3
  40094e:	630a      	str	r2, [r1, #48]	; 0x30
  400950:	4770      	bx	lr

00400952 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  400952:	1e43      	subs	r3, r0, #1
  400954:	4419      	add	r1, r3
  400956:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  40095a:	1e43      	subs	r3, r0, #1
  40095c:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  40095e:	bf94      	ite	ls
  400960:	b200      	sxthls	r0, r0
		return -1;
  400962:	f04f 30ff 	movhi.w	r0, #4294967295
}
  400966:	4770      	bx	lr

00400968 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  400968:	b17a      	cbz	r2, 40098a <spi_set_baudrate_div+0x22>
{
  40096a:	b410      	push	{r4}
  40096c:	4614      	mov	r4, r2
  40096e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  400972:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400974:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  400978:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  40097a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  40097c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  400980:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  400982:	2000      	movs	r0, #0
}
  400984:	f85d 4b04 	ldr.w	r4, [sp], #4
  400988:	4770      	bx	lr
        return -1;
  40098a:	f04f 30ff 	mov.w	r0, #4294967295
  40098e:	4770      	bx	lr

00400990 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  400990:	b410      	push	{r4}
  400992:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  400996:	6b08      	ldr	r0, [r1, #48]	; 0x30
  400998:	b280      	uxth	r0, r0
  40099a:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  40099c:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  40099e:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  4009a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4009a6:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  4009a8:	f85d 4b04 	ldr.w	r4, [sp], #4
  4009ac:	4770      	bx	lr
	...

004009b0 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
  4009b0:	4b01      	ldr	r3, [pc, #4]	; (4009b8 <gfx_mono_set_framebuffer+0x8>)
  4009b2:	6018      	str	r0, [r3, #0]
  4009b4:	4770      	bx	lr
  4009b6:	bf00      	nop
  4009b8:	204009f8 	.word	0x204009f8

004009bc <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  4009bc:	4b02      	ldr	r3, [pc, #8]	; (4009c8 <gfx_mono_framebuffer_put_byte+0xc>)
  4009be:	681b      	ldr	r3, [r3, #0]
  4009c0:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  4009c4:	5442      	strb	r2, [r0, r1]
  4009c6:	4770      	bx	lr
  4009c8:	204009f8 	.word	0x204009f8

004009cc <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  4009cc:	4b02      	ldr	r3, [pc, #8]	; (4009d8 <gfx_mono_framebuffer_get_byte+0xc>)
  4009ce:	681b      	ldr	r3, [r3, #0]
  4009d0:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
  4009d4:	5c40      	ldrb	r0, [r0, r1]
  4009d6:	4770      	bx	lr
  4009d8:	204009f8 	.word	0x204009f8

004009dc <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
  4009dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
  4009e0:	1884      	adds	r4, r0, r2
  4009e2:	2c80      	cmp	r4, #128	; 0x80
  4009e4:	dd02      	ble.n	4009ec <gfx_mono_generic_draw_horizontal_line+0x10>
		length = GFX_MONO_LCD_WIDTH - x;
  4009e6:	f1c0 0480 	rsb	r4, r0, #128	; 0x80
  4009ea:	b2e2      	uxtb	r2, r4
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
  4009ec:	b322      	cbz	r2, 400a38 <gfx_mono_generic_draw_horizontal_line+0x5c>
	page = y / 8;
  4009ee:	08cd      	lsrs	r5, r1, #3
	pixelmask = (1 << (y - (page * 8)));
  4009f0:	eba1 01c5 	sub.w	r1, r1, r5, lsl #3
  4009f4:	2601      	movs	r6, #1
  4009f6:	fa06 f101 	lsl.w	r1, r6, r1
  4009fa:	b2ce      	uxtb	r6, r1
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
  4009fc:	2b01      	cmp	r3, #1
  4009fe:	d01d      	beq.n	400a3c <gfx_mono_generic_draw_horizontal_line+0x60>
  400a00:	2b00      	cmp	r3, #0
  400a02:	d035      	beq.n	400a70 <gfx_mono_generic_draw_horizontal_line+0x94>
  400a04:	2b02      	cmp	r3, #2
  400a06:	d117      	bne.n	400a38 <gfx_mono_generic_draw_horizontal_line+0x5c>
  400a08:	3801      	subs	r0, #1
  400a0a:	b2c7      	uxtb	r7, r0
  400a0c:	19d4      	adds	r4, r2, r7
  400a0e:	b2e4      	uxtb	r4, r4
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
  400a10:	f8df a090 	ldr.w	sl, [pc, #144]	; 400aa4 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
  400a14:	f04f 0900 	mov.w	r9, #0
  400a18:	f8df 808c 	ldr.w	r8, [pc, #140]	; 400aa8 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400a1c:	4621      	mov	r1, r4
  400a1e:	4628      	mov	r0, r5
  400a20:	47d0      	blx	sl
			temp ^= pixelmask;
  400a22:	ea86 0200 	eor.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  400a26:	464b      	mov	r3, r9
  400a28:	b2d2      	uxtb	r2, r2
  400a2a:	4621      	mov	r1, r4
  400a2c:	4628      	mov	r0, r5
  400a2e:	47c0      	blx	r8
  400a30:	3c01      	subs	r4, #1
  400a32:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  400a34:	42bc      	cmp	r4, r7
  400a36:	d1f1      	bne.n	400a1c <gfx_mono_generic_draw_horizontal_line+0x40>
  400a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400a3c:	3801      	subs	r0, #1
  400a3e:	b2c7      	uxtb	r7, r0
  400a40:	19d4      	adds	r4, r2, r7
  400a42:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  400a44:	f8df a05c 	ldr.w	sl, [pc, #92]	; 400aa4 <gfx_mono_generic_draw_horizontal_line+0xc8>
			gfx_mono_put_byte(page, x + length, temp);
  400a48:	f04f 0900 	mov.w	r9, #0
  400a4c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 400aa8 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400a50:	4621      	mov	r1, r4
  400a52:	4628      	mov	r0, r5
  400a54:	47d0      	blx	sl
			temp |= pixelmask;
  400a56:	ea46 0200 	orr.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  400a5a:	464b      	mov	r3, r9
  400a5c:	b2d2      	uxtb	r2, r2
  400a5e:	4621      	mov	r1, r4
  400a60:	4628      	mov	r0, r5
  400a62:	47c0      	blx	r8
  400a64:	3c01      	subs	r4, #1
  400a66:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  400a68:	42bc      	cmp	r4, r7
  400a6a:	d1f1      	bne.n	400a50 <gfx_mono_generic_draw_horizontal_line+0x74>
  400a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400a70:	3801      	subs	r0, #1
  400a72:	b2c7      	uxtb	r7, r0
  400a74:	19d4      	adds	r4, r2, r7
  400a76:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  400a78:	f8df 8028 	ldr.w	r8, [pc, #40]	; 400aa4 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp &= ~pixelmask;
  400a7c:	43ce      	mvns	r6, r1
			gfx_mono_put_byte(page, x + length, temp);
  400a7e:	f8df 9028 	ldr.w	r9, [pc, #40]	; 400aa8 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400a82:	4621      	mov	r1, r4
  400a84:	4628      	mov	r0, r5
  400a86:	47c0      	blx	r8
			temp &= ~pixelmask;
  400a88:	ea06 0200 	and.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  400a8c:	2300      	movs	r3, #0
  400a8e:	b2d2      	uxtb	r2, r2
  400a90:	4621      	mov	r1, r4
  400a92:	4628      	mov	r0, r5
  400a94:	47c8      	blx	r9
  400a96:	3c01      	subs	r4, #1
  400a98:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  400a9a:	42bc      	cmp	r4, r7
  400a9c:	d1f1      	bne.n	400a82 <gfx_mono_generic_draw_horizontal_line+0xa6>
  400a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400aa2:	bf00      	nop
  400aa4:	00400cdd 	.word	0x00400cdd
  400aa8:	00400bd9 	.word	0x00400bd9

00400aac <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  400aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400ab0:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (height == 0) {
  400ab4:	b18b      	cbz	r3, 400ada <gfx_mono_generic_draw_filled_rect+0x2e>
  400ab6:	461c      	mov	r4, r3
  400ab8:	4690      	mov	r8, r2
  400aba:	4606      	mov	r6, r0
  400abc:	1e4d      	subs	r5, r1, #1
  400abe:	b2ed      	uxtb	r5, r5
  400ac0:	442c      	add	r4, r5
  400ac2:	b2e4      	uxtb	r4, r4
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
  400ac4:	f8df 9018 	ldr.w	r9, [pc, #24]	; 400ae0 <gfx_mono_generic_draw_filled_rect+0x34>
  400ac8:	463b      	mov	r3, r7
  400aca:	4642      	mov	r2, r8
  400acc:	4621      	mov	r1, r4
  400ace:	4630      	mov	r0, r6
  400ad0:	47c8      	blx	r9
  400ad2:	3c01      	subs	r4, #1
  400ad4:	b2e4      	uxtb	r4, r4
	while (height-- > 0) {
  400ad6:	42ac      	cmp	r4, r5
  400ad8:	d1f6      	bne.n	400ac8 <gfx_mono_generic_draw_filled_rect+0x1c>
  400ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400ade:	bf00      	nop
  400ae0:	004009dd 	.word	0x004009dd

00400ae4 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
  400ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400ae8:	b083      	sub	sp, #12
  400aea:	4604      	mov	r4, r0
  400aec:	4688      	mov	r8, r1
  400aee:	4691      	mov	r9, r2
  400af0:	469b      	mov	fp, r3
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
  400af2:	7a5b      	ldrb	r3, [r3, #9]
  400af4:	f89b 2008 	ldrb.w	r2, [fp, #8]
  400af8:	2100      	movs	r1, #0
  400afa:	9100      	str	r1, [sp, #0]
  400afc:	4649      	mov	r1, r9
  400afe:	4640      	mov	r0, r8
  400b00:	4d21      	ldr	r5, [pc, #132]	; (400b88 <gfx_mono_draw_char+0xa4>)
  400b02:	47a8      	blx	r5
			GFX_PIXEL_CLR);

	switch (font->type) {
  400b04:	f89b 3000 	ldrb.w	r3, [fp]
  400b08:	b113      	cbz	r3, 400b10 <gfx_mono_draw_char+0x2c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
  400b0a:	b003      	add	sp, #12
  400b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  400b10:	f89b 2008 	ldrb.w	r2, [fp, #8]
  400b14:	08d3      	lsrs	r3, r2, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  400b16:	f012 0f07 	tst.w	r2, #7
		char_row_size++;
  400b1a:	bf18      	it	ne
  400b1c:	3301      	addne	r3, #1
	glyph_data_offset = char_row_size * font->height *
  400b1e:	f89b a009 	ldrb.w	sl, [fp, #9]
			((uint8_t)ch - font->first_char);
  400b22:	f89b 700a 	ldrb.w	r7, [fp, #10]
  400b26:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
  400b28:	fb17 f70a 	smulbb	r7, r7, sl
  400b2c:	fb17 f703 	smulbb	r7, r7, r3
	glyph_data = font->data.progmem + glyph_data_offset;
  400b30:	f8db 3004 	ldr.w	r3, [fp, #4]
  400b34:	fa13 f787 	uxtah	r7, r3, r7
  400b38:	e01f      	b.n	400b7a <gfx_mono_draw_char+0x96>
			glyph_byte <<= 1;
  400b3a:	0064      	lsls	r4, r4, #1
  400b3c:	b2e4      	uxtb	r4, r4
  400b3e:	3501      	adds	r5, #1
		for (i = 0; i < pixelsToDraw; i++) {
  400b40:	b2eb      	uxtb	r3, r5
  400b42:	429e      	cmp	r6, r3
  400b44:	d910      	bls.n	400b68 <gfx_mono_draw_char+0x84>
  400b46:	b2eb      	uxtb	r3, r5
  400b48:	eb08 0003 	add.w	r0, r8, r3
  400b4c:	b2c0      	uxtb	r0, r0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  400b4e:	f013 0f07 	tst.w	r3, #7
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  400b52:	bf08      	it	eq
  400b54:	f817 4b01 	ldrbeq.w	r4, [r7], #1
			if ((glyph_byte & 0x80)) {
  400b58:	f014 0f80 	tst.w	r4, #128	; 0x80
  400b5c:	d0ed      	beq.n	400b3a <gfx_mono_draw_char+0x56>
				gfx_mono_draw_pixel(inc_x, inc_y,
  400b5e:	2201      	movs	r2, #1
  400b60:	4649      	mov	r1, r9
  400b62:	4b0a      	ldr	r3, [pc, #40]	; (400b8c <gfx_mono_draw_char+0xa8>)
  400b64:	4798      	blx	r3
  400b66:	e7e8      	b.n	400b3a <gfx_mono_draw_char+0x56>
		inc_y += 1;
  400b68:	f109 0901 	add.w	r9, r9, #1
  400b6c:	fa5f f989 	uxtb.w	r9, r9
		rows_left--;
  400b70:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (rows_left > 0);
  400b74:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
  400b78:	d0c7      	beq.n	400b0a <gfx_mono_draw_char+0x26>
		uint8_t pixelsToDraw = font->width;
  400b7a:	f89b 6008 	ldrb.w	r6, [fp, #8]
		for (i = 0; i < pixelsToDraw; i++) {
  400b7e:	2e00      	cmp	r6, #0
  400b80:	d0f2      	beq.n	400b68 <gfx_mono_draw_char+0x84>
  400b82:	2500      	movs	r5, #0
  400b84:	462c      	mov	r4, r5
  400b86:	e7de      	b.n	400b46 <gfx_mono_draw_char+0x62>
  400b88:	00400aad 	.word	0x00400aad
  400b8c:	00400c79 	.word	0x00400c79

00400b90 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
  400b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400b94:	4604      	mov	r4, r0
  400b96:	4690      	mov	r8, r2
  400b98:	461d      	mov	r5, r3
  400b9a:	4689      	mov	r9, r1
			x = start_of_string_position_x;
			y += font->height + 1;
		} else if (*str == '\r') {
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
  400b9c:	4f0d      	ldr	r7, [pc, #52]	; (400bd4 <gfx_mono_draw_string+0x44>)
			x = start_of_string_position_x;
  400b9e:	460e      	mov	r6, r1
  400ba0:	e008      	b.n	400bb4 <gfx_mono_draw_string+0x24>
			y += font->height + 1;
  400ba2:	7a6a      	ldrb	r2, [r5, #9]
  400ba4:	3201      	adds	r2, #1
  400ba6:	4442      	add	r2, r8
  400ba8:	fa5f f882 	uxtb.w	r8, r2
			x = start_of_string_position_x;
  400bac:	46b1      	mov	r9, r6
			x += font->width;
		}
	} while (*(++str));
  400bae:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  400bb2:	b16b      	cbz	r3, 400bd0 <gfx_mono_draw_string+0x40>
		if (*str == '\n') {
  400bb4:	7820      	ldrb	r0, [r4, #0]
  400bb6:	280a      	cmp	r0, #10
  400bb8:	d0f3      	beq.n	400ba2 <gfx_mono_draw_string+0x12>
		} else if (*str == '\r') {
  400bba:	280d      	cmp	r0, #13
  400bbc:	d0f7      	beq.n	400bae <gfx_mono_draw_string+0x1e>
			gfx_mono_draw_char(*str, x, y, font);
  400bbe:	462b      	mov	r3, r5
  400bc0:	4642      	mov	r2, r8
  400bc2:	4649      	mov	r1, r9
  400bc4:	47b8      	blx	r7
			x += font->width;
  400bc6:	7a2b      	ldrb	r3, [r5, #8]
  400bc8:	4499      	add	r9, r3
  400bca:	fa5f f989 	uxtb.w	r9, r9
  400bce:	e7ee      	b.n	400bae <gfx_mono_draw_string+0x1e>
}
  400bd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400bd4:	00400ae5 	.word	0x00400ae5

00400bd8 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  400bd8:	b570      	push	{r4, r5, r6, lr}
  400bda:	4604      	mov	r4, r0
  400bdc:	460d      	mov	r5, r1
  400bde:	4616      	mov	r6, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  400be0:	b91b      	cbnz	r3, 400bea <gfx_mono_ssd1306_put_byte+0x12>
  400be2:	4b0d      	ldr	r3, [pc, #52]	; (400c18 <gfx_mono_ssd1306_put_byte+0x40>)
  400be4:	4798      	blx	r3
  400be6:	42b0      	cmp	r0, r6
  400be8:	d015      	beq.n	400c16 <gfx_mono_ssd1306_put_byte+0x3e>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  400bea:	4632      	mov	r2, r6
  400bec:	4629      	mov	r1, r5
  400bee:	4620      	mov	r0, r4
  400bf0:	4b0a      	ldr	r3, [pc, #40]	; (400c1c <gfx_mono_ssd1306_put_byte+0x44>)
  400bf2:	4798      	blx	r3
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  400bf4:	f004 000f 	and.w	r0, r4, #15
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  400bf8:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  400bfc:	4c08      	ldr	r4, [pc, #32]	; (400c20 <gfx_mono_ssd1306_put_byte+0x48>)
  400bfe:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  400c00:	f3c5 1002 	ubfx	r0, r5, #4, #3
  400c04:	f040 0010 	orr.w	r0, r0, #16
  400c08:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  400c0a:	f005 000f 	and.w	r0, r5, #15
  400c0e:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
  400c10:	4630      	mov	r0, r6
  400c12:	4b04      	ldr	r3, [pc, #16]	; (400c24 <gfx_mono_ssd1306_put_byte+0x4c>)
  400c14:	4798      	blx	r3
  400c16:	bd70      	pop	{r4, r5, r6, pc}
  400c18:	004009cd 	.word	0x004009cd
  400c1c:	004009bd 	.word	0x004009bd
  400c20:	00400ce9 	.word	0x00400ce9
  400c24:	00400f09 	.word	0x00400f09

00400c28 <gfx_mono_ssd1306_init>:
{
  400c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gfx_mono_set_framebuffer(framebuffer);
  400c2c:	480d      	ldr	r0, [pc, #52]	; (400c64 <gfx_mono_ssd1306_init+0x3c>)
  400c2e:	4b0e      	ldr	r3, [pc, #56]	; (400c68 <gfx_mono_ssd1306_init+0x40>)
  400c30:	4798      	blx	r3
	ssd1306_init();
  400c32:	4b0e      	ldr	r3, [pc, #56]	; (400c6c <gfx_mono_ssd1306_init+0x44>)
  400c34:	4798      	blx	r3
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  400c36:	2040      	movs	r0, #64	; 0x40
  400c38:	4b0d      	ldr	r3, [pc, #52]	; (400c70 <gfx_mono_ssd1306_init+0x48>)
  400c3a:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400c3c:	2500      	movs	r5, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400c3e:	f04f 0801 	mov.w	r8, #1
  400c42:	462f      	mov	r7, r5
  400c44:	4e0b      	ldr	r6, [pc, #44]	; (400c74 <gfx_mono_ssd1306_init+0x4c>)
{
  400c46:	2400      	movs	r4, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400c48:	4643      	mov	r3, r8
  400c4a:	463a      	mov	r2, r7
  400c4c:	b2e1      	uxtb	r1, r4
  400c4e:	4628      	mov	r0, r5
  400c50:	47b0      	blx	r6
  400c52:	3401      	adds	r4, #1
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  400c54:	2c80      	cmp	r4, #128	; 0x80
  400c56:	d1f7      	bne.n	400c48 <gfx_mono_ssd1306_init+0x20>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400c58:	3501      	adds	r5, #1
  400c5a:	b2ed      	uxtb	r5, r5
  400c5c:	2d04      	cmp	r5, #4
  400c5e:	d1f2      	bne.n	400c46 <gfx_mono_ssd1306_init+0x1e>
  400c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400c64:	204009fc 	.word	0x204009fc
  400c68:	004009b1 	.word	0x004009b1
  400c6c:	00400d29 	.word	0x00400d29
  400c70:	00400ce9 	.word	0x00400ce9
  400c74:	00400bd9 	.word	0x00400bd9

00400c78 <gfx_mono_ssd1306_draw_pixel>:
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  400c78:	09c3      	lsrs	r3, r0, #7
  400c7a:	d12a      	bne.n	400cd2 <gfx_mono_ssd1306_draw_pixel+0x5a>
  400c7c:	291f      	cmp	r1, #31
  400c7e:	d828      	bhi.n	400cd2 <gfx_mono_ssd1306_draw_pixel+0x5a>
{
  400c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400c84:	4614      	mov	r4, r2
  400c86:	4605      	mov	r5, r0
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  400c88:	08ce      	lsrs	r6, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
  400c8a:	eba1 01c6 	sub.w	r1, r1, r6, lsl #3
  400c8e:	2201      	movs	r2, #1
  400c90:	fa02 f701 	lsl.w	r7, r2, r1
  400c94:	fa5f f887 	uxtb.w	r8, r7
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  400c98:	4601      	mov	r1, r0
  400c9a:	4630      	mov	r0, r6
  400c9c:	4b0d      	ldr	r3, [pc, #52]	; (400cd4 <gfx_mono_ssd1306_draw_pixel+0x5c>)
  400c9e:	4798      	blx	r3
  400ca0:	4602      	mov	r2, r0
	switch (color) {
  400ca2:	2c01      	cmp	r4, #1
  400ca4:	d009      	beq.n	400cba <gfx_mono_ssd1306_draw_pixel+0x42>
  400ca6:	b164      	cbz	r4, 400cc2 <gfx_mono_ssd1306_draw_pixel+0x4a>
  400ca8:	2c02      	cmp	r4, #2
  400caa:	d00e      	beq.n	400cca <gfx_mono_ssd1306_draw_pixel+0x52>
	gfx_mono_put_byte(page, x, pixel_value);
  400cac:	2300      	movs	r3, #0
  400cae:	4629      	mov	r1, r5
  400cb0:	4630      	mov	r0, r6
  400cb2:	4c09      	ldr	r4, [pc, #36]	; (400cd8 <gfx_mono_ssd1306_draw_pixel+0x60>)
  400cb4:	47a0      	blx	r4
  400cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pixel_value |= pixel_mask;
  400cba:	ea48 0200 	orr.w	r2, r8, r0
  400cbe:	b2d2      	uxtb	r2, r2
		break;
  400cc0:	e7f4      	b.n	400cac <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value &= ~pixel_mask;
  400cc2:	ea20 0207 	bic.w	r2, r0, r7
  400cc6:	b2d2      	uxtb	r2, r2
		break;
  400cc8:	e7f0      	b.n	400cac <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value ^= pixel_mask;
  400cca:	ea88 0200 	eor.w	r2, r8, r0
  400cce:	b2d2      	uxtb	r2, r2
		break;
  400cd0:	e7ec      	b.n	400cac <gfx_mono_ssd1306_draw_pixel+0x34>
  400cd2:	4770      	bx	lr
  400cd4:	004009cd 	.word	0x004009cd
  400cd8:	00400bd9 	.word	0x00400bd9

00400cdc <gfx_mono_ssd1306_get_byte>:
{
  400cdc:	b508      	push	{r3, lr}
	return gfx_mono_framebuffer_get_byte(page, column);
  400cde:	4b01      	ldr	r3, [pc, #4]	; (400ce4 <gfx_mono_ssd1306_get_byte+0x8>)
  400ce0:	4798      	blx	r3
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
  400ce2:	bd08      	pop	{r3, pc}
  400ce4:	004009cd 	.word	0x004009cd

00400ce8 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  400ce8:	b538      	push	{r3, r4, r5, lr}
  400cea:	4605      	mov	r5, r0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400cec:	2208      	movs	r2, #8
  400cee:	4b09      	ldr	r3, [pc, #36]	; (400d14 <ssd1306_write_command+0x2c>)
  400cf0:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(SSD1306_DC_PIN, false);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400cf2:	4c09      	ldr	r4, [pc, #36]	; (400d18 <ssd1306_write_command+0x30>)
  400cf4:	2101      	movs	r1, #1
  400cf6:	4620      	mov	r0, r4
  400cf8:	4b08      	ldr	r3, [pc, #32]	; (400d1c <ssd1306_write_command+0x34>)
  400cfa:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  400cfc:	2301      	movs	r3, #1
  400cfe:	461a      	mov	r2, r3
  400d00:	4629      	mov	r1, r5
  400d02:	4620      	mov	r0, r4
  400d04:	4c06      	ldr	r4, [pc, #24]	; (400d20 <ssd1306_write_command+0x38>)
  400d06:	47a0      	blx	r4
	delay_us(10);
  400d08:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400d0c:	4b05      	ldr	r3, [pc, #20]	; (400d24 <ssd1306_write_command+0x3c>)
  400d0e:	4798      	blx	r3
  400d10:	bd38      	pop	{r3, r4, r5, pc}
  400d12:	bf00      	nop
  400d14:	400e1000 	.word	0x400e1000
  400d18:	40008000 	.word	0x40008000
  400d1c:	00400861 	.word	0x00400861
  400d20:	00400889 	.word	0x00400889
  400d24:	20400001 	.word	0x20400001

00400d28 <ssd1306_init>:
{
  400d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400d2c:	4d66      	ldr	r5, [pc, #408]	; (400ec8 <ssd1306_init+0x1a0>)
  400d2e:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  400d32:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400d34:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400d38:	4b64      	ldr	r3, [pc, #400]	; (400ecc <ssd1306_init+0x1a4>)
  400d3a:	2708      	movs	r7, #8
  400d3c:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400d3e:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400d42:	666e      	str	r6, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400d44:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  400d48:	656e      	str	r6, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  400d4a:	626e      	str	r6, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400d4c:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400d50:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  400d52:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400d56:	672a      	str	r2, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400d58:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  400d5a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400d5e:	676a      	str	r2, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  400d60:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400d62:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400d66:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400d68:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400d6a:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400d6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400d70:	f022 0208 	bic.w	r2, r2, #8
  400d74:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400d76:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400d78:	f022 0208 	bic.w	r2, r2, #8
  400d7c:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  400d7e:	601f      	str	r7, [r3, #0]
  400d80:	602e      	str	r6, [r5, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400d82:	631f      	str	r7, [r3, #48]	; 0x30
  400d84:	632e      	str	r6, [r5, #48]	; 0x30
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  400d86:	f8df 817c 	ldr.w	r8, [pc, #380]	; 400f04 <ssd1306_init+0x1dc>
  400d8a:	2300      	movs	r3, #0
  400d8c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400d90:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400d94:	4640      	mov	r0, r8
  400d96:	4c4e      	ldr	r4, [pc, #312]	; (400ed0 <ssd1306_init+0x1a8>)
  400d98:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400d9a:	2300      	movs	r3, #0
  400d9c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400da0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400da4:	4640      	mov	r0, r8
  400da6:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400da8:	2300      	movs	r3, #0
  400daa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400dae:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400db2:	4640      	mov	r0, r8
  400db4:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  400db6:	2300      	movs	r3, #0
  400db8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400dbc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400dc0:	4640      	mov	r0, r8
  400dc2:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400dc4:	2300      	movs	r3, #0
  400dc6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400dca:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400dce:	4640      	mov	r0, r8
  400dd0:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400dd2:	2300      	movs	r3, #0
  400dd4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400dd8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400ddc:	4640      	mov	r0, r8
  400dde:	47a0      	blx	r4
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400de0:	4c3c      	ldr	r4, [pc, #240]	; (400ed4 <ssd1306_init+0x1ac>)
  400de2:	f04f 0902 	mov.w	r9, #2
  400de6:	f8c4 9000 	str.w	r9, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  400dea:	f04f 0880 	mov.w	r8, #128	; 0x80
  400dee:	f8c4 8000 	str.w	r8, [r4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  400df2:	6863      	ldr	r3, [r4, #4]
  400df4:	f043 0301 	orr.w	r3, r3, #1
  400df8:	6063      	str	r3, [r4, #4]
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  400dfa:	463a      	mov	r2, r7
  400dfc:	2101      	movs	r1, #1
  400dfe:	4620      	mov	r0, r4
  400e00:	4b35      	ldr	r3, [pc, #212]	; (400ed8 <ssd1306_init+0x1b0>)
  400e02:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  400e04:	2200      	movs	r2, #0
  400e06:	2101      	movs	r1, #1
  400e08:	4620      	mov	r0, r4
  400e0a:	4b34      	ldr	r3, [pc, #208]	; (400edc <ssd1306_init+0x1b4>)
  400e0c:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  400e0e:	2200      	movs	r2, #0
  400e10:	2101      	movs	r1, #1
  400e12:	4620      	mov	r0, r4
  400e14:	4b32      	ldr	r3, [pc, #200]	; (400ee0 <ssd1306_init+0x1b8>)
  400e16:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400e18:	6863      	ldr	r3, [r4, #4]
  400e1a:	f023 0302 	bic.w	r3, r3, #2
  400e1e:	6063      	str	r3, [r4, #4]
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  400e20:	2200      	movs	r2, #0
  400e22:	2101      	movs	r1, #1
  400e24:	4620      	mov	r0, r4
  400e26:	4b2f      	ldr	r3, [pc, #188]	; (400ee4 <ssd1306_init+0x1bc>)
  400e28:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  400e2a:	6863      	ldr	r3, [r4, #4]
  400e2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  400e30:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400e32:	6863      	ldr	r3, [r4, #4]
  400e34:	f043 0310 	orr.w	r3, r3, #16
  400e38:	6063      	str	r3, [r4, #4]
		int div = spi_calc_baudrate_div(2000000, sysclk_get_peripheral_hz());
  400e3a:	492b      	ldr	r1, [pc, #172]	; (400ee8 <ssd1306_init+0x1c0>)
  400e3c:	482b      	ldr	r0, [pc, #172]	; (400eec <ssd1306_init+0x1c4>)
  400e3e:	4b2c      	ldr	r3, [pc, #176]	; (400ef0 <ssd1306_init+0x1c8>)
  400e40:	4798      	blx	r3
		spi_set_baudrate_div(SPI0,1, div);
  400e42:	b2c2      	uxtb	r2, r0
  400e44:	2101      	movs	r1, #1
  400e46:	4620      	mov	r0, r4
  400e48:	4b2a      	ldr	r3, [pc, #168]	; (400ef4 <ssd1306_init+0x1cc>)
  400e4a:	4798      	blx	r3
		spi_enable_clock(SPI0);
  400e4c:	4620      	mov	r0, r4
  400e4e:	4b2a      	ldr	r3, [pc, #168]	; (400ef8 <ssd1306_init+0x1d0>)
  400e50:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400e52:	2301      	movs	r3, #1
  400e54:	6023      	str	r3, [r4, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400e56:	636e      	str	r6, [r5, #52]	; 0x34
	delay_cycles(delay_10us); // At lest 10us
  400e58:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400e5c:	4c27      	ldr	r4, [pc, #156]	; (400efc <ssd1306_init+0x1d4>)
  400e5e:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400e60:	632e      	str	r6, [r5, #48]	; 0x30
	delay_cycles(delay_10us); // At lest 10us
  400e62:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400e66:	47a0      	blx	r4
  400e68:	632e      	str	r6, [r5, #48]	; 0x30
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  400e6a:	20a8      	movs	r0, #168	; 0xa8
  400e6c:	4c24      	ldr	r4, [pc, #144]	; (400f00 <ssd1306_init+0x1d8>)
  400e6e:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  400e70:	201f      	movs	r0, #31
  400e72:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  400e74:	20d3      	movs	r0, #211	; 0xd3
  400e76:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  400e78:	2000      	movs	r0, #0
  400e7a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  400e7c:	2040      	movs	r0, #64	; 0x40
  400e7e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  400e80:	20a1      	movs	r0, #161	; 0xa1
  400e82:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  400e84:	20c8      	movs	r0, #200	; 0xc8
  400e86:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  400e88:	20da      	movs	r0, #218	; 0xda
  400e8a:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  400e8c:	4648      	mov	r0, r9
  400e8e:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  400e90:	2081      	movs	r0, #129	; 0x81
  400e92:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  400e94:	208f      	movs	r0, #143	; 0x8f
  400e96:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  400e98:	20a4      	movs	r0, #164	; 0xa4
  400e9a:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  400e9c:	20a6      	movs	r0, #166	; 0xa6
  400e9e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  400ea0:	20d5      	movs	r0, #213	; 0xd5
  400ea2:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  400ea4:	4640      	mov	r0, r8
  400ea6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  400ea8:	208d      	movs	r0, #141	; 0x8d
  400eaa:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  400eac:	2014      	movs	r0, #20
  400eae:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  400eb0:	20db      	movs	r0, #219	; 0xdb
  400eb2:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  400eb4:	2040      	movs	r0, #64	; 0x40
  400eb6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  400eb8:	20d9      	movs	r0, #217	; 0xd9
  400eba:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  400ebc:	20f1      	movs	r0, #241	; 0xf1
  400ebe:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  400ec0:	20af      	movs	r0, #175	; 0xaf
  400ec2:	47a0      	blx	r4
  400ec4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400ec8:	400e1200 	.word	0x400e1200
  400ecc:	400e1000 	.word	0x400e1000
  400ed0:	004012f1 	.word	0x004012f1
  400ed4:	40008000 	.word	0x40008000
  400ed8:	004008f9 	.word	0x004008f9
  400edc:	004008bd 	.word	0x004008bd
  400ee0:	004008db 	.word	0x004008db
  400ee4:	0040093f 	.word	0x0040093f
  400ee8:	08f0d180 	.word	0x08f0d180
  400eec:	001e8480 	.word	0x001e8480
  400ef0:	00400953 	.word	0x00400953
  400ef4:	00400969 	.word	0x00400969
  400ef8:	00400835 	.word	0x00400835
  400efc:	20400001 	.word	0x20400001
  400f00:	00400ce9 	.word	0x00400ce9
  400f04:	400e1400 	.word	0x400e1400

00400f08 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  400f08:	b538      	push	{r3, r4, r5, lr}
  400f0a:	4605      	mov	r5, r0
  400f0c:	2208      	movs	r2, #8
  400f0e:	4b09      	ldr	r3, [pc, #36]	; (400f34 <ssd1306_write_data+0x2c>)
  400f10:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(SSD1306_DC_PIN, true);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400f12:	4c09      	ldr	r4, [pc, #36]	; (400f38 <ssd1306_write_data+0x30>)
  400f14:	2101      	movs	r1, #1
  400f16:	4620      	mov	r0, r4
  400f18:	4b08      	ldr	r3, [pc, #32]	; (400f3c <ssd1306_write_data+0x34>)
  400f1a:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  400f1c:	2301      	movs	r3, #1
  400f1e:	461a      	mov	r2, r3
  400f20:	4629      	mov	r1, r5
  400f22:	4620      	mov	r0, r4
  400f24:	4c06      	ldr	r4, [pc, #24]	; (400f40 <ssd1306_write_data+0x38>)
  400f26:	47a0      	blx	r4
	delay_us(10);
  400f28:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400f2c:	4b05      	ldr	r3, [pc, #20]	; (400f44 <ssd1306_write_data+0x3c>)
  400f2e:	4798      	blx	r3
  400f30:	bd38      	pop	{r3, r4, r5, pc}
  400f32:	bf00      	nop
  400f34:	400e1000 	.word	0x400e1000
  400f38:	40008000 	.word	0x40008000
  400f3c:	00400861 	.word	0x00400861
  400f40:	00400889 	.word	0x00400889
  400f44:	20400001 	.word	0x20400001

00400f48 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400f48:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400f4a:	4810      	ldr	r0, [pc, #64]	; (400f8c <sysclk_init+0x44>)
  400f4c:	4b10      	ldr	r3, [pc, #64]	; (400f90 <sysclk_init+0x48>)
  400f4e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400f50:	213e      	movs	r1, #62	; 0x3e
  400f52:	2000      	movs	r0, #0
  400f54:	4b0f      	ldr	r3, [pc, #60]	; (400f94 <sysclk_init+0x4c>)
  400f56:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400f58:	4c0f      	ldr	r4, [pc, #60]	; (400f98 <sysclk_init+0x50>)
  400f5a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400f5c:	2800      	cmp	r0, #0
  400f5e:	d0fc      	beq.n	400f5a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400f60:	4b0e      	ldr	r3, [pc, #56]	; (400f9c <sysclk_init+0x54>)
  400f62:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400f64:	4a0e      	ldr	r2, [pc, #56]	; (400fa0 <sysclk_init+0x58>)
  400f66:	4b0f      	ldr	r3, [pc, #60]	; (400fa4 <sysclk_init+0x5c>)
  400f68:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400f6a:	4c0f      	ldr	r4, [pc, #60]	; (400fa8 <sysclk_init+0x60>)
  400f6c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400f6e:	2800      	cmp	r0, #0
  400f70:	d0fc      	beq.n	400f6c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400f72:	2002      	movs	r0, #2
  400f74:	4b0d      	ldr	r3, [pc, #52]	; (400fac <sysclk_init+0x64>)
  400f76:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400f78:	2000      	movs	r0, #0
  400f7a:	4b0d      	ldr	r3, [pc, #52]	; (400fb0 <sysclk_init+0x68>)
  400f7c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400f7e:	4b0d      	ldr	r3, [pc, #52]	; (400fb4 <sysclk_init+0x6c>)
  400f80:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400f82:	4802      	ldr	r0, [pc, #8]	; (400f8c <sysclk_init+0x44>)
  400f84:	4b02      	ldr	r3, [pc, #8]	; (400f90 <sysclk_init+0x48>)
  400f86:	4798      	blx	r3
  400f88:	bd10      	pop	{r4, pc}
  400f8a:	bf00      	nop
  400f8c:	11e1a300 	.word	0x11e1a300
  400f90:	00401a95 	.word	0x00401a95
  400f94:	004016b1 	.word	0x004016b1
  400f98:	00401705 	.word	0x00401705
  400f9c:	00401715 	.word	0x00401715
  400fa0:	20183f01 	.word	0x20183f01
  400fa4:	400e0600 	.word	0x400e0600
  400fa8:	00401725 	.word	0x00401725
  400fac:	00401615 	.word	0x00401615
  400fb0:	0040164d 	.word	0x0040164d
  400fb4:	00401989 	.word	0x00401989

00400fb8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400fbc:	b980      	cbnz	r0, 400fe0 <_read+0x28>
  400fbe:	460c      	mov	r4, r1
  400fc0:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400fc2:	2a00      	cmp	r2, #0
  400fc4:	dd0f      	ble.n	400fe6 <_read+0x2e>
  400fc6:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400fc8:	4e08      	ldr	r6, [pc, #32]	; (400fec <_read+0x34>)
  400fca:	4d09      	ldr	r5, [pc, #36]	; (400ff0 <_read+0x38>)
  400fcc:	6830      	ldr	r0, [r6, #0]
  400fce:	4621      	mov	r1, r4
  400fd0:	682b      	ldr	r3, [r5, #0]
  400fd2:	4798      	blx	r3
		ptr++;
  400fd4:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400fd6:	42bc      	cmp	r4, r7
  400fd8:	d1f8      	bne.n	400fcc <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400fda:	4640      	mov	r0, r8
  400fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400fe0:	f04f 38ff 	mov.w	r8, #4294967295
  400fe4:	e7f9      	b.n	400fda <_read+0x22>
	for (; len > 0; --len) {
  400fe6:	4680      	mov	r8, r0
  400fe8:	e7f7      	b.n	400fda <_read+0x22>
  400fea:	bf00      	nop
  400fec:	20400e74 	.word	0x20400e74
  400ff0:	20400e6c 	.word	0x20400e6c

00400ff4 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400ff4:	3801      	subs	r0, #1
  400ff6:	2802      	cmp	r0, #2
  400ff8:	d815      	bhi.n	401026 <_write+0x32>
{
  400ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400ffe:	460e      	mov	r6, r1
  401000:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  401002:	b19a      	cbz	r2, 40102c <_write+0x38>
  401004:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  401006:	f8df 8038 	ldr.w	r8, [pc, #56]	; 401040 <_write+0x4c>
  40100a:	4f0c      	ldr	r7, [pc, #48]	; (40103c <_write+0x48>)
  40100c:	f8d8 0000 	ldr.w	r0, [r8]
  401010:	f815 1b01 	ldrb.w	r1, [r5], #1
  401014:	683b      	ldr	r3, [r7, #0]
  401016:	4798      	blx	r3
  401018:	2800      	cmp	r0, #0
  40101a:	db0a      	blt.n	401032 <_write+0x3e>
  40101c:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  40101e:	3c01      	subs	r4, #1
  401020:	d1f4      	bne.n	40100c <_write+0x18>
  401022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  401026:	f04f 30ff 	mov.w	r0, #4294967295
  40102a:	4770      	bx	lr
	for (; len != 0; --len) {
  40102c:	4610      	mov	r0, r2
  40102e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  401032:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  401036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40103a:	bf00      	nop
  40103c:	20400e70 	.word	0x20400e70
  401040:	20400e74 	.word	0x20400e74

00401044 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  401044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  401046:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40104a:	4b5c      	ldr	r3, [pc, #368]	; (4011bc <board_init+0x178>)
  40104c:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  40104e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401052:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  401056:	4b5a      	ldr	r3, [pc, #360]	; (4011c0 <board_init+0x17c>)
  401058:	2200      	movs	r2, #0
  40105a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  40105e:	695a      	ldr	r2, [r3, #20]
  401060:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  401064:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  401066:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40106a:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  40106e:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  401072:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  401076:	f007 0007 	and.w	r0, r7, #7
  40107a:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40107c:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  401080:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  401084:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  401088:	f3bf 8f4f 	dsb	sy
  40108c:	f04f 34ff 	mov.w	r4, #4294967295
  401090:	fa04 fc00 	lsl.w	ip, r4, r0
  401094:	fa06 f000 	lsl.w	r0, r6, r0
  401098:	fa04 f40e 	lsl.w	r4, r4, lr
  40109c:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  4010a0:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  4010a2:	463a      	mov	r2, r7
  4010a4:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  4010a6:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  4010aa:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  4010ae:	3a01      	subs	r2, #1
  4010b0:	4423      	add	r3, r4
  4010b2:	f1b2 3fff 	cmp.w	r2, #4294967295
  4010b6:	d1f6      	bne.n	4010a6 <board_init+0x62>
        } while(sets--);
  4010b8:	3e01      	subs	r6, #1
  4010ba:	4460      	add	r0, ip
  4010bc:	f1b6 3fff 	cmp.w	r6, #4294967295
  4010c0:	d1ef      	bne.n	4010a2 <board_init+0x5e>
  4010c2:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  4010c6:	4b3e      	ldr	r3, [pc, #248]	; (4011c0 <board_init+0x17c>)
  4010c8:	695a      	ldr	r2, [r3, #20]
  4010ca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  4010ce:	615a      	str	r2, [r3, #20]
  4010d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4010d4:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4010d8:	4a3a      	ldr	r2, [pc, #232]	; (4011c4 <board_init+0x180>)
  4010da:	493b      	ldr	r1, [pc, #236]	; (4011c8 <board_init+0x184>)
  4010dc:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4010de:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  4010e2:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  4010e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4010e8:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  4010ec:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  4010f0:	f022 0201 	bic.w	r2, r2, #1
  4010f4:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  4010f8:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  4010fc:	f022 0201 	bic.w	r2, r2, #1
  401100:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  401104:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401108:	f3bf 8f6f 	isb	sy
  40110c:	200a      	movs	r0, #10
  40110e:	4c2f      	ldr	r4, [pc, #188]	; (4011cc <board_init+0x188>)
  401110:	47a0      	blx	r4
  401112:	200b      	movs	r0, #11
  401114:	47a0      	blx	r4
  401116:	200c      	movs	r0, #12
  401118:	47a0      	blx	r4
  40111a:	2010      	movs	r0, #16
  40111c:	47a0      	blx	r4
  40111e:	2011      	movs	r0, #17
  401120:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401122:	4b2b      	ldr	r3, [pc, #172]	; (4011d0 <board_init+0x18c>)
  401124:	f44f 7280 	mov.w	r2, #256	; 0x100
  401128:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40112a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40112e:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401130:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  401134:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401138:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40113a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40113e:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  401140:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401144:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  401146:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  401148:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  40114c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40114e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  401152:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401154:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401156:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40115a:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  40115c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  401160:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  401164:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  401168:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40116c:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40116e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401172:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401174:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401176:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40117a:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40117c:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  401180:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401182:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401184:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  401188:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40118a:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  40118c:	4a11      	ldr	r2, [pc, #68]	; (4011d4 <board_init+0x190>)
  40118e:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  401192:	f043 0310 	orr.w	r3, r3, #16
  401196:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  40119a:	4b0f      	ldr	r3, [pc, #60]	; (4011d8 <board_init+0x194>)
  40119c:	2210      	movs	r2, #16
  40119e:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4011a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4011a4:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4011a6:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4011a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4011ac:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4011ae:	4311      	orrs	r1, r2
  4011b0:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4011b2:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4011b4:	4311      	orrs	r1, r2
  4011b6:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4011b8:	605a      	str	r2, [r3, #4]
  4011ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4011bc:	400e1850 	.word	0x400e1850
  4011c0:	e000ed00 	.word	0xe000ed00
  4011c4:	400e0c00 	.word	0x400e0c00
  4011c8:	5a00080c 	.word	0x5a00080c
  4011cc:	00401735 	.word	0x00401735
  4011d0:	400e1200 	.word	0x400e1200
  4011d4:	40088000 	.word	0x40088000
  4011d8:	400e1000 	.word	0x400e1000

004011dc <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  4011dc:	6301      	str	r1, [r0, #48]	; 0x30
  4011de:	4770      	bx	lr

004011e0 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  4011e0:	6341      	str	r1, [r0, #52]	; 0x34
  4011e2:	4770      	bx	lr

004011e4 <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  4011e4:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  4011e8:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4011ec:	d105      	bne.n	4011fa <pio_get+0x16>
		ul_reg = p_pio->PIO_ODSR;
  4011ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
	}

	if ((ul_reg & ul_mask) == 0) {
  4011f0:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
  4011f2:	bf14      	ite	ne
  4011f4:	2001      	movne	r0, #1
  4011f6:	2000      	moveq	r0, #0
  4011f8:	4770      	bx	lr
		ul_reg = p_pio->PIO_PDSR;
  4011fa:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  4011fc:	e7f8      	b.n	4011f0 <pio_get+0xc>

004011fe <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4011fe:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401200:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401204:	d03a      	beq.n	40127c <pio_set_peripheral+0x7e>
  401206:	d813      	bhi.n	401230 <pio_set_peripheral+0x32>
  401208:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40120c:	d025      	beq.n	40125a <pio_set_peripheral+0x5c>
  40120e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401212:	d10a      	bne.n	40122a <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401214:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401216:	4313      	orrs	r3, r2
  401218:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40121a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40121c:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40121e:	400b      	ands	r3, r1
  401220:	ea23 0302 	bic.w	r3, r3, r2
  401224:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401226:	6042      	str	r2, [r0, #4]
  401228:	4770      	bx	lr
	switch (ul_type) {
  40122a:	2900      	cmp	r1, #0
  40122c:	d1fb      	bne.n	401226 <pio_set_peripheral+0x28>
  40122e:	4770      	bx	lr
  401230:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401234:	d021      	beq.n	40127a <pio_set_peripheral+0x7c>
  401236:	d809      	bhi.n	40124c <pio_set_peripheral+0x4e>
  401238:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40123c:	d1f3      	bne.n	401226 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  40123e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401240:	4313      	orrs	r3, r2
  401242:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401244:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401246:	4313      	orrs	r3, r2
  401248:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40124a:	e7ec      	b.n	401226 <pio_set_peripheral+0x28>
	switch (ul_type) {
  40124c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401250:	d013      	beq.n	40127a <pio_set_peripheral+0x7c>
  401252:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401256:	d010      	beq.n	40127a <pio_set_peripheral+0x7c>
  401258:	e7e5      	b.n	401226 <pio_set_peripheral+0x28>
{
  40125a:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  40125c:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40125e:	6f04      	ldr	r4, [r0, #112]	; 0x70
  401260:	43d3      	mvns	r3, r2
  401262:	4021      	ands	r1, r4
  401264:	461c      	mov	r4, r3
  401266:	4019      	ands	r1, r3
  401268:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40126a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40126c:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40126e:	400b      	ands	r3, r1
  401270:	4023      	ands	r3, r4
  401272:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  401274:	6042      	str	r2, [r0, #4]
}
  401276:	f85d 4b04 	ldr.w	r4, [sp], #4
  40127a:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  40127c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40127e:	6f01      	ldr	r1, [r0, #112]	; 0x70
  401280:	400b      	ands	r3, r1
  401282:	ea23 0302 	bic.w	r3, r3, r2
  401286:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401288:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40128a:	4313      	orrs	r3, r2
  40128c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40128e:	e7ca      	b.n	401226 <pio_set_peripheral+0x28>

00401290 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401290:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401292:	f012 0f01 	tst.w	r2, #1
  401296:	d10d      	bne.n	4012b4 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  401298:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40129a:	f012 0f0a 	tst.w	r2, #10
  40129e:	d00b      	beq.n	4012b8 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  4012a0:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  4012a2:	f012 0f02 	tst.w	r2, #2
  4012a6:	d109      	bne.n	4012bc <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  4012a8:	f012 0f08 	tst.w	r2, #8
  4012ac:	d008      	beq.n	4012c0 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  4012ae:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  4012b2:	e005      	b.n	4012c0 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  4012b4:	6641      	str	r1, [r0, #100]	; 0x64
  4012b6:	e7f0      	b.n	40129a <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  4012b8:	6241      	str	r1, [r0, #36]	; 0x24
  4012ba:	e7f2      	b.n	4012a2 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  4012bc:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  4012c0:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4012c2:	6001      	str	r1, [r0, #0]
  4012c4:	4770      	bx	lr

004012c6 <pio_set_output>:
{
  4012c6:	b410      	push	{r4}
  4012c8:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  4012ca:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4012cc:	b94c      	cbnz	r4, 4012e2 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  4012ce:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  4012d0:	b14b      	cbz	r3, 4012e6 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  4012d2:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  4012d4:	b94a      	cbnz	r2, 4012ea <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  4012d6:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  4012d8:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4012da:	6001      	str	r1, [r0, #0]
}
  4012dc:	f85d 4b04 	ldr.w	r4, [sp], #4
  4012e0:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  4012e2:	6641      	str	r1, [r0, #100]	; 0x64
  4012e4:	e7f4      	b.n	4012d0 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  4012e6:	6541      	str	r1, [r0, #84]	; 0x54
  4012e8:	e7f4      	b.n	4012d4 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  4012ea:	6301      	str	r1, [r0, #48]	; 0x30
  4012ec:	e7f4      	b.n	4012d8 <pio_set_output+0x12>
	...

004012f0 <pio_configure>:
{
  4012f0:	b570      	push	{r4, r5, r6, lr}
  4012f2:	b082      	sub	sp, #8
  4012f4:	4605      	mov	r5, r0
  4012f6:	4616      	mov	r6, r2
  4012f8:	461c      	mov	r4, r3
	switch (ul_type) {
  4012fa:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4012fe:	d014      	beq.n	40132a <pio_configure+0x3a>
  401300:	d90a      	bls.n	401318 <pio_configure+0x28>
  401302:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401306:	d024      	beq.n	401352 <pio_configure+0x62>
  401308:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40130c:	d021      	beq.n	401352 <pio_configure+0x62>
  40130e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401312:	d017      	beq.n	401344 <pio_configure+0x54>
		return 0;
  401314:	2000      	movs	r0, #0
  401316:	e01a      	b.n	40134e <pio_configure+0x5e>
	switch (ul_type) {
  401318:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40131c:	d005      	beq.n	40132a <pio_configure+0x3a>
  40131e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401322:	d002      	beq.n	40132a <pio_configure+0x3a>
  401324:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401328:	d1f4      	bne.n	401314 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  40132a:	4632      	mov	r2, r6
  40132c:	4628      	mov	r0, r5
  40132e:	4b11      	ldr	r3, [pc, #68]	; (401374 <pio_configure+0x84>)
  401330:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401332:	f014 0f01 	tst.w	r4, #1
  401336:	d102      	bne.n	40133e <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  401338:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  40133a:	2001      	movs	r0, #1
  40133c:	e007      	b.n	40134e <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  40133e:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  401340:	2001      	movs	r0, #1
  401342:	e004      	b.n	40134e <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  401344:	461a      	mov	r2, r3
  401346:	4631      	mov	r1, r6
  401348:	4b0b      	ldr	r3, [pc, #44]	; (401378 <pio_configure+0x88>)
  40134a:	4798      	blx	r3
	return 1;
  40134c:	2001      	movs	r0, #1
}
  40134e:	b002      	add	sp, #8
  401350:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  401352:	f004 0301 	and.w	r3, r4, #1
  401356:	9300      	str	r3, [sp, #0]
  401358:	f3c4 0380 	ubfx	r3, r4, #2, #1
  40135c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401360:	bf14      	ite	ne
  401362:	2200      	movne	r2, #0
  401364:	2201      	moveq	r2, #1
  401366:	4631      	mov	r1, r6
  401368:	4628      	mov	r0, r5
  40136a:	4c04      	ldr	r4, [pc, #16]	; (40137c <pio_configure+0x8c>)
  40136c:	47a0      	blx	r4
	return 1;
  40136e:	2001      	movs	r0, #1
		break;
  401370:	e7ed      	b.n	40134e <pio_configure+0x5e>
  401372:	bf00      	nop
  401374:	004011ff 	.word	0x004011ff
  401378:	00401291 	.word	0x00401291
  40137c:	004012c7 	.word	0x004012c7

00401380 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  401380:	f012 0f10 	tst.w	r2, #16
  401384:	d012      	beq.n	4013ac <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  401386:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  40138a:	f012 0f20 	tst.w	r2, #32
  40138e:	d007      	beq.n	4013a0 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  401390:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  401394:	f012 0f40 	tst.w	r2, #64	; 0x40
  401398:	d005      	beq.n	4013a6 <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  40139a:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  40139e:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  4013a0:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  4013a4:	e7f6      	b.n	401394 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  4013a6:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  4013aa:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  4013ac:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  4013b0:	4770      	bx	lr

004013b2 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  4013b2:	6401      	str	r1, [r0, #64]	; 0x40
  4013b4:	4770      	bx	lr

004013b6 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4013b6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4013b8:	4770      	bx	lr

004013ba <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4013ba:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4013bc:	4770      	bx	lr
	...

004013c0 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  4013c0:	b570      	push	{r4, r5, r6, lr}
  4013c2:	b082      	sub	sp, #8
  4013c4:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4013c6:	4c46      	ldr	r4, [pc, #280]	; (4014e0 <pio_configure_pin+0x120>)
  4013c8:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  4013cc:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  4013ce:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  4013d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4013d6:	d059      	beq.n	40148c <pio_configure_pin+0xcc>
  4013d8:	d80a      	bhi.n	4013f0 <pio_configure_pin+0x30>
  4013da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4013de:	d02f      	beq.n	401440 <pio_configure_pin+0x80>
  4013e0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4013e4:	d03f      	beq.n	401466 <pio_configure_pin+0xa6>
  4013e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4013ea:	d016      	beq.n	40141a <pio_configure_pin+0x5a>
		return 0;
  4013ec:	2000      	movs	r0, #0
  4013ee:	e012      	b.n	401416 <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  4013f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4013f4:	d05d      	beq.n	4014b2 <pio_configure_pin+0xf2>
  4013f6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4013fa:	d05a      	beq.n	4014b2 <pio_configure_pin+0xf2>
  4013fc:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401400:	d1f4      	bne.n	4013ec <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401402:	f000 011f 	and.w	r1, r0, #31
  401406:	2601      	movs	r6, #1
  401408:	462a      	mov	r2, r5
  40140a:	fa06 f101 	lsl.w	r1, r6, r1
  40140e:	4620      	mov	r0, r4
  401410:	4b34      	ldr	r3, [pc, #208]	; (4014e4 <pio_configure_pin+0x124>)
  401412:	4798      	blx	r3
	return 1;
  401414:	4630      	mov	r0, r6
}
  401416:	b002      	add	sp, #8
  401418:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  40141a:	f000 001f 	and.w	r0, r0, #31
  40141e:	2601      	movs	r6, #1
  401420:	4086      	lsls	r6, r0
  401422:	4632      	mov	r2, r6
  401424:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401428:	4620      	mov	r0, r4
  40142a:	4b2f      	ldr	r3, [pc, #188]	; (4014e8 <pio_configure_pin+0x128>)
  40142c:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40142e:	f015 0f01 	tst.w	r5, #1
  401432:	d102      	bne.n	40143a <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  401434:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  401436:	2001      	movs	r0, #1
  401438:	e7ed      	b.n	401416 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  40143a:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  40143c:	2001      	movs	r0, #1
  40143e:	e7ea      	b.n	401416 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401440:	f000 001f 	and.w	r0, r0, #31
  401444:	2601      	movs	r6, #1
  401446:	4086      	lsls	r6, r0
  401448:	4632      	mov	r2, r6
  40144a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40144e:	4620      	mov	r0, r4
  401450:	4b25      	ldr	r3, [pc, #148]	; (4014e8 <pio_configure_pin+0x128>)
  401452:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401454:	f015 0f01 	tst.w	r5, #1
  401458:	d102      	bne.n	401460 <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  40145a:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  40145c:	2001      	movs	r0, #1
  40145e:	e7da      	b.n	401416 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  401460:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  401462:	2001      	movs	r0, #1
  401464:	e7d7      	b.n	401416 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  401466:	f000 001f 	and.w	r0, r0, #31
  40146a:	2601      	movs	r6, #1
  40146c:	4086      	lsls	r6, r0
  40146e:	4632      	mov	r2, r6
  401470:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401474:	4620      	mov	r0, r4
  401476:	4b1c      	ldr	r3, [pc, #112]	; (4014e8 <pio_configure_pin+0x128>)
  401478:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40147a:	f015 0f01 	tst.w	r5, #1
  40147e:	d102      	bne.n	401486 <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  401480:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  401482:	2001      	movs	r0, #1
  401484:	e7c7      	b.n	401416 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  401486:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  401488:	2001      	movs	r0, #1
  40148a:	e7c4      	b.n	401416 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  40148c:	f000 001f 	and.w	r0, r0, #31
  401490:	2601      	movs	r6, #1
  401492:	4086      	lsls	r6, r0
  401494:	4632      	mov	r2, r6
  401496:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40149a:	4620      	mov	r0, r4
  40149c:	4b12      	ldr	r3, [pc, #72]	; (4014e8 <pio_configure_pin+0x128>)
  40149e:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4014a0:	f015 0f01 	tst.w	r5, #1
  4014a4:	d102      	bne.n	4014ac <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  4014a6:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4014a8:	2001      	movs	r0, #1
  4014aa:	e7b4      	b.n	401416 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4014ac:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4014ae:	2001      	movs	r0, #1
  4014b0:	e7b1      	b.n	401416 <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4014b2:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4014b6:	f000 011f 	and.w	r1, r0, #31
  4014ba:	2601      	movs	r6, #1
  4014bc:	ea05 0306 	and.w	r3, r5, r6
  4014c0:	9300      	str	r3, [sp, #0]
  4014c2:	f3c5 0380 	ubfx	r3, r5, #2, #1
  4014c6:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4014ca:	bf14      	ite	ne
  4014cc:	2200      	movne	r2, #0
  4014ce:	2201      	moveq	r2, #1
  4014d0:	fa06 f101 	lsl.w	r1, r6, r1
  4014d4:	4620      	mov	r0, r4
  4014d6:	4c05      	ldr	r4, [pc, #20]	; (4014ec <pio_configure_pin+0x12c>)
  4014d8:	47a0      	blx	r4
	return 1;
  4014da:	4630      	mov	r0, r6
		break;
  4014dc:	e79b      	b.n	401416 <pio_configure_pin+0x56>
  4014de:	bf00      	nop
  4014e0:	00200707 	.word	0x00200707
  4014e4:	00401291 	.word	0x00401291
  4014e8:	004011ff 	.word	0x004011ff
  4014ec:	004012c7 	.word	0x004012c7

004014f0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4014f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4014f4:	4604      	mov	r4, r0
  4014f6:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4014f8:	4b0e      	ldr	r3, [pc, #56]	; (401534 <pio_handler_process+0x44>)
  4014fa:	4798      	blx	r3
  4014fc:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4014fe:	4620      	mov	r0, r4
  401500:	4b0d      	ldr	r3, [pc, #52]	; (401538 <pio_handler_process+0x48>)
  401502:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  401504:	4005      	ands	r5, r0
  401506:	d013      	beq.n	401530 <pio_handler_process+0x40>
  401508:	4c0c      	ldr	r4, [pc, #48]	; (40153c <pio_handler_process+0x4c>)
  40150a:	f104 0660 	add.w	r6, r4, #96	; 0x60
  40150e:	e003      	b.n	401518 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401510:	42b4      	cmp	r4, r6
  401512:	d00d      	beq.n	401530 <pio_handler_process+0x40>
  401514:	3410      	adds	r4, #16
		while (status != 0) {
  401516:	b15d      	cbz	r5, 401530 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401518:	6820      	ldr	r0, [r4, #0]
  40151a:	4540      	cmp	r0, r8
  40151c:	d1f8      	bne.n	401510 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40151e:	6861      	ldr	r1, [r4, #4]
  401520:	4229      	tst	r1, r5
  401522:	d0f5      	beq.n	401510 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401524:	68e3      	ldr	r3, [r4, #12]
  401526:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401528:	6863      	ldr	r3, [r4, #4]
  40152a:	ea25 0503 	bic.w	r5, r5, r3
  40152e:	e7ef      	b.n	401510 <pio_handler_process+0x20>
  401530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401534:	004013b7 	.word	0x004013b7
  401538:	004013bb 	.word	0x004013bb
  40153c:	20400bfc 	.word	0x20400bfc

00401540 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  401540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  401542:	4c18      	ldr	r4, [pc, #96]	; (4015a4 <pio_handler_set+0x64>)
  401544:	6826      	ldr	r6, [r4, #0]
  401546:	2e06      	cmp	r6, #6
  401548:	d82a      	bhi.n	4015a0 <pio_handler_set+0x60>
  40154a:	f04f 0c00 	mov.w	ip, #0
  40154e:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  401550:	4f15      	ldr	r7, [pc, #84]	; (4015a8 <pio_handler_set+0x68>)
  401552:	e004      	b.n	40155e <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  401554:	3401      	adds	r4, #1
  401556:	b2e4      	uxtb	r4, r4
  401558:	46a4      	mov	ip, r4
  40155a:	42a6      	cmp	r6, r4
  40155c:	d309      	bcc.n	401572 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  40155e:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  401560:	0125      	lsls	r5, r4, #4
  401562:	597d      	ldr	r5, [r7, r5]
  401564:	428d      	cmp	r5, r1
  401566:	d1f5      	bne.n	401554 <pio_handler_set+0x14>
  401568:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  40156c:	686d      	ldr	r5, [r5, #4]
  40156e:	4295      	cmp	r5, r2
  401570:	d1f0      	bne.n	401554 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  401572:	4d0d      	ldr	r5, [pc, #52]	; (4015a8 <pio_handler_set+0x68>)
  401574:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  401578:	eb05 040e 	add.w	r4, r5, lr
  40157c:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  401580:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  401582:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  401584:	9906      	ldr	r1, [sp, #24]
  401586:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  401588:	3601      	adds	r6, #1
  40158a:	4566      	cmp	r6, ip
  40158c:	d005      	beq.n	40159a <pio_handler_set+0x5a>
  40158e:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  401590:	461a      	mov	r2, r3
  401592:	4b06      	ldr	r3, [pc, #24]	; (4015ac <pio_handler_set+0x6c>)
  401594:	4798      	blx	r3

	return 0;
  401596:	2000      	movs	r0, #0
  401598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  40159a:	4902      	ldr	r1, [pc, #8]	; (4015a4 <pio_handler_set+0x64>)
  40159c:	600e      	str	r6, [r1, #0]
  40159e:	e7f6      	b.n	40158e <pio_handler_set+0x4e>
		return 1;
  4015a0:	2001      	movs	r0, #1
}
  4015a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4015a4:	20400c6c 	.word	0x20400c6c
  4015a8:	20400bfc 	.word	0x20400bfc
  4015ac:	00401381 	.word	0x00401381

004015b0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4015b0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4015b2:	210a      	movs	r1, #10
  4015b4:	4801      	ldr	r0, [pc, #4]	; (4015bc <PIOA_Handler+0xc>)
  4015b6:	4b02      	ldr	r3, [pc, #8]	; (4015c0 <PIOA_Handler+0x10>)
  4015b8:	4798      	blx	r3
  4015ba:	bd08      	pop	{r3, pc}
  4015bc:	400e0e00 	.word	0x400e0e00
  4015c0:	004014f1 	.word	0x004014f1

004015c4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4015c4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4015c6:	210b      	movs	r1, #11
  4015c8:	4801      	ldr	r0, [pc, #4]	; (4015d0 <PIOB_Handler+0xc>)
  4015ca:	4b02      	ldr	r3, [pc, #8]	; (4015d4 <PIOB_Handler+0x10>)
  4015cc:	4798      	blx	r3
  4015ce:	bd08      	pop	{r3, pc}
  4015d0:	400e1000 	.word	0x400e1000
  4015d4:	004014f1 	.word	0x004014f1

004015d8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4015d8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4015da:	210c      	movs	r1, #12
  4015dc:	4801      	ldr	r0, [pc, #4]	; (4015e4 <PIOC_Handler+0xc>)
  4015de:	4b02      	ldr	r3, [pc, #8]	; (4015e8 <PIOC_Handler+0x10>)
  4015e0:	4798      	blx	r3
  4015e2:	bd08      	pop	{r3, pc}
  4015e4:	400e1200 	.word	0x400e1200
  4015e8:	004014f1 	.word	0x004014f1

004015ec <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4015ec:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4015ee:	2110      	movs	r1, #16
  4015f0:	4801      	ldr	r0, [pc, #4]	; (4015f8 <PIOD_Handler+0xc>)
  4015f2:	4b02      	ldr	r3, [pc, #8]	; (4015fc <PIOD_Handler+0x10>)
  4015f4:	4798      	blx	r3
  4015f6:	bd08      	pop	{r3, pc}
  4015f8:	400e1400 	.word	0x400e1400
  4015fc:	004014f1 	.word	0x004014f1

00401600 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  401600:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  401602:	2111      	movs	r1, #17
  401604:	4801      	ldr	r0, [pc, #4]	; (40160c <PIOE_Handler+0xc>)
  401606:	4b02      	ldr	r3, [pc, #8]	; (401610 <PIOE_Handler+0x10>)
  401608:	4798      	blx	r3
  40160a:	bd08      	pop	{r3, pc}
  40160c:	400e1600 	.word	0x400e1600
  401610:	004014f1 	.word	0x004014f1

00401614 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  401614:	2803      	cmp	r0, #3
  401616:	d011      	beq.n	40163c <pmc_mck_set_division+0x28>
  401618:	2804      	cmp	r0, #4
  40161a:	d012      	beq.n	401642 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40161c:	2802      	cmp	r0, #2
  40161e:	bf0c      	ite	eq
  401620:	f44f 7180 	moveq.w	r1, #256	; 0x100
  401624:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  401626:	4a08      	ldr	r2, [pc, #32]	; (401648 <pmc_mck_set_division+0x34>)
  401628:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40162a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40162e:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  401630:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401632:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401634:	f013 0f08 	tst.w	r3, #8
  401638:	d0fb      	beq.n	401632 <pmc_mck_set_division+0x1e>
}
  40163a:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  40163c:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  401640:	e7f1      	b.n	401626 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401642:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  401646:	e7ee      	b.n	401626 <pmc_mck_set_division+0x12>
  401648:	400e0600 	.word	0x400e0600

0040164c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40164c:	4a17      	ldr	r2, [pc, #92]	; (4016ac <pmc_switch_mck_to_pllack+0x60>)
  40164e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401654:	4318      	orrs	r0, r3
  401656:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401658:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40165a:	f013 0f08 	tst.w	r3, #8
  40165e:	d10a      	bne.n	401676 <pmc_switch_mck_to_pllack+0x2a>
  401660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401664:	4911      	ldr	r1, [pc, #68]	; (4016ac <pmc_switch_mck_to_pllack+0x60>)
  401666:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401668:	f012 0f08 	tst.w	r2, #8
  40166c:	d103      	bne.n	401676 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40166e:	3b01      	subs	r3, #1
  401670:	d1f9      	bne.n	401666 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  401672:	2001      	movs	r0, #1
  401674:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401676:	4a0d      	ldr	r2, [pc, #52]	; (4016ac <pmc_switch_mck_to_pllack+0x60>)
  401678:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40167a:	f023 0303 	bic.w	r3, r3, #3
  40167e:	f043 0302 	orr.w	r3, r3, #2
  401682:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401684:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401686:	f013 0f08 	tst.w	r3, #8
  40168a:	d10a      	bne.n	4016a2 <pmc_switch_mck_to_pllack+0x56>
  40168c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401690:	4906      	ldr	r1, [pc, #24]	; (4016ac <pmc_switch_mck_to_pllack+0x60>)
  401692:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401694:	f012 0f08 	tst.w	r2, #8
  401698:	d105      	bne.n	4016a6 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40169a:	3b01      	subs	r3, #1
  40169c:	d1f9      	bne.n	401692 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40169e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4016a0:	4770      	bx	lr
	return 0;
  4016a2:	2000      	movs	r0, #0
  4016a4:	4770      	bx	lr
  4016a6:	2000      	movs	r0, #0
  4016a8:	4770      	bx	lr
  4016aa:	bf00      	nop
  4016ac:	400e0600 	.word	0x400e0600

004016b0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4016b0:	b9a0      	cbnz	r0, 4016dc <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4016b2:	480e      	ldr	r0, [pc, #56]	; (4016ec <pmc_switch_mainck_to_xtal+0x3c>)
  4016b4:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4016b6:	0209      	lsls	r1, r1, #8
  4016b8:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4016ba:	4a0d      	ldr	r2, [pc, #52]	; (4016f0 <pmc_switch_mainck_to_xtal+0x40>)
  4016bc:	401a      	ands	r2, r3
  4016be:	4b0d      	ldr	r3, [pc, #52]	; (4016f4 <pmc_switch_mainck_to_xtal+0x44>)
  4016c0:	4313      	orrs	r3, r2
  4016c2:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4016c4:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4016c6:	4602      	mov	r2, r0
  4016c8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4016ca:	f013 0f01 	tst.w	r3, #1
  4016ce:	d0fb      	beq.n	4016c8 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4016d0:	4a06      	ldr	r2, [pc, #24]	; (4016ec <pmc_switch_mainck_to_xtal+0x3c>)
  4016d2:	6a11      	ldr	r1, [r2, #32]
  4016d4:	4b08      	ldr	r3, [pc, #32]	; (4016f8 <pmc_switch_mainck_to_xtal+0x48>)
  4016d6:	430b      	orrs	r3, r1
  4016d8:	6213      	str	r3, [r2, #32]
  4016da:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4016dc:	4903      	ldr	r1, [pc, #12]	; (4016ec <pmc_switch_mainck_to_xtal+0x3c>)
  4016de:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4016e0:	4a06      	ldr	r2, [pc, #24]	; (4016fc <pmc_switch_mainck_to_xtal+0x4c>)
  4016e2:	401a      	ands	r2, r3
  4016e4:	4b06      	ldr	r3, [pc, #24]	; (401700 <pmc_switch_mainck_to_xtal+0x50>)
  4016e6:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4016e8:	620b      	str	r3, [r1, #32]
  4016ea:	4770      	bx	lr
  4016ec:	400e0600 	.word	0x400e0600
  4016f0:	ffc8fffc 	.word	0xffc8fffc
  4016f4:	00370001 	.word	0x00370001
  4016f8:	01370000 	.word	0x01370000
  4016fc:	fec8fffc 	.word	0xfec8fffc
  401700:	01370002 	.word	0x01370002

00401704 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401704:	4b02      	ldr	r3, [pc, #8]	; (401710 <pmc_osc_is_ready_mainck+0xc>)
  401706:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401708:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  40170c:	4770      	bx	lr
  40170e:	bf00      	nop
  401710:	400e0600 	.word	0x400e0600

00401714 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401714:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401718:	4b01      	ldr	r3, [pc, #4]	; (401720 <pmc_disable_pllack+0xc>)
  40171a:	629a      	str	r2, [r3, #40]	; 0x28
  40171c:	4770      	bx	lr
  40171e:	bf00      	nop
  401720:	400e0600 	.word	0x400e0600

00401724 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401724:	4b02      	ldr	r3, [pc, #8]	; (401730 <pmc_is_locked_pllack+0xc>)
  401726:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401728:	f000 0002 	and.w	r0, r0, #2
  40172c:	4770      	bx	lr
  40172e:	bf00      	nop
  401730:	400e0600 	.word	0x400e0600

00401734 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  401734:	283f      	cmp	r0, #63	; 0x3f
  401736:	d81e      	bhi.n	401776 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  401738:	281f      	cmp	r0, #31
  40173a:	d80c      	bhi.n	401756 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  40173c:	4b11      	ldr	r3, [pc, #68]	; (401784 <pmc_enable_periph_clk+0x50>)
  40173e:	699a      	ldr	r2, [r3, #24]
  401740:	2301      	movs	r3, #1
  401742:	4083      	lsls	r3, r0
  401744:	4393      	bics	r3, r2
  401746:	d018      	beq.n	40177a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  401748:	2301      	movs	r3, #1
  40174a:	fa03 f000 	lsl.w	r0, r3, r0
  40174e:	4b0d      	ldr	r3, [pc, #52]	; (401784 <pmc_enable_periph_clk+0x50>)
  401750:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401752:	2000      	movs	r0, #0
  401754:	4770      	bx	lr
		ul_id -= 32;
  401756:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401758:	4b0a      	ldr	r3, [pc, #40]	; (401784 <pmc_enable_periph_clk+0x50>)
  40175a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40175e:	2301      	movs	r3, #1
  401760:	4083      	lsls	r3, r0
  401762:	4393      	bics	r3, r2
  401764:	d00b      	beq.n	40177e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  401766:	2301      	movs	r3, #1
  401768:	fa03 f000 	lsl.w	r0, r3, r0
  40176c:	4b05      	ldr	r3, [pc, #20]	; (401784 <pmc_enable_periph_clk+0x50>)
  40176e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  401772:	2000      	movs	r0, #0
  401774:	4770      	bx	lr
		return 1;
  401776:	2001      	movs	r0, #1
  401778:	4770      	bx	lr
	return 0;
  40177a:	2000      	movs	r0, #0
  40177c:	4770      	bx	lr
  40177e:	2000      	movs	r0, #0
}
  401780:	4770      	bx	lr
  401782:	bf00      	nop
  401784:	400e0600 	.word	0x400e0600

00401788 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401788:	6943      	ldr	r3, [r0, #20]
  40178a:	f013 0f02 	tst.w	r3, #2
  40178e:	d002      	beq.n	401796 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  401790:	61c1      	str	r1, [r0, #28]
	return 0;
  401792:	2000      	movs	r0, #0
  401794:	4770      	bx	lr
		return 1;
  401796:	2001      	movs	r0, #1
}
  401798:	4770      	bx	lr

0040179a <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40179a:	6943      	ldr	r3, [r0, #20]
  40179c:	f013 0f01 	tst.w	r3, #1
  4017a0:	d003      	beq.n	4017aa <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4017a2:	6983      	ldr	r3, [r0, #24]
  4017a4:	700b      	strb	r3, [r1, #0]
	return 0;
  4017a6:	2000      	movs	r0, #0
  4017a8:	4770      	bx	lr
		return 1;
  4017aa:	2001      	movs	r0, #1
}
  4017ac:	4770      	bx	lr

004017ae <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4017ae:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4017b0:	010b      	lsls	r3, r1, #4
  4017b2:	4293      	cmp	r3, r2
  4017b4:	d914      	bls.n	4017e0 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4017b6:	00c9      	lsls	r1, r1, #3
  4017b8:	084b      	lsrs	r3, r1, #1
  4017ba:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  4017be:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  4017c2:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4017c4:	1e5c      	subs	r4, r3, #1
  4017c6:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4017ca:	428c      	cmp	r4, r1
  4017cc:	d901      	bls.n	4017d2 <usart_set_async_baudrate+0x24>
		return 1;
  4017ce:	2001      	movs	r0, #1
  4017d0:	e017      	b.n	401802 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  4017d2:	6841      	ldr	r1, [r0, #4]
  4017d4:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  4017d8:	6041      	str	r1, [r0, #4]
  4017da:	e00c      	b.n	4017f6 <usart_set_async_baudrate+0x48>
		return 1;
  4017dc:	2001      	movs	r0, #1
  4017de:	e010      	b.n	401802 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4017e0:	0859      	lsrs	r1, r3, #1
  4017e2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  4017e6:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  4017ea:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4017ec:	1e5c      	subs	r4, r3, #1
  4017ee:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4017f2:	428c      	cmp	r4, r1
  4017f4:	d8f2      	bhi.n	4017dc <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4017f6:	0412      	lsls	r2, r2, #16
  4017f8:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  4017fc:	431a      	orrs	r2, r3
  4017fe:	6202      	str	r2, [r0, #32]

	return 0;
  401800:	2000      	movs	r0, #0
}
  401802:	f85d 4b04 	ldr.w	r4, [sp], #4
  401806:	4770      	bx	lr

00401808 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401808:	4b08      	ldr	r3, [pc, #32]	; (40182c <usart_reset+0x24>)
  40180a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  40180e:	2300      	movs	r3, #0
  401810:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  401812:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401814:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  401816:	2388      	movs	r3, #136	; 0x88
  401818:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40181a:	2324      	movs	r3, #36	; 0x24
  40181c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  40181e:	f44f 7380 	mov.w	r3, #256	; 0x100
  401822:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  401824:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  401828:	6003      	str	r3, [r0, #0]
  40182a:	4770      	bx	lr
  40182c:	55534100 	.word	0x55534100

00401830 <usart_init_rs232>:
{
  401830:	b570      	push	{r4, r5, r6, lr}
  401832:	4605      	mov	r5, r0
  401834:	460c      	mov	r4, r1
  401836:	4616      	mov	r6, r2
	usart_reset(p_usart);
  401838:	4b0f      	ldr	r3, [pc, #60]	; (401878 <usart_init_rs232+0x48>)
  40183a:	4798      	blx	r3
	ul_reg_val = 0;
  40183c:	2200      	movs	r2, #0
  40183e:	4b0f      	ldr	r3, [pc, #60]	; (40187c <usart_init_rs232+0x4c>)
  401840:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401842:	b1a4      	cbz	r4, 40186e <usart_init_rs232+0x3e>
  401844:	4632      	mov	r2, r6
  401846:	6821      	ldr	r1, [r4, #0]
  401848:	4628      	mov	r0, r5
  40184a:	4b0d      	ldr	r3, [pc, #52]	; (401880 <usart_init_rs232+0x50>)
  40184c:	4798      	blx	r3
  40184e:	4602      	mov	r2, r0
  401850:	b978      	cbnz	r0, 401872 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401852:	6863      	ldr	r3, [r4, #4]
  401854:	68a1      	ldr	r1, [r4, #8]
  401856:	430b      	orrs	r3, r1
  401858:	6921      	ldr	r1, [r4, #16]
  40185a:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40185c:	68e1      	ldr	r1, [r4, #12]
  40185e:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401860:	4906      	ldr	r1, [pc, #24]	; (40187c <usart_init_rs232+0x4c>)
  401862:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  401864:	6869      	ldr	r1, [r5, #4]
  401866:	430b      	orrs	r3, r1
  401868:	606b      	str	r3, [r5, #4]
}
  40186a:	4610      	mov	r0, r2
  40186c:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  40186e:	2201      	movs	r2, #1
  401870:	e7fb      	b.n	40186a <usart_init_rs232+0x3a>
  401872:	2201      	movs	r2, #1
  401874:	e7f9      	b.n	40186a <usart_init_rs232+0x3a>
  401876:	bf00      	nop
  401878:	00401809 	.word	0x00401809
  40187c:	20400c70 	.word	0x20400c70
  401880:	004017af 	.word	0x004017af

00401884 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  401884:	2340      	movs	r3, #64	; 0x40
  401886:	6003      	str	r3, [r0, #0]
  401888:	4770      	bx	lr

0040188a <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  40188a:	2310      	movs	r3, #16
  40188c:	6003      	str	r3, [r0, #0]
  40188e:	4770      	bx	lr

00401890 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401890:	6943      	ldr	r3, [r0, #20]
  401892:	f013 0f02 	tst.w	r3, #2
  401896:	d004      	beq.n	4018a2 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  401898:	f3c1 0108 	ubfx	r1, r1, #0, #9
  40189c:	61c1      	str	r1, [r0, #28]
	return 0;
  40189e:	2000      	movs	r0, #0
  4018a0:	4770      	bx	lr
		return 1;
  4018a2:	2001      	movs	r0, #1
}
  4018a4:	4770      	bx	lr

004018a6 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4018a6:	6943      	ldr	r3, [r0, #20]
  4018a8:	f013 0f01 	tst.w	r3, #1
  4018ac:	d005      	beq.n	4018ba <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4018ae:	6983      	ldr	r3, [r0, #24]
  4018b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4018b4:	600b      	str	r3, [r1, #0]
	return 0;
  4018b6:	2000      	movs	r0, #0
  4018b8:	4770      	bx	lr
		return 1;
  4018ba:	2001      	movs	r0, #1
}
  4018bc:	4770      	bx	lr

004018be <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4018be:	e7fe      	b.n	4018be <Dummy_Handler>

004018c0 <Reset_Handler>:
{
  4018c0:	b500      	push	{lr}
  4018c2:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4018c4:	4b25      	ldr	r3, [pc, #148]	; (40195c <Reset_Handler+0x9c>)
  4018c6:	4a26      	ldr	r2, [pc, #152]	; (401960 <Reset_Handler+0xa0>)
  4018c8:	429a      	cmp	r2, r3
  4018ca:	d010      	beq.n	4018ee <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4018cc:	4b25      	ldr	r3, [pc, #148]	; (401964 <Reset_Handler+0xa4>)
  4018ce:	4a23      	ldr	r2, [pc, #140]	; (40195c <Reset_Handler+0x9c>)
  4018d0:	429a      	cmp	r2, r3
  4018d2:	d20c      	bcs.n	4018ee <Reset_Handler+0x2e>
  4018d4:	3b01      	subs	r3, #1
  4018d6:	1a9b      	subs	r3, r3, r2
  4018d8:	f023 0303 	bic.w	r3, r3, #3
  4018dc:	3304      	adds	r3, #4
  4018de:	4413      	add	r3, r2
  4018e0:	491f      	ldr	r1, [pc, #124]	; (401960 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4018e2:	f851 0b04 	ldr.w	r0, [r1], #4
  4018e6:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4018ea:	429a      	cmp	r2, r3
  4018ec:	d1f9      	bne.n	4018e2 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4018ee:	4b1e      	ldr	r3, [pc, #120]	; (401968 <Reset_Handler+0xa8>)
  4018f0:	4a1e      	ldr	r2, [pc, #120]	; (40196c <Reset_Handler+0xac>)
  4018f2:	429a      	cmp	r2, r3
  4018f4:	d20a      	bcs.n	40190c <Reset_Handler+0x4c>
  4018f6:	3b01      	subs	r3, #1
  4018f8:	1a9b      	subs	r3, r3, r2
  4018fa:	f023 0303 	bic.w	r3, r3, #3
  4018fe:	3304      	adds	r3, #4
  401900:	4413      	add	r3, r2
                *pDest++ = 0;
  401902:	2100      	movs	r1, #0
  401904:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  401908:	4293      	cmp	r3, r2
  40190a:	d1fb      	bne.n	401904 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40190c:	4a18      	ldr	r2, [pc, #96]	; (401970 <Reset_Handler+0xb0>)
  40190e:	4b19      	ldr	r3, [pc, #100]	; (401974 <Reset_Handler+0xb4>)
  401910:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401914:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401916:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40191a:	fab3 f383 	clz	r3, r3
  40191e:	095b      	lsrs	r3, r3, #5
  401920:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401922:	b672      	cpsid	i
  __ASM volatile ("dmb");
  401924:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401928:	2200      	movs	r2, #0
  40192a:	4b13      	ldr	r3, [pc, #76]	; (401978 <Reset_Handler+0xb8>)
  40192c:	701a      	strb	r2, [r3, #0]
	return flags;
  40192e:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401930:	4a12      	ldr	r2, [pc, #72]	; (40197c <Reset_Handler+0xbc>)
  401932:	6813      	ldr	r3, [r2, #0]
  401934:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401938:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  40193a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40193e:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401942:	b129      	cbz	r1, 401950 <Reset_Handler+0x90>
		cpu_irq_enable();
  401944:	2201      	movs	r2, #1
  401946:	4b0c      	ldr	r3, [pc, #48]	; (401978 <Reset_Handler+0xb8>)
  401948:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  40194a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40194e:	b662      	cpsie	i
        __libc_init_array();
  401950:	4b0b      	ldr	r3, [pc, #44]	; (401980 <Reset_Handler+0xc0>)
  401952:	4798      	blx	r3
        main();
  401954:	4b0b      	ldr	r3, [pc, #44]	; (401984 <Reset_Handler+0xc4>)
  401956:	4798      	blx	r3
  401958:	e7fe      	b.n	401958 <Reset_Handler+0x98>
  40195a:	bf00      	nop
  40195c:	20400000 	.word	0x20400000
  401960:	0040a97c 	.word	0x0040a97c
  401964:	204009d0 	.word	0x204009d0
  401968:	20400ee8 	.word	0x20400ee8
  40196c:	204009d0 	.word	0x204009d0
  401970:	e000ed00 	.word	0xe000ed00
  401974:	00400000 	.word	0x00400000
  401978:	20400018 	.word	0x20400018
  40197c:	e000ed88 	.word	0xe000ed88
  401980:	004046a5 	.word	0x004046a5
  401984:	00403d11 	.word	0x00403d11

00401988 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401988:	4b3b      	ldr	r3, [pc, #236]	; (401a78 <SystemCoreClockUpdate+0xf0>)
  40198a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40198c:	f003 0303 	and.w	r3, r3, #3
  401990:	2b01      	cmp	r3, #1
  401992:	d01d      	beq.n	4019d0 <SystemCoreClockUpdate+0x48>
  401994:	b183      	cbz	r3, 4019b8 <SystemCoreClockUpdate+0x30>
  401996:	2b02      	cmp	r3, #2
  401998:	d036      	beq.n	401a08 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40199a:	4b37      	ldr	r3, [pc, #220]	; (401a78 <SystemCoreClockUpdate+0xf0>)
  40199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40199e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4019a2:	2b70      	cmp	r3, #112	; 0x70
  4019a4:	d05f      	beq.n	401a66 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4019a6:	4b34      	ldr	r3, [pc, #208]	; (401a78 <SystemCoreClockUpdate+0xf0>)
  4019a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4019aa:	4934      	ldr	r1, [pc, #208]	; (401a7c <SystemCoreClockUpdate+0xf4>)
  4019ac:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4019b0:	680b      	ldr	r3, [r1, #0]
  4019b2:	40d3      	lsrs	r3, r2
  4019b4:	600b      	str	r3, [r1, #0]
  4019b6:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4019b8:	4b31      	ldr	r3, [pc, #196]	; (401a80 <SystemCoreClockUpdate+0xf8>)
  4019ba:	695b      	ldr	r3, [r3, #20]
  4019bc:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4019c0:	bf14      	ite	ne
  4019c2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4019c6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4019ca:	4b2c      	ldr	r3, [pc, #176]	; (401a7c <SystemCoreClockUpdate+0xf4>)
  4019cc:	601a      	str	r2, [r3, #0]
  4019ce:	e7e4      	b.n	40199a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4019d0:	4b29      	ldr	r3, [pc, #164]	; (401a78 <SystemCoreClockUpdate+0xf0>)
  4019d2:	6a1b      	ldr	r3, [r3, #32]
  4019d4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4019d8:	d003      	beq.n	4019e2 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4019da:	4a2a      	ldr	r2, [pc, #168]	; (401a84 <SystemCoreClockUpdate+0xfc>)
  4019dc:	4b27      	ldr	r3, [pc, #156]	; (401a7c <SystemCoreClockUpdate+0xf4>)
  4019de:	601a      	str	r2, [r3, #0]
  4019e0:	e7db      	b.n	40199a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4019e2:	4a29      	ldr	r2, [pc, #164]	; (401a88 <SystemCoreClockUpdate+0x100>)
  4019e4:	4b25      	ldr	r3, [pc, #148]	; (401a7c <SystemCoreClockUpdate+0xf4>)
  4019e6:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4019e8:	4b23      	ldr	r3, [pc, #140]	; (401a78 <SystemCoreClockUpdate+0xf0>)
  4019ea:	6a1b      	ldr	r3, [r3, #32]
  4019ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4019f0:	2b10      	cmp	r3, #16
  4019f2:	d005      	beq.n	401a00 <SystemCoreClockUpdate+0x78>
  4019f4:	2b20      	cmp	r3, #32
  4019f6:	d1d0      	bne.n	40199a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4019f8:	4a22      	ldr	r2, [pc, #136]	; (401a84 <SystemCoreClockUpdate+0xfc>)
  4019fa:	4b20      	ldr	r3, [pc, #128]	; (401a7c <SystemCoreClockUpdate+0xf4>)
  4019fc:	601a      	str	r2, [r3, #0]
          break;
  4019fe:	e7cc      	b.n	40199a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  401a00:	4a22      	ldr	r2, [pc, #136]	; (401a8c <SystemCoreClockUpdate+0x104>)
  401a02:	4b1e      	ldr	r3, [pc, #120]	; (401a7c <SystemCoreClockUpdate+0xf4>)
  401a04:	601a      	str	r2, [r3, #0]
          break;
  401a06:	e7c8      	b.n	40199a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401a08:	4b1b      	ldr	r3, [pc, #108]	; (401a78 <SystemCoreClockUpdate+0xf0>)
  401a0a:	6a1b      	ldr	r3, [r3, #32]
  401a0c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401a10:	d016      	beq.n	401a40 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401a12:	4a1c      	ldr	r2, [pc, #112]	; (401a84 <SystemCoreClockUpdate+0xfc>)
  401a14:	4b19      	ldr	r3, [pc, #100]	; (401a7c <SystemCoreClockUpdate+0xf4>)
  401a16:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401a18:	4b17      	ldr	r3, [pc, #92]	; (401a78 <SystemCoreClockUpdate+0xf0>)
  401a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401a1c:	f003 0303 	and.w	r3, r3, #3
  401a20:	2b02      	cmp	r3, #2
  401a22:	d1ba      	bne.n	40199a <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401a24:	4a14      	ldr	r2, [pc, #80]	; (401a78 <SystemCoreClockUpdate+0xf0>)
  401a26:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401a28:	6a92      	ldr	r2, [r2, #40]	; 0x28
  401a2a:	4814      	ldr	r0, [pc, #80]	; (401a7c <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401a2c:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401a30:	6803      	ldr	r3, [r0, #0]
  401a32:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401a36:	b2d2      	uxtb	r2, r2
  401a38:	fbb3 f3f2 	udiv	r3, r3, r2
  401a3c:	6003      	str	r3, [r0, #0]
  401a3e:	e7ac      	b.n	40199a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401a40:	4a11      	ldr	r2, [pc, #68]	; (401a88 <SystemCoreClockUpdate+0x100>)
  401a42:	4b0e      	ldr	r3, [pc, #56]	; (401a7c <SystemCoreClockUpdate+0xf4>)
  401a44:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401a46:	4b0c      	ldr	r3, [pc, #48]	; (401a78 <SystemCoreClockUpdate+0xf0>)
  401a48:	6a1b      	ldr	r3, [r3, #32]
  401a4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401a4e:	2b10      	cmp	r3, #16
  401a50:	d005      	beq.n	401a5e <SystemCoreClockUpdate+0xd6>
  401a52:	2b20      	cmp	r3, #32
  401a54:	d1e0      	bne.n	401a18 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  401a56:	4a0b      	ldr	r2, [pc, #44]	; (401a84 <SystemCoreClockUpdate+0xfc>)
  401a58:	4b08      	ldr	r3, [pc, #32]	; (401a7c <SystemCoreClockUpdate+0xf4>)
  401a5a:	601a      	str	r2, [r3, #0]
          break;
  401a5c:	e7dc      	b.n	401a18 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  401a5e:	4a0b      	ldr	r2, [pc, #44]	; (401a8c <SystemCoreClockUpdate+0x104>)
  401a60:	4b06      	ldr	r3, [pc, #24]	; (401a7c <SystemCoreClockUpdate+0xf4>)
  401a62:	601a      	str	r2, [r3, #0]
          break;
  401a64:	e7d8      	b.n	401a18 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  401a66:	4a05      	ldr	r2, [pc, #20]	; (401a7c <SystemCoreClockUpdate+0xf4>)
  401a68:	6813      	ldr	r3, [r2, #0]
  401a6a:	4909      	ldr	r1, [pc, #36]	; (401a90 <SystemCoreClockUpdate+0x108>)
  401a6c:	fba1 1303 	umull	r1, r3, r1, r3
  401a70:	085b      	lsrs	r3, r3, #1
  401a72:	6013      	str	r3, [r2, #0]
  401a74:	4770      	bx	lr
  401a76:	bf00      	nop
  401a78:	400e0600 	.word	0x400e0600
  401a7c:	2040001c 	.word	0x2040001c
  401a80:	400e1810 	.word	0x400e1810
  401a84:	00b71b00 	.word	0x00b71b00
  401a88:	003d0900 	.word	0x003d0900
  401a8c:	007a1200 	.word	0x007a1200
  401a90:	aaaaaaab 	.word	0xaaaaaaab

00401a94 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401a94:	4b16      	ldr	r3, [pc, #88]	; (401af0 <system_init_flash+0x5c>)
  401a96:	4298      	cmp	r0, r3
  401a98:	d913      	bls.n	401ac2 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  401a9a:	4b16      	ldr	r3, [pc, #88]	; (401af4 <system_init_flash+0x60>)
  401a9c:	4298      	cmp	r0, r3
  401a9e:	d915      	bls.n	401acc <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401aa0:	4b15      	ldr	r3, [pc, #84]	; (401af8 <system_init_flash+0x64>)
  401aa2:	4298      	cmp	r0, r3
  401aa4:	d916      	bls.n	401ad4 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401aa6:	4b15      	ldr	r3, [pc, #84]	; (401afc <system_init_flash+0x68>)
  401aa8:	4298      	cmp	r0, r3
  401aaa:	d917      	bls.n	401adc <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401aac:	4b14      	ldr	r3, [pc, #80]	; (401b00 <system_init_flash+0x6c>)
  401aae:	4298      	cmp	r0, r3
  401ab0:	d918      	bls.n	401ae4 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  401ab2:	4b14      	ldr	r3, [pc, #80]	; (401b04 <system_init_flash+0x70>)
  401ab4:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401ab6:	bf94      	ite	ls
  401ab8:	4a13      	ldrls	r2, [pc, #76]	; (401b08 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  401aba:	4a14      	ldrhi	r2, [pc, #80]	; (401b0c <system_init_flash+0x78>)
  401abc:	4b14      	ldr	r3, [pc, #80]	; (401b10 <system_init_flash+0x7c>)
  401abe:	601a      	str	r2, [r3, #0]
  401ac0:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401ac2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401ac6:	4b12      	ldr	r3, [pc, #72]	; (401b10 <system_init_flash+0x7c>)
  401ac8:	601a      	str	r2, [r3, #0]
  401aca:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401acc:	4a11      	ldr	r2, [pc, #68]	; (401b14 <system_init_flash+0x80>)
  401ace:	4b10      	ldr	r3, [pc, #64]	; (401b10 <system_init_flash+0x7c>)
  401ad0:	601a      	str	r2, [r3, #0]
  401ad2:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401ad4:	4a10      	ldr	r2, [pc, #64]	; (401b18 <system_init_flash+0x84>)
  401ad6:	4b0e      	ldr	r3, [pc, #56]	; (401b10 <system_init_flash+0x7c>)
  401ad8:	601a      	str	r2, [r3, #0]
  401ada:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401adc:	4a0f      	ldr	r2, [pc, #60]	; (401b1c <system_init_flash+0x88>)
  401ade:	4b0c      	ldr	r3, [pc, #48]	; (401b10 <system_init_flash+0x7c>)
  401ae0:	601a      	str	r2, [r3, #0]
  401ae2:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401ae4:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401ae8:	4b09      	ldr	r3, [pc, #36]	; (401b10 <system_init_flash+0x7c>)
  401aea:	601a      	str	r2, [r3, #0]
  401aec:	4770      	bx	lr
  401aee:	bf00      	nop
  401af0:	015ef3bf 	.word	0x015ef3bf
  401af4:	02bde77f 	.word	0x02bde77f
  401af8:	041cdb3f 	.word	0x041cdb3f
  401afc:	057bceff 	.word	0x057bceff
  401b00:	06dac2bf 	.word	0x06dac2bf
  401b04:	0839b67f 	.word	0x0839b67f
  401b08:	04000500 	.word	0x04000500
  401b0c:	04000600 	.word	0x04000600
  401b10:	400e0c00 	.word	0x400e0c00
  401b14:	04000100 	.word	0x04000100
  401b18:	04000200 	.word	0x04000200
  401b1c:	04000300 	.word	0x04000300

00401b20 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401b20:	4b0a      	ldr	r3, [pc, #40]	; (401b4c <_sbrk+0x2c>)
  401b22:	681b      	ldr	r3, [r3, #0]
  401b24:	b153      	cbz	r3, 401b3c <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  401b26:	4b09      	ldr	r3, [pc, #36]	; (401b4c <_sbrk+0x2c>)
  401b28:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  401b2a:	181a      	adds	r2, r3, r0
  401b2c:	4908      	ldr	r1, [pc, #32]	; (401b50 <_sbrk+0x30>)
  401b2e:	4291      	cmp	r1, r2
  401b30:	db08      	blt.n	401b44 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401b32:	4610      	mov	r0, r2
  401b34:	4a05      	ldr	r2, [pc, #20]	; (401b4c <_sbrk+0x2c>)
  401b36:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401b38:	4618      	mov	r0, r3
  401b3a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401b3c:	4a05      	ldr	r2, [pc, #20]	; (401b54 <_sbrk+0x34>)
  401b3e:	4b03      	ldr	r3, [pc, #12]	; (401b4c <_sbrk+0x2c>)
  401b40:	601a      	str	r2, [r3, #0]
  401b42:	e7f0      	b.n	401b26 <_sbrk+0x6>
		return (caddr_t) -1;	
  401b44:	f04f 30ff 	mov.w	r0, #4294967295
}
  401b48:	4770      	bx	lr
  401b4a:	bf00      	nop
  401b4c:	20400c74 	.word	0x20400c74
  401b50:	2045fffc 	.word	0x2045fffc
  401b54:	204030e8 	.word	0x204030e8

00401b58 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401b58:	f04f 30ff 	mov.w	r0, #4294967295
  401b5c:	4770      	bx	lr

00401b5e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401b5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401b62:	604b      	str	r3, [r1, #4]

	return 0;
}
  401b64:	2000      	movs	r0, #0
  401b66:	4770      	bx	lr

00401b68 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401b68:	2001      	movs	r0, #1
  401b6a:	4770      	bx	lr

00401b6c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401b6c:	2000      	movs	r0, #0
  401b6e:	4770      	bx	lr

00401b70 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401b70:	f100 0308 	add.w	r3, r0, #8
  401b74:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  401b76:	f04f 32ff 	mov.w	r2, #4294967295
  401b7a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401b7c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401b7e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  401b80:	2300      	movs	r3, #0
  401b82:	6003      	str	r3, [r0, #0]
  401b84:	4770      	bx	lr

00401b86 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  401b86:	2300      	movs	r3, #0
  401b88:	6103      	str	r3, [r0, #16]
  401b8a:	4770      	bx	lr

00401b8c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  401b8c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  401b8e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  401b90:	689a      	ldr	r2, [r3, #8]
  401b92:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  401b94:	689a      	ldr	r2, [r3, #8]
  401b96:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  401b98:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  401b9a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  401b9c:	6803      	ldr	r3, [r0, #0]
  401b9e:	3301      	adds	r3, #1
  401ba0:	6003      	str	r3, [r0, #0]
  401ba2:	4770      	bx	lr

00401ba4 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  401ba4:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  401ba6:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  401ba8:	f1b5 3fff 	cmp.w	r5, #4294967295
  401bac:	d002      	beq.n	401bb4 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401bae:	f100 0208 	add.w	r2, r0, #8
  401bb2:	e002      	b.n	401bba <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  401bb4:	6902      	ldr	r2, [r0, #16]
  401bb6:	e004      	b.n	401bc2 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401bb8:	461a      	mov	r2, r3
  401bba:	6853      	ldr	r3, [r2, #4]
  401bbc:	681c      	ldr	r4, [r3, #0]
  401bbe:	42a5      	cmp	r5, r4
  401bc0:	d2fa      	bcs.n	401bb8 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  401bc2:	6853      	ldr	r3, [r2, #4]
  401bc4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  401bc6:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  401bc8:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  401bca:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  401bcc:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  401bce:	6803      	ldr	r3, [r0, #0]
  401bd0:	3301      	adds	r3, #1
  401bd2:	6003      	str	r3, [r0, #0]
}
  401bd4:	bc30      	pop	{r4, r5}
  401bd6:	4770      	bx	lr

00401bd8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  401bd8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  401bda:	6842      	ldr	r2, [r0, #4]
  401bdc:	6881      	ldr	r1, [r0, #8]
  401bde:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  401be0:	6882      	ldr	r2, [r0, #8]
  401be2:	6841      	ldr	r1, [r0, #4]
  401be4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  401be6:	685a      	ldr	r2, [r3, #4]
  401be8:	4290      	cmp	r0, r2
  401bea:	d005      	beq.n	401bf8 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  401bec:	2200      	movs	r2, #0
  401bee:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  401bf0:	6818      	ldr	r0, [r3, #0]
  401bf2:	3801      	subs	r0, #1
  401bf4:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  401bf6:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  401bf8:	6882      	ldr	r2, [r0, #8]
  401bfa:	605a      	str	r2, [r3, #4]
  401bfc:	e7f6      	b.n	401bec <uxListRemove+0x14>
	...

00401c00 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  401c00:	4b0d      	ldr	r3, [pc, #52]	; (401c38 <prvTaskExitError+0x38>)
  401c02:	681b      	ldr	r3, [r3, #0]
  401c04:	f1b3 3fff 	cmp.w	r3, #4294967295
  401c08:	d00a      	beq.n	401c20 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  401c0a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c0e:	b672      	cpsid	i
  401c10:	f383 8811 	msr	BASEPRI, r3
  401c14:	f3bf 8f6f 	isb	sy
  401c18:	f3bf 8f4f 	dsb	sy
  401c1c:	b662      	cpsie	i
  401c1e:	e7fe      	b.n	401c1e <prvTaskExitError+0x1e>
  401c20:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c24:	b672      	cpsid	i
  401c26:	f383 8811 	msr	BASEPRI, r3
  401c2a:	f3bf 8f6f 	isb	sy
  401c2e:	f3bf 8f4f 	dsb	sy
  401c32:	b662      	cpsie	i
  401c34:	e7fe      	b.n	401c34 <prvTaskExitError+0x34>
  401c36:	bf00      	nop
  401c38:	20400020 	.word	0x20400020

00401c3c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  401c3c:	4806      	ldr	r0, [pc, #24]	; (401c58 <prvPortStartFirstTask+0x1c>)
  401c3e:	6800      	ldr	r0, [r0, #0]
  401c40:	6800      	ldr	r0, [r0, #0]
  401c42:	f380 8808 	msr	MSP, r0
  401c46:	b662      	cpsie	i
  401c48:	b661      	cpsie	f
  401c4a:	f3bf 8f4f 	dsb	sy
  401c4e:	f3bf 8f6f 	isb	sy
  401c52:	df00      	svc	0
  401c54:	bf00      	nop
  401c56:	0000      	.short	0x0000
  401c58:	e000ed08 	.word	0xe000ed08

00401c5c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  401c5c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 401c6c <vPortEnableVFP+0x10>
  401c60:	6801      	ldr	r1, [r0, #0]
  401c62:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401c66:	6001      	str	r1, [r0, #0]
  401c68:	4770      	bx	lr
  401c6a:	0000      	.short	0x0000
  401c6c:	e000ed88 	.word	0xe000ed88

00401c70 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  401c70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  401c74:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  401c78:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  401c7c:	4b05      	ldr	r3, [pc, #20]	; (401c94 <pxPortInitialiseStack+0x24>)
  401c7e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  401c82:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  401c86:	f06f 0302 	mvn.w	r3, #2
  401c8a:	f840 3c24 	str.w	r3, [r0, #-36]
}
  401c8e:	3844      	subs	r0, #68	; 0x44
  401c90:	4770      	bx	lr
  401c92:	bf00      	nop
  401c94:	00401c01 	.word	0x00401c01

00401c98 <SVC_Handler>:
	__asm volatile (
  401c98:	4b06      	ldr	r3, [pc, #24]	; (401cb4 <pxCurrentTCBConst2>)
  401c9a:	6819      	ldr	r1, [r3, #0]
  401c9c:	6808      	ldr	r0, [r1, #0]
  401c9e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401ca2:	f380 8809 	msr	PSP, r0
  401ca6:	f3bf 8f6f 	isb	sy
  401caa:	f04f 0000 	mov.w	r0, #0
  401cae:	f380 8811 	msr	BASEPRI, r0
  401cb2:	4770      	bx	lr

00401cb4 <pxCurrentTCBConst2>:
  401cb4:	20400c80 	.word	0x20400c80
  401cb8:	4770      	bx	lr
  401cba:	bf00      	nop

00401cbc <vPortEnterCritical>:
  401cbc:	f04f 0380 	mov.w	r3, #128	; 0x80
  401cc0:	b672      	cpsid	i
  401cc2:	f383 8811 	msr	BASEPRI, r3
  401cc6:	f3bf 8f6f 	isb	sy
  401cca:	f3bf 8f4f 	dsb	sy
  401cce:	b662      	cpsie	i
	uxCriticalNesting++;
  401cd0:	4a0b      	ldr	r2, [pc, #44]	; (401d00 <vPortEnterCritical+0x44>)
  401cd2:	6813      	ldr	r3, [r2, #0]
  401cd4:	3301      	adds	r3, #1
  401cd6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  401cd8:	2b01      	cmp	r3, #1
  401cda:	d10f      	bne.n	401cfc <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  401cdc:	4b09      	ldr	r3, [pc, #36]	; (401d04 <vPortEnterCritical+0x48>)
  401cde:	681b      	ldr	r3, [r3, #0]
  401ce0:	f013 0fff 	tst.w	r3, #255	; 0xff
  401ce4:	d00a      	beq.n	401cfc <vPortEnterCritical+0x40>
  401ce6:	f04f 0380 	mov.w	r3, #128	; 0x80
  401cea:	b672      	cpsid	i
  401cec:	f383 8811 	msr	BASEPRI, r3
  401cf0:	f3bf 8f6f 	isb	sy
  401cf4:	f3bf 8f4f 	dsb	sy
  401cf8:	b662      	cpsie	i
  401cfa:	e7fe      	b.n	401cfa <vPortEnterCritical+0x3e>
  401cfc:	4770      	bx	lr
  401cfe:	bf00      	nop
  401d00:	20400020 	.word	0x20400020
  401d04:	e000ed04 	.word	0xe000ed04

00401d08 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  401d08:	4b0a      	ldr	r3, [pc, #40]	; (401d34 <vPortExitCritical+0x2c>)
  401d0a:	681b      	ldr	r3, [r3, #0]
  401d0c:	b953      	cbnz	r3, 401d24 <vPortExitCritical+0x1c>
  401d0e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d12:	b672      	cpsid	i
  401d14:	f383 8811 	msr	BASEPRI, r3
  401d18:	f3bf 8f6f 	isb	sy
  401d1c:	f3bf 8f4f 	dsb	sy
  401d20:	b662      	cpsie	i
  401d22:	e7fe      	b.n	401d22 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  401d24:	3b01      	subs	r3, #1
  401d26:	4a03      	ldr	r2, [pc, #12]	; (401d34 <vPortExitCritical+0x2c>)
  401d28:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  401d2a:	b90b      	cbnz	r3, 401d30 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  401d2c:	f383 8811 	msr	BASEPRI, r3
  401d30:	4770      	bx	lr
  401d32:	bf00      	nop
  401d34:	20400020 	.word	0x20400020

00401d38 <PendSV_Handler>:
	__asm volatile
  401d38:	f3ef 8009 	mrs	r0, PSP
  401d3c:	f3bf 8f6f 	isb	sy
  401d40:	4b15      	ldr	r3, [pc, #84]	; (401d98 <pxCurrentTCBConst>)
  401d42:	681a      	ldr	r2, [r3, #0]
  401d44:	f01e 0f10 	tst.w	lr, #16
  401d48:	bf08      	it	eq
  401d4a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  401d4e:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401d52:	6010      	str	r0, [r2, #0]
  401d54:	f84d 3d04 	str.w	r3, [sp, #-4]!
  401d58:	f04f 0080 	mov.w	r0, #128	; 0x80
  401d5c:	b672      	cpsid	i
  401d5e:	f380 8811 	msr	BASEPRI, r0
  401d62:	f3bf 8f4f 	dsb	sy
  401d66:	f3bf 8f6f 	isb	sy
  401d6a:	b662      	cpsie	i
  401d6c:	f001 f900 	bl	402f70 <vTaskSwitchContext>
  401d70:	f04f 0000 	mov.w	r0, #0
  401d74:	f380 8811 	msr	BASEPRI, r0
  401d78:	bc08      	pop	{r3}
  401d7a:	6819      	ldr	r1, [r3, #0]
  401d7c:	6808      	ldr	r0, [r1, #0]
  401d7e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401d82:	f01e 0f10 	tst.w	lr, #16
  401d86:	bf08      	it	eq
  401d88:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  401d8c:	f380 8809 	msr	PSP, r0
  401d90:	f3bf 8f6f 	isb	sy
  401d94:	4770      	bx	lr
  401d96:	bf00      	nop

00401d98 <pxCurrentTCBConst>:
  401d98:	20400c80 	.word	0x20400c80
  401d9c:	4770      	bx	lr
  401d9e:	bf00      	nop

00401da0 <SysTick_Handler>:
{
  401da0:	b508      	push	{r3, lr}
	__asm volatile
  401da2:	f3ef 8311 	mrs	r3, BASEPRI
  401da6:	f04f 0280 	mov.w	r2, #128	; 0x80
  401daa:	b672      	cpsid	i
  401dac:	f382 8811 	msr	BASEPRI, r2
  401db0:	f3bf 8f6f 	isb	sy
  401db4:	f3bf 8f4f 	dsb	sy
  401db8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  401dba:	4b05      	ldr	r3, [pc, #20]	; (401dd0 <SysTick_Handler+0x30>)
  401dbc:	4798      	blx	r3
  401dbe:	b118      	cbz	r0, 401dc8 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  401dc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401dc4:	4b03      	ldr	r3, [pc, #12]	; (401dd4 <SysTick_Handler+0x34>)
  401dc6:	601a      	str	r2, [r3, #0]
	__asm volatile
  401dc8:	2300      	movs	r3, #0
  401dca:	f383 8811 	msr	BASEPRI, r3
  401dce:	bd08      	pop	{r3, pc}
  401dd0:	00402bdd 	.word	0x00402bdd
  401dd4:	e000ed04 	.word	0xe000ed04

00401dd8 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  401dd8:	4a03      	ldr	r2, [pc, #12]	; (401de8 <vPortSetupTimerInterrupt+0x10>)
  401dda:	4b04      	ldr	r3, [pc, #16]	; (401dec <vPortSetupTimerInterrupt+0x14>)
  401ddc:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  401dde:	2207      	movs	r2, #7
  401de0:	3b04      	subs	r3, #4
  401de2:	601a      	str	r2, [r3, #0]
  401de4:	4770      	bx	lr
  401de6:	bf00      	nop
  401de8:	000927bf 	.word	0x000927bf
  401dec:	e000e014 	.word	0xe000e014

00401df0 <xPortStartScheduler>:
{
  401df0:	b500      	push	{lr}
  401df2:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  401df4:	4b25      	ldr	r3, [pc, #148]	; (401e8c <xPortStartScheduler+0x9c>)
  401df6:	781a      	ldrb	r2, [r3, #0]
  401df8:	b2d2      	uxtb	r2, r2
  401dfa:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  401dfc:	22ff      	movs	r2, #255	; 0xff
  401dfe:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  401e00:	781b      	ldrb	r3, [r3, #0]
  401e02:	b2db      	uxtb	r3, r3
  401e04:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  401e08:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401e10:	4a1f      	ldr	r2, [pc, #124]	; (401e90 <xPortStartScheduler+0xa0>)
  401e12:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  401e14:	2207      	movs	r2, #7
  401e16:	4b1f      	ldr	r3, [pc, #124]	; (401e94 <xPortStartScheduler+0xa4>)
  401e18:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  401e1a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401e1e:	f013 0f80 	tst.w	r3, #128	; 0x80
  401e22:	d010      	beq.n	401e46 <xPortStartScheduler+0x56>
  401e24:	2206      	movs	r2, #6
  401e26:	e000      	b.n	401e2a <xPortStartScheduler+0x3a>
  401e28:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  401e2a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401e2e:	005b      	lsls	r3, r3, #1
  401e30:	b2db      	uxtb	r3, r3
  401e32:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  401e36:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401e3a:	1e51      	subs	r1, r2, #1
  401e3c:	f013 0f80 	tst.w	r3, #128	; 0x80
  401e40:	d1f2      	bne.n	401e28 <xPortStartScheduler+0x38>
  401e42:	4b14      	ldr	r3, [pc, #80]	; (401e94 <xPortStartScheduler+0xa4>)
  401e44:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  401e46:	4a13      	ldr	r2, [pc, #76]	; (401e94 <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  401e48:	6813      	ldr	r3, [r2, #0]
  401e4a:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  401e4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401e50:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  401e52:	9b01      	ldr	r3, [sp, #4]
  401e54:	b2db      	uxtb	r3, r3
  401e56:	4a0d      	ldr	r2, [pc, #52]	; (401e8c <xPortStartScheduler+0x9c>)
  401e58:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  401e5a:	4b0f      	ldr	r3, [pc, #60]	; (401e98 <xPortStartScheduler+0xa8>)
  401e5c:	681a      	ldr	r2, [r3, #0]
  401e5e:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  401e62:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  401e64:	681a      	ldr	r2, [r3, #0]
  401e66:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  401e6a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  401e6c:	4b0b      	ldr	r3, [pc, #44]	; (401e9c <xPortStartScheduler+0xac>)
  401e6e:	4798      	blx	r3
	uxCriticalNesting = 0;
  401e70:	2200      	movs	r2, #0
  401e72:	4b0b      	ldr	r3, [pc, #44]	; (401ea0 <xPortStartScheduler+0xb0>)
  401e74:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  401e76:	4b0b      	ldr	r3, [pc, #44]	; (401ea4 <xPortStartScheduler+0xb4>)
  401e78:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  401e7a:	4a0b      	ldr	r2, [pc, #44]	; (401ea8 <xPortStartScheduler+0xb8>)
  401e7c:	6813      	ldr	r3, [r2, #0]
  401e7e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  401e82:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  401e84:	4b09      	ldr	r3, [pc, #36]	; (401eac <xPortStartScheduler+0xbc>)
  401e86:	4798      	blx	r3
	prvTaskExitError();
  401e88:	4b09      	ldr	r3, [pc, #36]	; (401eb0 <xPortStartScheduler+0xc0>)
  401e8a:	4798      	blx	r3
  401e8c:	e000e400 	.word	0xe000e400
  401e90:	20400c78 	.word	0x20400c78
  401e94:	20400c7c 	.word	0x20400c7c
  401e98:	e000ed20 	.word	0xe000ed20
  401e9c:	00401dd9 	.word	0x00401dd9
  401ea0:	20400020 	.word	0x20400020
  401ea4:	00401c5d 	.word	0x00401c5d
  401ea8:	e000ef34 	.word	0xe000ef34
  401eac:	00401c3d 	.word	0x00401c3d
  401eb0:	00401c01 	.word	0x00401c01

00401eb4 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  401eb4:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  401eb8:	2b0f      	cmp	r3, #15
  401eba:	d911      	bls.n	401ee0 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  401ebc:	4a12      	ldr	r2, [pc, #72]	; (401f08 <vPortValidateInterruptPriority+0x54>)
  401ebe:	5c9b      	ldrb	r3, [r3, r2]
  401ec0:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  401ec2:	4a12      	ldr	r2, [pc, #72]	; (401f0c <vPortValidateInterruptPriority+0x58>)
  401ec4:	7812      	ldrb	r2, [r2, #0]
  401ec6:	429a      	cmp	r2, r3
  401ec8:	d90a      	bls.n	401ee0 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  401eca:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ece:	b672      	cpsid	i
  401ed0:	f383 8811 	msr	BASEPRI, r3
  401ed4:	f3bf 8f6f 	isb	sy
  401ed8:	f3bf 8f4f 	dsb	sy
  401edc:	b662      	cpsie	i
  401ede:	e7fe      	b.n	401ede <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  401ee0:	4b0b      	ldr	r3, [pc, #44]	; (401f10 <vPortValidateInterruptPriority+0x5c>)
  401ee2:	681b      	ldr	r3, [r3, #0]
  401ee4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401ee8:	4a0a      	ldr	r2, [pc, #40]	; (401f14 <vPortValidateInterruptPriority+0x60>)
  401eea:	6812      	ldr	r2, [r2, #0]
  401eec:	4293      	cmp	r3, r2
  401eee:	d90a      	bls.n	401f06 <vPortValidateInterruptPriority+0x52>
  401ef0:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ef4:	b672      	cpsid	i
  401ef6:	f383 8811 	msr	BASEPRI, r3
  401efa:	f3bf 8f6f 	isb	sy
  401efe:	f3bf 8f4f 	dsb	sy
  401f02:	b662      	cpsie	i
  401f04:	e7fe      	b.n	401f04 <vPortValidateInterruptPriority+0x50>
  401f06:	4770      	bx	lr
  401f08:	e000e3f0 	.word	0xe000e3f0
  401f0c:	20400c78 	.word	0x20400c78
  401f10:	e000ed0c 	.word	0xe000ed0c
  401f14:	20400c7c 	.word	0x20400c7c

00401f18 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  401f18:	b510      	push	{r4, lr}
  401f1a:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  401f1c:	4b06      	ldr	r3, [pc, #24]	; (401f38 <pvPortMalloc+0x20>)
  401f1e:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  401f20:	4620      	mov	r0, r4
  401f22:	4b06      	ldr	r3, [pc, #24]	; (401f3c <pvPortMalloc+0x24>)
  401f24:	4798      	blx	r3
  401f26:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  401f28:	4b05      	ldr	r3, [pc, #20]	; (401f40 <pvPortMalloc+0x28>)
  401f2a:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  401f2c:	b10c      	cbz	r4, 401f32 <pvPortMalloc+0x1a>
		}
	}
	#endif

	return pvReturn;
}
  401f2e:	4620      	mov	r0, r4
  401f30:	bd10      	pop	{r4, pc}
			vApplicationMallocFailedHook();
  401f32:	4b04      	ldr	r3, [pc, #16]	; (401f44 <pvPortMalloc+0x2c>)
  401f34:	4798      	blx	r3
	return pvReturn;
  401f36:	e7fa      	b.n	401f2e <pvPortMalloc+0x16>
  401f38:	00402bc1 	.word	0x00402bc1
  401f3c:	0040471d 	.word	0x0040471d
  401f40:	00402d29 	.word	0x00402d29
  401f44:	00403a97 	.word	0x00403a97

00401f48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  401f48:	b148      	cbz	r0, 401f5e <vPortFree+0x16>
{
  401f4a:	b510      	push	{r4, lr}
  401f4c:	4604      	mov	r4, r0
	{
		vTaskSuspendAll();
  401f4e:	4b04      	ldr	r3, [pc, #16]	; (401f60 <vPortFree+0x18>)
  401f50:	4798      	blx	r3
		{
			free( pv );
  401f52:	4620      	mov	r0, r4
  401f54:	4b03      	ldr	r3, [pc, #12]	; (401f64 <vPortFree+0x1c>)
  401f56:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  401f58:	4b03      	ldr	r3, [pc, #12]	; (401f68 <vPortFree+0x20>)
  401f5a:	4798      	blx	r3
  401f5c:	bd10      	pop	{r4, pc}
  401f5e:	4770      	bx	lr
  401f60:	00402bc1 	.word	0x00402bc1
  401f64:	0040472d 	.word	0x0040472d
  401f68:	00402d29 	.word	0x00402d29

00401f6c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  401f6c:	b538      	push	{r3, r4, r5, lr}
  401f6e:	4604      	mov	r4, r0
  401f70:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  401f72:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401f74:	b95a      	cbnz	r2, 401f8e <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401f76:	6803      	ldr	r3, [r0, #0]
  401f78:	2b00      	cmp	r3, #0
  401f7a:	d12e      	bne.n	401fda <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  401f7c:	6840      	ldr	r0, [r0, #4]
  401f7e:	4b1b      	ldr	r3, [pc, #108]	; (401fec <prvCopyDataToQueue+0x80>)
  401f80:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  401f82:	2300      	movs	r3, #0
  401f84:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  401f86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401f88:	3301      	adds	r3, #1
  401f8a:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  401f8c:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  401f8e:	b96d      	cbnz	r5, 401fac <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  401f90:	6880      	ldr	r0, [r0, #8]
  401f92:	4b17      	ldr	r3, [pc, #92]	; (401ff0 <prvCopyDataToQueue+0x84>)
  401f94:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  401f96:	68a3      	ldr	r3, [r4, #8]
  401f98:	6c22      	ldr	r2, [r4, #64]	; 0x40
  401f9a:	4413      	add	r3, r2
  401f9c:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401f9e:	6862      	ldr	r2, [r4, #4]
  401fa0:	4293      	cmp	r3, r2
  401fa2:	d31c      	bcc.n	401fde <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  401fa4:	6823      	ldr	r3, [r4, #0]
  401fa6:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  401fa8:	2000      	movs	r0, #0
  401faa:	e7ec      	b.n	401f86 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401fac:	68c0      	ldr	r0, [r0, #12]
  401fae:	4b10      	ldr	r3, [pc, #64]	; (401ff0 <prvCopyDataToQueue+0x84>)
  401fb0:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  401fb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401fb4:	425b      	negs	r3, r3
  401fb6:	68e2      	ldr	r2, [r4, #12]
  401fb8:	441a      	add	r2, r3
  401fba:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401fbc:	6821      	ldr	r1, [r4, #0]
  401fbe:	428a      	cmp	r2, r1
  401fc0:	d202      	bcs.n	401fc8 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  401fc2:	6862      	ldr	r2, [r4, #4]
  401fc4:	4413      	add	r3, r2
  401fc6:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  401fc8:	2d02      	cmp	r5, #2
  401fca:	d10a      	bne.n	401fe2 <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401fcc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401fce:	b153      	cbz	r3, 401fe6 <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  401fd0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401fd2:	3b01      	subs	r3, #1
  401fd4:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  401fd6:	2000      	movs	r0, #0
  401fd8:	e7d5      	b.n	401f86 <prvCopyDataToQueue+0x1a>
  401fda:	2000      	movs	r0, #0
  401fdc:	e7d3      	b.n	401f86 <prvCopyDataToQueue+0x1a>
  401fde:	2000      	movs	r0, #0
  401fe0:	e7d1      	b.n	401f86 <prvCopyDataToQueue+0x1a>
  401fe2:	2000      	movs	r0, #0
  401fe4:	e7cf      	b.n	401f86 <prvCopyDataToQueue+0x1a>
  401fe6:	2000      	movs	r0, #0
  401fe8:	e7cd      	b.n	401f86 <prvCopyDataToQueue+0x1a>
  401fea:	bf00      	nop
  401fec:	00403371 	.word	0x00403371
  401ff0:	00404c9d 	.word	0x00404c9d

00401ff4 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  401ff4:	b530      	push	{r4, r5, lr}
  401ff6:	b083      	sub	sp, #12
  401ff8:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  401ffa:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  401ffc:	b174      	cbz	r4, 40201c <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  401ffe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402000:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402002:	429a      	cmp	r2, r3
  402004:	d315      	bcc.n	402032 <prvNotifyQueueSetContainer+0x3e>
  402006:	f04f 0380 	mov.w	r3, #128	; 0x80
  40200a:	b672      	cpsid	i
  40200c:	f383 8811 	msr	BASEPRI, r3
  402010:	f3bf 8f6f 	isb	sy
  402014:	f3bf 8f4f 	dsb	sy
  402018:	b662      	cpsie	i
  40201a:	e7fe      	b.n	40201a <prvNotifyQueueSetContainer+0x26>
  40201c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402020:	b672      	cpsid	i
  402022:	f383 8811 	msr	BASEPRI, r3
  402026:	f3bf 8f6f 	isb	sy
  40202a:	f3bf 8f4f 	dsb	sy
  40202e:	b662      	cpsie	i
  402030:	e7fe      	b.n	402030 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  402032:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402034:	4293      	cmp	r3, r2
  402036:	d803      	bhi.n	402040 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  402038:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  40203a:	4628      	mov	r0, r5
  40203c:	b003      	add	sp, #12
  40203e:	bd30      	pop	{r4, r5, pc}
  402040:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  402042:	a901      	add	r1, sp, #4
  402044:	4620      	mov	r0, r4
  402046:	4b0b      	ldr	r3, [pc, #44]	; (402074 <prvNotifyQueueSetContainer+0x80>)
  402048:	4798      	blx	r3
  40204a:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  40204c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40204e:	f1b3 3fff 	cmp.w	r3, #4294967295
  402052:	d10a      	bne.n	40206a <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  402054:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402056:	2b00      	cmp	r3, #0
  402058:	d0ef      	beq.n	40203a <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  40205a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40205e:	4b06      	ldr	r3, [pc, #24]	; (402078 <prvNotifyQueueSetContainer+0x84>)
  402060:	4798      	blx	r3
  402062:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  402064:	bf18      	it	ne
  402066:	2501      	movne	r5, #1
  402068:	e7e7      	b.n	40203a <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  40206a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40206c:	3301      	adds	r3, #1
  40206e:	64a3      	str	r3, [r4, #72]	; 0x48
  402070:	e7e3      	b.n	40203a <prvNotifyQueueSetContainer+0x46>
  402072:	bf00      	nop
  402074:	00401f6d 	.word	0x00401f6d
  402078:	00403145 	.word	0x00403145

0040207c <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  40207c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40207e:	b172      	cbz	r2, 40209e <prvCopyDataFromQueue+0x22>
{
  402080:	b510      	push	{r4, lr}
  402082:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  402084:	68c4      	ldr	r4, [r0, #12]
  402086:	4414      	add	r4, r2
  402088:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  40208a:	6840      	ldr	r0, [r0, #4]
  40208c:	4284      	cmp	r4, r0
  40208e:	d301      	bcc.n	402094 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  402090:	6818      	ldr	r0, [r3, #0]
  402092:	60d8      	str	r0, [r3, #12]
  402094:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  402096:	68d9      	ldr	r1, [r3, #12]
  402098:	4b01      	ldr	r3, [pc, #4]	; (4020a0 <prvCopyDataFromQueue+0x24>)
  40209a:	4798      	blx	r3
  40209c:	bd10      	pop	{r4, pc}
  40209e:	4770      	bx	lr
  4020a0:	00404c9d 	.word	0x00404c9d

004020a4 <prvUnlockQueue>:
{
  4020a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4020a6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  4020a8:	4b22      	ldr	r3, [pc, #136]	; (402134 <prvUnlockQueue+0x90>)
  4020aa:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4020ac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4020ae:	2b00      	cmp	r3, #0
  4020b0:	dd1b      	ble.n	4020ea <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4020b2:	4d21      	ldr	r5, [pc, #132]	; (402138 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  4020b4:	4f21      	ldr	r7, [pc, #132]	; (40213c <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4020b6:	4e22      	ldr	r6, [pc, #136]	; (402140 <prvUnlockQueue+0x9c>)
  4020b8:	e00b      	b.n	4020d2 <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4020ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4020bc:	b1ab      	cbz	r3, 4020ea <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4020be:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4020c2:	47b0      	blx	r6
  4020c4:	b978      	cbnz	r0, 4020e6 <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  4020c6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4020c8:	3b01      	subs	r3, #1
  4020ca:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4020cc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4020ce:	2b00      	cmp	r3, #0
  4020d0:	dd0b      	ble.n	4020ea <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  4020d2:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4020d4:	2b00      	cmp	r3, #0
  4020d6:	d0f0      	beq.n	4020ba <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4020d8:	2100      	movs	r1, #0
  4020da:	4620      	mov	r0, r4
  4020dc:	47a8      	blx	r5
  4020de:	2801      	cmp	r0, #1
  4020e0:	d1f1      	bne.n	4020c6 <prvUnlockQueue+0x22>
						vTaskMissedYield();
  4020e2:	47b8      	blx	r7
  4020e4:	e7ef      	b.n	4020c6 <prvUnlockQueue+0x22>
							vTaskMissedYield();
  4020e6:	47b8      	blx	r7
  4020e8:	e7ed      	b.n	4020c6 <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  4020ea:	f04f 33ff 	mov.w	r3, #4294967295
  4020ee:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  4020f0:	4b14      	ldr	r3, [pc, #80]	; (402144 <prvUnlockQueue+0xa0>)
  4020f2:	4798      	blx	r3
	taskENTER_CRITICAL();
  4020f4:	4b0f      	ldr	r3, [pc, #60]	; (402134 <prvUnlockQueue+0x90>)
  4020f6:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  4020f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4020fa:	2b00      	cmp	r3, #0
  4020fc:	dd14      	ble.n	402128 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4020fe:	6923      	ldr	r3, [r4, #16]
  402100:	b193      	cbz	r3, 402128 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  402102:	f104 0610 	add.w	r6, r4, #16
  402106:	4d0e      	ldr	r5, [pc, #56]	; (402140 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  402108:	4f0c      	ldr	r7, [pc, #48]	; (40213c <prvUnlockQueue+0x98>)
  40210a:	e007      	b.n	40211c <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  40210c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40210e:	3b01      	subs	r3, #1
  402110:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  402112:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402114:	2b00      	cmp	r3, #0
  402116:	dd07      	ble.n	402128 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  402118:	6923      	ldr	r3, [r4, #16]
  40211a:	b12b      	cbz	r3, 402128 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40211c:	4630      	mov	r0, r6
  40211e:	47a8      	blx	r5
  402120:	2800      	cmp	r0, #0
  402122:	d0f3      	beq.n	40210c <prvUnlockQueue+0x68>
					vTaskMissedYield();
  402124:	47b8      	blx	r7
  402126:	e7f1      	b.n	40210c <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  402128:	f04f 33ff 	mov.w	r3, #4294967295
  40212c:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  40212e:	4b05      	ldr	r3, [pc, #20]	; (402144 <prvUnlockQueue+0xa0>)
  402130:	4798      	blx	r3
  402132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402134:	00401cbd 	.word	0x00401cbd
  402138:	00401ff5 	.word	0x00401ff5
  40213c:	004032a1 	.word	0x004032a1
  402140:	00403145 	.word	0x00403145
  402144:	00401d09 	.word	0x00401d09

00402148 <xQueueGenericReset>:
{
  402148:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  40214a:	b308      	cbz	r0, 402190 <xQueueGenericReset+0x48>
  40214c:	4604      	mov	r4, r0
  40214e:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  402150:	4b1d      	ldr	r3, [pc, #116]	; (4021c8 <xQueueGenericReset+0x80>)
  402152:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  402154:	6822      	ldr	r2, [r4, #0]
  402156:	6c21      	ldr	r1, [r4, #64]	; 0x40
  402158:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40215a:	fb03 f301 	mul.w	r3, r3, r1
  40215e:	18d0      	adds	r0, r2, r3
  402160:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  402162:	2000      	movs	r0, #0
  402164:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  402166:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  402168:	1a5b      	subs	r3, r3, r1
  40216a:	4413      	add	r3, r2
  40216c:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  40216e:	f04f 33ff 	mov.w	r3, #4294967295
  402172:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  402174:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  402176:	b9fd      	cbnz	r5, 4021b8 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  402178:	6923      	ldr	r3, [r4, #16]
  40217a:	b12b      	cbz	r3, 402188 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  40217c:	f104 0010 	add.w	r0, r4, #16
  402180:	4b12      	ldr	r3, [pc, #72]	; (4021cc <xQueueGenericReset+0x84>)
  402182:	4798      	blx	r3
  402184:	2801      	cmp	r0, #1
  402186:	d00e      	beq.n	4021a6 <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  402188:	4b11      	ldr	r3, [pc, #68]	; (4021d0 <xQueueGenericReset+0x88>)
  40218a:	4798      	blx	r3
}
  40218c:	2001      	movs	r0, #1
  40218e:	bd38      	pop	{r3, r4, r5, pc}
  402190:	f04f 0380 	mov.w	r3, #128	; 0x80
  402194:	b672      	cpsid	i
  402196:	f383 8811 	msr	BASEPRI, r3
  40219a:	f3bf 8f6f 	isb	sy
  40219e:	f3bf 8f4f 	dsb	sy
  4021a2:	b662      	cpsie	i
  4021a4:	e7fe      	b.n	4021a4 <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  4021a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4021aa:	4b0a      	ldr	r3, [pc, #40]	; (4021d4 <xQueueGenericReset+0x8c>)
  4021ac:	601a      	str	r2, [r3, #0]
  4021ae:	f3bf 8f4f 	dsb	sy
  4021b2:	f3bf 8f6f 	isb	sy
  4021b6:	e7e7      	b.n	402188 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  4021b8:	f104 0010 	add.w	r0, r4, #16
  4021bc:	4d06      	ldr	r5, [pc, #24]	; (4021d8 <xQueueGenericReset+0x90>)
  4021be:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  4021c0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4021c4:	47a8      	blx	r5
  4021c6:	e7df      	b.n	402188 <xQueueGenericReset+0x40>
  4021c8:	00401cbd 	.word	0x00401cbd
  4021cc:	00403145 	.word	0x00403145
  4021d0:	00401d09 	.word	0x00401d09
  4021d4:	e000ed04 	.word	0xe000ed04
  4021d8:	00401b71 	.word	0x00401b71

004021dc <xQueueGenericCreate>:
{
  4021dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  4021de:	b950      	cbnz	r0, 4021f6 <xQueueGenericCreate+0x1a>
  4021e0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021e4:	b672      	cpsid	i
  4021e6:	f383 8811 	msr	BASEPRI, r3
  4021ea:	f3bf 8f6f 	isb	sy
  4021ee:	f3bf 8f4f 	dsb	sy
  4021f2:	b662      	cpsie	i
  4021f4:	e7fe      	b.n	4021f4 <xQueueGenericCreate+0x18>
  4021f6:	4606      	mov	r6, r0
  4021f8:	4617      	mov	r7, r2
  4021fa:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  4021fc:	b189      	cbz	r1, 402222 <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4021fe:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  402202:	3059      	adds	r0, #89	; 0x59
  402204:	4b12      	ldr	r3, [pc, #72]	; (402250 <xQueueGenericCreate+0x74>)
  402206:	4798      	blx	r3
	if( pxNewQueue != NULL )
  402208:	4604      	mov	r4, r0
  40220a:	b9e8      	cbnz	r0, 402248 <xQueueGenericCreate+0x6c>
  40220c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402210:	b672      	cpsid	i
  402212:	f383 8811 	msr	BASEPRI, r3
  402216:	f3bf 8f6f 	isb	sy
  40221a:	f3bf 8f4f 	dsb	sy
  40221e:	b662      	cpsie	i
  402220:	e7fe      	b.n	402220 <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  402222:	2058      	movs	r0, #88	; 0x58
  402224:	4b0a      	ldr	r3, [pc, #40]	; (402250 <xQueueGenericCreate+0x74>)
  402226:	4798      	blx	r3
	if( pxNewQueue != NULL )
  402228:	4604      	mov	r4, r0
  40222a:	2800      	cmp	r0, #0
  40222c:	d0ee      	beq.n	40220c <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  40222e:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  402230:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  402232:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  402234:	2101      	movs	r1, #1
  402236:	4620      	mov	r0, r4
  402238:	4b06      	ldr	r3, [pc, #24]	; (402254 <xQueueGenericCreate+0x78>)
  40223a:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  40223c:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  402240:	2300      	movs	r3, #0
  402242:	6563      	str	r3, [r4, #84]	; 0x54
}
  402244:	4620      	mov	r0, r4
  402246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  402248:	f100 0358 	add.w	r3, r0, #88	; 0x58
  40224c:	6003      	str	r3, [r0, #0]
  40224e:	e7ef      	b.n	402230 <xQueueGenericCreate+0x54>
  402250:	00401f19 	.word	0x00401f19
  402254:	00402149 	.word	0x00402149

00402258 <xQueueGenericSend>:
{
  402258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40225c:	b085      	sub	sp, #20
  40225e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  402260:	b1b8      	cbz	r0, 402292 <xQueueGenericSend+0x3a>
  402262:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402264:	b301      	cbz	r1, 4022a8 <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  402266:	2b02      	cmp	r3, #2
  402268:	d02c      	beq.n	4022c4 <xQueueGenericSend+0x6c>
  40226a:	461d      	mov	r5, r3
  40226c:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  40226e:	4b66      	ldr	r3, [pc, #408]	; (402408 <xQueueGenericSend+0x1b0>)
  402270:	4798      	blx	r3
  402272:	2800      	cmp	r0, #0
  402274:	d134      	bne.n	4022e0 <xQueueGenericSend+0x88>
  402276:	9b01      	ldr	r3, [sp, #4]
  402278:	2b00      	cmp	r3, #0
  40227a:	d038      	beq.n	4022ee <xQueueGenericSend+0x96>
  40227c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402280:	b672      	cpsid	i
  402282:	f383 8811 	msr	BASEPRI, r3
  402286:	f3bf 8f6f 	isb	sy
  40228a:	f3bf 8f4f 	dsb	sy
  40228e:	b662      	cpsie	i
  402290:	e7fe      	b.n	402290 <xQueueGenericSend+0x38>
  402292:	f04f 0380 	mov.w	r3, #128	; 0x80
  402296:	b672      	cpsid	i
  402298:	f383 8811 	msr	BASEPRI, r3
  40229c:	f3bf 8f6f 	isb	sy
  4022a0:	f3bf 8f4f 	dsb	sy
  4022a4:	b662      	cpsie	i
  4022a6:	e7fe      	b.n	4022a6 <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4022a8:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4022aa:	2a00      	cmp	r2, #0
  4022ac:	d0db      	beq.n	402266 <xQueueGenericSend+0xe>
  4022ae:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022b2:	b672      	cpsid	i
  4022b4:	f383 8811 	msr	BASEPRI, r3
  4022b8:	f3bf 8f6f 	isb	sy
  4022bc:	f3bf 8f4f 	dsb	sy
  4022c0:	b662      	cpsie	i
  4022c2:	e7fe      	b.n	4022c2 <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4022c4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  4022c6:	2a01      	cmp	r2, #1
  4022c8:	d0cf      	beq.n	40226a <xQueueGenericSend+0x12>
  4022ca:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022ce:	b672      	cpsid	i
  4022d0:	f383 8811 	msr	BASEPRI, r3
  4022d4:	f3bf 8f6f 	isb	sy
  4022d8:	f3bf 8f4f 	dsb	sy
  4022dc:	b662      	cpsie	i
  4022de:	e7fe      	b.n	4022de <xQueueGenericSend+0x86>
  4022e0:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  4022e2:	4e4a      	ldr	r6, [pc, #296]	; (40240c <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  4022e4:	f8df a150 	ldr.w	sl, [pc, #336]	; 402438 <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  4022e8:	f8df 912c 	ldr.w	r9, [pc, #300]	; 402418 <xQueueGenericSend+0x1c0>
  4022ec:	e042      	b.n	402374 <xQueueGenericSend+0x11c>
  4022ee:	2700      	movs	r7, #0
  4022f0:	e7f7      	b.n	4022e2 <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4022f2:	462a      	mov	r2, r5
  4022f4:	4641      	mov	r1, r8
  4022f6:	4620      	mov	r0, r4
  4022f8:	4b45      	ldr	r3, [pc, #276]	; (402410 <xQueueGenericSend+0x1b8>)
  4022fa:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  4022fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4022fe:	b19b      	cbz	r3, 402328 <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  402300:	4629      	mov	r1, r5
  402302:	4620      	mov	r0, r4
  402304:	4b43      	ldr	r3, [pc, #268]	; (402414 <xQueueGenericSend+0x1bc>)
  402306:	4798      	blx	r3
  402308:	2801      	cmp	r0, #1
  40230a:	d107      	bne.n	40231c <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  40230c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402310:	4b41      	ldr	r3, [pc, #260]	; (402418 <xQueueGenericSend+0x1c0>)
  402312:	601a      	str	r2, [r3, #0]
  402314:	f3bf 8f4f 	dsb	sy
  402318:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  40231c:	4b3f      	ldr	r3, [pc, #252]	; (40241c <xQueueGenericSend+0x1c4>)
  40231e:	4798      	blx	r3
				return pdPASS;
  402320:	2001      	movs	r0, #1
}
  402322:	b005      	add	sp, #20
  402324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402328:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40232a:	b173      	cbz	r3, 40234a <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  40232c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402330:	4b3b      	ldr	r3, [pc, #236]	; (402420 <xQueueGenericSend+0x1c8>)
  402332:	4798      	blx	r3
  402334:	2801      	cmp	r0, #1
  402336:	d1f1      	bne.n	40231c <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  402338:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40233c:	4b36      	ldr	r3, [pc, #216]	; (402418 <xQueueGenericSend+0x1c0>)
  40233e:	601a      	str	r2, [r3, #0]
  402340:	f3bf 8f4f 	dsb	sy
  402344:	f3bf 8f6f 	isb	sy
  402348:	e7e8      	b.n	40231c <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  40234a:	2800      	cmp	r0, #0
  40234c:	d0e6      	beq.n	40231c <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  40234e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402352:	4b31      	ldr	r3, [pc, #196]	; (402418 <xQueueGenericSend+0x1c0>)
  402354:	601a      	str	r2, [r3, #0]
  402356:	f3bf 8f4f 	dsb	sy
  40235a:	f3bf 8f6f 	isb	sy
  40235e:	e7dd      	b.n	40231c <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  402360:	4b2e      	ldr	r3, [pc, #184]	; (40241c <xQueueGenericSend+0x1c4>)
  402362:	4798      	blx	r3
					return errQUEUE_FULL;
  402364:	2000      	movs	r0, #0
  402366:	e7dc      	b.n	402322 <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  402368:	4620      	mov	r0, r4
  40236a:	4b2e      	ldr	r3, [pc, #184]	; (402424 <xQueueGenericSend+0x1cc>)
  40236c:	4798      	blx	r3
				( void ) xTaskResumeAll();
  40236e:	4b2e      	ldr	r3, [pc, #184]	; (402428 <xQueueGenericSend+0x1d0>)
  402370:	4798      	blx	r3
  402372:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  402374:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  402376:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402378:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40237a:	429a      	cmp	r2, r3
  40237c:	d3b9      	bcc.n	4022f2 <xQueueGenericSend+0x9a>
  40237e:	2d02      	cmp	r5, #2
  402380:	d0b7      	beq.n	4022f2 <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  402382:	9b01      	ldr	r3, [sp, #4]
  402384:	2b00      	cmp	r3, #0
  402386:	d0eb      	beq.n	402360 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  402388:	b90f      	cbnz	r7, 40238e <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  40238a:	a802      	add	r0, sp, #8
  40238c:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  40238e:	4b23      	ldr	r3, [pc, #140]	; (40241c <xQueueGenericSend+0x1c4>)
  402390:	4798      	blx	r3
		vTaskSuspendAll();
  402392:	4b26      	ldr	r3, [pc, #152]	; (40242c <xQueueGenericSend+0x1d4>)
  402394:	4798      	blx	r3
		prvLockQueue( pxQueue );
  402396:	47b0      	blx	r6
  402398:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40239a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40239e:	d101      	bne.n	4023a4 <xQueueGenericSend+0x14c>
  4023a0:	2300      	movs	r3, #0
  4023a2:	6463      	str	r3, [r4, #68]	; 0x44
  4023a4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4023a6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4023aa:	d101      	bne.n	4023b0 <xQueueGenericSend+0x158>
  4023ac:	2300      	movs	r3, #0
  4023ae:	64a3      	str	r3, [r4, #72]	; 0x48
  4023b0:	4b1a      	ldr	r3, [pc, #104]	; (40241c <xQueueGenericSend+0x1c4>)
  4023b2:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4023b4:	a901      	add	r1, sp, #4
  4023b6:	a802      	add	r0, sp, #8
  4023b8:	4b1d      	ldr	r3, [pc, #116]	; (402430 <xQueueGenericSend+0x1d8>)
  4023ba:	4798      	blx	r3
  4023bc:	b9e0      	cbnz	r0, 4023f8 <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  4023be:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  4023c0:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  4023c4:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  4023c6:	4b15      	ldr	r3, [pc, #84]	; (40241c <xQueueGenericSend+0x1c4>)
  4023c8:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  4023ca:	45bb      	cmp	fp, r7
  4023cc:	d1cc      	bne.n	402368 <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  4023ce:	9901      	ldr	r1, [sp, #4]
  4023d0:	f104 0010 	add.w	r0, r4, #16
  4023d4:	4b17      	ldr	r3, [pc, #92]	; (402434 <xQueueGenericSend+0x1dc>)
  4023d6:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  4023d8:	4620      	mov	r0, r4
  4023da:	4b12      	ldr	r3, [pc, #72]	; (402424 <xQueueGenericSend+0x1cc>)
  4023dc:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4023de:	4b12      	ldr	r3, [pc, #72]	; (402428 <xQueueGenericSend+0x1d0>)
  4023e0:	4798      	blx	r3
  4023e2:	2800      	cmp	r0, #0
  4023e4:	d1c5      	bne.n	402372 <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  4023e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4023ea:	f8c9 3000 	str.w	r3, [r9]
  4023ee:	f3bf 8f4f 	dsb	sy
  4023f2:	f3bf 8f6f 	isb	sy
  4023f6:	e7bc      	b.n	402372 <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  4023f8:	4620      	mov	r0, r4
  4023fa:	4b0a      	ldr	r3, [pc, #40]	; (402424 <xQueueGenericSend+0x1cc>)
  4023fc:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4023fe:	4b0a      	ldr	r3, [pc, #40]	; (402428 <xQueueGenericSend+0x1d0>)
  402400:	4798      	blx	r3
			return errQUEUE_FULL;
  402402:	2000      	movs	r0, #0
  402404:	e78d      	b.n	402322 <xQueueGenericSend+0xca>
  402406:	bf00      	nop
  402408:	004032ad 	.word	0x004032ad
  40240c:	00401cbd 	.word	0x00401cbd
  402410:	00401f6d 	.word	0x00401f6d
  402414:	00401ff5 	.word	0x00401ff5
  402418:	e000ed04 	.word	0xe000ed04
  40241c:	00401d09 	.word	0x00401d09
  402420:	00403145 	.word	0x00403145
  402424:	004020a5 	.word	0x004020a5
  402428:	00402d29 	.word	0x00402d29
  40242c:	00402bc1 	.word	0x00402bc1
  402430:	0040320d 	.word	0x0040320d
  402434:	00403041 	.word	0x00403041
  402438:	004031dd 	.word	0x004031dd

0040243c <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  40243c:	2800      	cmp	r0, #0
  40243e:	d036      	beq.n	4024ae <xQueueGenericSendFromISR+0x72>
{
  402440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402444:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402446:	2900      	cmp	r1, #0
  402448:	d03c      	beq.n	4024c4 <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40244a:	2b02      	cmp	r3, #2
  40244c:	d048      	beq.n	4024e0 <xQueueGenericSendFromISR+0xa4>
  40244e:	461e      	mov	r6, r3
  402450:	4615      	mov	r5, r2
  402452:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  402454:	4b35      	ldr	r3, [pc, #212]	; (40252c <xQueueGenericSendFromISR+0xf0>)
  402456:	4798      	blx	r3
	__asm volatile
  402458:	f3ef 8711 	mrs	r7, BASEPRI
  40245c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402460:	b672      	cpsid	i
  402462:	f383 8811 	msr	BASEPRI, r3
  402466:	f3bf 8f6f 	isb	sy
  40246a:	f3bf 8f4f 	dsb	sy
  40246e:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  402470:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402472:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402474:	429a      	cmp	r2, r3
  402476:	d301      	bcc.n	40247c <xQueueGenericSendFromISR+0x40>
  402478:	2e02      	cmp	r6, #2
  40247a:	d14f      	bne.n	40251c <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  40247c:	4632      	mov	r2, r6
  40247e:	4641      	mov	r1, r8
  402480:	4620      	mov	r0, r4
  402482:	4b2b      	ldr	r3, [pc, #172]	; (402530 <xQueueGenericSendFromISR+0xf4>)
  402484:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  402486:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402488:	f1b3 3fff 	cmp.w	r3, #4294967295
  40248c:	d141      	bne.n	402512 <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  40248e:	6d63      	ldr	r3, [r4, #84]	; 0x54
  402490:	2b00      	cmp	r3, #0
  402492:	d033      	beq.n	4024fc <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  402494:	4631      	mov	r1, r6
  402496:	4620      	mov	r0, r4
  402498:	4b26      	ldr	r3, [pc, #152]	; (402534 <xQueueGenericSendFromISR+0xf8>)
  40249a:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  40249c:	2d00      	cmp	r5, #0
  40249e:	d03f      	beq.n	402520 <xQueueGenericSendFromISR+0xe4>
  4024a0:	2801      	cmp	r0, #1
  4024a2:	d13d      	bne.n	402520 <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  4024a4:	6028      	str	r0, [r5, #0]
	__asm volatile
  4024a6:	f387 8811 	msr	BASEPRI, r7
}
  4024aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  4024ae:	f04f 0380 	mov.w	r3, #128	; 0x80
  4024b2:	b672      	cpsid	i
  4024b4:	f383 8811 	msr	BASEPRI, r3
  4024b8:	f3bf 8f6f 	isb	sy
  4024bc:	f3bf 8f4f 	dsb	sy
  4024c0:	b662      	cpsie	i
  4024c2:	e7fe      	b.n	4024c2 <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4024c4:	6c00      	ldr	r0, [r0, #64]	; 0x40
  4024c6:	2800      	cmp	r0, #0
  4024c8:	d0bf      	beq.n	40244a <xQueueGenericSendFromISR+0xe>
  4024ca:	f04f 0380 	mov.w	r3, #128	; 0x80
  4024ce:	b672      	cpsid	i
  4024d0:	f383 8811 	msr	BASEPRI, r3
  4024d4:	f3bf 8f6f 	isb	sy
  4024d8:	f3bf 8f4f 	dsb	sy
  4024dc:	b662      	cpsie	i
  4024de:	e7fe      	b.n	4024de <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4024e0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  4024e2:	2801      	cmp	r0, #1
  4024e4:	d0b3      	beq.n	40244e <xQueueGenericSendFromISR+0x12>
  4024e6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4024ea:	b672      	cpsid	i
  4024ec:	f383 8811 	msr	BASEPRI, r3
  4024f0:	f3bf 8f6f 	isb	sy
  4024f4:	f3bf 8f4f 	dsb	sy
  4024f8:	b662      	cpsie	i
  4024fa:	e7fe      	b.n	4024fa <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4024fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4024fe:	b18b      	cbz	r3, 402524 <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  402500:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402504:	4b0c      	ldr	r3, [pc, #48]	; (402538 <xQueueGenericSendFromISR+0xfc>)
  402506:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  402508:	b175      	cbz	r5, 402528 <xQueueGenericSendFromISR+0xec>
  40250a:	b168      	cbz	r0, 402528 <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  40250c:	2001      	movs	r0, #1
  40250e:	6028      	str	r0, [r5, #0]
  402510:	e7c9      	b.n	4024a6 <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  402512:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402514:	3301      	adds	r3, #1
  402516:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  402518:	2001      	movs	r0, #1
  40251a:	e7c4      	b.n	4024a6 <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  40251c:	2000      	movs	r0, #0
  40251e:	e7c2      	b.n	4024a6 <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  402520:	2001      	movs	r0, #1
  402522:	e7c0      	b.n	4024a6 <xQueueGenericSendFromISR+0x6a>
  402524:	2001      	movs	r0, #1
  402526:	e7be      	b.n	4024a6 <xQueueGenericSendFromISR+0x6a>
  402528:	2001      	movs	r0, #1
  40252a:	e7bc      	b.n	4024a6 <xQueueGenericSendFromISR+0x6a>
  40252c:	00401eb5 	.word	0x00401eb5
  402530:	00401f6d 	.word	0x00401f6d
  402534:	00401ff5 	.word	0x00401ff5
  402538:	00403145 	.word	0x00403145

0040253c <xQueueGiveFromISR>:
	configASSERT( pxQueue );
  40253c:	b170      	cbz	r0, 40255c <xQueueGiveFromISR+0x20>
{
  40253e:	b570      	push	{r4, r5, r6, lr}
  402540:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
  402542:	6c03      	ldr	r3, [r0, #64]	; 0x40
  402544:	b1ab      	cbz	r3, 402572 <xQueueGiveFromISR+0x36>
  402546:	f04f 0380 	mov.w	r3, #128	; 0x80
  40254a:	b672      	cpsid	i
  40254c:	f383 8811 	msr	BASEPRI, r3
  402550:	f3bf 8f6f 	isb	sy
  402554:	f3bf 8f4f 	dsb	sy
  402558:	b662      	cpsie	i
  40255a:	e7fe      	b.n	40255a <xQueueGiveFromISR+0x1e>
  40255c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402560:	b672      	cpsid	i
  402562:	f383 8811 	msr	BASEPRI, r3
  402566:	f3bf 8f6f 	isb	sy
  40256a:	f3bf 8f4f 	dsb	sy
  40256e:	b662      	cpsie	i
  402570:	e7fe      	b.n	402570 <xQueueGiveFromISR+0x34>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  402572:	6803      	ldr	r3, [r0, #0]
  402574:	b333      	cbz	r3, 4025c4 <xQueueGiveFromISR+0x88>
  402576:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  402578:	4b25      	ldr	r3, [pc, #148]	; (402610 <xQueueGiveFromISR+0xd4>)
  40257a:	4798      	blx	r3
	__asm volatile
  40257c:	f3ef 8611 	mrs	r6, BASEPRI
  402580:	f04f 0380 	mov.w	r3, #128	; 0x80
  402584:	b672      	cpsid	i
  402586:	f383 8811 	msr	BASEPRI, r3
  40258a:	f3bf 8f6f 	isb	sy
  40258e:	f3bf 8f4f 	dsb	sy
  402592:	b662      	cpsie	i
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  402594:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402596:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402598:	429a      	cmp	r2, r3
  40259a:	d231      	bcs.n	402600 <xQueueGiveFromISR+0xc4>
			++( pxQueue->uxMessagesWaiting );
  40259c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40259e:	3301      	adds	r3, #1
  4025a0:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
  4025a2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4025a4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4025a8:	d125      	bne.n	4025f6 <xQueueGiveFromISR+0xba>
					if( pxQueue->pxQueueSetContainer != NULL )
  4025aa:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4025ac:	b1c3      	cbz	r3, 4025e0 <xQueueGiveFromISR+0xa4>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4025ae:	2100      	movs	r1, #0
  4025b0:	4620      	mov	r0, r4
  4025b2:	4b18      	ldr	r3, [pc, #96]	; (402614 <xQueueGiveFromISR+0xd8>)
  4025b4:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  4025b6:	b32d      	cbz	r5, 402604 <xQueueGiveFromISR+0xc8>
  4025b8:	2801      	cmp	r0, #1
  4025ba:	d123      	bne.n	402604 <xQueueGiveFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
  4025bc:	6028      	str	r0, [r5, #0]
	__asm volatile
  4025be:	f386 8811 	msr	BASEPRI, r6
}
  4025c2:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  4025c4:	6843      	ldr	r3, [r0, #4]
  4025c6:	2b00      	cmp	r3, #0
  4025c8:	d0d5      	beq.n	402576 <xQueueGiveFromISR+0x3a>
	__asm volatile
  4025ca:	f04f 0380 	mov.w	r3, #128	; 0x80
  4025ce:	b672      	cpsid	i
  4025d0:	f383 8811 	msr	BASEPRI, r3
  4025d4:	f3bf 8f6f 	isb	sy
  4025d8:	f3bf 8f4f 	dsb	sy
  4025dc:	b662      	cpsie	i
  4025de:	e7fe      	b.n	4025de <xQueueGiveFromISR+0xa2>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4025e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4025e2:	b18b      	cbz	r3, 402608 <xQueueGiveFromISR+0xcc>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4025e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4025e8:	4b0b      	ldr	r3, [pc, #44]	; (402618 <xQueueGiveFromISR+0xdc>)
  4025ea:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  4025ec:	b175      	cbz	r5, 40260c <xQueueGiveFromISR+0xd0>
  4025ee:	b168      	cbz	r0, 40260c <xQueueGiveFromISR+0xd0>
									*pxHigherPriorityTaskWoken = pdTRUE;
  4025f0:	2001      	movs	r0, #1
  4025f2:	6028      	str	r0, [r5, #0]
  4025f4:	e7e3      	b.n	4025be <xQueueGiveFromISR+0x82>
				++( pxQueue->xTxLock );
  4025f6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4025f8:	3301      	adds	r3, #1
  4025fa:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  4025fc:	2001      	movs	r0, #1
  4025fe:	e7de      	b.n	4025be <xQueueGiveFromISR+0x82>
			xReturn = errQUEUE_FULL;
  402600:	2000      	movs	r0, #0
  402602:	e7dc      	b.n	4025be <xQueueGiveFromISR+0x82>
			xReturn = pdPASS;
  402604:	2001      	movs	r0, #1
  402606:	e7da      	b.n	4025be <xQueueGiveFromISR+0x82>
  402608:	2001      	movs	r0, #1
  40260a:	e7d8      	b.n	4025be <xQueueGiveFromISR+0x82>
  40260c:	2001      	movs	r0, #1
  40260e:	e7d6      	b.n	4025be <xQueueGiveFromISR+0x82>
  402610:	00401eb5 	.word	0x00401eb5
  402614:	00401ff5 	.word	0x00401ff5
  402618:	00403145 	.word	0x00403145

0040261c <xQueueGenericReceive>:
{
  40261c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402620:	b084      	sub	sp, #16
  402622:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  402624:	b198      	cbz	r0, 40264e <xQueueGenericReceive+0x32>
  402626:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402628:	b1e1      	cbz	r1, 402664 <xQueueGenericReceive+0x48>
  40262a:	4698      	mov	r8, r3
  40262c:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  40262e:	4b61      	ldr	r3, [pc, #388]	; (4027b4 <xQueueGenericReceive+0x198>)
  402630:	4798      	blx	r3
  402632:	bb28      	cbnz	r0, 402680 <xQueueGenericReceive+0x64>
  402634:	9b01      	ldr	r3, [sp, #4]
  402636:	b353      	cbz	r3, 40268e <xQueueGenericReceive+0x72>
  402638:	f04f 0380 	mov.w	r3, #128	; 0x80
  40263c:	b672      	cpsid	i
  40263e:	f383 8811 	msr	BASEPRI, r3
  402642:	f3bf 8f6f 	isb	sy
  402646:	f3bf 8f4f 	dsb	sy
  40264a:	b662      	cpsie	i
  40264c:	e7fe      	b.n	40264c <xQueueGenericReceive+0x30>
  40264e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402652:	b672      	cpsid	i
  402654:	f383 8811 	msr	BASEPRI, r3
  402658:	f3bf 8f6f 	isb	sy
  40265c:	f3bf 8f4f 	dsb	sy
  402660:	b662      	cpsie	i
  402662:	e7fe      	b.n	402662 <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402664:	6c02      	ldr	r2, [r0, #64]	; 0x40
  402666:	2a00      	cmp	r2, #0
  402668:	d0df      	beq.n	40262a <xQueueGenericReceive+0xe>
  40266a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40266e:	b672      	cpsid	i
  402670:	f383 8811 	msr	BASEPRI, r3
  402674:	f3bf 8f6f 	isb	sy
  402678:	f3bf 8f4f 	dsb	sy
  40267c:	b662      	cpsie	i
  40267e:	e7fe      	b.n	40267e <xQueueGenericReceive+0x62>
  402680:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  402682:	4d4d      	ldr	r5, [pc, #308]	; (4027b8 <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  402684:	f8df a160 	ldr.w	sl, [pc, #352]	; 4027e8 <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  402688:	f8df 913c 	ldr.w	r9, [pc, #316]	; 4027c8 <xQueueGenericReceive+0x1ac>
  40268c:	e04b      	b.n	402726 <xQueueGenericReceive+0x10a>
  40268e:	2600      	movs	r6, #0
  402690:	e7f7      	b.n	402682 <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  402692:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  402694:	4639      	mov	r1, r7
  402696:	4620      	mov	r0, r4
  402698:	4b48      	ldr	r3, [pc, #288]	; (4027bc <xQueueGenericReceive+0x1a0>)
  40269a:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  40269c:	f1b8 0f00 	cmp.w	r8, #0
  4026a0:	d11d      	bne.n	4026de <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  4026a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4026a4:	3b01      	subs	r3, #1
  4026a6:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4026a8:	6823      	ldr	r3, [r4, #0]
  4026aa:	b913      	cbnz	r3, 4026b2 <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  4026ac:	4b44      	ldr	r3, [pc, #272]	; (4027c0 <xQueueGenericReceive+0x1a4>)
  4026ae:	4798      	blx	r3
  4026b0:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4026b2:	6923      	ldr	r3, [r4, #16]
  4026b4:	b16b      	cbz	r3, 4026d2 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4026b6:	f104 0010 	add.w	r0, r4, #16
  4026ba:	4b42      	ldr	r3, [pc, #264]	; (4027c4 <xQueueGenericReceive+0x1a8>)
  4026bc:	4798      	blx	r3
  4026be:	2801      	cmp	r0, #1
  4026c0:	d107      	bne.n	4026d2 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  4026c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4026c6:	4b40      	ldr	r3, [pc, #256]	; (4027c8 <xQueueGenericReceive+0x1ac>)
  4026c8:	601a      	str	r2, [r3, #0]
  4026ca:	f3bf 8f4f 	dsb	sy
  4026ce:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  4026d2:	4b3e      	ldr	r3, [pc, #248]	; (4027cc <xQueueGenericReceive+0x1b0>)
  4026d4:	4798      	blx	r3
				return pdPASS;
  4026d6:	2001      	movs	r0, #1
}
  4026d8:	b004      	add	sp, #16
  4026da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  4026de:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4026e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4026e2:	2b00      	cmp	r3, #0
  4026e4:	d0f5      	beq.n	4026d2 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4026e6:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4026ea:	4b36      	ldr	r3, [pc, #216]	; (4027c4 <xQueueGenericReceive+0x1a8>)
  4026ec:	4798      	blx	r3
  4026ee:	2800      	cmp	r0, #0
  4026f0:	d0ef      	beq.n	4026d2 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  4026f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4026f6:	4b34      	ldr	r3, [pc, #208]	; (4027c8 <xQueueGenericReceive+0x1ac>)
  4026f8:	601a      	str	r2, [r3, #0]
  4026fa:	f3bf 8f4f 	dsb	sy
  4026fe:	f3bf 8f6f 	isb	sy
  402702:	e7e6      	b.n	4026d2 <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  402704:	4b31      	ldr	r3, [pc, #196]	; (4027cc <xQueueGenericReceive+0x1b0>)
  402706:	4798      	blx	r3
					return errQUEUE_EMPTY;
  402708:	2000      	movs	r0, #0
  40270a:	e7e5      	b.n	4026d8 <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  40270c:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  40270e:	6860      	ldr	r0, [r4, #4]
  402710:	4b2f      	ldr	r3, [pc, #188]	; (4027d0 <xQueueGenericReceive+0x1b4>)
  402712:	4798      	blx	r3
						taskEXIT_CRITICAL();
  402714:	4b2d      	ldr	r3, [pc, #180]	; (4027cc <xQueueGenericReceive+0x1b0>)
  402716:	4798      	blx	r3
  402718:	e030      	b.n	40277c <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  40271a:	4620      	mov	r0, r4
  40271c:	4b2d      	ldr	r3, [pc, #180]	; (4027d4 <xQueueGenericReceive+0x1b8>)
  40271e:	4798      	blx	r3
				( void ) xTaskResumeAll();
  402720:	4b2d      	ldr	r3, [pc, #180]	; (4027d8 <xQueueGenericReceive+0x1bc>)
  402722:	4798      	blx	r3
  402724:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  402726:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  402728:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40272a:	2b00      	cmp	r3, #0
  40272c:	d1b1      	bne.n	402692 <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  40272e:	9b01      	ldr	r3, [sp, #4]
  402730:	2b00      	cmp	r3, #0
  402732:	d0e7      	beq.n	402704 <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  402734:	b90e      	cbnz	r6, 40273a <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  402736:	a802      	add	r0, sp, #8
  402738:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  40273a:	4b24      	ldr	r3, [pc, #144]	; (4027cc <xQueueGenericReceive+0x1b0>)
  40273c:	4798      	blx	r3
		vTaskSuspendAll();
  40273e:	4b27      	ldr	r3, [pc, #156]	; (4027dc <xQueueGenericReceive+0x1c0>)
  402740:	4798      	blx	r3
		prvLockQueue( pxQueue );
  402742:	47a8      	blx	r5
  402744:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402746:	f1b3 3fff 	cmp.w	r3, #4294967295
  40274a:	d101      	bne.n	402750 <xQueueGenericReceive+0x134>
  40274c:	2300      	movs	r3, #0
  40274e:	6463      	str	r3, [r4, #68]	; 0x44
  402750:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402752:	f1b3 3fff 	cmp.w	r3, #4294967295
  402756:	d101      	bne.n	40275c <xQueueGenericReceive+0x140>
  402758:	2300      	movs	r3, #0
  40275a:	64a3      	str	r3, [r4, #72]	; 0x48
  40275c:	4b1b      	ldr	r3, [pc, #108]	; (4027cc <xQueueGenericReceive+0x1b0>)
  40275e:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  402760:	a901      	add	r1, sp, #4
  402762:	a802      	add	r0, sp, #8
  402764:	4b1e      	ldr	r3, [pc, #120]	; (4027e0 <xQueueGenericReceive+0x1c4>)
  402766:	4798      	blx	r3
  402768:	b9e8      	cbnz	r0, 4027a6 <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  40276a:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  40276c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  40276e:	4b17      	ldr	r3, [pc, #92]	; (4027cc <xQueueGenericReceive+0x1b0>)
  402770:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  402772:	2e00      	cmp	r6, #0
  402774:	d1d1      	bne.n	40271a <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  402776:	6823      	ldr	r3, [r4, #0]
  402778:	2b00      	cmp	r3, #0
  40277a:	d0c7      	beq.n	40270c <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  40277c:	9901      	ldr	r1, [sp, #4]
  40277e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402782:	4b18      	ldr	r3, [pc, #96]	; (4027e4 <xQueueGenericReceive+0x1c8>)
  402784:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  402786:	4620      	mov	r0, r4
  402788:	4b12      	ldr	r3, [pc, #72]	; (4027d4 <xQueueGenericReceive+0x1b8>)
  40278a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40278c:	4b12      	ldr	r3, [pc, #72]	; (4027d8 <xQueueGenericReceive+0x1bc>)
  40278e:	4798      	blx	r3
  402790:	2800      	cmp	r0, #0
  402792:	d1c7      	bne.n	402724 <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  402794:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402798:	f8c9 3000 	str.w	r3, [r9]
  40279c:	f3bf 8f4f 	dsb	sy
  4027a0:	f3bf 8f6f 	isb	sy
  4027a4:	e7be      	b.n	402724 <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  4027a6:	4620      	mov	r0, r4
  4027a8:	4b0a      	ldr	r3, [pc, #40]	; (4027d4 <xQueueGenericReceive+0x1b8>)
  4027aa:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4027ac:	4b0a      	ldr	r3, [pc, #40]	; (4027d8 <xQueueGenericReceive+0x1bc>)
  4027ae:	4798      	blx	r3
			return errQUEUE_EMPTY;
  4027b0:	2000      	movs	r0, #0
  4027b2:	e791      	b.n	4026d8 <xQueueGenericReceive+0xbc>
  4027b4:	004032ad 	.word	0x004032ad
  4027b8:	00401cbd 	.word	0x00401cbd
  4027bc:	0040207d 	.word	0x0040207d
  4027c0:	0040342d 	.word	0x0040342d
  4027c4:	00403145 	.word	0x00403145
  4027c8:	e000ed04 	.word	0xe000ed04
  4027cc:	00401d09 	.word	0x00401d09
  4027d0:	004032cd 	.word	0x004032cd
  4027d4:	004020a5 	.word	0x004020a5
  4027d8:	00402d29 	.word	0x00402d29
  4027dc:	00402bc1 	.word	0x00402bc1
  4027e0:	0040320d 	.word	0x0040320d
  4027e4:	00403041 	.word	0x00403041
  4027e8:	004031dd 	.word	0x004031dd

004027ec <vQueueAddToRegistry>:
	{
  4027ec:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  4027ee:	4b0b      	ldr	r3, [pc, #44]	; (40281c <vQueueAddToRegistry+0x30>)
  4027f0:	681b      	ldr	r3, [r3, #0]
  4027f2:	b153      	cbz	r3, 40280a <vQueueAddToRegistry+0x1e>
  4027f4:	2301      	movs	r3, #1
  4027f6:	4c09      	ldr	r4, [pc, #36]	; (40281c <vQueueAddToRegistry+0x30>)
  4027f8:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  4027fc:	b132      	cbz	r2, 40280c <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4027fe:	3301      	adds	r3, #1
  402800:	2b08      	cmp	r3, #8
  402802:	d1f9      	bne.n	4027f8 <vQueueAddToRegistry+0xc>
	}
  402804:	f85d 4b04 	ldr.w	r4, [sp], #4
  402808:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  40280a:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  40280c:	4a03      	ldr	r2, [pc, #12]	; (40281c <vQueueAddToRegistry+0x30>)
  40280e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  402812:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  402816:	6058      	str	r0, [r3, #4]
				break;
  402818:	e7f4      	b.n	402804 <vQueueAddToRegistry+0x18>
  40281a:	bf00      	nop
  40281c:	20400e78 	.word	0x20400e78

00402820 <vQueueWaitForMessageRestricted>:
	{
  402820:	b570      	push	{r4, r5, r6, lr}
  402822:	4604      	mov	r4, r0
  402824:	460d      	mov	r5, r1
  402826:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  402828:	4b0f      	ldr	r3, [pc, #60]	; (402868 <vQueueWaitForMessageRestricted+0x48>)
  40282a:	4798      	blx	r3
  40282c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40282e:	f1b3 3fff 	cmp.w	r3, #4294967295
  402832:	d00b      	beq.n	40284c <vQueueWaitForMessageRestricted+0x2c>
  402834:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402836:	f1b3 3fff 	cmp.w	r3, #4294967295
  40283a:	d00a      	beq.n	402852 <vQueueWaitForMessageRestricted+0x32>
  40283c:	4b0b      	ldr	r3, [pc, #44]	; (40286c <vQueueWaitForMessageRestricted+0x4c>)
  40283e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  402840:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402842:	b14b      	cbz	r3, 402858 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  402844:	4620      	mov	r0, r4
  402846:	4b0a      	ldr	r3, [pc, #40]	; (402870 <vQueueWaitForMessageRestricted+0x50>)
  402848:	4798      	blx	r3
  40284a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  40284c:	2300      	movs	r3, #0
  40284e:	6463      	str	r3, [r4, #68]	; 0x44
  402850:	e7f0      	b.n	402834 <vQueueWaitForMessageRestricted+0x14>
  402852:	2300      	movs	r3, #0
  402854:	64a3      	str	r3, [r4, #72]	; 0x48
  402856:	e7f1      	b.n	40283c <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  402858:	4632      	mov	r2, r6
  40285a:	4629      	mov	r1, r5
  40285c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402860:	4b04      	ldr	r3, [pc, #16]	; (402874 <vQueueWaitForMessageRestricted+0x54>)
  402862:	4798      	blx	r3
  402864:	e7ee      	b.n	402844 <vQueueWaitForMessageRestricted+0x24>
  402866:	bf00      	nop
  402868:	00401cbd 	.word	0x00401cbd
  40286c:	00401d09 	.word	0x00401d09
  402870:	004020a5 	.word	0x004020a5
  402874:	004030c5 	.word	0x004030c5

00402878 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402878:	4b08      	ldr	r3, [pc, #32]	; (40289c <prvResetNextTaskUnblockTime+0x24>)
  40287a:	681b      	ldr	r3, [r3, #0]
  40287c:	681b      	ldr	r3, [r3, #0]
  40287e:	b13b      	cbz	r3, 402890 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402880:	4b06      	ldr	r3, [pc, #24]	; (40289c <prvResetNextTaskUnblockTime+0x24>)
  402882:	681b      	ldr	r3, [r3, #0]
  402884:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  402886:	68db      	ldr	r3, [r3, #12]
  402888:	685a      	ldr	r2, [r3, #4]
  40288a:	4b05      	ldr	r3, [pc, #20]	; (4028a0 <prvResetNextTaskUnblockTime+0x28>)
  40288c:	601a      	str	r2, [r3, #0]
  40288e:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  402890:	f04f 32ff 	mov.w	r2, #4294967295
  402894:	4b02      	ldr	r3, [pc, #8]	; (4028a0 <prvResetNextTaskUnblockTime+0x28>)
  402896:	601a      	str	r2, [r3, #0]
  402898:	4770      	bx	lr
  40289a:	bf00      	nop
  40289c:	20400c84 	.word	0x20400c84
  4028a0:	20400d30 	.word	0x20400d30

004028a4 <prvAddCurrentTaskToDelayedList>:
{
  4028a4:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  4028a6:	4b0f      	ldr	r3, [pc, #60]	; (4028e4 <prvAddCurrentTaskToDelayedList+0x40>)
  4028a8:	681b      	ldr	r3, [r3, #0]
  4028aa:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  4028ac:	4b0e      	ldr	r3, [pc, #56]	; (4028e8 <prvAddCurrentTaskToDelayedList+0x44>)
  4028ae:	681b      	ldr	r3, [r3, #0]
  4028b0:	4298      	cmp	r0, r3
  4028b2:	d30e      	bcc.n	4028d2 <prvAddCurrentTaskToDelayedList+0x2e>
  4028b4:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4028b6:	4b0d      	ldr	r3, [pc, #52]	; (4028ec <prvAddCurrentTaskToDelayedList+0x48>)
  4028b8:	6818      	ldr	r0, [r3, #0]
  4028ba:	4b0a      	ldr	r3, [pc, #40]	; (4028e4 <prvAddCurrentTaskToDelayedList+0x40>)
  4028bc:	6819      	ldr	r1, [r3, #0]
  4028be:	3104      	adds	r1, #4
  4028c0:	4b0b      	ldr	r3, [pc, #44]	; (4028f0 <prvAddCurrentTaskToDelayedList+0x4c>)
  4028c2:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  4028c4:	4b0b      	ldr	r3, [pc, #44]	; (4028f4 <prvAddCurrentTaskToDelayedList+0x50>)
  4028c6:	681b      	ldr	r3, [r3, #0]
  4028c8:	429c      	cmp	r4, r3
  4028ca:	d201      	bcs.n	4028d0 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  4028cc:	4b09      	ldr	r3, [pc, #36]	; (4028f4 <prvAddCurrentTaskToDelayedList+0x50>)
  4028ce:	601c      	str	r4, [r3, #0]
  4028d0:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4028d2:	4b09      	ldr	r3, [pc, #36]	; (4028f8 <prvAddCurrentTaskToDelayedList+0x54>)
  4028d4:	6818      	ldr	r0, [r3, #0]
  4028d6:	4b03      	ldr	r3, [pc, #12]	; (4028e4 <prvAddCurrentTaskToDelayedList+0x40>)
  4028d8:	6819      	ldr	r1, [r3, #0]
  4028da:	3104      	adds	r1, #4
  4028dc:	4b04      	ldr	r3, [pc, #16]	; (4028f0 <prvAddCurrentTaskToDelayedList+0x4c>)
  4028de:	4798      	blx	r3
  4028e0:	bd10      	pop	{r4, pc}
  4028e2:	bf00      	nop
  4028e4:	20400c80 	.word	0x20400c80
  4028e8:	20400d78 	.word	0x20400d78
  4028ec:	20400c84 	.word	0x20400c84
  4028f0:	00401ba5 	.word	0x00401ba5
  4028f4:	20400d30 	.word	0x20400d30
  4028f8:	20400c88 	.word	0x20400c88

004028fc <xTaskGenericCreate>:
{
  4028fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402900:	b083      	sub	sp, #12
  402902:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  402904:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  402908:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  40290a:	b160      	cbz	r0, 402926 <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  40290c:	2d04      	cmp	r5, #4
  40290e:	d915      	bls.n	40293c <xTaskGenericCreate+0x40>
  402910:	f04f 0380 	mov.w	r3, #128	; 0x80
  402914:	b672      	cpsid	i
  402916:	f383 8811 	msr	BASEPRI, r3
  40291a:	f3bf 8f6f 	isb	sy
  40291e:	f3bf 8f4f 	dsb	sy
  402922:	b662      	cpsie	i
  402924:	e7fe      	b.n	402924 <xTaskGenericCreate+0x28>
  402926:	f04f 0380 	mov.w	r3, #128	; 0x80
  40292a:	b672      	cpsid	i
  40292c:	f383 8811 	msr	BASEPRI, r3
  402930:	f3bf 8f6f 	isb	sy
  402934:	f3bf 8f4f 	dsb	sy
  402938:	b662      	cpsie	i
  40293a:	e7fe      	b.n	40293a <xTaskGenericCreate+0x3e>
  40293c:	9001      	str	r0, [sp, #4]
  40293e:	4698      	mov	r8, r3
  402940:	4691      	mov	r9, r2
  402942:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402944:	b936      	cbnz	r6, 402954 <xTaskGenericCreate+0x58>
  402946:	0090      	lsls	r0, r2, #2
  402948:	4b62      	ldr	r3, [pc, #392]	; (402ad4 <xTaskGenericCreate+0x1d8>)
  40294a:	4798      	blx	r3
		if( pxStack != NULL )
  40294c:	4606      	mov	r6, r0
  40294e:	2800      	cmp	r0, #0
  402950:	f000 809e 	beq.w	402a90 <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  402954:	2058      	movs	r0, #88	; 0x58
  402956:	4b5f      	ldr	r3, [pc, #380]	; (402ad4 <xTaskGenericCreate+0x1d8>)
  402958:	4798      	blx	r3
			if( pxNewTCB != NULL )
  40295a:	4604      	mov	r4, r0
  40295c:	2800      	cmp	r0, #0
  40295e:	f000 8094 	beq.w	402a8a <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  402962:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  402964:	ea4f 0289 	mov.w	r2, r9, lsl #2
  402968:	21a5      	movs	r1, #165	; 0xa5
  40296a:	4630      	mov	r0, r6
  40296c:	4b5a      	ldr	r3, [pc, #360]	; (402ad8 <xTaskGenericCreate+0x1dc>)
  40296e:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  402970:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  402974:	444e      	add	r6, r9
  402976:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402978:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  40297c:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  402980:	783b      	ldrb	r3, [r7, #0]
  402982:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  402986:	783b      	ldrb	r3, [r7, #0]
  402988:	2b00      	cmp	r3, #0
  40298a:	f040 8084 	bne.w	402a96 <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  40298e:	2700      	movs	r7, #0
  402990:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  402994:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  402996:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  402998:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  40299a:	f104 0904 	add.w	r9, r4, #4
  40299e:	4648      	mov	r0, r9
  4029a0:	f8df b184 	ldr.w	fp, [pc, #388]	; 402b28 <xTaskGenericCreate+0x22c>
  4029a4:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  4029a6:	f104 0018 	add.w	r0, r4, #24
  4029aa:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  4029ac:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4029ae:	f1c5 0305 	rsb	r3, r5, #5
  4029b2:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  4029b4:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  4029b6:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  4029b8:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  4029bc:	4642      	mov	r2, r8
  4029be:	9901      	ldr	r1, [sp, #4]
  4029c0:	4630      	mov	r0, r6
  4029c2:	4b46      	ldr	r3, [pc, #280]	; (402adc <xTaskGenericCreate+0x1e0>)
  4029c4:	4798      	blx	r3
  4029c6:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  4029c8:	f1ba 0f00 	cmp.w	sl, #0
  4029cc:	d001      	beq.n	4029d2 <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  4029ce:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  4029d2:	4b43      	ldr	r3, [pc, #268]	; (402ae0 <xTaskGenericCreate+0x1e4>)
  4029d4:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  4029d6:	4a43      	ldr	r2, [pc, #268]	; (402ae4 <xTaskGenericCreate+0x1e8>)
  4029d8:	6813      	ldr	r3, [r2, #0]
  4029da:	3301      	adds	r3, #1
  4029dc:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  4029de:	4b42      	ldr	r3, [pc, #264]	; (402ae8 <xTaskGenericCreate+0x1ec>)
  4029e0:	681b      	ldr	r3, [r3, #0]
  4029e2:	2b00      	cmp	r3, #0
  4029e4:	d166      	bne.n	402ab4 <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  4029e6:	4b40      	ldr	r3, [pc, #256]	; (402ae8 <xTaskGenericCreate+0x1ec>)
  4029e8:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  4029ea:	6813      	ldr	r3, [r2, #0]
  4029ec:	2b01      	cmp	r3, #1
  4029ee:	d121      	bne.n	402a34 <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  4029f0:	4f3e      	ldr	r7, [pc, #248]	; (402aec <xTaskGenericCreate+0x1f0>)
  4029f2:	4638      	mov	r0, r7
  4029f4:	4e3e      	ldr	r6, [pc, #248]	; (402af0 <xTaskGenericCreate+0x1f4>)
  4029f6:	47b0      	blx	r6
  4029f8:	f107 0014 	add.w	r0, r7, #20
  4029fc:	47b0      	blx	r6
  4029fe:	f107 0028 	add.w	r0, r7, #40	; 0x28
  402a02:	47b0      	blx	r6
  402a04:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  402a08:	47b0      	blx	r6
  402a0a:	f107 0050 	add.w	r0, r7, #80	; 0x50
  402a0e:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  402a10:	f8df 8118 	ldr.w	r8, [pc, #280]	; 402b2c <xTaskGenericCreate+0x230>
  402a14:	4640      	mov	r0, r8
  402a16:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  402a18:	4f36      	ldr	r7, [pc, #216]	; (402af4 <xTaskGenericCreate+0x1f8>)
  402a1a:	4638      	mov	r0, r7
  402a1c:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  402a1e:	4836      	ldr	r0, [pc, #216]	; (402af8 <xTaskGenericCreate+0x1fc>)
  402a20:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  402a22:	4836      	ldr	r0, [pc, #216]	; (402afc <xTaskGenericCreate+0x200>)
  402a24:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  402a26:	4836      	ldr	r0, [pc, #216]	; (402b00 <xTaskGenericCreate+0x204>)
  402a28:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  402a2a:	4b36      	ldr	r3, [pc, #216]	; (402b04 <xTaskGenericCreate+0x208>)
  402a2c:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  402a30:	4b35      	ldr	r3, [pc, #212]	; (402b08 <xTaskGenericCreate+0x20c>)
  402a32:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  402a34:	4a35      	ldr	r2, [pc, #212]	; (402b0c <xTaskGenericCreate+0x210>)
  402a36:	6813      	ldr	r3, [r2, #0]
  402a38:	3301      	adds	r3, #1
  402a3a:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  402a3c:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  402a3e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402a40:	4a33      	ldr	r2, [pc, #204]	; (402b10 <xTaskGenericCreate+0x214>)
  402a42:	6811      	ldr	r1, [r2, #0]
  402a44:	2301      	movs	r3, #1
  402a46:	4083      	lsls	r3, r0
  402a48:	430b      	orrs	r3, r1
  402a4a:	6013      	str	r3, [r2, #0]
  402a4c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402a50:	4649      	mov	r1, r9
  402a52:	4b26      	ldr	r3, [pc, #152]	; (402aec <xTaskGenericCreate+0x1f0>)
  402a54:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402a58:	4b2e      	ldr	r3, [pc, #184]	; (402b14 <xTaskGenericCreate+0x218>)
  402a5a:	4798      	blx	r3
		taskEXIT_CRITICAL();
  402a5c:	4b2e      	ldr	r3, [pc, #184]	; (402b18 <xTaskGenericCreate+0x21c>)
  402a5e:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  402a60:	4b2e      	ldr	r3, [pc, #184]	; (402b1c <xTaskGenericCreate+0x220>)
  402a62:	681b      	ldr	r3, [r3, #0]
  402a64:	2b00      	cmp	r3, #0
  402a66:	d031      	beq.n	402acc <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  402a68:	4b1f      	ldr	r3, [pc, #124]	; (402ae8 <xTaskGenericCreate+0x1ec>)
  402a6a:	681b      	ldr	r3, [r3, #0]
  402a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402a6e:	429d      	cmp	r5, r3
  402a70:	d92e      	bls.n	402ad0 <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  402a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402a76:	4b2a      	ldr	r3, [pc, #168]	; (402b20 <xTaskGenericCreate+0x224>)
  402a78:	601a      	str	r2, [r3, #0]
  402a7a:	f3bf 8f4f 	dsb	sy
  402a7e:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  402a82:	2001      	movs	r0, #1
}
  402a84:	b003      	add	sp, #12
  402a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  402a8a:	4630      	mov	r0, r6
  402a8c:	4b25      	ldr	r3, [pc, #148]	; (402b24 <xTaskGenericCreate+0x228>)
  402a8e:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  402a90:	f04f 30ff 	mov.w	r0, #4294967295
  402a94:	e7f6      	b.n	402a84 <xTaskGenericCreate+0x188>
  402a96:	463b      	mov	r3, r7
  402a98:	f104 0234 	add.w	r2, r4, #52	; 0x34
  402a9c:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  402a9e:	7859      	ldrb	r1, [r3, #1]
  402aa0:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  402aa4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  402aa8:	2900      	cmp	r1, #0
  402aaa:	f43f af70 	beq.w	40298e <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  402aae:	42bb      	cmp	r3, r7
  402ab0:	d1f5      	bne.n	402a9e <xTaskGenericCreate+0x1a2>
  402ab2:	e76c      	b.n	40298e <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  402ab4:	4b19      	ldr	r3, [pc, #100]	; (402b1c <xTaskGenericCreate+0x220>)
  402ab6:	681b      	ldr	r3, [r3, #0]
  402ab8:	2b00      	cmp	r3, #0
  402aba:	d1bb      	bne.n	402a34 <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  402abc:	4b0a      	ldr	r3, [pc, #40]	; (402ae8 <xTaskGenericCreate+0x1ec>)
  402abe:	681b      	ldr	r3, [r3, #0]
  402ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402ac2:	429d      	cmp	r5, r3
  402ac4:	d3b6      	bcc.n	402a34 <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  402ac6:	4b08      	ldr	r3, [pc, #32]	; (402ae8 <xTaskGenericCreate+0x1ec>)
  402ac8:	601c      	str	r4, [r3, #0]
  402aca:	e7b3      	b.n	402a34 <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  402acc:	2001      	movs	r0, #1
  402ace:	e7d9      	b.n	402a84 <xTaskGenericCreate+0x188>
  402ad0:	2001      	movs	r0, #1
	return xReturn;
  402ad2:	e7d7      	b.n	402a84 <xTaskGenericCreate+0x188>
  402ad4:	00401f19 	.word	0x00401f19
  402ad8:	00404dd1 	.word	0x00404dd1
  402adc:	00401c71 	.word	0x00401c71
  402ae0:	00401cbd 	.word	0x00401cbd
  402ae4:	20400cf0 	.word	0x20400cf0
  402ae8:	20400c80 	.word	0x20400c80
  402aec:	20400c8c 	.word	0x20400c8c
  402af0:	00401b71 	.word	0x00401b71
  402af4:	20400d1c 	.word	0x20400d1c
  402af8:	20400d38 	.word	0x20400d38
  402afc:	20400d64 	.word	0x20400d64
  402b00:	20400d50 	.word	0x20400d50
  402b04:	20400c84 	.word	0x20400c84
  402b08:	20400c88 	.word	0x20400c88
  402b0c:	20400cfc 	.word	0x20400cfc
  402b10:	20400d04 	.word	0x20400d04
  402b14:	00401b8d 	.word	0x00401b8d
  402b18:	00401d09 	.word	0x00401d09
  402b1c:	20400d4c 	.word	0x20400d4c
  402b20:	e000ed04 	.word	0xe000ed04
  402b24:	00401f49 	.word	0x00401f49
  402b28:	00401b87 	.word	0x00401b87
  402b2c:	20400d08 	.word	0x20400d08

00402b30 <vTaskStartScheduler>:
{
  402b30:	b510      	push	{r4, lr}
  402b32:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  402b34:	2300      	movs	r3, #0
  402b36:	9303      	str	r3, [sp, #12]
  402b38:	9302      	str	r3, [sp, #8]
  402b3a:	9301      	str	r3, [sp, #4]
  402b3c:	9300      	str	r3, [sp, #0]
  402b3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402b42:	4917      	ldr	r1, [pc, #92]	; (402ba0 <vTaskStartScheduler+0x70>)
  402b44:	4817      	ldr	r0, [pc, #92]	; (402ba4 <vTaskStartScheduler+0x74>)
  402b46:	4c18      	ldr	r4, [pc, #96]	; (402ba8 <vTaskStartScheduler+0x78>)
  402b48:	47a0      	blx	r4
		if( xReturn == pdPASS )
  402b4a:	2801      	cmp	r0, #1
  402b4c:	d00b      	beq.n	402b66 <vTaskStartScheduler+0x36>
		configASSERT( xReturn );
  402b4e:	bb20      	cbnz	r0, 402b9a <vTaskStartScheduler+0x6a>
  402b50:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b54:	b672      	cpsid	i
  402b56:	f383 8811 	msr	BASEPRI, r3
  402b5a:	f3bf 8f6f 	isb	sy
  402b5e:	f3bf 8f4f 	dsb	sy
  402b62:	b662      	cpsie	i
  402b64:	e7fe      	b.n	402b64 <vTaskStartScheduler+0x34>
			xReturn = xTimerCreateTimerTask();
  402b66:	4b11      	ldr	r3, [pc, #68]	; (402bac <vTaskStartScheduler+0x7c>)
  402b68:	4798      	blx	r3
	if( xReturn == pdPASS )
  402b6a:	2801      	cmp	r0, #1
  402b6c:	d1ef      	bne.n	402b4e <vTaskStartScheduler+0x1e>
  402b6e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b72:	b672      	cpsid	i
  402b74:	f383 8811 	msr	BASEPRI, r3
  402b78:	f3bf 8f6f 	isb	sy
  402b7c:	f3bf 8f4f 	dsb	sy
  402b80:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  402b82:	f04f 32ff 	mov.w	r2, #4294967295
  402b86:	4b0a      	ldr	r3, [pc, #40]	; (402bb0 <vTaskStartScheduler+0x80>)
  402b88:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  402b8a:	2201      	movs	r2, #1
  402b8c:	4b09      	ldr	r3, [pc, #36]	; (402bb4 <vTaskStartScheduler+0x84>)
  402b8e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  402b90:	2200      	movs	r2, #0
  402b92:	4b09      	ldr	r3, [pc, #36]	; (402bb8 <vTaskStartScheduler+0x88>)
  402b94:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  402b96:	4b09      	ldr	r3, [pc, #36]	; (402bbc <vTaskStartScheduler+0x8c>)
  402b98:	4798      	blx	r3
}
  402b9a:	b004      	add	sp, #16
  402b9c:	bd10      	pop	{r4, pc}
  402b9e:	bf00      	nop
  402ba0:	0040a5b8 	.word	0x0040a5b8
  402ba4:	00402ed9 	.word	0x00402ed9
  402ba8:	004028fd 	.word	0x004028fd
  402bac:	00403519 	.word	0x00403519
  402bb0:	20400d30 	.word	0x20400d30
  402bb4:	20400d4c 	.word	0x20400d4c
  402bb8:	20400d78 	.word	0x20400d78
  402bbc:	00401df1 	.word	0x00401df1

00402bc0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  402bc0:	4a02      	ldr	r2, [pc, #8]	; (402bcc <vTaskSuspendAll+0xc>)
  402bc2:	6813      	ldr	r3, [r2, #0]
  402bc4:	3301      	adds	r3, #1
  402bc6:	6013      	str	r3, [r2, #0]
  402bc8:	4770      	bx	lr
  402bca:	bf00      	nop
  402bcc:	20400cf8 	.word	0x20400cf8

00402bd0 <xTaskGetTickCount>:
		xTicks = xTickCount;
  402bd0:	4b01      	ldr	r3, [pc, #4]	; (402bd8 <xTaskGetTickCount+0x8>)
  402bd2:	6818      	ldr	r0, [r3, #0]
}
  402bd4:	4770      	bx	lr
  402bd6:	bf00      	nop
  402bd8:	20400d78 	.word	0x20400d78

00402bdc <xTaskIncrementTick>:
{
  402bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402be0:	4b42      	ldr	r3, [pc, #264]	; (402cec <xTaskIncrementTick+0x110>)
  402be2:	681b      	ldr	r3, [r3, #0]
  402be4:	2b00      	cmp	r3, #0
  402be6:	d178      	bne.n	402cda <xTaskIncrementTick+0xfe>
		++xTickCount;
  402be8:	4b41      	ldr	r3, [pc, #260]	; (402cf0 <xTaskIncrementTick+0x114>)
  402bea:	681a      	ldr	r2, [r3, #0]
  402bec:	3201      	adds	r2, #1
  402bee:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  402bf0:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  402bf2:	b9d6      	cbnz	r6, 402c2a <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  402bf4:	4b3f      	ldr	r3, [pc, #252]	; (402cf4 <xTaskIncrementTick+0x118>)
  402bf6:	681b      	ldr	r3, [r3, #0]
  402bf8:	681b      	ldr	r3, [r3, #0]
  402bfa:	b153      	cbz	r3, 402c12 <xTaskIncrementTick+0x36>
  402bfc:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c00:	b672      	cpsid	i
  402c02:	f383 8811 	msr	BASEPRI, r3
  402c06:	f3bf 8f6f 	isb	sy
  402c0a:	f3bf 8f4f 	dsb	sy
  402c0e:	b662      	cpsie	i
  402c10:	e7fe      	b.n	402c10 <xTaskIncrementTick+0x34>
  402c12:	4a38      	ldr	r2, [pc, #224]	; (402cf4 <xTaskIncrementTick+0x118>)
  402c14:	6811      	ldr	r1, [r2, #0]
  402c16:	4b38      	ldr	r3, [pc, #224]	; (402cf8 <xTaskIncrementTick+0x11c>)
  402c18:	6818      	ldr	r0, [r3, #0]
  402c1a:	6010      	str	r0, [r2, #0]
  402c1c:	6019      	str	r1, [r3, #0]
  402c1e:	4a37      	ldr	r2, [pc, #220]	; (402cfc <xTaskIncrementTick+0x120>)
  402c20:	6813      	ldr	r3, [r2, #0]
  402c22:	3301      	adds	r3, #1
  402c24:	6013      	str	r3, [r2, #0]
  402c26:	4b36      	ldr	r3, [pc, #216]	; (402d00 <xTaskIncrementTick+0x124>)
  402c28:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  402c2a:	4b36      	ldr	r3, [pc, #216]	; (402d04 <xTaskIncrementTick+0x128>)
  402c2c:	681b      	ldr	r3, [r3, #0]
  402c2e:	429e      	cmp	r6, r3
  402c30:	d218      	bcs.n	402c64 <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  402c32:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  402c34:	4b34      	ldr	r3, [pc, #208]	; (402d08 <xTaskIncrementTick+0x12c>)
  402c36:	681b      	ldr	r3, [r3, #0]
  402c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402c3a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402c3e:	4a33      	ldr	r2, [pc, #204]	; (402d0c <xTaskIncrementTick+0x130>)
  402c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  402c44:	2b02      	cmp	r3, #2
  402c46:	bf28      	it	cs
  402c48:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  402c4a:	4b31      	ldr	r3, [pc, #196]	; (402d10 <xTaskIncrementTick+0x134>)
  402c4c:	681b      	ldr	r3, [r3, #0]
  402c4e:	b90b      	cbnz	r3, 402c54 <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  402c50:	4b30      	ldr	r3, [pc, #192]	; (402d14 <xTaskIncrementTick+0x138>)
  402c52:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  402c54:	4b30      	ldr	r3, [pc, #192]	; (402d18 <xTaskIncrementTick+0x13c>)
  402c56:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  402c58:	2b00      	cmp	r3, #0
}
  402c5a:	bf0c      	ite	eq
  402c5c:	4620      	moveq	r0, r4
  402c5e:	2001      	movne	r0, #1
  402c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402c64:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402c66:	f8df 908c 	ldr.w	r9, [pc, #140]	; 402cf4 <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402c6a:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 402d24 <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  402c6e:	4f2b      	ldr	r7, [pc, #172]	; (402d1c <xTaskIncrementTick+0x140>)
  402c70:	e01f      	b.n	402cb2 <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  402c72:	f04f 32ff 	mov.w	r2, #4294967295
  402c76:	4b23      	ldr	r3, [pc, #140]	; (402d04 <xTaskIncrementTick+0x128>)
  402c78:	601a      	str	r2, [r3, #0]
						break;
  402c7a:	e7db      	b.n	402c34 <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  402c7c:	4a21      	ldr	r2, [pc, #132]	; (402d04 <xTaskIncrementTick+0x128>)
  402c7e:	6013      	str	r3, [r2, #0]
							break;
  402c80:	e7d8      	b.n	402c34 <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402c82:	f105 0018 	add.w	r0, r5, #24
  402c86:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  402c88:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  402c8a:	683a      	ldr	r2, [r7, #0]
  402c8c:	2301      	movs	r3, #1
  402c8e:	4083      	lsls	r3, r0
  402c90:	4313      	orrs	r3, r2
  402c92:	603b      	str	r3, [r7, #0]
  402c94:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402c98:	4651      	mov	r1, sl
  402c9a:	4b1c      	ldr	r3, [pc, #112]	; (402d0c <xTaskIncrementTick+0x130>)
  402c9c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402ca0:	4b1f      	ldr	r3, [pc, #124]	; (402d20 <xTaskIncrementTick+0x144>)
  402ca2:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402ca4:	4b18      	ldr	r3, [pc, #96]	; (402d08 <xTaskIncrementTick+0x12c>)
  402ca6:	681b      	ldr	r3, [r3, #0]
  402ca8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  402caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  402cac:	429a      	cmp	r2, r3
  402cae:	bf28      	it	cs
  402cb0:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402cb2:	f8d9 3000 	ldr.w	r3, [r9]
  402cb6:	681b      	ldr	r3, [r3, #0]
  402cb8:	2b00      	cmp	r3, #0
  402cba:	d0da      	beq.n	402c72 <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402cbc:	f8d9 3000 	ldr.w	r3, [r9]
  402cc0:	68db      	ldr	r3, [r3, #12]
  402cc2:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  402cc4:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  402cc6:	429e      	cmp	r6, r3
  402cc8:	d3d8      	bcc.n	402c7c <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402cca:	f105 0a04 	add.w	sl, r5, #4
  402cce:	4650      	mov	r0, sl
  402cd0:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  402cd2:	6aab      	ldr	r3, [r5, #40]	; 0x28
  402cd4:	2b00      	cmp	r3, #0
  402cd6:	d1d4      	bne.n	402c82 <xTaskIncrementTick+0xa6>
  402cd8:	e7d6      	b.n	402c88 <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  402cda:	4a0d      	ldr	r2, [pc, #52]	; (402d10 <xTaskIncrementTick+0x134>)
  402cdc:	6813      	ldr	r3, [r2, #0]
  402cde:	3301      	adds	r3, #1
  402ce0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  402ce2:	4b0c      	ldr	r3, [pc, #48]	; (402d14 <xTaskIncrementTick+0x138>)
  402ce4:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  402ce6:	2400      	movs	r4, #0
  402ce8:	e7b4      	b.n	402c54 <xTaskIncrementTick+0x78>
  402cea:	bf00      	nop
  402cec:	20400cf8 	.word	0x20400cf8
  402cf0:	20400d78 	.word	0x20400d78
  402cf4:	20400c84 	.word	0x20400c84
  402cf8:	20400c88 	.word	0x20400c88
  402cfc:	20400d34 	.word	0x20400d34
  402d00:	00402879 	.word	0x00402879
  402d04:	20400d30 	.word	0x20400d30
  402d08:	20400c80 	.word	0x20400c80
  402d0c:	20400c8c 	.word	0x20400c8c
  402d10:	20400cf4 	.word	0x20400cf4
  402d14:	00403a95 	.word	0x00403a95
  402d18:	20400d7c 	.word	0x20400d7c
  402d1c:	20400d04 	.word	0x20400d04
  402d20:	00401b8d 	.word	0x00401b8d
  402d24:	00401bd9 	.word	0x00401bd9

00402d28 <xTaskResumeAll>:
{
  402d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  402d2c:	4b38      	ldr	r3, [pc, #224]	; (402e10 <xTaskResumeAll+0xe8>)
  402d2e:	681b      	ldr	r3, [r3, #0]
  402d30:	b953      	cbnz	r3, 402d48 <xTaskResumeAll+0x20>
  402d32:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d36:	b672      	cpsid	i
  402d38:	f383 8811 	msr	BASEPRI, r3
  402d3c:	f3bf 8f6f 	isb	sy
  402d40:	f3bf 8f4f 	dsb	sy
  402d44:	b662      	cpsie	i
  402d46:	e7fe      	b.n	402d46 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  402d48:	4b32      	ldr	r3, [pc, #200]	; (402e14 <xTaskResumeAll+0xec>)
  402d4a:	4798      	blx	r3
		--uxSchedulerSuspended;
  402d4c:	4b30      	ldr	r3, [pc, #192]	; (402e10 <xTaskResumeAll+0xe8>)
  402d4e:	681a      	ldr	r2, [r3, #0]
  402d50:	3a01      	subs	r2, #1
  402d52:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402d54:	681b      	ldr	r3, [r3, #0]
  402d56:	2b00      	cmp	r3, #0
  402d58:	d155      	bne.n	402e06 <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  402d5a:	4b2f      	ldr	r3, [pc, #188]	; (402e18 <xTaskResumeAll+0xf0>)
  402d5c:	681b      	ldr	r3, [r3, #0]
  402d5e:	2b00      	cmp	r3, #0
  402d60:	d132      	bne.n	402dc8 <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  402d62:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  402d64:	4b2d      	ldr	r3, [pc, #180]	; (402e1c <xTaskResumeAll+0xf4>)
  402d66:	4798      	blx	r3
}
  402d68:	4620      	mov	r0, r4
  402d6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  402d6e:	68fb      	ldr	r3, [r7, #12]
  402d70:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402d72:	f104 0018 	add.w	r0, r4, #24
  402d76:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402d78:	f104 0804 	add.w	r8, r4, #4
  402d7c:	4640      	mov	r0, r8
  402d7e:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  402d80:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402d82:	682a      	ldr	r2, [r5, #0]
  402d84:	2301      	movs	r3, #1
  402d86:	4083      	lsls	r3, r0
  402d88:	4313      	orrs	r3, r2
  402d8a:	602b      	str	r3, [r5, #0]
  402d8c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402d90:	4641      	mov	r1, r8
  402d92:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  402d96:	4b22      	ldr	r3, [pc, #136]	; (402e20 <xTaskResumeAll+0xf8>)
  402d98:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402d9a:	4b22      	ldr	r3, [pc, #136]	; (402e24 <xTaskResumeAll+0xfc>)
  402d9c:	681b      	ldr	r3, [r3, #0]
  402d9e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402da2:	429a      	cmp	r2, r3
  402da4:	d20c      	bcs.n	402dc0 <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  402da6:	683b      	ldr	r3, [r7, #0]
  402da8:	2b00      	cmp	r3, #0
  402daa:	d1e0      	bne.n	402d6e <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  402dac:	4b1e      	ldr	r3, [pc, #120]	; (402e28 <xTaskResumeAll+0x100>)
  402dae:	681b      	ldr	r3, [r3, #0]
  402db0:	b1db      	cbz	r3, 402dea <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  402db2:	4b1d      	ldr	r3, [pc, #116]	; (402e28 <xTaskResumeAll+0x100>)
  402db4:	681b      	ldr	r3, [r3, #0]
  402db6:	b1c3      	cbz	r3, 402dea <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  402db8:	4e1c      	ldr	r6, [pc, #112]	; (402e2c <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  402dba:	4d1d      	ldr	r5, [pc, #116]	; (402e30 <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  402dbc:	4c1a      	ldr	r4, [pc, #104]	; (402e28 <xTaskResumeAll+0x100>)
  402dbe:	e00e      	b.n	402dde <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  402dc0:	2201      	movs	r2, #1
  402dc2:	4b1b      	ldr	r3, [pc, #108]	; (402e30 <xTaskResumeAll+0x108>)
  402dc4:	601a      	str	r2, [r3, #0]
  402dc6:	e7ee      	b.n	402da6 <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  402dc8:	4f1a      	ldr	r7, [pc, #104]	; (402e34 <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402dca:	4e1b      	ldr	r6, [pc, #108]	; (402e38 <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  402dcc:	4d1b      	ldr	r5, [pc, #108]	; (402e3c <xTaskResumeAll+0x114>)
  402dce:	f8df 9074 	ldr.w	r9, [pc, #116]	; 402e44 <xTaskResumeAll+0x11c>
  402dd2:	e7e8      	b.n	402da6 <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  402dd4:	6823      	ldr	r3, [r4, #0]
  402dd6:	3b01      	subs	r3, #1
  402dd8:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  402dda:	6823      	ldr	r3, [r4, #0]
  402ddc:	b12b      	cbz	r3, 402dea <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  402dde:	47b0      	blx	r6
  402de0:	2800      	cmp	r0, #0
  402de2:	d0f7      	beq.n	402dd4 <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  402de4:	2301      	movs	r3, #1
  402de6:	602b      	str	r3, [r5, #0]
  402de8:	e7f4      	b.n	402dd4 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  402dea:	4b11      	ldr	r3, [pc, #68]	; (402e30 <xTaskResumeAll+0x108>)
  402dec:	681b      	ldr	r3, [r3, #0]
  402dee:	2b01      	cmp	r3, #1
  402df0:	d10b      	bne.n	402e0a <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  402df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402df6:	4b12      	ldr	r3, [pc, #72]	; (402e40 <xTaskResumeAll+0x118>)
  402df8:	601a      	str	r2, [r3, #0]
  402dfa:	f3bf 8f4f 	dsb	sy
  402dfe:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  402e02:	2401      	movs	r4, #1
  402e04:	e7ae      	b.n	402d64 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  402e06:	2400      	movs	r4, #0
  402e08:	e7ac      	b.n	402d64 <xTaskResumeAll+0x3c>
  402e0a:	2400      	movs	r4, #0
  402e0c:	e7aa      	b.n	402d64 <xTaskResumeAll+0x3c>
  402e0e:	bf00      	nop
  402e10:	20400cf8 	.word	0x20400cf8
  402e14:	00401cbd 	.word	0x00401cbd
  402e18:	20400cf0 	.word	0x20400cf0
  402e1c:	00401d09 	.word	0x00401d09
  402e20:	00401b8d 	.word	0x00401b8d
  402e24:	20400c80 	.word	0x20400c80
  402e28:	20400cf4 	.word	0x20400cf4
  402e2c:	00402bdd 	.word	0x00402bdd
  402e30:	20400d7c 	.word	0x20400d7c
  402e34:	20400d38 	.word	0x20400d38
  402e38:	00401bd9 	.word	0x00401bd9
  402e3c:	20400d04 	.word	0x20400d04
  402e40:	e000ed04 	.word	0xe000ed04
  402e44:	20400c8c 	.word	0x20400c8c

00402e48 <vTaskDelay>:
	{
  402e48:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  402e4a:	2800      	cmp	r0, #0
  402e4c:	d029      	beq.n	402ea2 <vTaskDelay+0x5a>
  402e4e:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  402e50:	4b18      	ldr	r3, [pc, #96]	; (402eb4 <vTaskDelay+0x6c>)
  402e52:	681b      	ldr	r3, [r3, #0]
  402e54:	b153      	cbz	r3, 402e6c <vTaskDelay+0x24>
  402e56:	f04f 0380 	mov.w	r3, #128	; 0x80
  402e5a:	b672      	cpsid	i
  402e5c:	f383 8811 	msr	BASEPRI, r3
  402e60:	f3bf 8f6f 	isb	sy
  402e64:	f3bf 8f4f 	dsb	sy
  402e68:	b662      	cpsie	i
  402e6a:	e7fe      	b.n	402e6a <vTaskDelay+0x22>
			vTaskSuspendAll();
  402e6c:	4b12      	ldr	r3, [pc, #72]	; (402eb8 <vTaskDelay+0x70>)
  402e6e:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  402e70:	4b12      	ldr	r3, [pc, #72]	; (402ebc <vTaskDelay+0x74>)
  402e72:	681b      	ldr	r3, [r3, #0]
  402e74:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402e76:	4b12      	ldr	r3, [pc, #72]	; (402ec0 <vTaskDelay+0x78>)
  402e78:	6818      	ldr	r0, [r3, #0]
  402e7a:	3004      	adds	r0, #4
  402e7c:	4b11      	ldr	r3, [pc, #68]	; (402ec4 <vTaskDelay+0x7c>)
  402e7e:	4798      	blx	r3
  402e80:	b948      	cbnz	r0, 402e96 <vTaskDelay+0x4e>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402e82:	4b0f      	ldr	r3, [pc, #60]	; (402ec0 <vTaskDelay+0x78>)
  402e84:	681a      	ldr	r2, [r3, #0]
  402e86:	4910      	ldr	r1, [pc, #64]	; (402ec8 <vTaskDelay+0x80>)
  402e88:	680b      	ldr	r3, [r1, #0]
  402e8a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402e8c:	2201      	movs	r2, #1
  402e8e:	4082      	lsls	r2, r0
  402e90:	ea23 0302 	bic.w	r3, r3, r2
  402e94:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  402e96:	4620      	mov	r0, r4
  402e98:	4b0c      	ldr	r3, [pc, #48]	; (402ecc <vTaskDelay+0x84>)
  402e9a:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  402e9c:	4b0c      	ldr	r3, [pc, #48]	; (402ed0 <vTaskDelay+0x88>)
  402e9e:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  402ea0:	b938      	cbnz	r0, 402eb2 <vTaskDelay+0x6a>
			portYIELD_WITHIN_API();
  402ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402ea6:	4b0b      	ldr	r3, [pc, #44]	; (402ed4 <vTaskDelay+0x8c>)
  402ea8:	601a      	str	r2, [r3, #0]
  402eaa:	f3bf 8f4f 	dsb	sy
  402eae:	f3bf 8f6f 	isb	sy
  402eb2:	bd10      	pop	{r4, pc}
  402eb4:	20400cf8 	.word	0x20400cf8
  402eb8:	00402bc1 	.word	0x00402bc1
  402ebc:	20400d78 	.word	0x20400d78
  402ec0:	20400c80 	.word	0x20400c80
  402ec4:	00401bd9 	.word	0x00401bd9
  402ec8:	20400d04 	.word	0x20400d04
  402ecc:	004028a5 	.word	0x004028a5
  402ed0:	00402d29 	.word	0x00402d29
  402ed4:	e000ed04 	.word	0xe000ed04

00402ed8 <prvIdleTask>:
{
  402ed8:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  402eda:	f8df 8088 	ldr.w	r8, [pc, #136]	; 402f64 <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  402ede:	4e19      	ldr	r6, [pc, #100]	; (402f44 <prvIdleTask+0x6c>)
				taskYIELD();
  402ee0:	f8df 9084 	ldr.w	r9, [pc, #132]	; 402f68 <prvIdleTask+0x90>
  402ee4:	e02a      	b.n	402f3c <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  402ee6:	4b18      	ldr	r3, [pc, #96]	; (402f48 <prvIdleTask+0x70>)
  402ee8:	681b      	ldr	r3, [r3, #0]
  402eea:	2b01      	cmp	r3, #1
  402eec:	d81e      	bhi.n	402f2c <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  402eee:	682b      	ldr	r3, [r5, #0]
  402ef0:	2b00      	cmp	r3, #0
  402ef2:	d0f8      	beq.n	402ee6 <prvIdleTask+0xe>
			vTaskSuspendAll();
  402ef4:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  402ef6:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  402ef8:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  402efa:	2c00      	cmp	r4, #0
  402efc:	d0f7      	beq.n	402eee <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  402efe:	4b13      	ldr	r3, [pc, #76]	; (402f4c <prvIdleTask+0x74>)
  402f00:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  402f02:	68f3      	ldr	r3, [r6, #12]
  402f04:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402f06:	1d20      	adds	r0, r4, #4
  402f08:	4b11      	ldr	r3, [pc, #68]	; (402f50 <prvIdleTask+0x78>)
  402f0a:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  402f0c:	4a11      	ldr	r2, [pc, #68]	; (402f54 <prvIdleTask+0x7c>)
  402f0e:	6813      	ldr	r3, [r2, #0]
  402f10:	3b01      	subs	r3, #1
  402f12:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  402f14:	682b      	ldr	r3, [r5, #0]
  402f16:	3b01      	subs	r3, #1
  402f18:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  402f1a:	4b0f      	ldr	r3, [pc, #60]	; (402f58 <prvIdleTask+0x80>)
  402f1c:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  402f1e:	6b20      	ldr	r0, [r4, #48]	; 0x30
  402f20:	f8df a048 	ldr.w	sl, [pc, #72]	; 402f6c <prvIdleTask+0x94>
  402f24:	47d0      	blx	sl
		vPortFree( pxTCB );
  402f26:	4620      	mov	r0, r4
  402f28:	47d0      	blx	sl
  402f2a:	e7e0      	b.n	402eee <prvIdleTask+0x16>
				taskYIELD();
  402f2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402f30:	f8c9 3000 	str.w	r3, [r9]
  402f34:	f3bf 8f4f 	dsb	sy
  402f38:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  402f3c:	4d07      	ldr	r5, [pc, #28]	; (402f5c <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  402f3e:	4f08      	ldr	r7, [pc, #32]	; (402f60 <prvIdleTask+0x88>)
  402f40:	e7d5      	b.n	402eee <prvIdleTask+0x16>
  402f42:	bf00      	nop
  402f44:	20400d64 	.word	0x20400d64
  402f48:	20400c8c 	.word	0x20400c8c
  402f4c:	00401cbd 	.word	0x00401cbd
  402f50:	00401bd9 	.word	0x00401bd9
  402f54:	20400cf0 	.word	0x20400cf0
  402f58:	00401d09 	.word	0x00401d09
  402f5c:	20400d00 	.word	0x20400d00
  402f60:	00402d29 	.word	0x00402d29
  402f64:	00402bc1 	.word	0x00402bc1
  402f68:	e000ed04 	.word	0xe000ed04
  402f6c:	00401f49 	.word	0x00401f49

00402f70 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  402f70:	4b2d      	ldr	r3, [pc, #180]	; (403028 <vTaskSwitchContext+0xb8>)
  402f72:	681b      	ldr	r3, [r3, #0]
  402f74:	2b00      	cmp	r3, #0
  402f76:	d12c      	bne.n	402fd2 <vTaskSwitchContext+0x62>
{
  402f78:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  402f7a:	2200      	movs	r2, #0
  402f7c:	4b2b      	ldr	r3, [pc, #172]	; (40302c <vTaskSwitchContext+0xbc>)
  402f7e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  402f80:	4b2b      	ldr	r3, [pc, #172]	; (403030 <vTaskSwitchContext+0xc0>)
  402f82:	681b      	ldr	r3, [r3, #0]
  402f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402f86:	681a      	ldr	r2, [r3, #0]
  402f88:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402f8c:	d103      	bne.n	402f96 <vTaskSwitchContext+0x26>
  402f8e:	685a      	ldr	r2, [r3, #4]
  402f90:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402f94:	d021      	beq.n	402fda <vTaskSwitchContext+0x6a>
  402f96:	4b26      	ldr	r3, [pc, #152]	; (403030 <vTaskSwitchContext+0xc0>)
  402f98:	6818      	ldr	r0, [r3, #0]
  402f9a:	6819      	ldr	r1, [r3, #0]
  402f9c:	3134      	adds	r1, #52	; 0x34
  402f9e:	4b25      	ldr	r3, [pc, #148]	; (403034 <vTaskSwitchContext+0xc4>)
  402fa0:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402fa2:	4b25      	ldr	r3, [pc, #148]	; (403038 <vTaskSwitchContext+0xc8>)
  402fa4:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  402fa6:	fab3 f383 	clz	r3, r3
  402faa:	b2db      	uxtb	r3, r3
  402fac:	f1c3 031f 	rsb	r3, r3, #31
  402fb0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402fb4:	4a21      	ldr	r2, [pc, #132]	; (40303c <vTaskSwitchContext+0xcc>)
  402fb6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  402fba:	b9ba      	cbnz	r2, 402fec <vTaskSwitchContext+0x7c>
	__asm volatile
  402fbc:	f04f 0380 	mov.w	r3, #128	; 0x80
  402fc0:	b672      	cpsid	i
  402fc2:	f383 8811 	msr	BASEPRI, r3
  402fc6:	f3bf 8f6f 	isb	sy
  402fca:	f3bf 8f4f 	dsb	sy
  402fce:	b662      	cpsie	i
  402fd0:	e7fe      	b.n	402fd0 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  402fd2:	2201      	movs	r2, #1
  402fd4:	4b15      	ldr	r3, [pc, #84]	; (40302c <vTaskSwitchContext+0xbc>)
  402fd6:	601a      	str	r2, [r3, #0]
  402fd8:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  402fda:	689a      	ldr	r2, [r3, #8]
  402fdc:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402fe0:	d1d9      	bne.n	402f96 <vTaskSwitchContext+0x26>
  402fe2:	68db      	ldr	r3, [r3, #12]
  402fe4:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  402fe8:	d1d5      	bne.n	402f96 <vTaskSwitchContext+0x26>
  402fea:	e7da      	b.n	402fa2 <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402fec:	4a13      	ldr	r2, [pc, #76]	; (40303c <vTaskSwitchContext+0xcc>)
  402fee:	0099      	lsls	r1, r3, #2
  402ff0:	18c8      	adds	r0, r1, r3
  402ff2:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  402ff6:	6844      	ldr	r4, [r0, #4]
  402ff8:	6864      	ldr	r4, [r4, #4]
  402ffa:	6044      	str	r4, [r0, #4]
  402ffc:	4419      	add	r1, r3
  402ffe:	4602      	mov	r2, r0
  403000:	3208      	adds	r2, #8
  403002:	4294      	cmp	r4, r2
  403004:	d009      	beq.n	40301a <vTaskSwitchContext+0xaa>
  403006:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40300a:	4a0c      	ldr	r2, [pc, #48]	; (40303c <vTaskSwitchContext+0xcc>)
  40300c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  403010:	685b      	ldr	r3, [r3, #4]
  403012:	68da      	ldr	r2, [r3, #12]
  403014:	4b06      	ldr	r3, [pc, #24]	; (403030 <vTaskSwitchContext+0xc0>)
  403016:	601a      	str	r2, [r3, #0]
  403018:	bd10      	pop	{r4, pc}
  40301a:	6860      	ldr	r0, [r4, #4]
  40301c:	4a07      	ldr	r2, [pc, #28]	; (40303c <vTaskSwitchContext+0xcc>)
  40301e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  403022:	6050      	str	r0, [r2, #4]
  403024:	e7ef      	b.n	403006 <vTaskSwitchContext+0x96>
  403026:	bf00      	nop
  403028:	20400cf8 	.word	0x20400cf8
  40302c:	20400d7c 	.word	0x20400d7c
  403030:	20400c80 	.word	0x20400c80
  403034:	00403a7d 	.word	0x00403a7d
  403038:	20400d04 	.word	0x20400d04
  40303c:	20400c8c 	.word	0x20400c8c

00403040 <vTaskPlaceOnEventList>:
{
  403040:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  403042:	b1e0      	cbz	r0, 40307e <vTaskPlaceOnEventList+0x3e>
  403044:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  403046:	4d17      	ldr	r5, [pc, #92]	; (4030a4 <vTaskPlaceOnEventList+0x64>)
  403048:	6829      	ldr	r1, [r5, #0]
  40304a:	3118      	adds	r1, #24
  40304c:	4b16      	ldr	r3, [pc, #88]	; (4030a8 <vTaskPlaceOnEventList+0x68>)
  40304e:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  403050:	6828      	ldr	r0, [r5, #0]
  403052:	3004      	adds	r0, #4
  403054:	4b15      	ldr	r3, [pc, #84]	; (4030ac <vTaskPlaceOnEventList+0x6c>)
  403056:	4798      	blx	r3
  403058:	b940      	cbnz	r0, 40306c <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  40305a:	682a      	ldr	r2, [r5, #0]
  40305c:	4914      	ldr	r1, [pc, #80]	; (4030b0 <vTaskPlaceOnEventList+0x70>)
  40305e:	680b      	ldr	r3, [r1, #0]
  403060:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  403062:	2201      	movs	r2, #1
  403064:	4082      	lsls	r2, r0
  403066:	ea23 0302 	bic.w	r3, r3, r2
  40306a:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  40306c:	f1b4 3fff 	cmp.w	r4, #4294967295
  403070:	d010      	beq.n	403094 <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  403072:	4b10      	ldr	r3, [pc, #64]	; (4030b4 <vTaskPlaceOnEventList+0x74>)
  403074:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  403076:	4420      	add	r0, r4
  403078:	4b0f      	ldr	r3, [pc, #60]	; (4030b8 <vTaskPlaceOnEventList+0x78>)
  40307a:	4798      	blx	r3
  40307c:	bd38      	pop	{r3, r4, r5, pc}
  40307e:	f04f 0380 	mov.w	r3, #128	; 0x80
  403082:	b672      	cpsid	i
  403084:	f383 8811 	msr	BASEPRI, r3
  403088:	f3bf 8f6f 	isb	sy
  40308c:	f3bf 8f4f 	dsb	sy
  403090:	b662      	cpsie	i
  403092:	e7fe      	b.n	403092 <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  403094:	4b03      	ldr	r3, [pc, #12]	; (4030a4 <vTaskPlaceOnEventList+0x64>)
  403096:	6819      	ldr	r1, [r3, #0]
  403098:	3104      	adds	r1, #4
  40309a:	4808      	ldr	r0, [pc, #32]	; (4030bc <vTaskPlaceOnEventList+0x7c>)
  40309c:	4b08      	ldr	r3, [pc, #32]	; (4030c0 <vTaskPlaceOnEventList+0x80>)
  40309e:	4798      	blx	r3
  4030a0:	bd38      	pop	{r3, r4, r5, pc}
  4030a2:	bf00      	nop
  4030a4:	20400c80 	.word	0x20400c80
  4030a8:	00401ba5 	.word	0x00401ba5
  4030ac:	00401bd9 	.word	0x00401bd9
  4030b0:	20400d04 	.word	0x20400d04
  4030b4:	20400d78 	.word	0x20400d78
  4030b8:	004028a5 	.word	0x004028a5
  4030bc:	20400d50 	.word	0x20400d50
  4030c0:	00401b8d 	.word	0x00401b8d

004030c4 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  4030c4:	b1e8      	cbz	r0, 403102 <vTaskPlaceOnEventListRestricted+0x3e>
	{
  4030c6:	b570      	push	{r4, r5, r6, lr}
  4030c8:	4615      	mov	r5, r2
  4030ca:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4030cc:	4e16      	ldr	r6, [pc, #88]	; (403128 <vTaskPlaceOnEventListRestricted+0x64>)
  4030ce:	6831      	ldr	r1, [r6, #0]
  4030d0:	3118      	adds	r1, #24
  4030d2:	4b16      	ldr	r3, [pc, #88]	; (40312c <vTaskPlaceOnEventListRestricted+0x68>)
  4030d4:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4030d6:	6830      	ldr	r0, [r6, #0]
  4030d8:	3004      	adds	r0, #4
  4030da:	4b15      	ldr	r3, [pc, #84]	; (403130 <vTaskPlaceOnEventListRestricted+0x6c>)
  4030dc:	4798      	blx	r3
  4030de:	b940      	cbnz	r0, 4030f2 <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4030e0:	6832      	ldr	r2, [r6, #0]
  4030e2:	4914      	ldr	r1, [pc, #80]	; (403134 <vTaskPlaceOnEventListRestricted+0x70>)
  4030e4:	680b      	ldr	r3, [r1, #0]
  4030e6:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4030e8:	2201      	movs	r2, #1
  4030ea:	4082      	lsls	r2, r0
  4030ec:	ea23 0302 	bic.w	r3, r3, r2
  4030f0:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  4030f2:	2d01      	cmp	r5, #1
  4030f4:	d010      	beq.n	403118 <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  4030f6:	4b10      	ldr	r3, [pc, #64]	; (403138 <vTaskPlaceOnEventListRestricted+0x74>)
  4030f8:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4030fa:	4420      	add	r0, r4
  4030fc:	4b0f      	ldr	r3, [pc, #60]	; (40313c <vTaskPlaceOnEventListRestricted+0x78>)
  4030fe:	4798      	blx	r3
  403100:	bd70      	pop	{r4, r5, r6, pc}
  403102:	f04f 0380 	mov.w	r3, #128	; 0x80
  403106:	b672      	cpsid	i
  403108:	f383 8811 	msr	BASEPRI, r3
  40310c:	f3bf 8f6f 	isb	sy
  403110:	f3bf 8f4f 	dsb	sy
  403114:	b662      	cpsie	i
  403116:	e7fe      	b.n	403116 <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  403118:	4b03      	ldr	r3, [pc, #12]	; (403128 <vTaskPlaceOnEventListRestricted+0x64>)
  40311a:	6819      	ldr	r1, [r3, #0]
  40311c:	3104      	adds	r1, #4
  40311e:	4808      	ldr	r0, [pc, #32]	; (403140 <vTaskPlaceOnEventListRestricted+0x7c>)
  403120:	4b02      	ldr	r3, [pc, #8]	; (40312c <vTaskPlaceOnEventListRestricted+0x68>)
  403122:	4798      	blx	r3
  403124:	bd70      	pop	{r4, r5, r6, pc}
  403126:	bf00      	nop
  403128:	20400c80 	.word	0x20400c80
  40312c:	00401b8d 	.word	0x00401b8d
  403130:	00401bd9 	.word	0x00401bd9
  403134:	20400d04 	.word	0x20400d04
  403138:	20400d78 	.word	0x20400d78
  40313c:	004028a5 	.word	0x004028a5
  403140:	20400d50 	.word	0x20400d50

00403144 <xTaskRemoveFromEventList>:
{
  403144:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  403146:	68c3      	ldr	r3, [r0, #12]
  403148:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  40314a:	b324      	cbz	r4, 403196 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  40314c:	f104 0518 	add.w	r5, r4, #24
  403150:	4628      	mov	r0, r5
  403152:	4b1a      	ldr	r3, [pc, #104]	; (4031bc <xTaskRemoveFromEventList+0x78>)
  403154:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  403156:	4b1a      	ldr	r3, [pc, #104]	; (4031c0 <xTaskRemoveFromEventList+0x7c>)
  403158:	681b      	ldr	r3, [r3, #0]
  40315a:	bb3b      	cbnz	r3, 4031ac <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  40315c:	1d25      	adds	r5, r4, #4
  40315e:	4628      	mov	r0, r5
  403160:	4b16      	ldr	r3, [pc, #88]	; (4031bc <xTaskRemoveFromEventList+0x78>)
  403162:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  403164:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  403166:	4a17      	ldr	r2, [pc, #92]	; (4031c4 <xTaskRemoveFromEventList+0x80>)
  403168:	6811      	ldr	r1, [r2, #0]
  40316a:	2301      	movs	r3, #1
  40316c:	4083      	lsls	r3, r0
  40316e:	430b      	orrs	r3, r1
  403170:	6013      	str	r3, [r2, #0]
  403172:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403176:	4629      	mov	r1, r5
  403178:	4b13      	ldr	r3, [pc, #76]	; (4031c8 <xTaskRemoveFromEventList+0x84>)
  40317a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40317e:	4b13      	ldr	r3, [pc, #76]	; (4031cc <xTaskRemoveFromEventList+0x88>)
  403180:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  403182:	4b13      	ldr	r3, [pc, #76]	; (4031d0 <xTaskRemoveFromEventList+0x8c>)
  403184:	681b      	ldr	r3, [r3, #0]
  403186:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  403188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40318a:	429a      	cmp	r2, r3
  40318c:	d913      	bls.n	4031b6 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  40318e:	2001      	movs	r0, #1
  403190:	4b10      	ldr	r3, [pc, #64]	; (4031d4 <xTaskRemoveFromEventList+0x90>)
  403192:	6018      	str	r0, [r3, #0]
  403194:	bd38      	pop	{r3, r4, r5, pc}
  403196:	f04f 0380 	mov.w	r3, #128	; 0x80
  40319a:	b672      	cpsid	i
  40319c:	f383 8811 	msr	BASEPRI, r3
  4031a0:	f3bf 8f6f 	isb	sy
  4031a4:	f3bf 8f4f 	dsb	sy
  4031a8:	b662      	cpsie	i
  4031aa:	e7fe      	b.n	4031aa <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  4031ac:	4629      	mov	r1, r5
  4031ae:	480a      	ldr	r0, [pc, #40]	; (4031d8 <xTaskRemoveFromEventList+0x94>)
  4031b0:	4b06      	ldr	r3, [pc, #24]	; (4031cc <xTaskRemoveFromEventList+0x88>)
  4031b2:	4798      	blx	r3
  4031b4:	e7e5      	b.n	403182 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  4031b6:	2000      	movs	r0, #0
}
  4031b8:	bd38      	pop	{r3, r4, r5, pc}
  4031ba:	bf00      	nop
  4031bc:	00401bd9 	.word	0x00401bd9
  4031c0:	20400cf8 	.word	0x20400cf8
  4031c4:	20400d04 	.word	0x20400d04
  4031c8:	20400c8c 	.word	0x20400c8c
  4031cc:	00401b8d 	.word	0x00401b8d
  4031d0:	20400c80 	.word	0x20400c80
  4031d4:	20400d7c 	.word	0x20400d7c
  4031d8:	20400d38 	.word	0x20400d38

004031dc <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  4031dc:	b130      	cbz	r0, 4031ec <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  4031de:	4a09      	ldr	r2, [pc, #36]	; (403204 <vTaskSetTimeOutState+0x28>)
  4031e0:	6812      	ldr	r2, [r2, #0]
  4031e2:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  4031e4:	4a08      	ldr	r2, [pc, #32]	; (403208 <vTaskSetTimeOutState+0x2c>)
  4031e6:	6812      	ldr	r2, [r2, #0]
  4031e8:	6042      	str	r2, [r0, #4]
  4031ea:	4770      	bx	lr
  4031ec:	f04f 0380 	mov.w	r3, #128	; 0x80
  4031f0:	b672      	cpsid	i
  4031f2:	f383 8811 	msr	BASEPRI, r3
  4031f6:	f3bf 8f6f 	isb	sy
  4031fa:	f3bf 8f4f 	dsb	sy
  4031fe:	b662      	cpsie	i
  403200:	e7fe      	b.n	403200 <vTaskSetTimeOutState+0x24>
  403202:	bf00      	nop
  403204:	20400d34 	.word	0x20400d34
  403208:	20400d78 	.word	0x20400d78

0040320c <xTaskCheckForTimeOut>:
{
  40320c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  40320e:	b1c0      	cbz	r0, 403242 <xTaskCheckForTimeOut+0x36>
  403210:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  403212:	b309      	cbz	r1, 403258 <xTaskCheckForTimeOut+0x4c>
  403214:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  403216:	4b1d      	ldr	r3, [pc, #116]	; (40328c <xTaskCheckForTimeOut+0x80>)
  403218:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  40321a:	4b1d      	ldr	r3, [pc, #116]	; (403290 <xTaskCheckForTimeOut+0x84>)
  40321c:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  40321e:	682b      	ldr	r3, [r5, #0]
  403220:	f1b3 3fff 	cmp.w	r3, #4294967295
  403224:	d02e      	beq.n	403284 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  403226:	491b      	ldr	r1, [pc, #108]	; (403294 <xTaskCheckForTimeOut+0x88>)
  403228:	6809      	ldr	r1, [r1, #0]
  40322a:	6820      	ldr	r0, [r4, #0]
  40322c:	4288      	cmp	r0, r1
  40322e:	d002      	beq.n	403236 <xTaskCheckForTimeOut+0x2a>
  403230:	6861      	ldr	r1, [r4, #4]
  403232:	428a      	cmp	r2, r1
  403234:	d228      	bcs.n	403288 <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  403236:	6861      	ldr	r1, [r4, #4]
  403238:	1a50      	subs	r0, r2, r1
  40323a:	4283      	cmp	r3, r0
  40323c:	d817      	bhi.n	40326e <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  40323e:	2401      	movs	r4, #1
  403240:	e01c      	b.n	40327c <xTaskCheckForTimeOut+0x70>
  403242:	f04f 0380 	mov.w	r3, #128	; 0x80
  403246:	b672      	cpsid	i
  403248:	f383 8811 	msr	BASEPRI, r3
  40324c:	f3bf 8f6f 	isb	sy
  403250:	f3bf 8f4f 	dsb	sy
  403254:	b662      	cpsie	i
  403256:	e7fe      	b.n	403256 <xTaskCheckForTimeOut+0x4a>
  403258:	f04f 0380 	mov.w	r3, #128	; 0x80
  40325c:	b672      	cpsid	i
  40325e:	f383 8811 	msr	BASEPRI, r3
  403262:	f3bf 8f6f 	isb	sy
  403266:	f3bf 8f4f 	dsb	sy
  40326a:	b662      	cpsie	i
  40326c:	e7fe      	b.n	40326c <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  40326e:	1a9b      	subs	r3, r3, r2
  403270:	440b      	add	r3, r1
  403272:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  403274:	4620      	mov	r0, r4
  403276:	4b08      	ldr	r3, [pc, #32]	; (403298 <xTaskCheckForTimeOut+0x8c>)
  403278:	4798      	blx	r3
			xReturn = pdFALSE;
  40327a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  40327c:	4b07      	ldr	r3, [pc, #28]	; (40329c <xTaskCheckForTimeOut+0x90>)
  40327e:	4798      	blx	r3
}
  403280:	4620      	mov	r0, r4
  403282:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  403284:	2400      	movs	r4, #0
  403286:	e7f9      	b.n	40327c <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  403288:	2401      	movs	r4, #1
  40328a:	e7f7      	b.n	40327c <xTaskCheckForTimeOut+0x70>
  40328c:	00401cbd 	.word	0x00401cbd
  403290:	20400d78 	.word	0x20400d78
  403294:	20400d34 	.word	0x20400d34
  403298:	004031dd 	.word	0x004031dd
  40329c:	00401d09 	.word	0x00401d09

004032a0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  4032a0:	2201      	movs	r2, #1
  4032a2:	4b01      	ldr	r3, [pc, #4]	; (4032a8 <vTaskMissedYield+0x8>)
  4032a4:	601a      	str	r2, [r3, #0]
  4032a6:	4770      	bx	lr
  4032a8:	20400d7c 	.word	0x20400d7c

004032ac <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  4032ac:	4b05      	ldr	r3, [pc, #20]	; (4032c4 <xTaskGetSchedulerState+0x18>)
  4032ae:	681b      	ldr	r3, [r3, #0]
  4032b0:	b133      	cbz	r3, 4032c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4032b2:	4b05      	ldr	r3, [pc, #20]	; (4032c8 <xTaskGetSchedulerState+0x1c>)
  4032b4:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  4032b6:	2b00      	cmp	r3, #0
  4032b8:	bf0c      	ite	eq
  4032ba:	2002      	moveq	r0, #2
  4032bc:	2000      	movne	r0, #0
  4032be:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  4032c0:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  4032c2:	4770      	bx	lr
  4032c4:	20400d4c 	.word	0x20400d4c
  4032c8:	20400cf8 	.word	0x20400cf8

004032cc <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  4032cc:	2800      	cmp	r0, #0
  4032ce:	d044      	beq.n	40335a <vTaskPriorityInherit+0x8e>
	{
  4032d0:	b538      	push	{r3, r4, r5, lr}
  4032d2:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  4032d4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  4032d6:	4921      	ldr	r1, [pc, #132]	; (40335c <vTaskPriorityInherit+0x90>)
  4032d8:	6809      	ldr	r1, [r1, #0]
  4032da:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  4032dc:	428a      	cmp	r2, r1
  4032de:	d214      	bcs.n	40330a <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  4032e0:	6981      	ldr	r1, [r0, #24]
  4032e2:	2900      	cmp	r1, #0
  4032e4:	db05      	blt.n	4032f2 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4032e6:	491d      	ldr	r1, [pc, #116]	; (40335c <vTaskPriorityInherit+0x90>)
  4032e8:	6809      	ldr	r1, [r1, #0]
  4032ea:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  4032ec:	f1c1 0105 	rsb	r1, r1, #5
  4032f0:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  4032f2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4032f6:	491a      	ldr	r1, [pc, #104]	; (403360 <vTaskPriorityInherit+0x94>)
  4032f8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  4032fc:	6961      	ldr	r1, [r4, #20]
  4032fe:	4291      	cmp	r1, r2
  403300:	d004      	beq.n	40330c <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  403302:	4a16      	ldr	r2, [pc, #88]	; (40335c <vTaskPriorityInherit+0x90>)
  403304:	6812      	ldr	r2, [r2, #0]
  403306:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  403308:	62e2      	str	r2, [r4, #44]	; 0x2c
  40330a:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40330c:	1d25      	adds	r5, r4, #4
  40330e:	4628      	mov	r0, r5
  403310:	4b14      	ldr	r3, [pc, #80]	; (403364 <vTaskPriorityInherit+0x98>)
  403312:	4798      	blx	r3
  403314:	b970      	cbnz	r0, 403334 <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  403316:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  403318:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  40331c:	4a10      	ldr	r2, [pc, #64]	; (403360 <vTaskPriorityInherit+0x94>)
  40331e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  403322:	b93a      	cbnz	r2, 403334 <vTaskPriorityInherit+0x68>
  403324:	4810      	ldr	r0, [pc, #64]	; (403368 <vTaskPriorityInherit+0x9c>)
  403326:	6802      	ldr	r2, [r0, #0]
  403328:	2101      	movs	r1, #1
  40332a:	fa01 f303 	lsl.w	r3, r1, r3
  40332e:	ea22 0303 	bic.w	r3, r2, r3
  403332:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  403334:	4b09      	ldr	r3, [pc, #36]	; (40335c <vTaskPriorityInherit+0x90>)
  403336:	681b      	ldr	r3, [r3, #0]
  403338:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  40333a:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  40333c:	4a0a      	ldr	r2, [pc, #40]	; (403368 <vTaskPriorityInherit+0x9c>)
  40333e:	6811      	ldr	r1, [r2, #0]
  403340:	2301      	movs	r3, #1
  403342:	4083      	lsls	r3, r0
  403344:	430b      	orrs	r3, r1
  403346:	6013      	str	r3, [r2, #0]
  403348:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40334c:	4629      	mov	r1, r5
  40334e:	4b04      	ldr	r3, [pc, #16]	; (403360 <vTaskPriorityInherit+0x94>)
  403350:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403354:	4b05      	ldr	r3, [pc, #20]	; (40336c <vTaskPriorityInherit+0xa0>)
  403356:	4798      	blx	r3
  403358:	bd38      	pop	{r3, r4, r5, pc}
  40335a:	4770      	bx	lr
  40335c:	20400c80 	.word	0x20400c80
  403360:	20400c8c 	.word	0x20400c8c
  403364:	00401bd9 	.word	0x00401bd9
  403368:	20400d04 	.word	0x20400d04
  40336c:	00401b8d 	.word	0x00401b8d

00403370 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  403370:	2800      	cmp	r0, #0
  403372:	d04d      	beq.n	403410 <xTaskPriorityDisinherit+0xa0>
	{
  403374:	b538      	push	{r3, r4, r5, lr}
  403376:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  403378:	4a27      	ldr	r2, [pc, #156]	; (403418 <xTaskPriorityDisinherit+0xa8>)
  40337a:	6812      	ldr	r2, [r2, #0]
  40337c:	4290      	cmp	r0, r2
  40337e:	d00a      	beq.n	403396 <xTaskPriorityDisinherit+0x26>
  403380:	f04f 0380 	mov.w	r3, #128	; 0x80
  403384:	b672      	cpsid	i
  403386:	f383 8811 	msr	BASEPRI, r3
  40338a:	f3bf 8f6f 	isb	sy
  40338e:	f3bf 8f4f 	dsb	sy
  403392:	b662      	cpsie	i
  403394:	e7fe      	b.n	403394 <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  403396:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  403398:	b952      	cbnz	r2, 4033b0 <xTaskPriorityDisinherit+0x40>
  40339a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40339e:	b672      	cpsid	i
  4033a0:	f383 8811 	msr	BASEPRI, r3
  4033a4:	f3bf 8f6f 	isb	sy
  4033a8:	f3bf 8f4f 	dsb	sy
  4033ac:	b662      	cpsie	i
  4033ae:	e7fe      	b.n	4033ae <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  4033b0:	3a01      	subs	r2, #1
  4033b2:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  4033b4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  4033b6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  4033b8:	4288      	cmp	r0, r1
  4033ba:	d02b      	beq.n	403414 <xTaskPriorityDisinherit+0xa4>
  4033bc:	bb52      	cbnz	r2, 403414 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4033be:	1d25      	adds	r5, r4, #4
  4033c0:	4628      	mov	r0, r5
  4033c2:	4b16      	ldr	r3, [pc, #88]	; (40341c <xTaskPriorityDisinherit+0xac>)
  4033c4:	4798      	blx	r3
  4033c6:	b968      	cbnz	r0, 4033e4 <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4033c8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  4033ca:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4033ce:	4b14      	ldr	r3, [pc, #80]	; (403420 <xTaskPriorityDisinherit+0xb0>)
  4033d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4033d4:	b933      	cbnz	r3, 4033e4 <xTaskPriorityDisinherit+0x74>
  4033d6:	4813      	ldr	r0, [pc, #76]	; (403424 <xTaskPriorityDisinherit+0xb4>)
  4033d8:	6803      	ldr	r3, [r0, #0]
  4033da:	2201      	movs	r2, #1
  4033dc:	408a      	lsls	r2, r1
  4033de:	ea23 0302 	bic.w	r3, r3, r2
  4033e2:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  4033e4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  4033e6:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4033e8:	f1c0 0305 	rsb	r3, r0, #5
  4033ec:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  4033ee:	4a0d      	ldr	r2, [pc, #52]	; (403424 <xTaskPriorityDisinherit+0xb4>)
  4033f0:	6811      	ldr	r1, [r2, #0]
  4033f2:	2401      	movs	r4, #1
  4033f4:	fa04 f300 	lsl.w	r3, r4, r0
  4033f8:	430b      	orrs	r3, r1
  4033fa:	6013      	str	r3, [r2, #0]
  4033fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403400:	4629      	mov	r1, r5
  403402:	4b07      	ldr	r3, [pc, #28]	; (403420 <xTaskPriorityDisinherit+0xb0>)
  403404:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403408:	4b07      	ldr	r3, [pc, #28]	; (403428 <xTaskPriorityDisinherit+0xb8>)
  40340a:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  40340c:	4620      	mov	r0, r4
  40340e:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  403410:	2000      	movs	r0, #0
  403412:	4770      	bx	lr
  403414:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  403416:	bd38      	pop	{r3, r4, r5, pc}
  403418:	20400c80 	.word	0x20400c80
  40341c:	00401bd9 	.word	0x00401bd9
  403420:	20400c8c 	.word	0x20400c8c
  403424:	20400d04 	.word	0x20400d04
  403428:	00401b8d 	.word	0x00401b8d

0040342c <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  40342c:	4b05      	ldr	r3, [pc, #20]	; (403444 <pvTaskIncrementMutexHeldCount+0x18>)
  40342e:	681b      	ldr	r3, [r3, #0]
  403430:	b123      	cbz	r3, 40343c <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  403432:	4b04      	ldr	r3, [pc, #16]	; (403444 <pvTaskIncrementMutexHeldCount+0x18>)
  403434:	681a      	ldr	r2, [r3, #0]
  403436:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  403438:	3301      	adds	r3, #1
  40343a:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  40343c:	4b01      	ldr	r3, [pc, #4]	; (403444 <pvTaskIncrementMutexHeldCount+0x18>)
  40343e:	6818      	ldr	r0, [r3, #0]
	}
  403440:	4770      	bx	lr
  403442:	bf00      	nop
  403444:	20400c80 	.word	0x20400c80

00403448 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  403448:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  40344a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  40344c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  40344e:	4291      	cmp	r1, r2
  403450:	d80c      	bhi.n	40346c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  403452:	1ad2      	subs	r2, r2, r3
  403454:	6983      	ldr	r3, [r0, #24]
  403456:	429a      	cmp	r2, r3
  403458:	d301      	bcc.n	40345e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  40345a:	2001      	movs	r0, #1
  40345c:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  40345e:	1d01      	adds	r1, r0, #4
  403460:	4b09      	ldr	r3, [pc, #36]	; (403488 <prvInsertTimerInActiveList+0x40>)
  403462:	6818      	ldr	r0, [r3, #0]
  403464:	4b09      	ldr	r3, [pc, #36]	; (40348c <prvInsertTimerInActiveList+0x44>)
  403466:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  403468:	2000      	movs	r0, #0
  40346a:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  40346c:	429a      	cmp	r2, r3
  40346e:	d203      	bcs.n	403478 <prvInsertTimerInActiveList+0x30>
  403470:	4299      	cmp	r1, r3
  403472:	d301      	bcc.n	403478 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  403474:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  403476:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  403478:	1d01      	adds	r1, r0, #4
  40347a:	4b05      	ldr	r3, [pc, #20]	; (403490 <prvInsertTimerInActiveList+0x48>)
  40347c:	6818      	ldr	r0, [r3, #0]
  40347e:	4b03      	ldr	r3, [pc, #12]	; (40348c <prvInsertTimerInActiveList+0x44>)
  403480:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  403482:	2000      	movs	r0, #0
  403484:	bd08      	pop	{r3, pc}
  403486:	bf00      	nop
  403488:	20400d84 	.word	0x20400d84
  40348c:	00401ba5 	.word	0x00401ba5
  403490:	20400d80 	.word	0x20400d80

00403494 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  403494:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  403496:	4b15      	ldr	r3, [pc, #84]	; (4034ec <prvCheckForValidListAndQueue+0x58>)
  403498:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  40349a:	4b15      	ldr	r3, [pc, #84]	; (4034f0 <prvCheckForValidListAndQueue+0x5c>)
  40349c:	681b      	ldr	r3, [r3, #0]
  40349e:	b113      	cbz	r3, 4034a6 <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  4034a0:	4b14      	ldr	r3, [pc, #80]	; (4034f4 <prvCheckForValidListAndQueue+0x60>)
  4034a2:	4798      	blx	r3
  4034a4:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  4034a6:	4d14      	ldr	r5, [pc, #80]	; (4034f8 <prvCheckForValidListAndQueue+0x64>)
  4034a8:	4628      	mov	r0, r5
  4034aa:	4e14      	ldr	r6, [pc, #80]	; (4034fc <prvCheckForValidListAndQueue+0x68>)
  4034ac:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  4034ae:	4c14      	ldr	r4, [pc, #80]	; (403500 <prvCheckForValidListAndQueue+0x6c>)
  4034b0:	4620      	mov	r0, r4
  4034b2:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  4034b4:	4b13      	ldr	r3, [pc, #76]	; (403504 <prvCheckForValidListAndQueue+0x70>)
  4034b6:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  4034b8:	4b13      	ldr	r3, [pc, #76]	; (403508 <prvCheckForValidListAndQueue+0x74>)
  4034ba:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  4034bc:	2200      	movs	r2, #0
  4034be:	2110      	movs	r1, #16
  4034c0:	2005      	movs	r0, #5
  4034c2:	4b12      	ldr	r3, [pc, #72]	; (40350c <prvCheckForValidListAndQueue+0x78>)
  4034c4:	4798      	blx	r3
  4034c6:	4b0a      	ldr	r3, [pc, #40]	; (4034f0 <prvCheckForValidListAndQueue+0x5c>)
  4034c8:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  4034ca:	b118      	cbz	r0, 4034d4 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  4034cc:	4910      	ldr	r1, [pc, #64]	; (403510 <prvCheckForValidListAndQueue+0x7c>)
  4034ce:	4b11      	ldr	r3, [pc, #68]	; (403514 <prvCheckForValidListAndQueue+0x80>)
  4034d0:	4798      	blx	r3
  4034d2:	e7e5      	b.n	4034a0 <prvCheckForValidListAndQueue+0xc>
  4034d4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4034d8:	b672      	cpsid	i
  4034da:	f383 8811 	msr	BASEPRI, r3
  4034de:	f3bf 8f6f 	isb	sy
  4034e2:	f3bf 8f4f 	dsb	sy
  4034e6:	b662      	cpsie	i
  4034e8:	e7fe      	b.n	4034e8 <prvCheckForValidListAndQueue+0x54>
  4034ea:	bf00      	nop
  4034ec:	00401cbd 	.word	0x00401cbd
  4034f0:	20400db4 	.word	0x20400db4
  4034f4:	00401d09 	.word	0x00401d09
  4034f8:	20400d88 	.word	0x20400d88
  4034fc:	00401b71 	.word	0x00401b71
  403500:	20400d9c 	.word	0x20400d9c
  403504:	20400d80 	.word	0x20400d80
  403508:	20400d84 	.word	0x20400d84
  40350c:	004021dd 	.word	0x004021dd
  403510:	0040a5c0 	.word	0x0040a5c0
  403514:	004027ed 	.word	0x004027ed

00403518 <xTimerCreateTimerTask>:
{
  403518:	b510      	push	{r4, lr}
  40351a:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  40351c:	4b0f      	ldr	r3, [pc, #60]	; (40355c <xTimerCreateTimerTask+0x44>)
  40351e:	4798      	blx	r3
	if( xTimerQueue != NULL )
  403520:	4b0f      	ldr	r3, [pc, #60]	; (403560 <xTimerCreateTimerTask+0x48>)
  403522:	681b      	ldr	r3, [r3, #0]
  403524:	b173      	cbz	r3, 403544 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  403526:	2300      	movs	r3, #0
  403528:	9303      	str	r3, [sp, #12]
  40352a:	9302      	str	r3, [sp, #8]
  40352c:	9301      	str	r3, [sp, #4]
  40352e:	2204      	movs	r2, #4
  403530:	9200      	str	r2, [sp, #0]
  403532:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  403536:	490b      	ldr	r1, [pc, #44]	; (403564 <xTimerCreateTimerTask+0x4c>)
  403538:	480b      	ldr	r0, [pc, #44]	; (403568 <xTimerCreateTimerTask+0x50>)
  40353a:	4c0c      	ldr	r4, [pc, #48]	; (40356c <xTimerCreateTimerTask+0x54>)
  40353c:	47a0      	blx	r4
	configASSERT( xReturn );
  40353e:	b108      	cbz	r0, 403544 <xTimerCreateTimerTask+0x2c>
}
  403540:	b004      	add	sp, #16
  403542:	bd10      	pop	{r4, pc}
  403544:	f04f 0380 	mov.w	r3, #128	; 0x80
  403548:	b672      	cpsid	i
  40354a:	f383 8811 	msr	BASEPRI, r3
  40354e:	f3bf 8f6f 	isb	sy
  403552:	f3bf 8f4f 	dsb	sy
  403556:	b662      	cpsie	i
  403558:	e7fe      	b.n	403558 <xTimerCreateTimerTask+0x40>
  40355a:	bf00      	nop
  40355c:	00403495 	.word	0x00403495
  403560:	20400db4 	.word	0x20400db4
  403564:	0040a5c8 	.word	0x0040a5c8
  403568:	00403699 	.word	0x00403699
  40356c:	004028fd 	.word	0x004028fd

00403570 <xTimerGenericCommand>:
	configASSERT( xTimer );
  403570:	b1d8      	cbz	r0, 4035aa <xTimerGenericCommand+0x3a>
{
  403572:	b530      	push	{r4, r5, lr}
  403574:	b085      	sub	sp, #20
  403576:	4615      	mov	r5, r2
  403578:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  40357a:	4a15      	ldr	r2, [pc, #84]	; (4035d0 <xTimerGenericCommand+0x60>)
  40357c:	6810      	ldr	r0, [r2, #0]
  40357e:	b320      	cbz	r0, 4035ca <xTimerGenericCommand+0x5a>
  403580:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  403582:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  403584:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  403586:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  403588:	2905      	cmp	r1, #5
  40358a:	dc19      	bgt.n	4035c0 <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  40358c:	4b11      	ldr	r3, [pc, #68]	; (4035d4 <xTimerGenericCommand+0x64>)
  40358e:	4798      	blx	r3
  403590:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  403592:	f04f 0300 	mov.w	r3, #0
  403596:	bf0c      	ite	eq
  403598:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  40359a:	461a      	movne	r2, r3
  40359c:	4669      	mov	r1, sp
  40359e:	480c      	ldr	r0, [pc, #48]	; (4035d0 <xTimerGenericCommand+0x60>)
  4035a0:	6800      	ldr	r0, [r0, #0]
  4035a2:	4c0d      	ldr	r4, [pc, #52]	; (4035d8 <xTimerGenericCommand+0x68>)
  4035a4:	47a0      	blx	r4
}
  4035a6:	b005      	add	sp, #20
  4035a8:	bd30      	pop	{r4, r5, pc}
  4035aa:	f04f 0380 	mov.w	r3, #128	; 0x80
  4035ae:	b672      	cpsid	i
  4035b0:	f383 8811 	msr	BASEPRI, r3
  4035b4:	f3bf 8f6f 	isb	sy
  4035b8:	f3bf 8f4f 	dsb	sy
  4035bc:	b662      	cpsie	i
  4035be:	e7fe      	b.n	4035be <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  4035c0:	2300      	movs	r3, #0
  4035c2:	4669      	mov	r1, sp
  4035c4:	4c05      	ldr	r4, [pc, #20]	; (4035dc <xTimerGenericCommand+0x6c>)
  4035c6:	47a0      	blx	r4
  4035c8:	e7ed      	b.n	4035a6 <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  4035ca:	2000      	movs	r0, #0
	return xReturn;
  4035cc:	e7eb      	b.n	4035a6 <xTimerGenericCommand+0x36>
  4035ce:	bf00      	nop
  4035d0:	20400db4 	.word	0x20400db4
  4035d4:	004032ad 	.word	0x004032ad
  4035d8:	00402259 	.word	0x00402259
  4035dc:	0040243d 	.word	0x0040243d

004035e0 <prvSampleTimeNow>:
{
  4035e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4035e4:	b082      	sub	sp, #8
  4035e6:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  4035e8:	4b24      	ldr	r3, [pc, #144]	; (40367c <prvSampleTimeNow+0x9c>)
  4035ea:	4798      	blx	r3
  4035ec:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  4035ee:	4b24      	ldr	r3, [pc, #144]	; (403680 <prvSampleTimeNow+0xa0>)
  4035f0:	681b      	ldr	r3, [r3, #0]
  4035f2:	4298      	cmp	r0, r3
  4035f4:	d31b      	bcc.n	40362e <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  4035f6:	2300      	movs	r3, #0
  4035f8:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  4035fc:	4b20      	ldr	r3, [pc, #128]	; (403680 <prvSampleTimeNow+0xa0>)
  4035fe:	601f      	str	r7, [r3, #0]
}
  403600:	4638      	mov	r0, r7
  403602:	b002      	add	sp, #8
  403604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  403608:	2100      	movs	r1, #0
  40360a:	9100      	str	r1, [sp, #0]
  40360c:	460b      	mov	r3, r1
  40360e:	4652      	mov	r2, sl
  403610:	4620      	mov	r0, r4
  403612:	4c1c      	ldr	r4, [pc, #112]	; (403684 <prvSampleTimeNow+0xa4>)
  403614:	47a0      	blx	r4
				configASSERT( xResult );
  403616:	b960      	cbnz	r0, 403632 <prvSampleTimeNow+0x52>
  403618:	f04f 0380 	mov.w	r3, #128	; 0x80
  40361c:	b672      	cpsid	i
  40361e:	f383 8811 	msr	BASEPRI, r3
  403622:	f3bf 8f6f 	isb	sy
  403626:	f3bf 8f4f 	dsb	sy
  40362a:	b662      	cpsie	i
  40362c:	e7fe      	b.n	40362c <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40362e:	4d16      	ldr	r5, [pc, #88]	; (403688 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403630:	4e16      	ldr	r6, [pc, #88]	; (40368c <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  403632:	682b      	ldr	r3, [r5, #0]
  403634:	681a      	ldr	r2, [r3, #0]
  403636:	b1c2      	cbz	r2, 40366a <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  403638:	68db      	ldr	r3, [r3, #12]
  40363a:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  40363e:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403640:	f104 0904 	add.w	r9, r4, #4
  403644:	4648      	mov	r0, r9
  403646:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  403648:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40364a:	4620      	mov	r0, r4
  40364c:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  40364e:	69e3      	ldr	r3, [r4, #28]
  403650:	2b01      	cmp	r3, #1
  403652:	d1ee      	bne.n	403632 <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  403654:	69a3      	ldr	r3, [r4, #24]
  403656:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  403658:	459a      	cmp	sl, r3
  40365a:	d2d5      	bcs.n	403608 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  40365c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  40365e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  403660:	4649      	mov	r1, r9
  403662:	6828      	ldr	r0, [r5, #0]
  403664:	4b0a      	ldr	r3, [pc, #40]	; (403690 <prvSampleTimeNow+0xb0>)
  403666:	4798      	blx	r3
  403668:	e7e3      	b.n	403632 <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  40366a:	4a0a      	ldr	r2, [pc, #40]	; (403694 <prvSampleTimeNow+0xb4>)
  40366c:	6810      	ldr	r0, [r2, #0]
  40366e:	4906      	ldr	r1, [pc, #24]	; (403688 <prvSampleTimeNow+0xa8>)
  403670:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  403672:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  403674:	2301      	movs	r3, #1
  403676:	f8c8 3000 	str.w	r3, [r8]
  40367a:	e7bf      	b.n	4035fc <prvSampleTimeNow+0x1c>
  40367c:	00402bd1 	.word	0x00402bd1
  403680:	20400db0 	.word	0x20400db0
  403684:	00403571 	.word	0x00403571
  403688:	20400d80 	.word	0x20400d80
  40368c:	00401bd9 	.word	0x00401bd9
  403690:	00401ba5 	.word	0x00401ba5
  403694:	20400d84 	.word	0x20400d84

00403698 <prvTimerTask>:
{
  403698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40369c:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  40369e:	4e75      	ldr	r6, [pc, #468]	; (403874 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  4036a0:	4f75      	ldr	r7, [pc, #468]	; (403878 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  4036a2:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 4038a0 <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4036a6:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 4038a4 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  4036aa:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  4036ac:	681a      	ldr	r2, [r3, #0]
  4036ae:	2a00      	cmp	r2, #0
  4036b0:	f000 80ce 	beq.w	403850 <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4036b4:	68db      	ldr	r3, [r3, #12]
  4036b6:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  4036b8:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4036ba:	a804      	add	r0, sp, #16
  4036bc:	4b6f      	ldr	r3, [pc, #444]	; (40387c <prvTimerTask+0x1e4>)
  4036be:	4798      	blx	r3
  4036c0:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  4036c2:	9b04      	ldr	r3, [sp, #16]
  4036c4:	2b00      	cmp	r3, #0
  4036c6:	d144      	bne.n	403752 <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  4036c8:	42a0      	cmp	r0, r4
  4036ca:	d212      	bcs.n	4036f2 <prvTimerTask+0x5a>
  4036cc:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  4036ce:	1b61      	subs	r1, r4, r5
  4036d0:	4b6b      	ldr	r3, [pc, #428]	; (403880 <prvTimerTask+0x1e8>)
  4036d2:	6818      	ldr	r0, [r3, #0]
  4036d4:	4b6b      	ldr	r3, [pc, #428]	; (403884 <prvTimerTask+0x1ec>)
  4036d6:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4036d8:	4b6b      	ldr	r3, [pc, #428]	; (403888 <prvTimerTask+0x1f0>)
  4036da:	4798      	blx	r3
  4036dc:	2800      	cmp	r0, #0
  4036de:	d13a      	bne.n	403756 <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  4036e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4036e4:	f8c9 3000 	str.w	r3, [r9]
  4036e8:	f3bf 8f4f 	dsb	sy
  4036ec:	f3bf 8f6f 	isb	sy
  4036f0:	e031      	b.n	403756 <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  4036f2:	4b65      	ldr	r3, [pc, #404]	; (403888 <prvTimerTask+0x1f0>)
  4036f4:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4036f6:	6833      	ldr	r3, [r6, #0]
  4036f8:	68db      	ldr	r3, [r3, #12]
  4036fa:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4036fe:	f10a 0004 	add.w	r0, sl, #4
  403702:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  403704:	f8da 301c 	ldr.w	r3, [sl, #28]
  403708:	2b01      	cmp	r3, #1
  40370a:	d004      	beq.n	403716 <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  40370c:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  403710:	4650      	mov	r0, sl
  403712:	4798      	blx	r3
  403714:	e01f      	b.n	403756 <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  403716:	f8da 1018 	ldr.w	r1, [sl, #24]
  40371a:	4623      	mov	r3, r4
  40371c:	462a      	mov	r2, r5
  40371e:	4421      	add	r1, r4
  403720:	4650      	mov	r0, sl
  403722:	4d5a      	ldr	r5, [pc, #360]	; (40388c <prvTimerTask+0x1f4>)
  403724:	47a8      	blx	r5
  403726:	2801      	cmp	r0, #1
  403728:	d1f0      	bne.n	40370c <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  40372a:	2100      	movs	r1, #0
  40372c:	9100      	str	r1, [sp, #0]
  40372e:	460b      	mov	r3, r1
  403730:	4622      	mov	r2, r4
  403732:	4650      	mov	r0, sl
  403734:	4c56      	ldr	r4, [pc, #344]	; (403890 <prvTimerTask+0x1f8>)
  403736:	47a0      	blx	r4
			configASSERT( xResult );
  403738:	2800      	cmp	r0, #0
  40373a:	d1e7      	bne.n	40370c <prvTimerTask+0x74>
  40373c:	f04f 0380 	mov.w	r3, #128	; 0x80
  403740:	b672      	cpsid	i
  403742:	f383 8811 	msr	BASEPRI, r3
  403746:	f3bf 8f6f 	isb	sy
  40374a:	f3bf 8f4f 	dsb	sy
  40374e:	b662      	cpsie	i
  403750:	e7fe      	b.n	403750 <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  403752:	4b4d      	ldr	r3, [pc, #308]	; (403888 <prvTimerTask+0x1f0>)
  403754:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  403756:	4d4a      	ldr	r5, [pc, #296]	; (403880 <prvTimerTask+0x1e8>)
  403758:	4c4e      	ldr	r4, [pc, #312]	; (403894 <prvTimerTask+0x1fc>)
  40375a:	e006      	b.n	40376a <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  40375c:	9907      	ldr	r1, [sp, #28]
  40375e:	9806      	ldr	r0, [sp, #24]
  403760:	9b05      	ldr	r3, [sp, #20]
  403762:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  403764:	9b04      	ldr	r3, [sp, #16]
  403766:	2b00      	cmp	r3, #0
  403768:	da09      	bge.n	40377e <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  40376a:	2300      	movs	r3, #0
  40376c:	461a      	mov	r2, r3
  40376e:	a904      	add	r1, sp, #16
  403770:	6828      	ldr	r0, [r5, #0]
  403772:	47a0      	blx	r4
  403774:	2800      	cmp	r0, #0
  403776:	d098      	beq.n	4036aa <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  403778:	9b04      	ldr	r3, [sp, #16]
  40377a:	2b00      	cmp	r3, #0
  40377c:	dbee      	blt.n	40375c <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  40377e:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  403782:	f8da 3014 	ldr.w	r3, [sl, #20]
  403786:	b113      	cbz	r3, 40378e <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403788:	f10a 0004 	add.w	r0, sl, #4
  40378c:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40378e:	a803      	add	r0, sp, #12
  403790:	4b3a      	ldr	r3, [pc, #232]	; (40387c <prvTimerTask+0x1e4>)
  403792:	4798      	blx	r3
			switch( xMessage.xMessageID )
  403794:	9b04      	ldr	r3, [sp, #16]
  403796:	2b09      	cmp	r3, #9
  403798:	d8e7      	bhi.n	40376a <prvTimerTask+0xd2>
  40379a:	a201      	add	r2, pc, #4	; (adr r2, 4037a0 <prvTimerTask+0x108>)
  40379c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4037a0:	004037c9 	.word	0x004037c9
  4037a4:	004037c9 	.word	0x004037c9
  4037a8:	004037c9 	.word	0x004037c9
  4037ac:	0040376b 	.word	0x0040376b
  4037b0:	0040381d 	.word	0x0040381d
  4037b4:	00403849 	.word	0x00403849
  4037b8:	004037c9 	.word	0x004037c9
  4037bc:	004037c9 	.word	0x004037c9
  4037c0:	0040376b 	.word	0x0040376b
  4037c4:	0040381d 	.word	0x0040381d
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  4037c8:	9c05      	ldr	r4, [sp, #20]
  4037ca:	f8da 1018 	ldr.w	r1, [sl, #24]
  4037ce:	4623      	mov	r3, r4
  4037d0:	4602      	mov	r2, r0
  4037d2:	4421      	add	r1, r4
  4037d4:	4650      	mov	r0, sl
  4037d6:	4c2d      	ldr	r4, [pc, #180]	; (40388c <prvTimerTask+0x1f4>)
  4037d8:	47a0      	blx	r4
  4037da:	2801      	cmp	r0, #1
  4037dc:	d1bc      	bne.n	403758 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4037de:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4037e2:	4650      	mov	r0, sl
  4037e4:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4037e6:	f8da 301c 	ldr.w	r3, [sl, #28]
  4037ea:	2b01      	cmp	r3, #1
  4037ec:	d1b4      	bne.n	403758 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  4037ee:	f8da 2018 	ldr.w	r2, [sl, #24]
  4037f2:	2100      	movs	r1, #0
  4037f4:	9100      	str	r1, [sp, #0]
  4037f6:	460b      	mov	r3, r1
  4037f8:	9805      	ldr	r0, [sp, #20]
  4037fa:	4402      	add	r2, r0
  4037fc:	4650      	mov	r0, sl
  4037fe:	4c24      	ldr	r4, [pc, #144]	; (403890 <prvTimerTask+0x1f8>)
  403800:	47a0      	blx	r4
							configASSERT( xResult );
  403802:	2800      	cmp	r0, #0
  403804:	d1a8      	bne.n	403758 <prvTimerTask+0xc0>
  403806:	f04f 0380 	mov.w	r3, #128	; 0x80
  40380a:	b672      	cpsid	i
  40380c:	f383 8811 	msr	BASEPRI, r3
  403810:	f3bf 8f6f 	isb	sy
  403814:	f3bf 8f4f 	dsb	sy
  403818:	b662      	cpsie	i
  40381a:	e7fe      	b.n	40381a <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  40381c:	9905      	ldr	r1, [sp, #20]
  40381e:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  403822:	b131      	cbz	r1, 403832 <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  403824:	4603      	mov	r3, r0
  403826:	4602      	mov	r2, r0
  403828:	4401      	add	r1, r0
  40382a:	4650      	mov	r0, sl
  40382c:	4c17      	ldr	r4, [pc, #92]	; (40388c <prvTimerTask+0x1f4>)
  40382e:	47a0      	blx	r4
  403830:	e792      	b.n	403758 <prvTimerTask+0xc0>
  403832:	f04f 0380 	mov.w	r3, #128	; 0x80
  403836:	b672      	cpsid	i
  403838:	f383 8811 	msr	BASEPRI, r3
  40383c:	f3bf 8f6f 	isb	sy
  403840:	f3bf 8f4f 	dsb	sy
  403844:	b662      	cpsie	i
  403846:	e7fe      	b.n	403846 <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  403848:	4650      	mov	r0, sl
  40384a:	4b13      	ldr	r3, [pc, #76]	; (403898 <prvTimerTask+0x200>)
  40384c:	4798      	blx	r3
  40384e:	e783      	b.n	403758 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  403850:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  403852:	a804      	add	r0, sp, #16
  403854:	4b09      	ldr	r3, [pc, #36]	; (40387c <prvTimerTask+0x1e4>)
  403856:	4798      	blx	r3
  403858:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  40385a:	9b04      	ldr	r3, [sp, #16]
  40385c:	2b00      	cmp	r3, #0
  40385e:	f47f af78 	bne.w	403752 <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  403862:	4b0e      	ldr	r3, [pc, #56]	; (40389c <prvTimerTask+0x204>)
  403864:	681b      	ldr	r3, [r3, #0]
  403866:	681a      	ldr	r2, [r3, #0]
  403868:	fab2 f282 	clz	r2, r2
  40386c:	0952      	lsrs	r2, r2, #5
  40386e:	2400      	movs	r4, #0
  403870:	e72d      	b.n	4036ce <prvTimerTask+0x36>
  403872:	bf00      	nop
  403874:	20400d80 	.word	0x20400d80
  403878:	00402bc1 	.word	0x00402bc1
  40387c:	004035e1 	.word	0x004035e1
  403880:	20400db4 	.word	0x20400db4
  403884:	00402821 	.word	0x00402821
  403888:	00402d29 	.word	0x00402d29
  40388c:	00403449 	.word	0x00403449
  403890:	00403571 	.word	0x00403571
  403894:	0040261d 	.word	0x0040261d
  403898:	00401f49 	.word	0x00401f49
  40389c:	20400d84 	.word	0x20400d84
  4038a0:	e000ed04 	.word	0xe000ed04
  4038a4:	00401bd9 	.word	0x00401bd9

004038a8 <echo_callback>:

/************************************************************************/
/* handlers / callbacks                                                 */
/************************************************************************/

void echo_callback() {
  4038a8:	b500      	push	{lr}
  4038aa:	b083      	sub	sp, #12
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  4038ac:	a902      	add	r1, sp, #8
  4038ae:	2300      	movs	r3, #0
  4038b0:	f841 3d04 	str.w	r3, [r1, #-4]!
    xSemaphoreGiveFromISR(xSemaphoreEcho, &xHigherPriorityTaskWoken);
  4038b4:	4b03      	ldr	r3, [pc, #12]	; (4038c4 <echo_callback+0x1c>)
  4038b6:	6818      	ldr	r0, [r3, #0]
  4038b8:	4b03      	ldr	r3, [pc, #12]	; (4038c8 <echo_callback+0x20>)
  4038ba:	4798      	blx	r3
}
  4038bc:	b003      	add	sp, #12
  4038be:	f85d fb04 	ldr.w	pc, [sp], #4
  4038c2:	bf00      	nop
  4038c4:	20400ebc 	.word	0x20400ebc
  4038c8:	0040253d 	.word	0x0040253d

004038cc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4038cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4038ce:	b083      	sub	sp, #12
  4038d0:	4605      	mov	r5, r0
  4038d2:	460c      	mov	r4, r1
	uint32_t val = 0;
  4038d4:	2300      	movs	r3, #0
  4038d6:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4038d8:	4b2a      	ldr	r3, [pc, #168]	; (403984 <usart_serial_getchar+0xb8>)
  4038da:	4298      	cmp	r0, r3
  4038dc:	d013      	beq.n	403906 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4038de:	4b2a      	ldr	r3, [pc, #168]	; (403988 <usart_serial_getchar+0xbc>)
  4038e0:	4298      	cmp	r0, r3
  4038e2:	d018      	beq.n	403916 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4038e4:	4b29      	ldr	r3, [pc, #164]	; (40398c <usart_serial_getchar+0xc0>)
  4038e6:	4298      	cmp	r0, r3
  4038e8:	d01d      	beq.n	403926 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4038ea:	4b29      	ldr	r3, [pc, #164]	; (403990 <usart_serial_getchar+0xc4>)
  4038ec:	429d      	cmp	r5, r3
  4038ee:	d022      	beq.n	403936 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4038f0:	4b28      	ldr	r3, [pc, #160]	; (403994 <usart_serial_getchar+0xc8>)
  4038f2:	429d      	cmp	r5, r3
  4038f4:	d027      	beq.n	403946 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4038f6:	4b28      	ldr	r3, [pc, #160]	; (403998 <usart_serial_getchar+0xcc>)
  4038f8:	429d      	cmp	r5, r3
  4038fa:	d02e      	beq.n	40395a <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4038fc:	4b27      	ldr	r3, [pc, #156]	; (40399c <usart_serial_getchar+0xd0>)
  4038fe:	429d      	cmp	r5, r3
  403900:	d035      	beq.n	40396e <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  403902:	b003      	add	sp, #12
  403904:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  403906:	461f      	mov	r7, r3
  403908:	4e25      	ldr	r6, [pc, #148]	; (4039a0 <usart_serial_getchar+0xd4>)
  40390a:	4621      	mov	r1, r4
  40390c:	4638      	mov	r0, r7
  40390e:	47b0      	blx	r6
  403910:	2800      	cmp	r0, #0
  403912:	d1fa      	bne.n	40390a <usart_serial_getchar+0x3e>
  403914:	e7e9      	b.n	4038ea <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  403916:	461f      	mov	r7, r3
  403918:	4e21      	ldr	r6, [pc, #132]	; (4039a0 <usart_serial_getchar+0xd4>)
  40391a:	4621      	mov	r1, r4
  40391c:	4638      	mov	r0, r7
  40391e:	47b0      	blx	r6
  403920:	2800      	cmp	r0, #0
  403922:	d1fa      	bne.n	40391a <usart_serial_getchar+0x4e>
  403924:	e7e4      	b.n	4038f0 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  403926:	461f      	mov	r7, r3
  403928:	4e1d      	ldr	r6, [pc, #116]	; (4039a0 <usart_serial_getchar+0xd4>)
  40392a:	4621      	mov	r1, r4
  40392c:	4638      	mov	r0, r7
  40392e:	47b0      	blx	r6
  403930:	2800      	cmp	r0, #0
  403932:	d1fa      	bne.n	40392a <usart_serial_getchar+0x5e>
  403934:	e7df      	b.n	4038f6 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  403936:	461f      	mov	r7, r3
  403938:	4e19      	ldr	r6, [pc, #100]	; (4039a0 <usart_serial_getchar+0xd4>)
  40393a:	4621      	mov	r1, r4
  40393c:	4638      	mov	r0, r7
  40393e:	47b0      	blx	r6
  403940:	2800      	cmp	r0, #0
  403942:	d1fa      	bne.n	40393a <usart_serial_getchar+0x6e>
  403944:	e7da      	b.n	4038fc <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  403946:	461e      	mov	r6, r3
  403948:	4d16      	ldr	r5, [pc, #88]	; (4039a4 <usart_serial_getchar+0xd8>)
  40394a:	a901      	add	r1, sp, #4
  40394c:	4630      	mov	r0, r6
  40394e:	47a8      	blx	r5
  403950:	2800      	cmp	r0, #0
  403952:	d1fa      	bne.n	40394a <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  403954:	9b01      	ldr	r3, [sp, #4]
  403956:	7023      	strb	r3, [r4, #0]
  403958:	e7d3      	b.n	403902 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40395a:	461e      	mov	r6, r3
  40395c:	4d11      	ldr	r5, [pc, #68]	; (4039a4 <usart_serial_getchar+0xd8>)
  40395e:	a901      	add	r1, sp, #4
  403960:	4630      	mov	r0, r6
  403962:	47a8      	blx	r5
  403964:	2800      	cmp	r0, #0
  403966:	d1fa      	bne.n	40395e <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  403968:	9b01      	ldr	r3, [sp, #4]
  40396a:	7023      	strb	r3, [r4, #0]
  40396c:	e7c9      	b.n	403902 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40396e:	461e      	mov	r6, r3
  403970:	4d0c      	ldr	r5, [pc, #48]	; (4039a4 <usart_serial_getchar+0xd8>)
  403972:	a901      	add	r1, sp, #4
  403974:	4630      	mov	r0, r6
  403976:	47a8      	blx	r5
  403978:	2800      	cmp	r0, #0
  40397a:	d1fa      	bne.n	403972 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  40397c:	9b01      	ldr	r3, [sp, #4]
  40397e:	7023      	strb	r3, [r4, #0]
}
  403980:	e7bf      	b.n	403902 <usart_serial_getchar+0x36>
  403982:	bf00      	nop
  403984:	400e0800 	.word	0x400e0800
  403988:	400e0a00 	.word	0x400e0a00
  40398c:	400e1a00 	.word	0x400e1a00
  403990:	400e1c00 	.word	0x400e1c00
  403994:	40024000 	.word	0x40024000
  403998:	40028000 	.word	0x40028000
  40399c:	4002c000 	.word	0x4002c000
  4039a0:	0040179b 	.word	0x0040179b
  4039a4:	004018a7 	.word	0x004018a7

004039a8 <usart_serial_putchar>:
{
  4039a8:	b570      	push	{r4, r5, r6, lr}
  4039aa:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  4039ac:	4b2a      	ldr	r3, [pc, #168]	; (403a58 <usart_serial_putchar+0xb0>)
  4039ae:	4298      	cmp	r0, r3
  4039b0:	d013      	beq.n	4039da <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  4039b2:	4b2a      	ldr	r3, [pc, #168]	; (403a5c <usart_serial_putchar+0xb4>)
  4039b4:	4298      	cmp	r0, r3
  4039b6:	d019      	beq.n	4039ec <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  4039b8:	4b29      	ldr	r3, [pc, #164]	; (403a60 <usart_serial_putchar+0xb8>)
  4039ba:	4298      	cmp	r0, r3
  4039bc:	d01f      	beq.n	4039fe <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  4039be:	4b29      	ldr	r3, [pc, #164]	; (403a64 <usart_serial_putchar+0xbc>)
  4039c0:	4298      	cmp	r0, r3
  4039c2:	d025      	beq.n	403a10 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  4039c4:	4b28      	ldr	r3, [pc, #160]	; (403a68 <usart_serial_putchar+0xc0>)
  4039c6:	4298      	cmp	r0, r3
  4039c8:	d02b      	beq.n	403a22 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  4039ca:	4b28      	ldr	r3, [pc, #160]	; (403a6c <usart_serial_putchar+0xc4>)
  4039cc:	4298      	cmp	r0, r3
  4039ce:	d031      	beq.n	403a34 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  4039d0:	4b27      	ldr	r3, [pc, #156]	; (403a70 <usart_serial_putchar+0xc8>)
  4039d2:	4298      	cmp	r0, r3
  4039d4:	d037      	beq.n	403a46 <usart_serial_putchar+0x9e>
	return 0;
  4039d6:	2000      	movs	r0, #0
}
  4039d8:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4039da:	461e      	mov	r6, r3
  4039dc:	4d25      	ldr	r5, [pc, #148]	; (403a74 <usart_serial_putchar+0xcc>)
  4039de:	4621      	mov	r1, r4
  4039e0:	4630      	mov	r0, r6
  4039e2:	47a8      	blx	r5
  4039e4:	2800      	cmp	r0, #0
  4039e6:	d1fa      	bne.n	4039de <usart_serial_putchar+0x36>
		return 1;
  4039e8:	2001      	movs	r0, #1
  4039ea:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4039ec:	461e      	mov	r6, r3
  4039ee:	4d21      	ldr	r5, [pc, #132]	; (403a74 <usart_serial_putchar+0xcc>)
  4039f0:	4621      	mov	r1, r4
  4039f2:	4630      	mov	r0, r6
  4039f4:	47a8      	blx	r5
  4039f6:	2800      	cmp	r0, #0
  4039f8:	d1fa      	bne.n	4039f0 <usart_serial_putchar+0x48>
		return 1;
  4039fa:	2001      	movs	r0, #1
  4039fc:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4039fe:	461e      	mov	r6, r3
  403a00:	4d1c      	ldr	r5, [pc, #112]	; (403a74 <usart_serial_putchar+0xcc>)
  403a02:	4621      	mov	r1, r4
  403a04:	4630      	mov	r0, r6
  403a06:	47a8      	blx	r5
  403a08:	2800      	cmp	r0, #0
  403a0a:	d1fa      	bne.n	403a02 <usart_serial_putchar+0x5a>
		return 1;
  403a0c:	2001      	movs	r0, #1
  403a0e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403a10:	461e      	mov	r6, r3
  403a12:	4d18      	ldr	r5, [pc, #96]	; (403a74 <usart_serial_putchar+0xcc>)
  403a14:	4621      	mov	r1, r4
  403a16:	4630      	mov	r0, r6
  403a18:	47a8      	blx	r5
  403a1a:	2800      	cmp	r0, #0
  403a1c:	d1fa      	bne.n	403a14 <usart_serial_putchar+0x6c>
		return 1;
  403a1e:	2001      	movs	r0, #1
  403a20:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403a22:	461e      	mov	r6, r3
  403a24:	4d14      	ldr	r5, [pc, #80]	; (403a78 <usart_serial_putchar+0xd0>)
  403a26:	4621      	mov	r1, r4
  403a28:	4630      	mov	r0, r6
  403a2a:	47a8      	blx	r5
  403a2c:	2800      	cmp	r0, #0
  403a2e:	d1fa      	bne.n	403a26 <usart_serial_putchar+0x7e>
		return 1;
  403a30:	2001      	movs	r0, #1
  403a32:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403a34:	461e      	mov	r6, r3
  403a36:	4d10      	ldr	r5, [pc, #64]	; (403a78 <usart_serial_putchar+0xd0>)
  403a38:	4621      	mov	r1, r4
  403a3a:	4630      	mov	r0, r6
  403a3c:	47a8      	blx	r5
  403a3e:	2800      	cmp	r0, #0
  403a40:	d1fa      	bne.n	403a38 <usart_serial_putchar+0x90>
		return 1;
  403a42:	2001      	movs	r0, #1
  403a44:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403a46:	461e      	mov	r6, r3
  403a48:	4d0b      	ldr	r5, [pc, #44]	; (403a78 <usart_serial_putchar+0xd0>)
  403a4a:	4621      	mov	r1, r4
  403a4c:	4630      	mov	r0, r6
  403a4e:	47a8      	blx	r5
  403a50:	2800      	cmp	r0, #0
  403a52:	d1fa      	bne.n	403a4a <usart_serial_putchar+0xa2>
		return 1;
  403a54:	2001      	movs	r0, #1
  403a56:	bd70      	pop	{r4, r5, r6, pc}
  403a58:	400e0800 	.word	0x400e0800
  403a5c:	400e0a00 	.word	0x400e0a00
  403a60:	400e1a00 	.word	0x400e1a00
  403a64:	400e1c00 	.word	0x400e1c00
  403a68:	40024000 	.word	0x40024000
  403a6c:	40028000 	.word	0x40028000
  403a70:	4002c000 	.word	0x4002c000
  403a74:	00401789 	.word	0x00401789
  403a78:	00401891 	.word	0x00401891

00403a7c <vApplicationStackOverflowHook>:
                                          signed char *pcTaskName) {
  403a7c:	b508      	push	{r3, lr}
    printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  403a7e:	460a      	mov	r2, r1
  403a80:	4601      	mov	r1, r0
  403a82:	4802      	ldr	r0, [pc, #8]	; (403a8c <vApplicationStackOverflowHook+0x10>)
  403a84:	4b02      	ldr	r3, [pc, #8]	; (403a90 <vApplicationStackOverflowHook+0x14>)
  403a86:	4798      	blx	r3
  403a88:	e7fe      	b.n	403a88 <vApplicationStackOverflowHook+0xc>
  403a8a:	bf00      	nop
  403a8c:	0040a68c 	.word	0x0040a68c
  403a90:	004046f5 	.word	0x004046f5

00403a94 <vApplicationTickHook>:
extern void vApplicationTickHook(void) {}
  403a94:	4770      	bx	lr

00403a96 <vApplicationMallocFailedHook>:
  403a96:	f04f 0380 	mov.w	r3, #128	; 0x80
  403a9a:	b672      	cpsid	i
  403a9c:	f383 8811 	msr	BASEPRI, r3
  403aa0:	f3bf 8f6f 	isb	sy
  403aa4:	f3bf 8f4f 	dsb	sy
  403aa8:	b662      	cpsie	i
  403aaa:	e7fe      	b.n	403aaa <vApplicationMallocFailedHook+0x14>

00403aac <atualiza_tela>:

void atualiza_tela(int dist) {
  403aac:	b530      	push	{r4, r5, lr}
  403aae:	b087      	sub	sp, #28
  403ab0:	4604      	mov	r4, r0
    gfx_mono_draw_filled_rect(0, 0, 128, 32, GFX_PIXEL_CLR);
  403ab2:	2000      	movs	r0, #0
  403ab4:	9000      	str	r0, [sp, #0]
  403ab6:	2320      	movs	r3, #32
  403ab8:	2280      	movs	r2, #128	; 0x80
  403aba:	4601      	mov	r1, r0
  403abc:	4d0f      	ldr	r5, [pc, #60]	; (403afc <atualiza_tela+0x50>)
  403abe:	47a8      	blx	r5
    if (dist < 500) {
  403ac0:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
  403ac4:	db0e      	blt.n	403ae4 <atualiza_tela+0x38>
        char dist_str[10];
        sprintf(dist_str, "Distancia:  %d cm", dist);
        gfx_mono_draw_string(dist_str, 15, 15, &sysfont);
    } else {
        gfx_mono_draw_filled_rect(0, 0, 128, 32, GFX_PIXEL_CLR);
  403ac6:	2000      	movs	r0, #0
  403ac8:	9000      	str	r0, [sp, #0]
  403aca:	2320      	movs	r3, #32
  403acc:	2280      	movs	r2, #128	; 0x80
  403ace:	4601      	mov	r1, r0
  403ad0:	4c0a      	ldr	r4, [pc, #40]	; (403afc <atualiza_tela+0x50>)
  403ad2:	47a0      	blx	r4
        gfx_mono_draw_string("Espaco aberto", 15, 15, &sysfont);
  403ad4:	4b0a      	ldr	r3, [pc, #40]	; (403b00 <atualiza_tela+0x54>)
  403ad6:	220f      	movs	r2, #15
  403ad8:	4611      	mov	r1, r2
  403ada:	480a      	ldr	r0, [pc, #40]	; (403b04 <atualiza_tela+0x58>)
  403adc:	4c0a      	ldr	r4, [pc, #40]	; (403b08 <atualiza_tela+0x5c>)
  403ade:	47a0      	blx	r4
    }
    
}
  403ae0:	b007      	add	sp, #28
  403ae2:	bd30      	pop	{r4, r5, pc}
        sprintf(dist_str, "Distancia:  %d cm", dist);
  403ae4:	4622      	mov	r2, r4
  403ae6:	4909      	ldr	r1, [pc, #36]	; (403b0c <atualiza_tela+0x60>)
  403ae8:	a803      	add	r0, sp, #12
  403aea:	4b09      	ldr	r3, [pc, #36]	; (403b10 <atualiza_tela+0x64>)
  403aec:	4798      	blx	r3
        gfx_mono_draw_string(dist_str, 15, 15, &sysfont);
  403aee:	4b04      	ldr	r3, [pc, #16]	; (403b00 <atualiza_tela+0x54>)
  403af0:	220f      	movs	r2, #15
  403af2:	4611      	mov	r1, r2
  403af4:	a803      	add	r0, sp, #12
  403af6:	4c04      	ldr	r4, [pc, #16]	; (403b08 <atualiza_tela+0x5c>)
  403af8:	47a0      	blx	r4
  403afa:	e7f1      	b.n	403ae0 <atualiza_tela+0x34>
  403afc:	00400aad 	.word	0x00400aad
  403b00:	2040000c 	.word	0x2040000c
  403b04:	0040a5e4 	.word	0x0040a5e4
  403b08:	00400b91 	.word	0x00400b91
  403b0c:	0040a5d0 	.word	0x0040a5d0
  403b10:	00405049 	.word	0x00405049
  403b14:	00000000 	.word	0x00000000

00403b18 <task_echo>:
// }

/************************************************************************/
/* TASKS                                                                */
/************************************************************************/
static void task_echo(void *pvParameters) {
  403b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403b1c:	b083      	sub	sp, #12
	gfx_mono_ssd1306_init();
  403b1e:	4b3e      	ldr	r3, [pc, #248]	; (403c18 <task_echo+0x100>)
  403b20:	4798      	blx	r3
};

static void ECHO_init(void) {
    // Configura PIO para lidar com o pino do bot�o como entrada
    // com pull-up
    pio_configure(ECHO_PIO, PIO_INPUT, ECHO_PIO_PIN_MASK, 0);
  403b22:	4c3e      	ldr	r4, [pc, #248]	; (403c1c <task_echo+0x104>)
  403b24:	2300      	movs	r3, #0
  403b26:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  403b2a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403b2e:	4620      	mov	r0, r4
  403b30:	4d3b      	ldr	r5, [pc, #236]	; (403c20 <task_echo+0x108>)
  403b32:	47a8      	blx	r5

    // Configura interrup��o no pino referente ao botao e associa
    // fun��o de callback caso uma interrup��o for gerada
    // a fun��o de callback � a: but_callback()
    pio_handler_set(ECHO_PIO,
  403b34:	4b3b      	ldr	r3, [pc, #236]	; (403c24 <task_echo+0x10c>)
  403b36:	9300      	str	r3, [sp, #0]
  403b38:	2340      	movs	r3, #64	; 0x40
  403b3a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  403b3e:	2110      	movs	r1, #16
  403b40:	4620      	mov	r0, r4
  403b42:	4d39      	ldr	r5, [pc, #228]	; (403c28 <task_echo+0x110>)
  403b44:	47a8      	blx	r5
                    ECHO_PIO_PIN_MASK,
                    PIO_IT_EDGE,
                    echo_callback);

    // Ativa interrup��o e limpa primeira IRQ gerada na ativacao
    pio_enable_interrupt(ECHO_PIO, ECHO_PIO_PIN_MASK);
  403b46:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  403b4a:	4620      	mov	r0, r4
  403b4c:	4b37      	ldr	r3, [pc, #220]	; (403c2c <task_echo+0x114>)
  403b4e:	4798      	blx	r3
    pio_get_interrupt_status(ECHO_PIO);
  403b50:	4620      	mov	r0, r4
  403b52:	4b37      	ldr	r3, [pc, #220]	; (403c30 <task_echo+0x118>)
  403b54:	4798      	blx	r3
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  403b56:	4b37      	ldr	r3, [pc, #220]	; (403c34 <task_echo+0x11c>)
  403b58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  403b5c:	601a      	str	r2, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  403b5e:	2280      	movs	r2, #128	; 0x80
  403b60:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
        if (xSemaphoreTake(xSemaphoreEcho, 100)) {
  403b64:	f8df a114 	ldr.w	sl, [pc, #276]	; 403c7c <task_echo+0x164>
            if (pio_get(ECHO_PIO, PIO_INPUT, ECHO_PIO_PIN_MASK)) {
  403b68:	46a3      	mov	fp, r4
                uint32_t time_read = rtt_read_timer_value(RTT);
  403b6a:	4d33      	ldr	r5, [pc, #204]	; (403c38 <task_echo+0x120>)
                int dist = 1.0 / 10000 * time_read * 170 * 100;
  403b6c:	f20f 09a0 	addw	r9, pc, #160	; 0xa0
  403b70:	e9d9 8900 	ldrd	r8, r9, [r9]
  403b74:	2600      	movs	r6, #0
  403b76:	4f31      	ldr	r7, [pc, #196]	; (403c3c <task_echo+0x124>)
  403b78:	e020      	b.n	403bbc <task_echo+0xa4>
                uint32_t time_read = rtt_read_timer_value(RTT);
  403b7a:	4628      	mov	r0, r5
  403b7c:	4b30      	ldr	r3, [pc, #192]	; (403c40 <task_echo+0x128>)
  403b7e:	4798      	blx	r3
                int dist = 1.0 / 10000 * time_read * 170 * 100;
  403b80:	4b30      	ldr	r3, [pc, #192]	; (403c44 <task_echo+0x12c>)
  403b82:	4798      	blx	r3
  403b84:	4c30      	ldr	r4, [pc, #192]	; (403c48 <task_echo+0x130>)
  403b86:	4642      	mov	r2, r8
  403b88:	464b      	mov	r3, r9
  403b8a:	47a0      	blx	r4
  403b8c:	4632      	mov	r2, r6
  403b8e:	463b      	mov	r3, r7
  403b90:	47a0      	blx	r4
  403b92:	2200      	movs	r2, #0
  403b94:	4b2d      	ldr	r3, [pc, #180]	; (403c4c <task_echo+0x134>)
  403b96:	47a0      	blx	r4
  403b98:	4b2d      	ldr	r3, [pc, #180]	; (403c50 <task_echo+0x138>)
  403b9a:	4798      	blx	r3
				atualiza_tela(dist);
  403b9c:	4b2d      	ldr	r3, [pc, #180]	; (403c54 <task_echo+0x13c>)
  403b9e:	4798      	blx	r3
  403ba0:	e00c      	b.n	403bbc <task_echo+0xa4>
            gfx_mono_draw_filled_rect(0, 0, 128, 32, GFX_PIXEL_CLR);
  403ba2:	2000      	movs	r0, #0
  403ba4:	9000      	str	r0, [sp, #0]
  403ba6:	2320      	movs	r3, #32
  403ba8:	2280      	movs	r2, #128	; 0x80
  403baa:	4601      	mov	r1, r0
  403bac:	4c2a      	ldr	r4, [pc, #168]	; (403c58 <task_echo+0x140>)
  403bae:	47a0      	blx	r4
            gfx_mono_draw_string("Desconectado!!", 15, 15, &sysfont);
  403bb0:	4b2a      	ldr	r3, [pc, #168]	; (403c5c <task_echo+0x144>)
  403bb2:	220f      	movs	r2, #15
  403bb4:	4611      	mov	r1, r2
  403bb6:	482a      	ldr	r0, [pc, #168]	; (403c60 <task_echo+0x148>)
  403bb8:	4c2a      	ldr	r4, [pc, #168]	; (403c64 <task_echo+0x14c>)
  403bba:	47a0      	blx	r4
        if (xSemaphoreTake(xSemaphoreEcho, 100)) {
  403bbc:	2300      	movs	r3, #0
  403bbe:	2264      	movs	r2, #100	; 0x64
  403bc0:	4619      	mov	r1, r3
  403bc2:	f8da 0000 	ldr.w	r0, [sl]
  403bc6:	4c28      	ldr	r4, [pc, #160]	; (403c68 <task_echo+0x150>)
  403bc8:	47a0      	blx	r4
  403bca:	2800      	cmp	r0, #0
  403bcc:	d0e9      	beq.n	403ba2 <task_echo+0x8a>
            if (pio_get(ECHO_PIO, PIO_INPUT, ECHO_PIO_PIN_MASK)) {
  403bce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  403bd2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403bd6:	4658      	mov	r0, fp
  403bd8:	4b24      	ldr	r3, [pc, #144]	; (403c6c <task_echo+0x154>)
  403bda:	4798      	blx	r3
  403bdc:	2800      	cmp	r0, #0
  403bde:	d0cc      	beq.n	403b7a <task_echo+0x62>
    rtt_sel_source(RTT, false);
  403be0:	2100      	movs	r1, #0
  403be2:	4628      	mov	r0, r5
  403be4:	4b22      	ldr	r3, [pc, #136]	; (403c70 <task_echo+0x158>)
  403be6:	4798      	blx	r3
    rtt_init(RTT, pllPreScale);
  403be8:	2103      	movs	r1, #3
  403bea:	4628      	mov	r0, r5
  403bec:	4b21      	ldr	r3, [pc, #132]	; (403c74 <task_echo+0x15c>)
  403bee:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  403bf0:	4b10      	ldr	r3, [pc, #64]	; (403c34 <task_echo+0x11c>)
  403bf2:	2208      	movs	r2, #8
  403bf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  403bf8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  403bfc:	2180      	movs	r1, #128	; 0x80
  403bfe:	f883 1303 	strb.w	r1, [r3, #771]	; 0x303
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  403c02:	601a      	str	r2, [r3, #0]
        rtt_disable_interrupt(RTT, RTT_MR_RTTINCIEN | RTT_MR_ALMIEN);
  403c04:	f44f 3140 	mov.w	r1, #196608	; 0x30000
  403c08:	4628      	mov	r0, r5
  403c0a:	4b1b      	ldr	r3, [pc, #108]	; (403c78 <task_echo+0x160>)
  403c0c:	4798      	blx	r3
  403c0e:	e7d5      	b.n	403bbc <task_echo+0xa4>
  403c10:	eb1c432d 	.word	0xeb1c432d
  403c14:	3f1a36e2 	.word	0x3f1a36e2
  403c18:	00400c29 	.word	0x00400c29
  403c1c:	400e1400 	.word	0x400e1400
  403c20:	004012f1 	.word	0x004012f1
  403c24:	004038a9 	.word	0x004038a9
  403c28:	00401541 	.word	0x00401541
  403c2c:	004013b3 	.word	0x004013b3
  403c30:	004013b7 	.word	0x004013b7
  403c34:	e000e100 	.word	0xe000e100
  403c38:	400e1830 	.word	0x400e1830
  403c3c:	40654000 	.word	0x40654000
  403c40:	00400821 	.word	0x00400821
  403c44:	00404145 	.word	0x00404145
  403c48:	00404231 	.word	0x00404231
  403c4c:	40590000 	.word	0x40590000
  403c50:	00404655 	.word	0x00404655
  403c54:	00403aad 	.word	0x00403aad
  403c58:	00400aad 	.word	0x00400aad
  403c5c:	2040000c 	.word	0x2040000c
  403c60:	0040a67c 	.word	0x0040a67c
  403c64:	00400b91 	.word	0x00400b91
  403c68:	0040261d 	.word	0x0040261d
  403c6c:	004011e5 	.word	0x004011e5
  403c70:	004007e1 	.word	0x004007e1
  403c74:	004007cd 	.word	0x004007cd
  403c78:	0040080d 	.word	0x0040080d
  403c7c:	20400ebc 	.word	0x20400ebc

00403c80 <trigger_init>:
void trigger_init() {
  403c80:	b510      	push	{r4, lr}
  403c82:	b082      	sub	sp, #8
    pmc_enable_periph_clk(TRIGGER_PIO_ID);
  403c84:	200a      	movs	r0, #10
  403c86:	4b06      	ldr	r3, [pc, #24]	; (403ca0 <trigger_init+0x20>)
  403c88:	4798      	blx	r3
    pio_set_output(TRIGGER_PIO, TRIGGER_PIO_IDX_MASK, 1, 0, 0);
  403c8a:	2300      	movs	r3, #0
  403c8c:	9300      	str	r3, [sp, #0]
  403c8e:	2201      	movs	r2, #1
  403c90:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403c94:	4803      	ldr	r0, [pc, #12]	; (403ca4 <trigger_init+0x24>)
  403c96:	4c04      	ldr	r4, [pc, #16]	; (403ca8 <trigger_init+0x28>)
  403c98:	47a0      	blx	r4
};
  403c9a:	b002      	add	sp, #8
  403c9c:	bd10      	pop	{r4, pc}
  403c9e:	bf00      	nop
  403ca0:	00401735 	.word	0x00401735
  403ca4:	400e0e00 	.word	0x400e0e00
  403ca8:	004012c7 	.word	0x004012c7

00403cac <task_trigger>:
static void task_trigger(void *pvParameters) {
  403cac:	b580      	push	{r7, lr}
    trigger_init();
  403cae:	4b10      	ldr	r3, [pc, #64]	; (403cf0 <task_trigger+0x44>)
  403cb0:	4798      	blx	r3
        if (!pio_get(ECHO_PIO, PIO_INPUT, ECHO_PIO_PIN_MASK)) {
  403cb2:	4e10      	ldr	r6, [pc, #64]	; (403cf4 <task_trigger+0x48>)
  403cb4:	4d10      	ldr	r5, [pc, #64]	; (403cf8 <task_trigger+0x4c>)
            pio_set(TRIGGER_PIO, TRIGGER_PIO_IDX_MASK);
  403cb6:	4f11      	ldr	r7, [pc, #68]	; (403cfc <task_trigger+0x50>)
        if (!pio_get(ECHO_PIO, PIO_INPUT, ECHO_PIO_PIN_MASK)) {
  403cb8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
  403cbc:	4622      	mov	r2, r4
  403cbe:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403cc2:	4630      	mov	r0, r6
  403cc4:	47a8      	blx	r5
  403cc6:	2800      	cmp	r0, #0
  403cc8:	d1f8      	bne.n	403cbc <task_trigger+0x10>
            vTaskDelay(60);
  403cca:	203c      	movs	r0, #60	; 0x3c
  403ccc:	4b0c      	ldr	r3, [pc, #48]	; (403d00 <task_trigger+0x54>)
  403cce:	4798      	blx	r3
            pio_set(TRIGGER_PIO, TRIGGER_PIO_IDX_MASK);
  403cd0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403cd4:	4638      	mov	r0, r7
  403cd6:	4b0b      	ldr	r3, [pc, #44]	; (403d04 <task_trigger+0x58>)
  403cd8:	4798      	blx	r3
            delay_us(10);
  403cda:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  403cde:	4b0a      	ldr	r3, [pc, #40]	; (403d08 <task_trigger+0x5c>)
  403ce0:	4798      	blx	r3
            pio_clear(TRIGGER_PIO, TRIGGER_PIO_IDX_MASK);
  403ce2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403ce6:	4638      	mov	r0, r7
  403ce8:	4b08      	ldr	r3, [pc, #32]	; (403d0c <task_trigger+0x60>)
  403cea:	4798      	blx	r3
  403cec:	e7e4      	b.n	403cb8 <task_trigger+0xc>
  403cee:	bf00      	nop
  403cf0:	00403c81 	.word	0x00403c81
  403cf4:	400e1400 	.word	0x400e1400
  403cf8:	004011e5 	.word	0x004011e5
  403cfc:	400e0e00 	.word	0x400e0e00
  403d00:	00402e49 	.word	0x00402e49
  403d04:	004011dd 	.word	0x004011dd
  403d08:	20400001 	.word	0x20400001
  403d0c:	004011e1 	.word	0x004011e1

00403d10 <main>:
/**
 *  \brief FreeRTOS Real Time Kernel example entry point.
 *
 *  \return Unused (ANSI-C compatibility).
 */
int main(void) {
  403d10:	b500      	push	{lr}
  403d12:	b08b      	sub	sp, #44	; 0x2c
    /* Initialize the SAM system */
    sysclk_init();
  403d14:	4b49      	ldr	r3, [pc, #292]	; (403e3c <main+0x12c>)
  403d16:	4798      	blx	r3

    board_init();
  403d18:	4b49      	ldr	r3, [pc, #292]	; (403e40 <main+0x130>)
  403d1a:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  403d1c:	4d49      	ldr	r5, [pc, #292]	; (403e44 <main+0x134>)
  403d1e:	4b4a      	ldr	r3, [pc, #296]	; (403e48 <main+0x138>)
  403d20:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  403d22:	4a4a      	ldr	r2, [pc, #296]	; (403e4c <main+0x13c>)
  403d24:	4b4a      	ldr	r3, [pc, #296]	; (403e50 <main+0x140>)
  403d26:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  403d28:	4a4a      	ldr	r2, [pc, #296]	; (403e54 <main+0x144>)
  403d2a:	4b4b      	ldr	r3, [pc, #300]	; (403e58 <main+0x148>)
  403d2c:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  403d2e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  403d32:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  403d34:	23c0      	movs	r3, #192	; 0xc0
  403d36:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  403d38:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403d3c:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  403d3e:	2400      	movs	r4, #0
  403d40:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  403d42:	9408      	str	r4, [sp, #32]
  403d44:	200e      	movs	r0, #14
  403d46:	4b45      	ldr	r3, [pc, #276]	; (403e5c <main+0x14c>)
  403d48:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  403d4a:	4a45      	ldr	r2, [pc, #276]	; (403e60 <main+0x150>)
  403d4c:	a904      	add	r1, sp, #16
  403d4e:	4628      	mov	r0, r5
  403d50:	4b44      	ldr	r3, [pc, #272]	; (403e64 <main+0x154>)
  403d52:	4798      	blx	r3
		usart_enable_tx(p_usart);
  403d54:	4628      	mov	r0, r5
  403d56:	4b44      	ldr	r3, [pc, #272]	; (403e68 <main+0x158>)
  403d58:	4798      	blx	r3
		usart_enable_rx(p_usart);
  403d5a:	4628      	mov	r0, r5
  403d5c:	4b43      	ldr	r3, [pc, #268]	; (403e6c <main+0x15c>)
  403d5e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  403d60:	4e43      	ldr	r6, [pc, #268]	; (403e70 <main+0x160>)
  403d62:	6833      	ldr	r3, [r6, #0]
  403d64:	4621      	mov	r1, r4
  403d66:	6898      	ldr	r0, [r3, #8]
  403d68:	4d42      	ldr	r5, [pc, #264]	; (403e74 <main+0x164>)
  403d6a:	47a8      	blx	r5
	setbuf(stdin, NULL);
  403d6c:	6833      	ldr	r3, [r6, #0]
  403d6e:	4621      	mov	r1, r4
  403d70:	6858      	ldr	r0, [r3, #4]
  403d72:	47a8      	blx	r5
    setbuf(stdout, NULL);
  403d74:	6833      	ldr	r3, [r6, #0]
  403d76:	4621      	mov	r1, r4
  403d78:	6898      	ldr	r0, [r3, #8]
  403d7a:	47a8      	blx	r5
    pio_configure_pin(LCD_SPI_MISO_PIO, LCD_SPI_MISO_FLAGS);
  403d7c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  403d80:	2074      	movs	r0, #116	; 0x74
  403d82:	4d3d      	ldr	r5, [pc, #244]	; (403e78 <main+0x168>)
  403d84:	47a8      	blx	r5
    pio_configure_pin(LCD_SPI_MOSI_PIO, LCD_SPI_MOSI_FLAGS);
  403d86:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  403d8a:	2075      	movs	r0, #117	; 0x75
  403d8c:	47a8      	blx	r5
    pio_configure_pin(LCD_SPI_SPCK_PIO, LCD_SPI_SPCK_FLAGS);
  403d8e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  403d92:	2076      	movs	r0, #118	; 0x76
  403d94:	47a8      	blx	r5
    pio_configure_pin(LCD_SPI_NPCS_PIO, LCD_SPI_NPCS_FLAGS);
  403d96:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  403d9a:	207b      	movs	r0, #123	; 0x7b
  403d9c:	47a8      	blx	r5
    pio_configure_pin(LCD_SPI_RESET_PIO, LCD_SPI_RESET_FLAGS);
  403d9e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  403da2:	2018      	movs	r0, #24
  403da4:	47a8      	blx	r5
    pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
  403da6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  403daa:	2006      	movs	r0, #6
  403dac:	47a8      	blx	r5
    ili9341_init();
  403dae:	4b33      	ldr	r3, [pc, #204]	; (403e7c <main+0x16c>)
  403db0:	4798      	blx	r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  403db2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  403db6:	4b32      	ldr	r3, [pc, #200]	; (403e80 <main+0x170>)
  403db8:	631a      	str	r2, [r3, #48]	; 0x30

    /* initialize ios and the display controller */
    configure_lcd();
    // configure_lvgl();

    printf("Sys init ok \n");
  403dba:	4832      	ldr	r0, [pc, #200]	; (403e84 <main+0x174>)
  403dbc:	4b32      	ldr	r3, [pc, #200]	; (403e88 <main+0x178>)
  403dbe:	4798      	blx	r3
    /* Attempt to create a semaphore. */
    xSemaphoreEcho = xSemaphoreCreateBinary();
  403dc0:	2203      	movs	r2, #3
  403dc2:	4621      	mov	r1, r4
  403dc4:	2001      	movs	r0, #1
  403dc6:	4b31      	ldr	r3, [pc, #196]	; (403e8c <main+0x17c>)
  403dc8:	4798      	blx	r3
  403dca:	4b31      	ldr	r3, [pc, #196]	; (403e90 <main+0x180>)
  403dcc:	6018      	str	r0, [r3, #0]
    if (xSemaphoreEcho == NULL)
  403dce:	2800      	cmp	r0, #0
  403dd0:	d02c      	beq.n	403e2c <main+0x11c>
        printf("falha em criar o semaforo \n");

    /* cria queue com 32 "espacos" */
    /* cada espa�o possui o tamanho de um inteiro*/
    xQueueLedFreq = xQueueCreate(32, sizeof(uint32_t));
  403dd2:	2200      	movs	r2, #0
  403dd4:	2104      	movs	r1, #4
  403dd6:	2020      	movs	r0, #32
  403dd8:	4b2c      	ldr	r3, [pc, #176]	; (403e8c <main+0x17c>)
  403dda:	4798      	blx	r3
  403ddc:	4b2d      	ldr	r3, [pc, #180]	; (403e94 <main+0x184>)
  403dde:	6018      	str	r0, [r3, #0]
    if (xQueueLedFreq == NULL)
  403de0:	2800      	cmp	r0, #0
  403de2:	d027      	beq.n	403e34 <main+0x124>
        printf("falha em criar a queue \n");

    /* Create task to monitor processor activity */
    if (xTaskCreate(task_echo, "ECHO", TASK_ECHO_STACK_SIZE, NULL,
  403de4:	2300      	movs	r3, #0
  403de6:	9303      	str	r3, [sp, #12]
  403de8:	9302      	str	r3, [sp, #8]
  403dea:	9301      	str	r3, [sp, #4]
  403dec:	9300      	str	r3, [sp, #0]
  403dee:	f44f 6280 	mov.w	r2, #1024	; 0x400
  403df2:	4929      	ldr	r1, [pc, #164]	; (403e98 <main+0x188>)
  403df4:	4829      	ldr	r0, [pc, #164]	; (403e9c <main+0x18c>)
  403df6:	4c2a      	ldr	r4, [pc, #168]	; (403ea0 <main+0x190>)
  403df8:	47a0      	blx	r4
  403dfa:	2801      	cmp	r0, #1
                    TASK_ECHO_STACK_PRIORITY, NULL) != pdPASS) {
        printf("Failed to create UartTx task\r\n");
  403dfc:	bf14      	ite	ne
  403dfe:	4829      	ldrne	r0, [pc, #164]	; (403ea4 <main+0x194>)
    } else {
        printf("task led but \r\n");
  403e00:	4829      	ldreq	r0, [pc, #164]	; (403ea8 <main+0x198>)
  403e02:	4b21      	ldr	r3, [pc, #132]	; (403e88 <main+0x178>)
  403e04:	4798      	blx	r3
    }

    if (xTaskCreate(task_trigger, "TRIGGER", TASK_TRIGGER_STACK_SIZE, NULL,
  403e06:	2300      	movs	r3, #0
  403e08:	9303      	str	r3, [sp, #12]
  403e0a:	9302      	str	r3, [sp, #8]
  403e0c:	9301      	str	r3, [sp, #4]
  403e0e:	9300      	str	r3, [sp, #0]
  403e10:	f44f 6280 	mov.w	r2, #1024	; 0x400
  403e14:	4925      	ldr	r1, [pc, #148]	; (403eac <main+0x19c>)
  403e16:	4826      	ldr	r0, [pc, #152]	; (403eb0 <main+0x1a0>)
  403e18:	4c21      	ldr	r4, [pc, #132]	; (403ea0 <main+0x190>)
  403e1a:	47a0      	blx	r4
  403e1c:	2801      	cmp	r0, #1
  403e1e:	d002      	beq.n	403e26 <main+0x116>
                    TASK_TRIGGER_STACK_PRIORITY, NULL) != pdPASS) {
        printf("Failed to create UartTx task\r\n");
  403e20:	4820      	ldr	r0, [pc, #128]	; (403ea4 <main+0x194>)
  403e22:	4b19      	ldr	r3, [pc, #100]	; (403e88 <main+0x178>)
  403e24:	4798      	blx	r3
    }

    /* Start the scheduler. */
    vTaskStartScheduler();
  403e26:	4b23      	ldr	r3, [pc, #140]	; (403eb4 <main+0x1a4>)
  403e28:	4798      	blx	r3
  403e2a:	e7fe      	b.n	403e2a <main+0x11a>
        printf("falha em criar o semaforo \n");
  403e2c:	4822      	ldr	r0, [pc, #136]	; (403eb8 <main+0x1a8>)
  403e2e:	4b16      	ldr	r3, [pc, #88]	; (403e88 <main+0x178>)
  403e30:	4798      	blx	r3
  403e32:	e7ce      	b.n	403dd2 <main+0xc2>
        printf("falha em criar a queue \n");
  403e34:	4821      	ldr	r0, [pc, #132]	; (403ebc <main+0x1ac>)
  403e36:	4b14      	ldr	r3, [pc, #80]	; (403e88 <main+0x178>)
  403e38:	4798      	blx	r3
  403e3a:	e7d3      	b.n	403de4 <main+0xd4>
  403e3c:	00400f49 	.word	0x00400f49
  403e40:	00401045 	.word	0x00401045
  403e44:	40028000 	.word	0x40028000
  403e48:	20400e74 	.word	0x20400e74
  403e4c:	004039a9 	.word	0x004039a9
  403e50:	20400e70 	.word	0x20400e70
  403e54:	004038cd 	.word	0x004038cd
  403e58:	20400e6c 	.word	0x20400e6c
  403e5c:	00401735 	.word	0x00401735
  403e60:	08f0d180 	.word	0x08f0d180
  403e64:	00401831 	.word	0x00401831
  403e68:	00401885 	.word	0x00401885
  403e6c:	0040188b 	.word	0x0040188b
  403e70:	20400024 	.word	0x20400024
  403e74:	00404ea9 	.word	0x00404ea9
  403e78:	004013c1 	.word	0x004013c1
  403e7c:	00400369 	.word	0x00400369
  403e80:	400e0e00 	.word	0x400e0e00
  403e84:	0040a5f4 	.word	0x0040a5f4
  403e88:	004046f5 	.word	0x004046f5
  403e8c:	004021dd 	.word	0x004021dd
  403e90:	20400ebc 	.word	0x20400ebc
  403e94:	20400eb8 	.word	0x20400eb8
  403e98:	0040a63c 	.word	0x0040a63c
  403e9c:	00403b19 	.word	0x00403b19
  403ea0:	004028fd 	.word	0x004028fd
  403ea4:	0040a644 	.word	0x0040a644
  403ea8:	0040a664 	.word	0x0040a664
  403eac:	0040a674 	.word	0x0040a674
  403eb0:	00403cad 	.word	0x00403cad
  403eb4:	00402b31 	.word	0x00402b31
  403eb8:	0040a604 	.word	0x0040a604
  403ebc:	0040a620 	.word	0x0040a620

00403ec0 <__aeabi_drsub>:
  403ec0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  403ec4:	e002      	b.n	403ecc <__adddf3>
  403ec6:	bf00      	nop

00403ec8 <__aeabi_dsub>:
  403ec8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00403ecc <__adddf3>:
  403ecc:	b530      	push	{r4, r5, lr}
  403ece:	ea4f 0441 	mov.w	r4, r1, lsl #1
  403ed2:	ea4f 0543 	mov.w	r5, r3, lsl #1
  403ed6:	ea94 0f05 	teq	r4, r5
  403eda:	bf08      	it	eq
  403edc:	ea90 0f02 	teqeq	r0, r2
  403ee0:	bf1f      	itttt	ne
  403ee2:	ea54 0c00 	orrsne.w	ip, r4, r0
  403ee6:	ea55 0c02 	orrsne.w	ip, r5, r2
  403eea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  403eee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  403ef2:	f000 80e2 	beq.w	4040ba <__adddf3+0x1ee>
  403ef6:	ea4f 5454 	mov.w	r4, r4, lsr #21
  403efa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  403efe:	bfb8      	it	lt
  403f00:	426d      	neglt	r5, r5
  403f02:	dd0c      	ble.n	403f1e <__adddf3+0x52>
  403f04:	442c      	add	r4, r5
  403f06:	ea80 0202 	eor.w	r2, r0, r2
  403f0a:	ea81 0303 	eor.w	r3, r1, r3
  403f0e:	ea82 0000 	eor.w	r0, r2, r0
  403f12:	ea83 0101 	eor.w	r1, r3, r1
  403f16:	ea80 0202 	eor.w	r2, r0, r2
  403f1a:	ea81 0303 	eor.w	r3, r1, r3
  403f1e:	2d36      	cmp	r5, #54	; 0x36
  403f20:	bf88      	it	hi
  403f22:	bd30      	pophi	{r4, r5, pc}
  403f24:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  403f28:	ea4f 3101 	mov.w	r1, r1, lsl #12
  403f2c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  403f30:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  403f34:	d002      	beq.n	403f3c <__adddf3+0x70>
  403f36:	4240      	negs	r0, r0
  403f38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403f3c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  403f40:	ea4f 3303 	mov.w	r3, r3, lsl #12
  403f44:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  403f48:	d002      	beq.n	403f50 <__adddf3+0x84>
  403f4a:	4252      	negs	r2, r2
  403f4c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  403f50:	ea94 0f05 	teq	r4, r5
  403f54:	f000 80a7 	beq.w	4040a6 <__adddf3+0x1da>
  403f58:	f1a4 0401 	sub.w	r4, r4, #1
  403f5c:	f1d5 0e20 	rsbs	lr, r5, #32
  403f60:	db0d      	blt.n	403f7e <__adddf3+0xb2>
  403f62:	fa02 fc0e 	lsl.w	ip, r2, lr
  403f66:	fa22 f205 	lsr.w	r2, r2, r5
  403f6a:	1880      	adds	r0, r0, r2
  403f6c:	f141 0100 	adc.w	r1, r1, #0
  403f70:	fa03 f20e 	lsl.w	r2, r3, lr
  403f74:	1880      	adds	r0, r0, r2
  403f76:	fa43 f305 	asr.w	r3, r3, r5
  403f7a:	4159      	adcs	r1, r3
  403f7c:	e00e      	b.n	403f9c <__adddf3+0xd0>
  403f7e:	f1a5 0520 	sub.w	r5, r5, #32
  403f82:	f10e 0e20 	add.w	lr, lr, #32
  403f86:	2a01      	cmp	r2, #1
  403f88:	fa03 fc0e 	lsl.w	ip, r3, lr
  403f8c:	bf28      	it	cs
  403f8e:	f04c 0c02 	orrcs.w	ip, ip, #2
  403f92:	fa43 f305 	asr.w	r3, r3, r5
  403f96:	18c0      	adds	r0, r0, r3
  403f98:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  403f9c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403fa0:	d507      	bpl.n	403fb2 <__adddf3+0xe6>
  403fa2:	f04f 0e00 	mov.w	lr, #0
  403fa6:	f1dc 0c00 	rsbs	ip, ip, #0
  403faa:	eb7e 0000 	sbcs.w	r0, lr, r0
  403fae:	eb6e 0101 	sbc.w	r1, lr, r1
  403fb2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  403fb6:	d31b      	bcc.n	403ff0 <__adddf3+0x124>
  403fb8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  403fbc:	d30c      	bcc.n	403fd8 <__adddf3+0x10c>
  403fbe:	0849      	lsrs	r1, r1, #1
  403fc0:	ea5f 0030 	movs.w	r0, r0, rrx
  403fc4:	ea4f 0c3c 	mov.w	ip, ip, rrx
  403fc8:	f104 0401 	add.w	r4, r4, #1
  403fcc:	ea4f 5244 	mov.w	r2, r4, lsl #21
  403fd0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  403fd4:	f080 809a 	bcs.w	40410c <__adddf3+0x240>
  403fd8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  403fdc:	bf08      	it	eq
  403fde:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  403fe2:	f150 0000 	adcs.w	r0, r0, #0
  403fe6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403fea:	ea41 0105 	orr.w	r1, r1, r5
  403fee:	bd30      	pop	{r4, r5, pc}
  403ff0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  403ff4:	4140      	adcs	r0, r0
  403ff6:	eb41 0101 	adc.w	r1, r1, r1
  403ffa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403ffe:	f1a4 0401 	sub.w	r4, r4, #1
  404002:	d1e9      	bne.n	403fd8 <__adddf3+0x10c>
  404004:	f091 0f00 	teq	r1, #0
  404008:	bf04      	itt	eq
  40400a:	4601      	moveq	r1, r0
  40400c:	2000      	moveq	r0, #0
  40400e:	fab1 f381 	clz	r3, r1
  404012:	bf08      	it	eq
  404014:	3320      	addeq	r3, #32
  404016:	f1a3 030b 	sub.w	r3, r3, #11
  40401a:	f1b3 0220 	subs.w	r2, r3, #32
  40401e:	da0c      	bge.n	40403a <__adddf3+0x16e>
  404020:	320c      	adds	r2, #12
  404022:	dd08      	ble.n	404036 <__adddf3+0x16a>
  404024:	f102 0c14 	add.w	ip, r2, #20
  404028:	f1c2 020c 	rsb	r2, r2, #12
  40402c:	fa01 f00c 	lsl.w	r0, r1, ip
  404030:	fa21 f102 	lsr.w	r1, r1, r2
  404034:	e00c      	b.n	404050 <__adddf3+0x184>
  404036:	f102 0214 	add.w	r2, r2, #20
  40403a:	bfd8      	it	le
  40403c:	f1c2 0c20 	rsble	ip, r2, #32
  404040:	fa01 f102 	lsl.w	r1, r1, r2
  404044:	fa20 fc0c 	lsr.w	ip, r0, ip
  404048:	bfdc      	itt	le
  40404a:	ea41 010c 	orrle.w	r1, r1, ip
  40404e:	4090      	lslle	r0, r2
  404050:	1ae4      	subs	r4, r4, r3
  404052:	bfa2      	ittt	ge
  404054:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  404058:	4329      	orrge	r1, r5
  40405a:	bd30      	popge	{r4, r5, pc}
  40405c:	ea6f 0404 	mvn.w	r4, r4
  404060:	3c1f      	subs	r4, #31
  404062:	da1c      	bge.n	40409e <__adddf3+0x1d2>
  404064:	340c      	adds	r4, #12
  404066:	dc0e      	bgt.n	404086 <__adddf3+0x1ba>
  404068:	f104 0414 	add.w	r4, r4, #20
  40406c:	f1c4 0220 	rsb	r2, r4, #32
  404070:	fa20 f004 	lsr.w	r0, r0, r4
  404074:	fa01 f302 	lsl.w	r3, r1, r2
  404078:	ea40 0003 	orr.w	r0, r0, r3
  40407c:	fa21 f304 	lsr.w	r3, r1, r4
  404080:	ea45 0103 	orr.w	r1, r5, r3
  404084:	bd30      	pop	{r4, r5, pc}
  404086:	f1c4 040c 	rsb	r4, r4, #12
  40408a:	f1c4 0220 	rsb	r2, r4, #32
  40408e:	fa20 f002 	lsr.w	r0, r0, r2
  404092:	fa01 f304 	lsl.w	r3, r1, r4
  404096:	ea40 0003 	orr.w	r0, r0, r3
  40409a:	4629      	mov	r1, r5
  40409c:	bd30      	pop	{r4, r5, pc}
  40409e:	fa21 f004 	lsr.w	r0, r1, r4
  4040a2:	4629      	mov	r1, r5
  4040a4:	bd30      	pop	{r4, r5, pc}
  4040a6:	f094 0f00 	teq	r4, #0
  4040aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  4040ae:	bf06      	itte	eq
  4040b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  4040b4:	3401      	addeq	r4, #1
  4040b6:	3d01      	subne	r5, #1
  4040b8:	e74e      	b.n	403f58 <__adddf3+0x8c>
  4040ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4040be:	bf18      	it	ne
  4040c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4040c4:	d029      	beq.n	40411a <__adddf3+0x24e>
  4040c6:	ea94 0f05 	teq	r4, r5
  4040ca:	bf08      	it	eq
  4040cc:	ea90 0f02 	teqeq	r0, r2
  4040d0:	d005      	beq.n	4040de <__adddf3+0x212>
  4040d2:	ea54 0c00 	orrs.w	ip, r4, r0
  4040d6:	bf04      	itt	eq
  4040d8:	4619      	moveq	r1, r3
  4040da:	4610      	moveq	r0, r2
  4040dc:	bd30      	pop	{r4, r5, pc}
  4040de:	ea91 0f03 	teq	r1, r3
  4040e2:	bf1e      	ittt	ne
  4040e4:	2100      	movne	r1, #0
  4040e6:	2000      	movne	r0, #0
  4040e8:	bd30      	popne	{r4, r5, pc}
  4040ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4040ee:	d105      	bne.n	4040fc <__adddf3+0x230>
  4040f0:	0040      	lsls	r0, r0, #1
  4040f2:	4149      	adcs	r1, r1
  4040f4:	bf28      	it	cs
  4040f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4040fa:	bd30      	pop	{r4, r5, pc}
  4040fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  404100:	bf3c      	itt	cc
  404102:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  404106:	bd30      	popcc	{r4, r5, pc}
  404108:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40410c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  404110:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  404114:	f04f 0000 	mov.w	r0, #0
  404118:	bd30      	pop	{r4, r5, pc}
  40411a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40411e:	bf1a      	itte	ne
  404120:	4619      	movne	r1, r3
  404122:	4610      	movne	r0, r2
  404124:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  404128:	bf1c      	itt	ne
  40412a:	460b      	movne	r3, r1
  40412c:	4602      	movne	r2, r0
  40412e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  404132:	bf06      	itte	eq
  404134:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  404138:	ea91 0f03 	teqeq	r1, r3
  40413c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  404140:	bd30      	pop	{r4, r5, pc}
  404142:	bf00      	nop

00404144 <__aeabi_ui2d>:
  404144:	f090 0f00 	teq	r0, #0
  404148:	bf04      	itt	eq
  40414a:	2100      	moveq	r1, #0
  40414c:	4770      	bxeq	lr
  40414e:	b530      	push	{r4, r5, lr}
  404150:	f44f 6480 	mov.w	r4, #1024	; 0x400
  404154:	f104 0432 	add.w	r4, r4, #50	; 0x32
  404158:	f04f 0500 	mov.w	r5, #0
  40415c:	f04f 0100 	mov.w	r1, #0
  404160:	e750      	b.n	404004 <__adddf3+0x138>
  404162:	bf00      	nop

00404164 <__aeabi_i2d>:
  404164:	f090 0f00 	teq	r0, #0
  404168:	bf04      	itt	eq
  40416a:	2100      	moveq	r1, #0
  40416c:	4770      	bxeq	lr
  40416e:	b530      	push	{r4, r5, lr}
  404170:	f44f 6480 	mov.w	r4, #1024	; 0x400
  404174:	f104 0432 	add.w	r4, r4, #50	; 0x32
  404178:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40417c:	bf48      	it	mi
  40417e:	4240      	negmi	r0, r0
  404180:	f04f 0100 	mov.w	r1, #0
  404184:	e73e      	b.n	404004 <__adddf3+0x138>
  404186:	bf00      	nop

00404188 <__aeabi_f2d>:
  404188:	0042      	lsls	r2, r0, #1
  40418a:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40418e:	ea4f 0131 	mov.w	r1, r1, rrx
  404192:	ea4f 7002 	mov.w	r0, r2, lsl #28
  404196:	bf1f      	itttt	ne
  404198:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40419c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4041a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  4041a4:	4770      	bxne	lr
  4041a6:	f092 0f00 	teq	r2, #0
  4041aa:	bf14      	ite	ne
  4041ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4041b0:	4770      	bxeq	lr
  4041b2:	b530      	push	{r4, r5, lr}
  4041b4:	f44f 7460 	mov.w	r4, #896	; 0x380
  4041b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4041bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4041c0:	e720      	b.n	404004 <__adddf3+0x138>
  4041c2:	bf00      	nop

004041c4 <__aeabi_ul2d>:
  4041c4:	ea50 0201 	orrs.w	r2, r0, r1
  4041c8:	bf08      	it	eq
  4041ca:	4770      	bxeq	lr
  4041cc:	b530      	push	{r4, r5, lr}
  4041ce:	f04f 0500 	mov.w	r5, #0
  4041d2:	e00a      	b.n	4041ea <__aeabi_l2d+0x16>

004041d4 <__aeabi_l2d>:
  4041d4:	ea50 0201 	orrs.w	r2, r0, r1
  4041d8:	bf08      	it	eq
  4041da:	4770      	bxeq	lr
  4041dc:	b530      	push	{r4, r5, lr}
  4041de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4041e2:	d502      	bpl.n	4041ea <__aeabi_l2d+0x16>
  4041e4:	4240      	negs	r0, r0
  4041e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4041ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4041ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4041f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4041f6:	f43f aedc 	beq.w	403fb2 <__adddf3+0xe6>
  4041fa:	f04f 0203 	mov.w	r2, #3
  4041fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  404202:	bf18      	it	ne
  404204:	3203      	addne	r2, #3
  404206:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40420a:	bf18      	it	ne
  40420c:	3203      	addne	r2, #3
  40420e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  404212:	f1c2 0320 	rsb	r3, r2, #32
  404216:	fa00 fc03 	lsl.w	ip, r0, r3
  40421a:	fa20 f002 	lsr.w	r0, r0, r2
  40421e:	fa01 fe03 	lsl.w	lr, r1, r3
  404222:	ea40 000e 	orr.w	r0, r0, lr
  404226:	fa21 f102 	lsr.w	r1, r1, r2
  40422a:	4414      	add	r4, r2
  40422c:	e6c1      	b.n	403fb2 <__adddf3+0xe6>
  40422e:	bf00      	nop

00404230 <__aeabi_dmul>:
  404230:	b570      	push	{r4, r5, r6, lr}
  404232:	f04f 0cff 	mov.w	ip, #255	; 0xff
  404236:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40423a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40423e:	bf1d      	ittte	ne
  404240:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  404244:	ea94 0f0c 	teqne	r4, ip
  404248:	ea95 0f0c 	teqne	r5, ip
  40424c:	f000 f8de 	bleq	40440c <__aeabi_dmul+0x1dc>
  404250:	442c      	add	r4, r5
  404252:	ea81 0603 	eor.w	r6, r1, r3
  404256:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40425a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40425e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  404262:	bf18      	it	ne
  404264:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  404268:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40426c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  404270:	d038      	beq.n	4042e4 <__aeabi_dmul+0xb4>
  404272:	fba0 ce02 	umull	ip, lr, r0, r2
  404276:	f04f 0500 	mov.w	r5, #0
  40427a:	fbe1 e502 	umlal	lr, r5, r1, r2
  40427e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  404282:	fbe0 e503 	umlal	lr, r5, r0, r3
  404286:	f04f 0600 	mov.w	r6, #0
  40428a:	fbe1 5603 	umlal	r5, r6, r1, r3
  40428e:	f09c 0f00 	teq	ip, #0
  404292:	bf18      	it	ne
  404294:	f04e 0e01 	orrne.w	lr, lr, #1
  404298:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40429c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  4042a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4042a4:	d204      	bcs.n	4042b0 <__aeabi_dmul+0x80>
  4042a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4042aa:	416d      	adcs	r5, r5
  4042ac:	eb46 0606 	adc.w	r6, r6, r6
  4042b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4042b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4042b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  4042bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4042c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4042c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4042c8:	bf88      	it	hi
  4042ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4042ce:	d81e      	bhi.n	40430e <__aeabi_dmul+0xde>
  4042d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4042d4:	bf08      	it	eq
  4042d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4042da:	f150 0000 	adcs.w	r0, r0, #0
  4042de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4042e2:	bd70      	pop	{r4, r5, r6, pc}
  4042e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4042e8:	ea46 0101 	orr.w	r1, r6, r1
  4042ec:	ea40 0002 	orr.w	r0, r0, r2
  4042f0:	ea81 0103 	eor.w	r1, r1, r3
  4042f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4042f8:	bfc2      	ittt	gt
  4042fa:	ebd4 050c 	rsbsgt	r5, r4, ip
  4042fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  404302:	bd70      	popgt	{r4, r5, r6, pc}
  404304:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  404308:	f04f 0e00 	mov.w	lr, #0
  40430c:	3c01      	subs	r4, #1
  40430e:	f300 80ab 	bgt.w	404468 <__aeabi_dmul+0x238>
  404312:	f114 0f36 	cmn.w	r4, #54	; 0x36
  404316:	bfde      	ittt	le
  404318:	2000      	movle	r0, #0
  40431a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40431e:	bd70      	pople	{r4, r5, r6, pc}
  404320:	f1c4 0400 	rsb	r4, r4, #0
  404324:	3c20      	subs	r4, #32
  404326:	da35      	bge.n	404394 <__aeabi_dmul+0x164>
  404328:	340c      	adds	r4, #12
  40432a:	dc1b      	bgt.n	404364 <__aeabi_dmul+0x134>
  40432c:	f104 0414 	add.w	r4, r4, #20
  404330:	f1c4 0520 	rsb	r5, r4, #32
  404334:	fa00 f305 	lsl.w	r3, r0, r5
  404338:	fa20 f004 	lsr.w	r0, r0, r4
  40433c:	fa01 f205 	lsl.w	r2, r1, r5
  404340:	ea40 0002 	orr.w	r0, r0, r2
  404344:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  404348:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40434c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  404350:	fa21 f604 	lsr.w	r6, r1, r4
  404354:	eb42 0106 	adc.w	r1, r2, r6
  404358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40435c:	bf08      	it	eq
  40435e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  404362:	bd70      	pop	{r4, r5, r6, pc}
  404364:	f1c4 040c 	rsb	r4, r4, #12
  404368:	f1c4 0520 	rsb	r5, r4, #32
  40436c:	fa00 f304 	lsl.w	r3, r0, r4
  404370:	fa20 f005 	lsr.w	r0, r0, r5
  404374:	fa01 f204 	lsl.w	r2, r1, r4
  404378:	ea40 0002 	orr.w	r0, r0, r2
  40437c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  404384:	f141 0100 	adc.w	r1, r1, #0
  404388:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40438c:	bf08      	it	eq
  40438e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  404392:	bd70      	pop	{r4, r5, r6, pc}
  404394:	f1c4 0520 	rsb	r5, r4, #32
  404398:	fa00 f205 	lsl.w	r2, r0, r5
  40439c:	ea4e 0e02 	orr.w	lr, lr, r2
  4043a0:	fa20 f304 	lsr.w	r3, r0, r4
  4043a4:	fa01 f205 	lsl.w	r2, r1, r5
  4043a8:	ea43 0302 	orr.w	r3, r3, r2
  4043ac:	fa21 f004 	lsr.w	r0, r1, r4
  4043b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4043b4:	fa21 f204 	lsr.w	r2, r1, r4
  4043b8:	ea20 0002 	bic.w	r0, r0, r2
  4043bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4043c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4043c4:	bf08      	it	eq
  4043c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4043ca:	bd70      	pop	{r4, r5, r6, pc}
  4043cc:	f094 0f00 	teq	r4, #0
  4043d0:	d10f      	bne.n	4043f2 <__aeabi_dmul+0x1c2>
  4043d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4043d6:	0040      	lsls	r0, r0, #1
  4043d8:	eb41 0101 	adc.w	r1, r1, r1
  4043dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4043e0:	bf08      	it	eq
  4043e2:	3c01      	subeq	r4, #1
  4043e4:	d0f7      	beq.n	4043d6 <__aeabi_dmul+0x1a6>
  4043e6:	ea41 0106 	orr.w	r1, r1, r6
  4043ea:	f095 0f00 	teq	r5, #0
  4043ee:	bf18      	it	ne
  4043f0:	4770      	bxne	lr
  4043f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4043f6:	0052      	lsls	r2, r2, #1
  4043f8:	eb43 0303 	adc.w	r3, r3, r3
  4043fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  404400:	bf08      	it	eq
  404402:	3d01      	subeq	r5, #1
  404404:	d0f7      	beq.n	4043f6 <__aeabi_dmul+0x1c6>
  404406:	ea43 0306 	orr.w	r3, r3, r6
  40440a:	4770      	bx	lr
  40440c:	ea94 0f0c 	teq	r4, ip
  404410:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  404414:	bf18      	it	ne
  404416:	ea95 0f0c 	teqne	r5, ip
  40441a:	d00c      	beq.n	404436 <__aeabi_dmul+0x206>
  40441c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  404420:	bf18      	it	ne
  404422:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  404426:	d1d1      	bne.n	4043cc <__aeabi_dmul+0x19c>
  404428:	ea81 0103 	eor.w	r1, r1, r3
  40442c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404430:	f04f 0000 	mov.w	r0, #0
  404434:	bd70      	pop	{r4, r5, r6, pc}
  404436:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40443a:	bf06      	itte	eq
  40443c:	4610      	moveq	r0, r2
  40443e:	4619      	moveq	r1, r3
  404440:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  404444:	d019      	beq.n	40447a <__aeabi_dmul+0x24a>
  404446:	ea94 0f0c 	teq	r4, ip
  40444a:	d102      	bne.n	404452 <__aeabi_dmul+0x222>
  40444c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  404450:	d113      	bne.n	40447a <__aeabi_dmul+0x24a>
  404452:	ea95 0f0c 	teq	r5, ip
  404456:	d105      	bne.n	404464 <__aeabi_dmul+0x234>
  404458:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40445c:	bf1c      	itt	ne
  40445e:	4610      	movne	r0, r2
  404460:	4619      	movne	r1, r3
  404462:	d10a      	bne.n	40447a <__aeabi_dmul+0x24a>
  404464:	ea81 0103 	eor.w	r1, r1, r3
  404468:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40446c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  404470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  404474:	f04f 0000 	mov.w	r0, #0
  404478:	bd70      	pop	{r4, r5, r6, pc}
  40447a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40447e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  404482:	bd70      	pop	{r4, r5, r6, pc}

00404484 <__aeabi_ddiv>:
  404484:	b570      	push	{r4, r5, r6, lr}
  404486:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40448a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40448e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  404492:	bf1d      	ittte	ne
  404494:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  404498:	ea94 0f0c 	teqne	r4, ip
  40449c:	ea95 0f0c 	teqne	r5, ip
  4044a0:	f000 f8a7 	bleq	4045f2 <__aeabi_ddiv+0x16e>
  4044a4:	eba4 0405 	sub.w	r4, r4, r5
  4044a8:	ea81 0e03 	eor.w	lr, r1, r3
  4044ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4044b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4044b4:	f000 8088 	beq.w	4045c8 <__aeabi_ddiv+0x144>
  4044b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4044bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4044c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4044c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4044c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4044cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4044d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4044d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4044d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4044dc:	429d      	cmp	r5, r3
  4044de:	bf08      	it	eq
  4044e0:	4296      	cmpeq	r6, r2
  4044e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4044e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4044ea:	d202      	bcs.n	4044f2 <__aeabi_ddiv+0x6e>
  4044ec:	085b      	lsrs	r3, r3, #1
  4044ee:	ea4f 0232 	mov.w	r2, r2, rrx
  4044f2:	1ab6      	subs	r6, r6, r2
  4044f4:	eb65 0503 	sbc.w	r5, r5, r3
  4044f8:	085b      	lsrs	r3, r3, #1
  4044fa:	ea4f 0232 	mov.w	r2, r2, rrx
  4044fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  404502:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  404506:	ebb6 0e02 	subs.w	lr, r6, r2
  40450a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40450e:	bf22      	ittt	cs
  404510:	1ab6      	subcs	r6, r6, r2
  404512:	4675      	movcs	r5, lr
  404514:	ea40 000c 	orrcs.w	r0, r0, ip
  404518:	085b      	lsrs	r3, r3, #1
  40451a:	ea4f 0232 	mov.w	r2, r2, rrx
  40451e:	ebb6 0e02 	subs.w	lr, r6, r2
  404522:	eb75 0e03 	sbcs.w	lr, r5, r3
  404526:	bf22      	ittt	cs
  404528:	1ab6      	subcs	r6, r6, r2
  40452a:	4675      	movcs	r5, lr
  40452c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  404530:	085b      	lsrs	r3, r3, #1
  404532:	ea4f 0232 	mov.w	r2, r2, rrx
  404536:	ebb6 0e02 	subs.w	lr, r6, r2
  40453a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40453e:	bf22      	ittt	cs
  404540:	1ab6      	subcs	r6, r6, r2
  404542:	4675      	movcs	r5, lr
  404544:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  404548:	085b      	lsrs	r3, r3, #1
  40454a:	ea4f 0232 	mov.w	r2, r2, rrx
  40454e:	ebb6 0e02 	subs.w	lr, r6, r2
  404552:	eb75 0e03 	sbcs.w	lr, r5, r3
  404556:	bf22      	ittt	cs
  404558:	1ab6      	subcs	r6, r6, r2
  40455a:	4675      	movcs	r5, lr
  40455c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  404560:	ea55 0e06 	orrs.w	lr, r5, r6
  404564:	d018      	beq.n	404598 <__aeabi_ddiv+0x114>
  404566:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40456a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40456e:	ea4f 1606 	mov.w	r6, r6, lsl #4
  404572:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  404576:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40457a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40457e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  404582:	d1c0      	bne.n	404506 <__aeabi_ddiv+0x82>
  404584:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404588:	d10b      	bne.n	4045a2 <__aeabi_ddiv+0x11e>
  40458a:	ea41 0100 	orr.w	r1, r1, r0
  40458e:	f04f 0000 	mov.w	r0, #0
  404592:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  404596:	e7b6      	b.n	404506 <__aeabi_ddiv+0x82>
  404598:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40459c:	bf04      	itt	eq
  40459e:	4301      	orreq	r1, r0
  4045a0:	2000      	moveq	r0, #0
  4045a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4045a6:	bf88      	it	hi
  4045a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4045ac:	f63f aeaf 	bhi.w	40430e <__aeabi_dmul+0xde>
  4045b0:	ebb5 0c03 	subs.w	ip, r5, r3
  4045b4:	bf04      	itt	eq
  4045b6:	ebb6 0c02 	subseq.w	ip, r6, r2
  4045ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4045be:	f150 0000 	adcs.w	r0, r0, #0
  4045c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4045c6:	bd70      	pop	{r4, r5, r6, pc}
  4045c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4045cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4045d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4045d4:	bfc2      	ittt	gt
  4045d6:	ebd4 050c 	rsbsgt	r5, r4, ip
  4045da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4045de:	bd70      	popgt	{r4, r5, r6, pc}
  4045e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4045e4:	f04f 0e00 	mov.w	lr, #0
  4045e8:	3c01      	subs	r4, #1
  4045ea:	e690      	b.n	40430e <__aeabi_dmul+0xde>
  4045ec:	ea45 0e06 	orr.w	lr, r5, r6
  4045f0:	e68d      	b.n	40430e <__aeabi_dmul+0xde>
  4045f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4045f6:	ea94 0f0c 	teq	r4, ip
  4045fa:	bf08      	it	eq
  4045fc:	ea95 0f0c 	teqeq	r5, ip
  404600:	f43f af3b 	beq.w	40447a <__aeabi_dmul+0x24a>
  404604:	ea94 0f0c 	teq	r4, ip
  404608:	d10a      	bne.n	404620 <__aeabi_ddiv+0x19c>
  40460a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40460e:	f47f af34 	bne.w	40447a <__aeabi_dmul+0x24a>
  404612:	ea95 0f0c 	teq	r5, ip
  404616:	f47f af25 	bne.w	404464 <__aeabi_dmul+0x234>
  40461a:	4610      	mov	r0, r2
  40461c:	4619      	mov	r1, r3
  40461e:	e72c      	b.n	40447a <__aeabi_dmul+0x24a>
  404620:	ea95 0f0c 	teq	r5, ip
  404624:	d106      	bne.n	404634 <__aeabi_ddiv+0x1b0>
  404626:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40462a:	f43f aefd 	beq.w	404428 <__aeabi_dmul+0x1f8>
  40462e:	4610      	mov	r0, r2
  404630:	4619      	mov	r1, r3
  404632:	e722      	b.n	40447a <__aeabi_dmul+0x24a>
  404634:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  404638:	bf18      	it	ne
  40463a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40463e:	f47f aec5 	bne.w	4043cc <__aeabi_dmul+0x19c>
  404642:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  404646:	f47f af0d 	bne.w	404464 <__aeabi_dmul+0x234>
  40464a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40464e:	f47f aeeb 	bne.w	404428 <__aeabi_dmul+0x1f8>
  404652:	e712      	b.n	40447a <__aeabi_dmul+0x24a>

00404654 <__aeabi_d2iz>:
  404654:	ea4f 0241 	mov.w	r2, r1, lsl #1
  404658:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40465c:	d215      	bcs.n	40468a <__aeabi_d2iz+0x36>
  40465e:	d511      	bpl.n	404684 <__aeabi_d2iz+0x30>
  404660:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  404664:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  404668:	d912      	bls.n	404690 <__aeabi_d2iz+0x3c>
  40466a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40466e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  404672:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  404676:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40467a:	fa23 f002 	lsr.w	r0, r3, r2
  40467e:	bf18      	it	ne
  404680:	4240      	negne	r0, r0
  404682:	4770      	bx	lr
  404684:	f04f 0000 	mov.w	r0, #0
  404688:	4770      	bx	lr
  40468a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40468e:	d105      	bne.n	40469c <__aeabi_d2iz+0x48>
  404690:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  404694:	bf08      	it	eq
  404696:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40469a:	4770      	bx	lr
  40469c:	f04f 0000 	mov.w	r0, #0
  4046a0:	4770      	bx	lr
  4046a2:	bf00      	nop

004046a4 <__libc_init_array>:
  4046a4:	b570      	push	{r4, r5, r6, lr}
  4046a6:	4e0f      	ldr	r6, [pc, #60]	; (4046e4 <__libc_init_array+0x40>)
  4046a8:	4d0f      	ldr	r5, [pc, #60]	; (4046e8 <__libc_init_array+0x44>)
  4046aa:	1b76      	subs	r6, r6, r5
  4046ac:	10b6      	asrs	r6, r6, #2
  4046ae:	bf18      	it	ne
  4046b0:	2400      	movne	r4, #0
  4046b2:	d005      	beq.n	4046c0 <__libc_init_array+0x1c>
  4046b4:	3401      	adds	r4, #1
  4046b6:	f855 3b04 	ldr.w	r3, [r5], #4
  4046ba:	4798      	blx	r3
  4046bc:	42a6      	cmp	r6, r4
  4046be:	d1f9      	bne.n	4046b4 <__libc_init_array+0x10>
  4046c0:	4e0a      	ldr	r6, [pc, #40]	; (4046ec <__libc_init_array+0x48>)
  4046c2:	4d0b      	ldr	r5, [pc, #44]	; (4046f0 <__libc_init_array+0x4c>)
  4046c4:	1b76      	subs	r6, r6, r5
  4046c6:	f006 f943 	bl	40a950 <_init>
  4046ca:	10b6      	asrs	r6, r6, #2
  4046cc:	bf18      	it	ne
  4046ce:	2400      	movne	r4, #0
  4046d0:	d006      	beq.n	4046e0 <__libc_init_array+0x3c>
  4046d2:	3401      	adds	r4, #1
  4046d4:	f855 3b04 	ldr.w	r3, [r5], #4
  4046d8:	4798      	blx	r3
  4046da:	42a6      	cmp	r6, r4
  4046dc:	d1f9      	bne.n	4046d2 <__libc_init_array+0x2e>
  4046de:	bd70      	pop	{r4, r5, r6, pc}
  4046e0:	bd70      	pop	{r4, r5, r6, pc}
  4046e2:	bf00      	nop
  4046e4:	0040a95c 	.word	0x0040a95c
  4046e8:	0040a95c 	.word	0x0040a95c
  4046ec:	0040a964 	.word	0x0040a964
  4046f0:	0040a95c 	.word	0x0040a95c

004046f4 <iprintf>:
  4046f4:	b40f      	push	{r0, r1, r2, r3}
  4046f6:	b500      	push	{lr}
  4046f8:	4907      	ldr	r1, [pc, #28]	; (404718 <iprintf+0x24>)
  4046fa:	b083      	sub	sp, #12
  4046fc:	ab04      	add	r3, sp, #16
  4046fe:	6808      	ldr	r0, [r1, #0]
  404700:	f853 2b04 	ldr.w	r2, [r3], #4
  404704:	6881      	ldr	r1, [r0, #8]
  404706:	9301      	str	r3, [sp, #4]
  404708:	f001 ffb6 	bl	406678 <_vfiprintf_r>
  40470c:	b003      	add	sp, #12
  40470e:	f85d eb04 	ldr.w	lr, [sp], #4
  404712:	b004      	add	sp, #16
  404714:	4770      	bx	lr
  404716:	bf00      	nop
  404718:	20400024 	.word	0x20400024

0040471c <malloc>:
  40471c:	4b02      	ldr	r3, [pc, #8]	; (404728 <malloc+0xc>)
  40471e:	4601      	mov	r1, r0
  404720:	6818      	ldr	r0, [r3, #0]
  404722:	f000 b80b 	b.w	40473c <_malloc_r>
  404726:	bf00      	nop
  404728:	20400024 	.word	0x20400024

0040472c <free>:
  40472c:	4b02      	ldr	r3, [pc, #8]	; (404738 <free+0xc>)
  40472e:	4601      	mov	r1, r0
  404730:	6818      	ldr	r0, [r3, #0]
  404732:	f004 b87d 	b.w	408830 <_free_r>
  404736:	bf00      	nop
  404738:	20400024 	.word	0x20400024

0040473c <_malloc_r>:
  40473c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404740:	f101 060b 	add.w	r6, r1, #11
  404744:	2e16      	cmp	r6, #22
  404746:	b083      	sub	sp, #12
  404748:	4605      	mov	r5, r0
  40474a:	f240 809e 	bls.w	40488a <_malloc_r+0x14e>
  40474e:	f036 0607 	bics.w	r6, r6, #7
  404752:	f100 80bd 	bmi.w	4048d0 <_malloc_r+0x194>
  404756:	42b1      	cmp	r1, r6
  404758:	f200 80ba 	bhi.w	4048d0 <_malloc_r+0x194>
  40475c:	f000 fb86 	bl	404e6c <__malloc_lock>
  404760:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  404764:	f0c0 8293 	bcc.w	404c8e <_malloc_r+0x552>
  404768:	0a73      	lsrs	r3, r6, #9
  40476a:	f000 80b8 	beq.w	4048de <_malloc_r+0x1a2>
  40476e:	2b04      	cmp	r3, #4
  404770:	f200 8179 	bhi.w	404a66 <_malloc_r+0x32a>
  404774:	09b3      	lsrs	r3, r6, #6
  404776:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40477a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40477e:	00c3      	lsls	r3, r0, #3
  404780:	4fbf      	ldr	r7, [pc, #764]	; (404a80 <_malloc_r+0x344>)
  404782:	443b      	add	r3, r7
  404784:	f1a3 0108 	sub.w	r1, r3, #8
  404788:	685c      	ldr	r4, [r3, #4]
  40478a:	42a1      	cmp	r1, r4
  40478c:	d106      	bne.n	40479c <_malloc_r+0x60>
  40478e:	e00c      	b.n	4047aa <_malloc_r+0x6e>
  404790:	2a00      	cmp	r2, #0
  404792:	f280 80aa 	bge.w	4048ea <_malloc_r+0x1ae>
  404796:	68e4      	ldr	r4, [r4, #12]
  404798:	42a1      	cmp	r1, r4
  40479a:	d006      	beq.n	4047aa <_malloc_r+0x6e>
  40479c:	6863      	ldr	r3, [r4, #4]
  40479e:	f023 0303 	bic.w	r3, r3, #3
  4047a2:	1b9a      	subs	r2, r3, r6
  4047a4:	2a0f      	cmp	r2, #15
  4047a6:	ddf3      	ble.n	404790 <_malloc_r+0x54>
  4047a8:	4670      	mov	r0, lr
  4047aa:	693c      	ldr	r4, [r7, #16]
  4047ac:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 404a94 <_malloc_r+0x358>
  4047b0:	4574      	cmp	r4, lr
  4047b2:	f000 81ab 	beq.w	404b0c <_malloc_r+0x3d0>
  4047b6:	6863      	ldr	r3, [r4, #4]
  4047b8:	f023 0303 	bic.w	r3, r3, #3
  4047bc:	1b9a      	subs	r2, r3, r6
  4047be:	2a0f      	cmp	r2, #15
  4047c0:	f300 8190 	bgt.w	404ae4 <_malloc_r+0x3a8>
  4047c4:	2a00      	cmp	r2, #0
  4047c6:	f8c7 e014 	str.w	lr, [r7, #20]
  4047ca:	f8c7 e010 	str.w	lr, [r7, #16]
  4047ce:	f280 809d 	bge.w	40490c <_malloc_r+0x1d0>
  4047d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4047d6:	f080 8161 	bcs.w	404a9c <_malloc_r+0x360>
  4047da:	08db      	lsrs	r3, r3, #3
  4047dc:	f103 0c01 	add.w	ip, r3, #1
  4047e0:	1099      	asrs	r1, r3, #2
  4047e2:	687a      	ldr	r2, [r7, #4]
  4047e4:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4047e8:	f8c4 8008 	str.w	r8, [r4, #8]
  4047ec:	2301      	movs	r3, #1
  4047ee:	408b      	lsls	r3, r1
  4047f0:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4047f4:	4313      	orrs	r3, r2
  4047f6:	3908      	subs	r1, #8
  4047f8:	60e1      	str	r1, [r4, #12]
  4047fa:	607b      	str	r3, [r7, #4]
  4047fc:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  404800:	f8c8 400c 	str.w	r4, [r8, #12]
  404804:	1082      	asrs	r2, r0, #2
  404806:	2401      	movs	r4, #1
  404808:	4094      	lsls	r4, r2
  40480a:	429c      	cmp	r4, r3
  40480c:	f200 808b 	bhi.w	404926 <_malloc_r+0x1ea>
  404810:	421c      	tst	r4, r3
  404812:	d106      	bne.n	404822 <_malloc_r+0xe6>
  404814:	f020 0003 	bic.w	r0, r0, #3
  404818:	0064      	lsls	r4, r4, #1
  40481a:	421c      	tst	r4, r3
  40481c:	f100 0004 	add.w	r0, r0, #4
  404820:	d0fa      	beq.n	404818 <_malloc_r+0xdc>
  404822:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  404826:	46cc      	mov	ip, r9
  404828:	4680      	mov	r8, r0
  40482a:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40482e:	459c      	cmp	ip, r3
  404830:	d107      	bne.n	404842 <_malloc_r+0x106>
  404832:	e16d      	b.n	404b10 <_malloc_r+0x3d4>
  404834:	2a00      	cmp	r2, #0
  404836:	f280 817b 	bge.w	404b30 <_malloc_r+0x3f4>
  40483a:	68db      	ldr	r3, [r3, #12]
  40483c:	459c      	cmp	ip, r3
  40483e:	f000 8167 	beq.w	404b10 <_malloc_r+0x3d4>
  404842:	6859      	ldr	r1, [r3, #4]
  404844:	f021 0103 	bic.w	r1, r1, #3
  404848:	1b8a      	subs	r2, r1, r6
  40484a:	2a0f      	cmp	r2, #15
  40484c:	ddf2      	ble.n	404834 <_malloc_r+0xf8>
  40484e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  404852:	f8d3 8008 	ldr.w	r8, [r3, #8]
  404856:	9300      	str	r3, [sp, #0]
  404858:	199c      	adds	r4, r3, r6
  40485a:	4628      	mov	r0, r5
  40485c:	f046 0601 	orr.w	r6, r6, #1
  404860:	f042 0501 	orr.w	r5, r2, #1
  404864:	605e      	str	r6, [r3, #4]
  404866:	f8c8 c00c 	str.w	ip, [r8, #12]
  40486a:	f8cc 8008 	str.w	r8, [ip, #8]
  40486e:	617c      	str	r4, [r7, #20]
  404870:	613c      	str	r4, [r7, #16]
  404872:	f8c4 e00c 	str.w	lr, [r4, #12]
  404876:	f8c4 e008 	str.w	lr, [r4, #8]
  40487a:	6065      	str	r5, [r4, #4]
  40487c:	505a      	str	r2, [r3, r1]
  40487e:	f000 fafb 	bl	404e78 <__malloc_unlock>
  404882:	9b00      	ldr	r3, [sp, #0]
  404884:	f103 0408 	add.w	r4, r3, #8
  404888:	e01e      	b.n	4048c8 <_malloc_r+0x18c>
  40488a:	2910      	cmp	r1, #16
  40488c:	d820      	bhi.n	4048d0 <_malloc_r+0x194>
  40488e:	f000 faed 	bl	404e6c <__malloc_lock>
  404892:	2610      	movs	r6, #16
  404894:	2318      	movs	r3, #24
  404896:	2002      	movs	r0, #2
  404898:	4f79      	ldr	r7, [pc, #484]	; (404a80 <_malloc_r+0x344>)
  40489a:	443b      	add	r3, r7
  40489c:	f1a3 0208 	sub.w	r2, r3, #8
  4048a0:	685c      	ldr	r4, [r3, #4]
  4048a2:	4294      	cmp	r4, r2
  4048a4:	f000 813d 	beq.w	404b22 <_malloc_r+0x3e6>
  4048a8:	6863      	ldr	r3, [r4, #4]
  4048aa:	68e1      	ldr	r1, [r4, #12]
  4048ac:	68a6      	ldr	r6, [r4, #8]
  4048ae:	f023 0303 	bic.w	r3, r3, #3
  4048b2:	4423      	add	r3, r4
  4048b4:	4628      	mov	r0, r5
  4048b6:	685a      	ldr	r2, [r3, #4]
  4048b8:	60f1      	str	r1, [r6, #12]
  4048ba:	f042 0201 	orr.w	r2, r2, #1
  4048be:	608e      	str	r6, [r1, #8]
  4048c0:	605a      	str	r2, [r3, #4]
  4048c2:	f000 fad9 	bl	404e78 <__malloc_unlock>
  4048c6:	3408      	adds	r4, #8
  4048c8:	4620      	mov	r0, r4
  4048ca:	b003      	add	sp, #12
  4048cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4048d0:	2400      	movs	r4, #0
  4048d2:	230c      	movs	r3, #12
  4048d4:	4620      	mov	r0, r4
  4048d6:	602b      	str	r3, [r5, #0]
  4048d8:	b003      	add	sp, #12
  4048da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4048de:	2040      	movs	r0, #64	; 0x40
  4048e0:	f44f 7300 	mov.w	r3, #512	; 0x200
  4048e4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4048e8:	e74a      	b.n	404780 <_malloc_r+0x44>
  4048ea:	4423      	add	r3, r4
  4048ec:	68e1      	ldr	r1, [r4, #12]
  4048ee:	685a      	ldr	r2, [r3, #4]
  4048f0:	68a6      	ldr	r6, [r4, #8]
  4048f2:	f042 0201 	orr.w	r2, r2, #1
  4048f6:	60f1      	str	r1, [r6, #12]
  4048f8:	4628      	mov	r0, r5
  4048fa:	608e      	str	r6, [r1, #8]
  4048fc:	605a      	str	r2, [r3, #4]
  4048fe:	f000 fabb 	bl	404e78 <__malloc_unlock>
  404902:	3408      	adds	r4, #8
  404904:	4620      	mov	r0, r4
  404906:	b003      	add	sp, #12
  404908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40490c:	4423      	add	r3, r4
  40490e:	4628      	mov	r0, r5
  404910:	685a      	ldr	r2, [r3, #4]
  404912:	f042 0201 	orr.w	r2, r2, #1
  404916:	605a      	str	r2, [r3, #4]
  404918:	f000 faae 	bl	404e78 <__malloc_unlock>
  40491c:	3408      	adds	r4, #8
  40491e:	4620      	mov	r0, r4
  404920:	b003      	add	sp, #12
  404922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404926:	68bc      	ldr	r4, [r7, #8]
  404928:	6863      	ldr	r3, [r4, #4]
  40492a:	f023 0803 	bic.w	r8, r3, #3
  40492e:	45b0      	cmp	r8, r6
  404930:	d304      	bcc.n	40493c <_malloc_r+0x200>
  404932:	eba8 0306 	sub.w	r3, r8, r6
  404936:	2b0f      	cmp	r3, #15
  404938:	f300 8085 	bgt.w	404a46 <_malloc_r+0x30a>
  40493c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 404a98 <_malloc_r+0x35c>
  404940:	4b50      	ldr	r3, [pc, #320]	; (404a84 <_malloc_r+0x348>)
  404942:	f8d9 2000 	ldr.w	r2, [r9]
  404946:	681b      	ldr	r3, [r3, #0]
  404948:	3201      	adds	r2, #1
  40494a:	4433      	add	r3, r6
  40494c:	eb04 0a08 	add.w	sl, r4, r8
  404950:	f000 8155 	beq.w	404bfe <_malloc_r+0x4c2>
  404954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  404958:	330f      	adds	r3, #15
  40495a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40495e:	f02b 0b0f 	bic.w	fp, fp, #15
  404962:	4659      	mov	r1, fp
  404964:	4628      	mov	r0, r5
  404966:	f000 fa8d 	bl	404e84 <_sbrk_r>
  40496a:	1c41      	adds	r1, r0, #1
  40496c:	4602      	mov	r2, r0
  40496e:	f000 80fc 	beq.w	404b6a <_malloc_r+0x42e>
  404972:	4582      	cmp	sl, r0
  404974:	f200 80f7 	bhi.w	404b66 <_malloc_r+0x42a>
  404978:	4b43      	ldr	r3, [pc, #268]	; (404a88 <_malloc_r+0x34c>)
  40497a:	6819      	ldr	r1, [r3, #0]
  40497c:	4459      	add	r1, fp
  40497e:	6019      	str	r1, [r3, #0]
  404980:	f000 814d 	beq.w	404c1e <_malloc_r+0x4e2>
  404984:	f8d9 0000 	ldr.w	r0, [r9]
  404988:	3001      	adds	r0, #1
  40498a:	bf1b      	ittet	ne
  40498c:	eba2 0a0a 	subne.w	sl, r2, sl
  404990:	4451      	addne	r1, sl
  404992:	f8c9 2000 	streq.w	r2, [r9]
  404996:	6019      	strne	r1, [r3, #0]
  404998:	f012 0107 	ands.w	r1, r2, #7
  40499c:	f000 8115 	beq.w	404bca <_malloc_r+0x48e>
  4049a0:	f1c1 0008 	rsb	r0, r1, #8
  4049a4:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4049a8:	4402      	add	r2, r0
  4049aa:	3108      	adds	r1, #8
  4049ac:	eb02 090b 	add.w	r9, r2, fp
  4049b0:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4049b4:	eba1 0909 	sub.w	r9, r1, r9
  4049b8:	4649      	mov	r1, r9
  4049ba:	4628      	mov	r0, r5
  4049bc:	9301      	str	r3, [sp, #4]
  4049be:	9200      	str	r2, [sp, #0]
  4049c0:	f000 fa60 	bl	404e84 <_sbrk_r>
  4049c4:	1c43      	adds	r3, r0, #1
  4049c6:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4049ca:	f000 8143 	beq.w	404c54 <_malloc_r+0x518>
  4049ce:	1a80      	subs	r0, r0, r2
  4049d0:	4448      	add	r0, r9
  4049d2:	f040 0001 	orr.w	r0, r0, #1
  4049d6:	6819      	ldr	r1, [r3, #0]
  4049d8:	60ba      	str	r2, [r7, #8]
  4049da:	4449      	add	r1, r9
  4049dc:	42bc      	cmp	r4, r7
  4049de:	6050      	str	r0, [r2, #4]
  4049e0:	6019      	str	r1, [r3, #0]
  4049e2:	d017      	beq.n	404a14 <_malloc_r+0x2d8>
  4049e4:	f1b8 0f0f 	cmp.w	r8, #15
  4049e8:	f240 80fb 	bls.w	404be2 <_malloc_r+0x4a6>
  4049ec:	6860      	ldr	r0, [r4, #4]
  4049ee:	f1a8 020c 	sub.w	r2, r8, #12
  4049f2:	f022 0207 	bic.w	r2, r2, #7
  4049f6:	eb04 0e02 	add.w	lr, r4, r2
  4049fa:	f000 0001 	and.w	r0, r0, #1
  4049fe:	f04f 0c05 	mov.w	ip, #5
  404a02:	4310      	orrs	r0, r2
  404a04:	2a0f      	cmp	r2, #15
  404a06:	6060      	str	r0, [r4, #4]
  404a08:	f8ce c004 	str.w	ip, [lr, #4]
  404a0c:	f8ce c008 	str.w	ip, [lr, #8]
  404a10:	f200 8117 	bhi.w	404c42 <_malloc_r+0x506>
  404a14:	4b1d      	ldr	r3, [pc, #116]	; (404a8c <_malloc_r+0x350>)
  404a16:	68bc      	ldr	r4, [r7, #8]
  404a18:	681a      	ldr	r2, [r3, #0]
  404a1a:	4291      	cmp	r1, r2
  404a1c:	bf88      	it	hi
  404a1e:	6019      	strhi	r1, [r3, #0]
  404a20:	4b1b      	ldr	r3, [pc, #108]	; (404a90 <_malloc_r+0x354>)
  404a22:	681a      	ldr	r2, [r3, #0]
  404a24:	4291      	cmp	r1, r2
  404a26:	6862      	ldr	r2, [r4, #4]
  404a28:	bf88      	it	hi
  404a2a:	6019      	strhi	r1, [r3, #0]
  404a2c:	f022 0203 	bic.w	r2, r2, #3
  404a30:	4296      	cmp	r6, r2
  404a32:	eba2 0306 	sub.w	r3, r2, r6
  404a36:	d801      	bhi.n	404a3c <_malloc_r+0x300>
  404a38:	2b0f      	cmp	r3, #15
  404a3a:	dc04      	bgt.n	404a46 <_malloc_r+0x30a>
  404a3c:	4628      	mov	r0, r5
  404a3e:	f000 fa1b 	bl	404e78 <__malloc_unlock>
  404a42:	2400      	movs	r4, #0
  404a44:	e740      	b.n	4048c8 <_malloc_r+0x18c>
  404a46:	19a2      	adds	r2, r4, r6
  404a48:	f043 0301 	orr.w	r3, r3, #1
  404a4c:	f046 0601 	orr.w	r6, r6, #1
  404a50:	6066      	str	r6, [r4, #4]
  404a52:	4628      	mov	r0, r5
  404a54:	60ba      	str	r2, [r7, #8]
  404a56:	6053      	str	r3, [r2, #4]
  404a58:	f000 fa0e 	bl	404e78 <__malloc_unlock>
  404a5c:	3408      	adds	r4, #8
  404a5e:	4620      	mov	r0, r4
  404a60:	b003      	add	sp, #12
  404a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404a66:	2b14      	cmp	r3, #20
  404a68:	d971      	bls.n	404b4e <_malloc_r+0x412>
  404a6a:	2b54      	cmp	r3, #84	; 0x54
  404a6c:	f200 80a3 	bhi.w	404bb6 <_malloc_r+0x47a>
  404a70:	0b33      	lsrs	r3, r6, #12
  404a72:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  404a76:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  404a7a:	00c3      	lsls	r3, r0, #3
  404a7c:	e680      	b.n	404780 <_malloc_r+0x44>
  404a7e:	bf00      	nop
  404a80:	20400450 	.word	0x20400450
  404a84:	20400de8 	.word	0x20400de8
  404a88:	20400db8 	.word	0x20400db8
  404a8c:	20400de0 	.word	0x20400de0
  404a90:	20400de4 	.word	0x20400de4
  404a94:	20400458 	.word	0x20400458
  404a98:	20400858 	.word	0x20400858
  404a9c:	0a5a      	lsrs	r2, r3, #9
  404a9e:	2a04      	cmp	r2, #4
  404aa0:	d95b      	bls.n	404b5a <_malloc_r+0x41e>
  404aa2:	2a14      	cmp	r2, #20
  404aa4:	f200 80ae 	bhi.w	404c04 <_malloc_r+0x4c8>
  404aa8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  404aac:	00c9      	lsls	r1, r1, #3
  404aae:	325b      	adds	r2, #91	; 0x5b
  404ab0:	eb07 0c01 	add.w	ip, r7, r1
  404ab4:	5879      	ldr	r1, [r7, r1]
  404ab6:	f1ac 0c08 	sub.w	ip, ip, #8
  404aba:	458c      	cmp	ip, r1
  404abc:	f000 8088 	beq.w	404bd0 <_malloc_r+0x494>
  404ac0:	684a      	ldr	r2, [r1, #4]
  404ac2:	f022 0203 	bic.w	r2, r2, #3
  404ac6:	4293      	cmp	r3, r2
  404ac8:	d273      	bcs.n	404bb2 <_malloc_r+0x476>
  404aca:	6889      	ldr	r1, [r1, #8]
  404acc:	458c      	cmp	ip, r1
  404ace:	d1f7      	bne.n	404ac0 <_malloc_r+0x384>
  404ad0:	f8dc 200c 	ldr.w	r2, [ip, #12]
  404ad4:	687b      	ldr	r3, [r7, #4]
  404ad6:	60e2      	str	r2, [r4, #12]
  404ad8:	f8c4 c008 	str.w	ip, [r4, #8]
  404adc:	6094      	str	r4, [r2, #8]
  404ade:	f8cc 400c 	str.w	r4, [ip, #12]
  404ae2:	e68f      	b.n	404804 <_malloc_r+0xc8>
  404ae4:	19a1      	adds	r1, r4, r6
  404ae6:	f046 0c01 	orr.w	ip, r6, #1
  404aea:	f042 0601 	orr.w	r6, r2, #1
  404aee:	f8c4 c004 	str.w	ip, [r4, #4]
  404af2:	4628      	mov	r0, r5
  404af4:	6179      	str	r1, [r7, #20]
  404af6:	6139      	str	r1, [r7, #16]
  404af8:	f8c1 e00c 	str.w	lr, [r1, #12]
  404afc:	f8c1 e008 	str.w	lr, [r1, #8]
  404b00:	604e      	str	r6, [r1, #4]
  404b02:	50e2      	str	r2, [r4, r3]
  404b04:	f000 f9b8 	bl	404e78 <__malloc_unlock>
  404b08:	3408      	adds	r4, #8
  404b0a:	e6dd      	b.n	4048c8 <_malloc_r+0x18c>
  404b0c:	687b      	ldr	r3, [r7, #4]
  404b0e:	e679      	b.n	404804 <_malloc_r+0xc8>
  404b10:	f108 0801 	add.w	r8, r8, #1
  404b14:	f018 0f03 	tst.w	r8, #3
  404b18:	f10c 0c08 	add.w	ip, ip, #8
  404b1c:	f47f ae85 	bne.w	40482a <_malloc_r+0xee>
  404b20:	e02d      	b.n	404b7e <_malloc_r+0x442>
  404b22:	68dc      	ldr	r4, [r3, #12]
  404b24:	42a3      	cmp	r3, r4
  404b26:	bf08      	it	eq
  404b28:	3002      	addeq	r0, #2
  404b2a:	f43f ae3e 	beq.w	4047aa <_malloc_r+0x6e>
  404b2e:	e6bb      	b.n	4048a8 <_malloc_r+0x16c>
  404b30:	4419      	add	r1, r3
  404b32:	461c      	mov	r4, r3
  404b34:	684a      	ldr	r2, [r1, #4]
  404b36:	68db      	ldr	r3, [r3, #12]
  404b38:	f854 6f08 	ldr.w	r6, [r4, #8]!
  404b3c:	f042 0201 	orr.w	r2, r2, #1
  404b40:	604a      	str	r2, [r1, #4]
  404b42:	4628      	mov	r0, r5
  404b44:	60f3      	str	r3, [r6, #12]
  404b46:	609e      	str	r6, [r3, #8]
  404b48:	f000 f996 	bl	404e78 <__malloc_unlock>
  404b4c:	e6bc      	b.n	4048c8 <_malloc_r+0x18c>
  404b4e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  404b52:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  404b56:	00c3      	lsls	r3, r0, #3
  404b58:	e612      	b.n	404780 <_malloc_r+0x44>
  404b5a:	099a      	lsrs	r2, r3, #6
  404b5c:	f102 0139 	add.w	r1, r2, #57	; 0x39
  404b60:	00c9      	lsls	r1, r1, #3
  404b62:	3238      	adds	r2, #56	; 0x38
  404b64:	e7a4      	b.n	404ab0 <_malloc_r+0x374>
  404b66:	42bc      	cmp	r4, r7
  404b68:	d054      	beq.n	404c14 <_malloc_r+0x4d8>
  404b6a:	68bc      	ldr	r4, [r7, #8]
  404b6c:	6862      	ldr	r2, [r4, #4]
  404b6e:	f022 0203 	bic.w	r2, r2, #3
  404b72:	e75d      	b.n	404a30 <_malloc_r+0x2f4>
  404b74:	f859 3908 	ldr.w	r3, [r9], #-8
  404b78:	4599      	cmp	r9, r3
  404b7a:	f040 8086 	bne.w	404c8a <_malloc_r+0x54e>
  404b7e:	f010 0f03 	tst.w	r0, #3
  404b82:	f100 30ff 	add.w	r0, r0, #4294967295
  404b86:	d1f5      	bne.n	404b74 <_malloc_r+0x438>
  404b88:	687b      	ldr	r3, [r7, #4]
  404b8a:	ea23 0304 	bic.w	r3, r3, r4
  404b8e:	607b      	str	r3, [r7, #4]
  404b90:	0064      	lsls	r4, r4, #1
  404b92:	429c      	cmp	r4, r3
  404b94:	f63f aec7 	bhi.w	404926 <_malloc_r+0x1ea>
  404b98:	2c00      	cmp	r4, #0
  404b9a:	f43f aec4 	beq.w	404926 <_malloc_r+0x1ea>
  404b9e:	421c      	tst	r4, r3
  404ba0:	4640      	mov	r0, r8
  404ba2:	f47f ae3e 	bne.w	404822 <_malloc_r+0xe6>
  404ba6:	0064      	lsls	r4, r4, #1
  404ba8:	421c      	tst	r4, r3
  404baa:	f100 0004 	add.w	r0, r0, #4
  404bae:	d0fa      	beq.n	404ba6 <_malloc_r+0x46a>
  404bb0:	e637      	b.n	404822 <_malloc_r+0xe6>
  404bb2:	468c      	mov	ip, r1
  404bb4:	e78c      	b.n	404ad0 <_malloc_r+0x394>
  404bb6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  404bba:	d815      	bhi.n	404be8 <_malloc_r+0x4ac>
  404bbc:	0bf3      	lsrs	r3, r6, #15
  404bbe:	f103 0078 	add.w	r0, r3, #120	; 0x78
  404bc2:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  404bc6:	00c3      	lsls	r3, r0, #3
  404bc8:	e5da      	b.n	404780 <_malloc_r+0x44>
  404bca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  404bce:	e6ed      	b.n	4049ac <_malloc_r+0x270>
  404bd0:	687b      	ldr	r3, [r7, #4]
  404bd2:	1092      	asrs	r2, r2, #2
  404bd4:	2101      	movs	r1, #1
  404bd6:	fa01 f202 	lsl.w	r2, r1, r2
  404bda:	4313      	orrs	r3, r2
  404bdc:	607b      	str	r3, [r7, #4]
  404bde:	4662      	mov	r2, ip
  404be0:	e779      	b.n	404ad6 <_malloc_r+0x39a>
  404be2:	2301      	movs	r3, #1
  404be4:	6053      	str	r3, [r2, #4]
  404be6:	e729      	b.n	404a3c <_malloc_r+0x300>
  404be8:	f240 5254 	movw	r2, #1364	; 0x554
  404bec:	4293      	cmp	r3, r2
  404bee:	d822      	bhi.n	404c36 <_malloc_r+0x4fa>
  404bf0:	0cb3      	lsrs	r3, r6, #18
  404bf2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  404bf6:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  404bfa:	00c3      	lsls	r3, r0, #3
  404bfc:	e5c0      	b.n	404780 <_malloc_r+0x44>
  404bfe:	f103 0b10 	add.w	fp, r3, #16
  404c02:	e6ae      	b.n	404962 <_malloc_r+0x226>
  404c04:	2a54      	cmp	r2, #84	; 0x54
  404c06:	d829      	bhi.n	404c5c <_malloc_r+0x520>
  404c08:	0b1a      	lsrs	r2, r3, #12
  404c0a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  404c0e:	00c9      	lsls	r1, r1, #3
  404c10:	326e      	adds	r2, #110	; 0x6e
  404c12:	e74d      	b.n	404ab0 <_malloc_r+0x374>
  404c14:	4b20      	ldr	r3, [pc, #128]	; (404c98 <_malloc_r+0x55c>)
  404c16:	6819      	ldr	r1, [r3, #0]
  404c18:	4459      	add	r1, fp
  404c1a:	6019      	str	r1, [r3, #0]
  404c1c:	e6b2      	b.n	404984 <_malloc_r+0x248>
  404c1e:	f3ca 000b 	ubfx	r0, sl, #0, #12
  404c22:	2800      	cmp	r0, #0
  404c24:	f47f aeae 	bne.w	404984 <_malloc_r+0x248>
  404c28:	eb08 030b 	add.w	r3, r8, fp
  404c2c:	68ba      	ldr	r2, [r7, #8]
  404c2e:	f043 0301 	orr.w	r3, r3, #1
  404c32:	6053      	str	r3, [r2, #4]
  404c34:	e6ee      	b.n	404a14 <_malloc_r+0x2d8>
  404c36:	207f      	movs	r0, #127	; 0x7f
  404c38:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  404c3c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  404c40:	e59e      	b.n	404780 <_malloc_r+0x44>
  404c42:	f104 0108 	add.w	r1, r4, #8
  404c46:	4628      	mov	r0, r5
  404c48:	9300      	str	r3, [sp, #0]
  404c4a:	f003 fdf1 	bl	408830 <_free_r>
  404c4e:	9b00      	ldr	r3, [sp, #0]
  404c50:	6819      	ldr	r1, [r3, #0]
  404c52:	e6df      	b.n	404a14 <_malloc_r+0x2d8>
  404c54:	2001      	movs	r0, #1
  404c56:	f04f 0900 	mov.w	r9, #0
  404c5a:	e6bc      	b.n	4049d6 <_malloc_r+0x29a>
  404c5c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404c60:	d805      	bhi.n	404c6e <_malloc_r+0x532>
  404c62:	0bda      	lsrs	r2, r3, #15
  404c64:	f102 0178 	add.w	r1, r2, #120	; 0x78
  404c68:	00c9      	lsls	r1, r1, #3
  404c6a:	3277      	adds	r2, #119	; 0x77
  404c6c:	e720      	b.n	404ab0 <_malloc_r+0x374>
  404c6e:	f240 5154 	movw	r1, #1364	; 0x554
  404c72:	428a      	cmp	r2, r1
  404c74:	d805      	bhi.n	404c82 <_malloc_r+0x546>
  404c76:	0c9a      	lsrs	r2, r3, #18
  404c78:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  404c7c:	00c9      	lsls	r1, r1, #3
  404c7e:	327c      	adds	r2, #124	; 0x7c
  404c80:	e716      	b.n	404ab0 <_malloc_r+0x374>
  404c82:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  404c86:	227e      	movs	r2, #126	; 0x7e
  404c88:	e712      	b.n	404ab0 <_malloc_r+0x374>
  404c8a:	687b      	ldr	r3, [r7, #4]
  404c8c:	e780      	b.n	404b90 <_malloc_r+0x454>
  404c8e:	08f0      	lsrs	r0, r6, #3
  404c90:	f106 0308 	add.w	r3, r6, #8
  404c94:	e600      	b.n	404898 <_malloc_r+0x15c>
  404c96:	bf00      	nop
  404c98:	20400db8 	.word	0x20400db8

00404c9c <memcpy>:
  404c9c:	4684      	mov	ip, r0
  404c9e:	ea41 0300 	orr.w	r3, r1, r0
  404ca2:	f013 0303 	ands.w	r3, r3, #3
  404ca6:	d16d      	bne.n	404d84 <memcpy+0xe8>
  404ca8:	3a40      	subs	r2, #64	; 0x40
  404caa:	d341      	bcc.n	404d30 <memcpy+0x94>
  404cac:	f851 3b04 	ldr.w	r3, [r1], #4
  404cb0:	f840 3b04 	str.w	r3, [r0], #4
  404cb4:	f851 3b04 	ldr.w	r3, [r1], #4
  404cb8:	f840 3b04 	str.w	r3, [r0], #4
  404cbc:	f851 3b04 	ldr.w	r3, [r1], #4
  404cc0:	f840 3b04 	str.w	r3, [r0], #4
  404cc4:	f851 3b04 	ldr.w	r3, [r1], #4
  404cc8:	f840 3b04 	str.w	r3, [r0], #4
  404ccc:	f851 3b04 	ldr.w	r3, [r1], #4
  404cd0:	f840 3b04 	str.w	r3, [r0], #4
  404cd4:	f851 3b04 	ldr.w	r3, [r1], #4
  404cd8:	f840 3b04 	str.w	r3, [r0], #4
  404cdc:	f851 3b04 	ldr.w	r3, [r1], #4
  404ce0:	f840 3b04 	str.w	r3, [r0], #4
  404ce4:	f851 3b04 	ldr.w	r3, [r1], #4
  404ce8:	f840 3b04 	str.w	r3, [r0], #4
  404cec:	f851 3b04 	ldr.w	r3, [r1], #4
  404cf0:	f840 3b04 	str.w	r3, [r0], #4
  404cf4:	f851 3b04 	ldr.w	r3, [r1], #4
  404cf8:	f840 3b04 	str.w	r3, [r0], #4
  404cfc:	f851 3b04 	ldr.w	r3, [r1], #4
  404d00:	f840 3b04 	str.w	r3, [r0], #4
  404d04:	f851 3b04 	ldr.w	r3, [r1], #4
  404d08:	f840 3b04 	str.w	r3, [r0], #4
  404d0c:	f851 3b04 	ldr.w	r3, [r1], #4
  404d10:	f840 3b04 	str.w	r3, [r0], #4
  404d14:	f851 3b04 	ldr.w	r3, [r1], #4
  404d18:	f840 3b04 	str.w	r3, [r0], #4
  404d1c:	f851 3b04 	ldr.w	r3, [r1], #4
  404d20:	f840 3b04 	str.w	r3, [r0], #4
  404d24:	f851 3b04 	ldr.w	r3, [r1], #4
  404d28:	f840 3b04 	str.w	r3, [r0], #4
  404d2c:	3a40      	subs	r2, #64	; 0x40
  404d2e:	d2bd      	bcs.n	404cac <memcpy+0x10>
  404d30:	3230      	adds	r2, #48	; 0x30
  404d32:	d311      	bcc.n	404d58 <memcpy+0xbc>
  404d34:	f851 3b04 	ldr.w	r3, [r1], #4
  404d38:	f840 3b04 	str.w	r3, [r0], #4
  404d3c:	f851 3b04 	ldr.w	r3, [r1], #4
  404d40:	f840 3b04 	str.w	r3, [r0], #4
  404d44:	f851 3b04 	ldr.w	r3, [r1], #4
  404d48:	f840 3b04 	str.w	r3, [r0], #4
  404d4c:	f851 3b04 	ldr.w	r3, [r1], #4
  404d50:	f840 3b04 	str.w	r3, [r0], #4
  404d54:	3a10      	subs	r2, #16
  404d56:	d2ed      	bcs.n	404d34 <memcpy+0x98>
  404d58:	320c      	adds	r2, #12
  404d5a:	d305      	bcc.n	404d68 <memcpy+0xcc>
  404d5c:	f851 3b04 	ldr.w	r3, [r1], #4
  404d60:	f840 3b04 	str.w	r3, [r0], #4
  404d64:	3a04      	subs	r2, #4
  404d66:	d2f9      	bcs.n	404d5c <memcpy+0xc0>
  404d68:	3204      	adds	r2, #4
  404d6a:	d008      	beq.n	404d7e <memcpy+0xe2>
  404d6c:	07d2      	lsls	r2, r2, #31
  404d6e:	bf1c      	itt	ne
  404d70:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404d74:	f800 3b01 	strbne.w	r3, [r0], #1
  404d78:	d301      	bcc.n	404d7e <memcpy+0xe2>
  404d7a:	880b      	ldrh	r3, [r1, #0]
  404d7c:	8003      	strh	r3, [r0, #0]
  404d7e:	4660      	mov	r0, ip
  404d80:	4770      	bx	lr
  404d82:	bf00      	nop
  404d84:	2a08      	cmp	r2, #8
  404d86:	d313      	bcc.n	404db0 <memcpy+0x114>
  404d88:	078b      	lsls	r3, r1, #30
  404d8a:	d08d      	beq.n	404ca8 <memcpy+0xc>
  404d8c:	f010 0303 	ands.w	r3, r0, #3
  404d90:	d08a      	beq.n	404ca8 <memcpy+0xc>
  404d92:	f1c3 0304 	rsb	r3, r3, #4
  404d96:	1ad2      	subs	r2, r2, r3
  404d98:	07db      	lsls	r3, r3, #31
  404d9a:	bf1c      	itt	ne
  404d9c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404da0:	f800 3b01 	strbne.w	r3, [r0], #1
  404da4:	d380      	bcc.n	404ca8 <memcpy+0xc>
  404da6:	f831 3b02 	ldrh.w	r3, [r1], #2
  404daa:	f820 3b02 	strh.w	r3, [r0], #2
  404dae:	e77b      	b.n	404ca8 <memcpy+0xc>
  404db0:	3a04      	subs	r2, #4
  404db2:	d3d9      	bcc.n	404d68 <memcpy+0xcc>
  404db4:	3a01      	subs	r2, #1
  404db6:	f811 3b01 	ldrb.w	r3, [r1], #1
  404dba:	f800 3b01 	strb.w	r3, [r0], #1
  404dbe:	d2f9      	bcs.n	404db4 <memcpy+0x118>
  404dc0:	780b      	ldrb	r3, [r1, #0]
  404dc2:	7003      	strb	r3, [r0, #0]
  404dc4:	784b      	ldrb	r3, [r1, #1]
  404dc6:	7043      	strb	r3, [r0, #1]
  404dc8:	788b      	ldrb	r3, [r1, #2]
  404dca:	7083      	strb	r3, [r0, #2]
  404dcc:	4660      	mov	r0, ip
  404dce:	4770      	bx	lr

00404dd0 <memset>:
  404dd0:	b470      	push	{r4, r5, r6}
  404dd2:	0786      	lsls	r6, r0, #30
  404dd4:	d046      	beq.n	404e64 <memset+0x94>
  404dd6:	1e54      	subs	r4, r2, #1
  404dd8:	2a00      	cmp	r2, #0
  404dda:	d041      	beq.n	404e60 <memset+0x90>
  404ddc:	b2ca      	uxtb	r2, r1
  404dde:	4603      	mov	r3, r0
  404de0:	e002      	b.n	404de8 <memset+0x18>
  404de2:	f114 34ff 	adds.w	r4, r4, #4294967295
  404de6:	d33b      	bcc.n	404e60 <memset+0x90>
  404de8:	f803 2b01 	strb.w	r2, [r3], #1
  404dec:	079d      	lsls	r5, r3, #30
  404dee:	d1f8      	bne.n	404de2 <memset+0x12>
  404df0:	2c03      	cmp	r4, #3
  404df2:	d92e      	bls.n	404e52 <memset+0x82>
  404df4:	b2cd      	uxtb	r5, r1
  404df6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  404dfa:	2c0f      	cmp	r4, #15
  404dfc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  404e00:	d919      	bls.n	404e36 <memset+0x66>
  404e02:	f103 0210 	add.w	r2, r3, #16
  404e06:	4626      	mov	r6, r4
  404e08:	3e10      	subs	r6, #16
  404e0a:	2e0f      	cmp	r6, #15
  404e0c:	f842 5c10 	str.w	r5, [r2, #-16]
  404e10:	f842 5c0c 	str.w	r5, [r2, #-12]
  404e14:	f842 5c08 	str.w	r5, [r2, #-8]
  404e18:	f842 5c04 	str.w	r5, [r2, #-4]
  404e1c:	f102 0210 	add.w	r2, r2, #16
  404e20:	d8f2      	bhi.n	404e08 <memset+0x38>
  404e22:	f1a4 0210 	sub.w	r2, r4, #16
  404e26:	f022 020f 	bic.w	r2, r2, #15
  404e2a:	f004 040f 	and.w	r4, r4, #15
  404e2e:	3210      	adds	r2, #16
  404e30:	2c03      	cmp	r4, #3
  404e32:	4413      	add	r3, r2
  404e34:	d90d      	bls.n	404e52 <memset+0x82>
  404e36:	461e      	mov	r6, r3
  404e38:	4622      	mov	r2, r4
  404e3a:	3a04      	subs	r2, #4
  404e3c:	2a03      	cmp	r2, #3
  404e3e:	f846 5b04 	str.w	r5, [r6], #4
  404e42:	d8fa      	bhi.n	404e3a <memset+0x6a>
  404e44:	1f22      	subs	r2, r4, #4
  404e46:	f022 0203 	bic.w	r2, r2, #3
  404e4a:	3204      	adds	r2, #4
  404e4c:	4413      	add	r3, r2
  404e4e:	f004 0403 	and.w	r4, r4, #3
  404e52:	b12c      	cbz	r4, 404e60 <memset+0x90>
  404e54:	b2c9      	uxtb	r1, r1
  404e56:	441c      	add	r4, r3
  404e58:	f803 1b01 	strb.w	r1, [r3], #1
  404e5c:	429c      	cmp	r4, r3
  404e5e:	d1fb      	bne.n	404e58 <memset+0x88>
  404e60:	bc70      	pop	{r4, r5, r6}
  404e62:	4770      	bx	lr
  404e64:	4614      	mov	r4, r2
  404e66:	4603      	mov	r3, r0
  404e68:	e7c2      	b.n	404df0 <memset+0x20>
  404e6a:	bf00      	nop

00404e6c <__malloc_lock>:
  404e6c:	4801      	ldr	r0, [pc, #4]	; (404e74 <__malloc_lock+0x8>)
  404e6e:	f003 bf87 	b.w	408d80 <__retarget_lock_acquire_recursive>
  404e72:	bf00      	nop
  404e74:	20400ed0 	.word	0x20400ed0

00404e78 <__malloc_unlock>:
  404e78:	4801      	ldr	r0, [pc, #4]	; (404e80 <__malloc_unlock+0x8>)
  404e7a:	f003 bf83 	b.w	408d84 <__retarget_lock_release_recursive>
  404e7e:	bf00      	nop
  404e80:	20400ed0 	.word	0x20400ed0

00404e84 <_sbrk_r>:
  404e84:	b538      	push	{r3, r4, r5, lr}
  404e86:	4c07      	ldr	r4, [pc, #28]	; (404ea4 <_sbrk_r+0x20>)
  404e88:	2300      	movs	r3, #0
  404e8a:	4605      	mov	r5, r0
  404e8c:	4608      	mov	r0, r1
  404e8e:	6023      	str	r3, [r4, #0]
  404e90:	f7fc fe46 	bl	401b20 <_sbrk>
  404e94:	1c43      	adds	r3, r0, #1
  404e96:	d000      	beq.n	404e9a <_sbrk_r+0x16>
  404e98:	bd38      	pop	{r3, r4, r5, pc}
  404e9a:	6823      	ldr	r3, [r4, #0]
  404e9c:	2b00      	cmp	r3, #0
  404e9e:	d0fb      	beq.n	404e98 <_sbrk_r+0x14>
  404ea0:	602b      	str	r3, [r5, #0]
  404ea2:	bd38      	pop	{r3, r4, r5, pc}
  404ea4:	20400ee4 	.word	0x20400ee4

00404ea8 <setbuf>:
  404ea8:	2900      	cmp	r1, #0
  404eaa:	bf0c      	ite	eq
  404eac:	2202      	moveq	r2, #2
  404eae:	2200      	movne	r2, #0
  404eb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404eb4:	f000 b800 	b.w	404eb8 <setvbuf>

00404eb8 <setvbuf>:
  404eb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  404ebc:	4c61      	ldr	r4, [pc, #388]	; (405044 <setvbuf+0x18c>)
  404ebe:	6825      	ldr	r5, [r4, #0]
  404ec0:	b083      	sub	sp, #12
  404ec2:	4604      	mov	r4, r0
  404ec4:	460f      	mov	r7, r1
  404ec6:	4690      	mov	r8, r2
  404ec8:	461e      	mov	r6, r3
  404eca:	b115      	cbz	r5, 404ed2 <setvbuf+0x1a>
  404ecc:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404ece:	2b00      	cmp	r3, #0
  404ed0:	d064      	beq.n	404f9c <setvbuf+0xe4>
  404ed2:	f1b8 0f02 	cmp.w	r8, #2
  404ed6:	d006      	beq.n	404ee6 <setvbuf+0x2e>
  404ed8:	f1b8 0f01 	cmp.w	r8, #1
  404edc:	f200 809f 	bhi.w	40501e <setvbuf+0x166>
  404ee0:	2e00      	cmp	r6, #0
  404ee2:	f2c0 809c 	blt.w	40501e <setvbuf+0x166>
  404ee6:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404ee8:	07d8      	lsls	r0, r3, #31
  404eea:	d534      	bpl.n	404f56 <setvbuf+0x9e>
  404eec:	4621      	mov	r1, r4
  404eee:	4628      	mov	r0, r5
  404ef0:	f003 fb20 	bl	408534 <_fflush_r>
  404ef4:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404ef6:	b141      	cbz	r1, 404f0a <setvbuf+0x52>
  404ef8:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404efc:	4299      	cmp	r1, r3
  404efe:	d002      	beq.n	404f06 <setvbuf+0x4e>
  404f00:	4628      	mov	r0, r5
  404f02:	f003 fc95 	bl	408830 <_free_r>
  404f06:	2300      	movs	r3, #0
  404f08:	6323      	str	r3, [r4, #48]	; 0x30
  404f0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404f0e:	2200      	movs	r2, #0
  404f10:	61a2      	str	r2, [r4, #24]
  404f12:	6062      	str	r2, [r4, #4]
  404f14:	061a      	lsls	r2, r3, #24
  404f16:	d43a      	bmi.n	404f8e <setvbuf+0xd6>
  404f18:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  404f1c:	f023 0303 	bic.w	r3, r3, #3
  404f20:	f1b8 0f02 	cmp.w	r8, #2
  404f24:	81a3      	strh	r3, [r4, #12]
  404f26:	d01d      	beq.n	404f64 <setvbuf+0xac>
  404f28:	ab01      	add	r3, sp, #4
  404f2a:	466a      	mov	r2, sp
  404f2c:	4621      	mov	r1, r4
  404f2e:	4628      	mov	r0, r5
  404f30:	f003 ff2a 	bl	408d88 <__swhatbuf_r>
  404f34:	89a3      	ldrh	r3, [r4, #12]
  404f36:	4318      	orrs	r0, r3
  404f38:	81a0      	strh	r0, [r4, #12]
  404f3a:	2e00      	cmp	r6, #0
  404f3c:	d132      	bne.n	404fa4 <setvbuf+0xec>
  404f3e:	9e00      	ldr	r6, [sp, #0]
  404f40:	4630      	mov	r0, r6
  404f42:	f7ff fbeb 	bl	40471c <malloc>
  404f46:	4607      	mov	r7, r0
  404f48:	2800      	cmp	r0, #0
  404f4a:	d06b      	beq.n	405024 <setvbuf+0x16c>
  404f4c:	89a3      	ldrh	r3, [r4, #12]
  404f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404f52:	81a3      	strh	r3, [r4, #12]
  404f54:	e028      	b.n	404fa8 <setvbuf+0xf0>
  404f56:	89a3      	ldrh	r3, [r4, #12]
  404f58:	0599      	lsls	r1, r3, #22
  404f5a:	d4c7      	bmi.n	404eec <setvbuf+0x34>
  404f5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404f5e:	f003 ff0f 	bl	408d80 <__retarget_lock_acquire_recursive>
  404f62:	e7c3      	b.n	404eec <setvbuf+0x34>
  404f64:	2500      	movs	r5, #0
  404f66:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404f68:	2600      	movs	r6, #0
  404f6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  404f6e:	f043 0302 	orr.w	r3, r3, #2
  404f72:	2001      	movs	r0, #1
  404f74:	60a6      	str	r6, [r4, #8]
  404f76:	07ce      	lsls	r6, r1, #31
  404f78:	81a3      	strh	r3, [r4, #12]
  404f7a:	6022      	str	r2, [r4, #0]
  404f7c:	6122      	str	r2, [r4, #16]
  404f7e:	6160      	str	r0, [r4, #20]
  404f80:	d401      	bmi.n	404f86 <setvbuf+0xce>
  404f82:	0598      	lsls	r0, r3, #22
  404f84:	d53e      	bpl.n	405004 <setvbuf+0x14c>
  404f86:	4628      	mov	r0, r5
  404f88:	b003      	add	sp, #12
  404f8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404f8e:	6921      	ldr	r1, [r4, #16]
  404f90:	4628      	mov	r0, r5
  404f92:	f003 fc4d 	bl	408830 <_free_r>
  404f96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404f9a:	e7bd      	b.n	404f18 <setvbuf+0x60>
  404f9c:	4628      	mov	r0, r5
  404f9e:	f003 fb21 	bl	4085e4 <__sinit>
  404fa2:	e796      	b.n	404ed2 <setvbuf+0x1a>
  404fa4:	2f00      	cmp	r7, #0
  404fa6:	d0cb      	beq.n	404f40 <setvbuf+0x88>
  404fa8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404faa:	2b00      	cmp	r3, #0
  404fac:	d033      	beq.n	405016 <setvbuf+0x15e>
  404fae:	9b00      	ldr	r3, [sp, #0]
  404fb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404fb4:	6027      	str	r7, [r4, #0]
  404fb6:	429e      	cmp	r6, r3
  404fb8:	bf1c      	itt	ne
  404fba:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  404fbe:	81a2      	strhne	r2, [r4, #12]
  404fc0:	f1b8 0f01 	cmp.w	r8, #1
  404fc4:	bf04      	itt	eq
  404fc6:	f042 0201 	orreq.w	r2, r2, #1
  404fca:	81a2      	strheq	r2, [r4, #12]
  404fcc:	b292      	uxth	r2, r2
  404fce:	f012 0308 	ands.w	r3, r2, #8
  404fd2:	6127      	str	r7, [r4, #16]
  404fd4:	6166      	str	r6, [r4, #20]
  404fd6:	d00e      	beq.n	404ff6 <setvbuf+0x13e>
  404fd8:	07d1      	lsls	r1, r2, #31
  404fda:	d51a      	bpl.n	405012 <setvbuf+0x15a>
  404fdc:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404fde:	4276      	negs	r6, r6
  404fe0:	2300      	movs	r3, #0
  404fe2:	f015 0501 	ands.w	r5, r5, #1
  404fe6:	61a6      	str	r6, [r4, #24]
  404fe8:	60a3      	str	r3, [r4, #8]
  404fea:	d009      	beq.n	405000 <setvbuf+0x148>
  404fec:	2500      	movs	r5, #0
  404fee:	4628      	mov	r0, r5
  404ff0:	b003      	add	sp, #12
  404ff2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404ff6:	60a3      	str	r3, [r4, #8]
  404ff8:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404ffa:	f015 0501 	ands.w	r5, r5, #1
  404ffe:	d1f5      	bne.n	404fec <setvbuf+0x134>
  405000:	0593      	lsls	r3, r2, #22
  405002:	d4c0      	bmi.n	404f86 <setvbuf+0xce>
  405004:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405006:	f003 febd 	bl	408d84 <__retarget_lock_release_recursive>
  40500a:	4628      	mov	r0, r5
  40500c:	b003      	add	sp, #12
  40500e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  405012:	60a6      	str	r6, [r4, #8]
  405014:	e7f0      	b.n	404ff8 <setvbuf+0x140>
  405016:	4628      	mov	r0, r5
  405018:	f003 fae4 	bl	4085e4 <__sinit>
  40501c:	e7c7      	b.n	404fae <setvbuf+0xf6>
  40501e:	f04f 35ff 	mov.w	r5, #4294967295
  405022:	e7b0      	b.n	404f86 <setvbuf+0xce>
  405024:	f8dd 9000 	ldr.w	r9, [sp]
  405028:	45b1      	cmp	r9, r6
  40502a:	d004      	beq.n	405036 <setvbuf+0x17e>
  40502c:	4648      	mov	r0, r9
  40502e:	f7ff fb75 	bl	40471c <malloc>
  405032:	4607      	mov	r7, r0
  405034:	b920      	cbnz	r0, 405040 <setvbuf+0x188>
  405036:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40503a:	f04f 35ff 	mov.w	r5, #4294967295
  40503e:	e792      	b.n	404f66 <setvbuf+0xae>
  405040:	464e      	mov	r6, r9
  405042:	e783      	b.n	404f4c <setvbuf+0x94>
  405044:	20400024 	.word	0x20400024

00405048 <sprintf>:
  405048:	b40e      	push	{r1, r2, r3}
  40504a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40504c:	b09c      	sub	sp, #112	; 0x70
  40504e:	ab21      	add	r3, sp, #132	; 0x84
  405050:	490f      	ldr	r1, [pc, #60]	; (405090 <sprintf+0x48>)
  405052:	f853 2b04 	ldr.w	r2, [r3], #4
  405056:	9301      	str	r3, [sp, #4]
  405058:	4605      	mov	r5, r0
  40505a:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  40505e:	6808      	ldr	r0, [r1, #0]
  405060:	9502      	str	r5, [sp, #8]
  405062:	f44f 7702 	mov.w	r7, #520	; 0x208
  405066:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40506a:	a902      	add	r1, sp, #8
  40506c:	9506      	str	r5, [sp, #24]
  40506e:	f8ad 7014 	strh.w	r7, [sp, #20]
  405072:	9404      	str	r4, [sp, #16]
  405074:	9407      	str	r4, [sp, #28]
  405076:	f8ad 6016 	strh.w	r6, [sp, #22]
  40507a:	f000 f88f 	bl	40519c <_svfprintf_r>
  40507e:	9b02      	ldr	r3, [sp, #8]
  405080:	2200      	movs	r2, #0
  405082:	701a      	strb	r2, [r3, #0]
  405084:	b01c      	add	sp, #112	; 0x70
  405086:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40508a:	b003      	add	sp, #12
  40508c:	4770      	bx	lr
  40508e:	bf00      	nop
  405090:	20400024 	.word	0x20400024
	...

004050c0 <strlen>:
  4050c0:	f890 f000 	pld	[r0]
  4050c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4050c8:	f020 0107 	bic.w	r1, r0, #7
  4050cc:	f06f 0c00 	mvn.w	ip, #0
  4050d0:	f010 0407 	ands.w	r4, r0, #7
  4050d4:	f891 f020 	pld	[r1, #32]
  4050d8:	f040 8049 	bne.w	40516e <strlen+0xae>
  4050dc:	f04f 0400 	mov.w	r4, #0
  4050e0:	f06f 0007 	mvn.w	r0, #7
  4050e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4050e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4050ec:	f100 0008 	add.w	r0, r0, #8
  4050f0:	fa82 f24c 	uadd8	r2, r2, ip
  4050f4:	faa4 f28c 	sel	r2, r4, ip
  4050f8:	fa83 f34c 	uadd8	r3, r3, ip
  4050fc:	faa2 f38c 	sel	r3, r2, ip
  405100:	bb4b      	cbnz	r3, 405156 <strlen+0x96>
  405102:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  405106:	fa82 f24c 	uadd8	r2, r2, ip
  40510a:	f100 0008 	add.w	r0, r0, #8
  40510e:	faa4 f28c 	sel	r2, r4, ip
  405112:	fa83 f34c 	uadd8	r3, r3, ip
  405116:	faa2 f38c 	sel	r3, r2, ip
  40511a:	b9e3      	cbnz	r3, 405156 <strlen+0x96>
  40511c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  405120:	fa82 f24c 	uadd8	r2, r2, ip
  405124:	f100 0008 	add.w	r0, r0, #8
  405128:	faa4 f28c 	sel	r2, r4, ip
  40512c:	fa83 f34c 	uadd8	r3, r3, ip
  405130:	faa2 f38c 	sel	r3, r2, ip
  405134:	b97b      	cbnz	r3, 405156 <strlen+0x96>
  405136:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40513a:	f101 0120 	add.w	r1, r1, #32
  40513e:	fa82 f24c 	uadd8	r2, r2, ip
  405142:	f100 0008 	add.w	r0, r0, #8
  405146:	faa4 f28c 	sel	r2, r4, ip
  40514a:	fa83 f34c 	uadd8	r3, r3, ip
  40514e:	faa2 f38c 	sel	r3, r2, ip
  405152:	2b00      	cmp	r3, #0
  405154:	d0c6      	beq.n	4050e4 <strlen+0x24>
  405156:	2a00      	cmp	r2, #0
  405158:	bf04      	itt	eq
  40515a:	3004      	addeq	r0, #4
  40515c:	461a      	moveq	r2, r3
  40515e:	ba12      	rev	r2, r2
  405160:	fab2 f282 	clz	r2, r2
  405164:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  405168:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40516c:	4770      	bx	lr
  40516e:	e9d1 2300 	ldrd	r2, r3, [r1]
  405172:	f004 0503 	and.w	r5, r4, #3
  405176:	f1c4 0000 	rsb	r0, r4, #0
  40517a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40517e:	f014 0f04 	tst.w	r4, #4
  405182:	f891 f040 	pld	[r1, #64]	; 0x40
  405186:	fa0c f505 	lsl.w	r5, ip, r5
  40518a:	ea62 0205 	orn	r2, r2, r5
  40518e:	bf1c      	itt	ne
  405190:	ea63 0305 	ornne	r3, r3, r5
  405194:	4662      	movne	r2, ip
  405196:	f04f 0400 	mov.w	r4, #0
  40519a:	e7a9      	b.n	4050f0 <strlen+0x30>

0040519c <_svfprintf_r>:
  40519c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4051a0:	b0c3      	sub	sp, #268	; 0x10c
  4051a2:	460c      	mov	r4, r1
  4051a4:	910b      	str	r1, [sp, #44]	; 0x2c
  4051a6:	4692      	mov	sl, r2
  4051a8:	930f      	str	r3, [sp, #60]	; 0x3c
  4051aa:	900c      	str	r0, [sp, #48]	; 0x30
  4051ac:	f003 fdd6 	bl	408d5c <_localeconv_r>
  4051b0:	6803      	ldr	r3, [r0, #0]
  4051b2:	931a      	str	r3, [sp, #104]	; 0x68
  4051b4:	4618      	mov	r0, r3
  4051b6:	f7ff ff83 	bl	4050c0 <strlen>
  4051ba:	89a3      	ldrh	r3, [r4, #12]
  4051bc:	9019      	str	r0, [sp, #100]	; 0x64
  4051be:	0619      	lsls	r1, r3, #24
  4051c0:	d503      	bpl.n	4051ca <_svfprintf_r+0x2e>
  4051c2:	6923      	ldr	r3, [r4, #16]
  4051c4:	2b00      	cmp	r3, #0
  4051c6:	f001 8003 	beq.w	4061d0 <_svfprintf_r+0x1034>
  4051ca:	2300      	movs	r3, #0
  4051cc:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  4051d0:	9313      	str	r3, [sp, #76]	; 0x4c
  4051d2:	9315      	str	r3, [sp, #84]	; 0x54
  4051d4:	9314      	str	r3, [sp, #80]	; 0x50
  4051d6:	9327      	str	r3, [sp, #156]	; 0x9c
  4051d8:	9326      	str	r3, [sp, #152]	; 0x98
  4051da:	9318      	str	r3, [sp, #96]	; 0x60
  4051dc:	931b      	str	r3, [sp, #108]	; 0x6c
  4051de:	9309      	str	r3, [sp, #36]	; 0x24
  4051e0:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  4051e4:	46c8      	mov	r8, r9
  4051e6:	9316      	str	r3, [sp, #88]	; 0x58
  4051e8:	9317      	str	r3, [sp, #92]	; 0x5c
  4051ea:	f89a 3000 	ldrb.w	r3, [sl]
  4051ee:	4654      	mov	r4, sl
  4051f0:	b1e3      	cbz	r3, 40522c <_svfprintf_r+0x90>
  4051f2:	2b25      	cmp	r3, #37	; 0x25
  4051f4:	d102      	bne.n	4051fc <_svfprintf_r+0x60>
  4051f6:	e019      	b.n	40522c <_svfprintf_r+0x90>
  4051f8:	2b25      	cmp	r3, #37	; 0x25
  4051fa:	d003      	beq.n	405204 <_svfprintf_r+0x68>
  4051fc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  405200:	2b00      	cmp	r3, #0
  405202:	d1f9      	bne.n	4051f8 <_svfprintf_r+0x5c>
  405204:	eba4 050a 	sub.w	r5, r4, sl
  405208:	b185      	cbz	r5, 40522c <_svfprintf_r+0x90>
  40520a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40520c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40520e:	f8c8 a000 	str.w	sl, [r8]
  405212:	3301      	adds	r3, #1
  405214:	442a      	add	r2, r5
  405216:	2b07      	cmp	r3, #7
  405218:	f8c8 5004 	str.w	r5, [r8, #4]
  40521c:	9227      	str	r2, [sp, #156]	; 0x9c
  40521e:	9326      	str	r3, [sp, #152]	; 0x98
  405220:	dc7f      	bgt.n	405322 <_svfprintf_r+0x186>
  405222:	f108 0808 	add.w	r8, r8, #8
  405226:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405228:	442b      	add	r3, r5
  40522a:	9309      	str	r3, [sp, #36]	; 0x24
  40522c:	7823      	ldrb	r3, [r4, #0]
  40522e:	2b00      	cmp	r3, #0
  405230:	d07f      	beq.n	405332 <_svfprintf_r+0x196>
  405232:	2300      	movs	r3, #0
  405234:	461a      	mov	r2, r3
  405236:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40523a:	4619      	mov	r1, r3
  40523c:	930d      	str	r3, [sp, #52]	; 0x34
  40523e:	469b      	mov	fp, r3
  405240:	f04f 30ff 	mov.w	r0, #4294967295
  405244:	7863      	ldrb	r3, [r4, #1]
  405246:	900a      	str	r0, [sp, #40]	; 0x28
  405248:	f104 0a01 	add.w	sl, r4, #1
  40524c:	f10a 0a01 	add.w	sl, sl, #1
  405250:	f1a3 0020 	sub.w	r0, r3, #32
  405254:	2858      	cmp	r0, #88	; 0x58
  405256:	f200 83c1 	bhi.w	4059dc <_svfprintf_r+0x840>
  40525a:	e8df f010 	tbh	[pc, r0, lsl #1]
  40525e:	0238      	.short	0x0238
  405260:	03bf03bf 	.word	0x03bf03bf
  405264:	03bf0240 	.word	0x03bf0240
  405268:	03bf03bf 	.word	0x03bf03bf
  40526c:	03bf03bf 	.word	0x03bf03bf
  405270:	024503bf 	.word	0x024503bf
  405274:	03bf0203 	.word	0x03bf0203
  405278:	026b005d 	.word	0x026b005d
  40527c:	028603bf 	.word	0x028603bf
  405280:	039d039d 	.word	0x039d039d
  405284:	039d039d 	.word	0x039d039d
  405288:	039d039d 	.word	0x039d039d
  40528c:	039d039d 	.word	0x039d039d
  405290:	03bf039d 	.word	0x03bf039d
  405294:	03bf03bf 	.word	0x03bf03bf
  405298:	03bf03bf 	.word	0x03bf03bf
  40529c:	03bf03bf 	.word	0x03bf03bf
  4052a0:	03bf03bf 	.word	0x03bf03bf
  4052a4:	033703bf 	.word	0x033703bf
  4052a8:	03bf0357 	.word	0x03bf0357
  4052ac:	03bf0357 	.word	0x03bf0357
  4052b0:	03bf03bf 	.word	0x03bf03bf
  4052b4:	039803bf 	.word	0x039803bf
  4052b8:	03bf03bf 	.word	0x03bf03bf
  4052bc:	03bf03ad 	.word	0x03bf03ad
  4052c0:	03bf03bf 	.word	0x03bf03bf
  4052c4:	03bf03bf 	.word	0x03bf03bf
  4052c8:	03bf0259 	.word	0x03bf0259
  4052cc:	031e03bf 	.word	0x031e03bf
  4052d0:	03bf03bf 	.word	0x03bf03bf
  4052d4:	03bf03bf 	.word	0x03bf03bf
  4052d8:	03bf03bf 	.word	0x03bf03bf
  4052dc:	03bf03bf 	.word	0x03bf03bf
  4052e0:	03bf03bf 	.word	0x03bf03bf
  4052e4:	02db02c6 	.word	0x02db02c6
  4052e8:	03570357 	.word	0x03570357
  4052ec:	028b0357 	.word	0x028b0357
  4052f0:	03bf02db 	.word	0x03bf02db
  4052f4:	029003bf 	.word	0x029003bf
  4052f8:	029d03bf 	.word	0x029d03bf
  4052fc:	02b401cc 	.word	0x02b401cc
  405300:	03bf0208 	.word	0x03bf0208
  405304:	03bf01e1 	.word	0x03bf01e1
  405308:	03bf007e 	.word	0x03bf007e
  40530c:	020d03bf 	.word	0x020d03bf
  405310:	980d      	ldr	r0, [sp, #52]	; 0x34
  405312:	930f      	str	r3, [sp, #60]	; 0x3c
  405314:	4240      	negs	r0, r0
  405316:	900d      	str	r0, [sp, #52]	; 0x34
  405318:	f04b 0b04 	orr.w	fp, fp, #4
  40531c:	f89a 3000 	ldrb.w	r3, [sl]
  405320:	e794      	b.n	40524c <_svfprintf_r+0xb0>
  405322:	aa25      	add	r2, sp, #148	; 0x94
  405324:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405326:	980c      	ldr	r0, [sp, #48]	; 0x30
  405328:	f004 fb5a 	bl	4099e0 <__ssprint_r>
  40532c:	b940      	cbnz	r0, 405340 <_svfprintf_r+0x1a4>
  40532e:	46c8      	mov	r8, r9
  405330:	e779      	b.n	405226 <_svfprintf_r+0x8a>
  405332:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  405334:	b123      	cbz	r3, 405340 <_svfprintf_r+0x1a4>
  405336:	980c      	ldr	r0, [sp, #48]	; 0x30
  405338:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40533a:	aa25      	add	r2, sp, #148	; 0x94
  40533c:	f004 fb50 	bl	4099e0 <__ssprint_r>
  405340:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405342:	899b      	ldrh	r3, [r3, #12]
  405344:	f013 0f40 	tst.w	r3, #64	; 0x40
  405348:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40534a:	bf18      	it	ne
  40534c:	f04f 33ff 	movne.w	r3, #4294967295
  405350:	9309      	str	r3, [sp, #36]	; 0x24
  405352:	9809      	ldr	r0, [sp, #36]	; 0x24
  405354:	b043      	add	sp, #268	; 0x10c
  405356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40535a:	f01b 0f20 	tst.w	fp, #32
  40535e:	9311      	str	r3, [sp, #68]	; 0x44
  405360:	f040 81dd 	bne.w	40571e <_svfprintf_r+0x582>
  405364:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405366:	f01b 0f10 	tst.w	fp, #16
  40536a:	4613      	mov	r3, r2
  40536c:	f040 856e 	bne.w	405e4c <_svfprintf_r+0xcb0>
  405370:	f01b 0f40 	tst.w	fp, #64	; 0x40
  405374:	f000 856a 	beq.w	405e4c <_svfprintf_r+0xcb0>
  405378:	8814      	ldrh	r4, [r2, #0]
  40537a:	3204      	adds	r2, #4
  40537c:	2500      	movs	r5, #0
  40537e:	2301      	movs	r3, #1
  405380:	920f      	str	r2, [sp, #60]	; 0x3c
  405382:	2700      	movs	r7, #0
  405384:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  405388:	990a      	ldr	r1, [sp, #40]	; 0x28
  40538a:	1c4a      	adds	r2, r1, #1
  40538c:	f000 8265 	beq.w	40585a <_svfprintf_r+0x6be>
  405390:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  405394:	9207      	str	r2, [sp, #28]
  405396:	ea54 0205 	orrs.w	r2, r4, r5
  40539a:	f040 8264 	bne.w	405866 <_svfprintf_r+0x6ca>
  40539e:	2900      	cmp	r1, #0
  4053a0:	f040 843c 	bne.w	405c1c <_svfprintf_r+0xa80>
  4053a4:	2b00      	cmp	r3, #0
  4053a6:	f040 84d7 	bne.w	405d58 <_svfprintf_r+0xbbc>
  4053aa:	f01b 0301 	ands.w	r3, fp, #1
  4053ae:	930e      	str	r3, [sp, #56]	; 0x38
  4053b0:	f000 8604 	beq.w	405fbc <_svfprintf_r+0xe20>
  4053b4:	ae42      	add	r6, sp, #264	; 0x108
  4053b6:	2330      	movs	r3, #48	; 0x30
  4053b8:	f806 3d41 	strb.w	r3, [r6, #-65]!
  4053bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4053be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4053c0:	4293      	cmp	r3, r2
  4053c2:	bfb8      	it	lt
  4053c4:	4613      	movlt	r3, r2
  4053c6:	9308      	str	r3, [sp, #32]
  4053c8:	2300      	movs	r3, #0
  4053ca:	9312      	str	r3, [sp, #72]	; 0x48
  4053cc:	b117      	cbz	r7, 4053d4 <_svfprintf_r+0x238>
  4053ce:	9b08      	ldr	r3, [sp, #32]
  4053d0:	3301      	adds	r3, #1
  4053d2:	9308      	str	r3, [sp, #32]
  4053d4:	9b07      	ldr	r3, [sp, #28]
  4053d6:	f013 0302 	ands.w	r3, r3, #2
  4053da:	9310      	str	r3, [sp, #64]	; 0x40
  4053dc:	d002      	beq.n	4053e4 <_svfprintf_r+0x248>
  4053de:	9b08      	ldr	r3, [sp, #32]
  4053e0:	3302      	adds	r3, #2
  4053e2:	9308      	str	r3, [sp, #32]
  4053e4:	9b07      	ldr	r3, [sp, #28]
  4053e6:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  4053ea:	f040 830e 	bne.w	405a0a <_svfprintf_r+0x86e>
  4053ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4053f0:	9a08      	ldr	r2, [sp, #32]
  4053f2:	eba3 0b02 	sub.w	fp, r3, r2
  4053f6:	f1bb 0f00 	cmp.w	fp, #0
  4053fa:	f340 8306 	ble.w	405a0a <_svfprintf_r+0x86e>
  4053fe:	f1bb 0f10 	cmp.w	fp, #16
  405402:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405404:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405406:	dd29      	ble.n	40545c <_svfprintf_r+0x2c0>
  405408:	4643      	mov	r3, r8
  40540a:	4621      	mov	r1, r4
  40540c:	46a8      	mov	r8, r5
  40540e:	2710      	movs	r7, #16
  405410:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405412:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  405414:	e006      	b.n	405424 <_svfprintf_r+0x288>
  405416:	f1ab 0b10 	sub.w	fp, fp, #16
  40541a:	f1bb 0f10 	cmp.w	fp, #16
  40541e:	f103 0308 	add.w	r3, r3, #8
  405422:	dd18      	ble.n	405456 <_svfprintf_r+0x2ba>
  405424:	3201      	adds	r2, #1
  405426:	48b7      	ldr	r0, [pc, #732]	; (405704 <_svfprintf_r+0x568>)
  405428:	9226      	str	r2, [sp, #152]	; 0x98
  40542a:	3110      	adds	r1, #16
  40542c:	2a07      	cmp	r2, #7
  40542e:	9127      	str	r1, [sp, #156]	; 0x9c
  405430:	e883 0081 	stmia.w	r3, {r0, r7}
  405434:	ddef      	ble.n	405416 <_svfprintf_r+0x27a>
  405436:	aa25      	add	r2, sp, #148	; 0x94
  405438:	4629      	mov	r1, r5
  40543a:	4620      	mov	r0, r4
  40543c:	f004 fad0 	bl	4099e0 <__ssprint_r>
  405440:	2800      	cmp	r0, #0
  405442:	f47f af7d 	bne.w	405340 <_svfprintf_r+0x1a4>
  405446:	f1ab 0b10 	sub.w	fp, fp, #16
  40544a:	f1bb 0f10 	cmp.w	fp, #16
  40544e:	9927      	ldr	r1, [sp, #156]	; 0x9c
  405450:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405452:	464b      	mov	r3, r9
  405454:	dce6      	bgt.n	405424 <_svfprintf_r+0x288>
  405456:	4645      	mov	r5, r8
  405458:	460c      	mov	r4, r1
  40545a:	4698      	mov	r8, r3
  40545c:	3201      	adds	r2, #1
  40545e:	4ba9      	ldr	r3, [pc, #676]	; (405704 <_svfprintf_r+0x568>)
  405460:	9226      	str	r2, [sp, #152]	; 0x98
  405462:	445c      	add	r4, fp
  405464:	2a07      	cmp	r2, #7
  405466:	9427      	str	r4, [sp, #156]	; 0x9c
  405468:	e888 0808 	stmia.w	r8, {r3, fp}
  40546c:	f300 8498 	bgt.w	405da0 <_svfprintf_r+0xc04>
  405470:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405474:	f108 0808 	add.w	r8, r8, #8
  405478:	b177      	cbz	r7, 405498 <_svfprintf_r+0x2fc>
  40547a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40547c:	3301      	adds	r3, #1
  40547e:	3401      	adds	r4, #1
  405480:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  405484:	2201      	movs	r2, #1
  405486:	2b07      	cmp	r3, #7
  405488:	9427      	str	r4, [sp, #156]	; 0x9c
  40548a:	9326      	str	r3, [sp, #152]	; 0x98
  40548c:	e888 0006 	stmia.w	r8, {r1, r2}
  405490:	f300 83db 	bgt.w	405c4a <_svfprintf_r+0xaae>
  405494:	f108 0808 	add.w	r8, r8, #8
  405498:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40549a:	b16b      	cbz	r3, 4054b8 <_svfprintf_r+0x31c>
  40549c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40549e:	3301      	adds	r3, #1
  4054a0:	3402      	adds	r4, #2
  4054a2:	a91e      	add	r1, sp, #120	; 0x78
  4054a4:	2202      	movs	r2, #2
  4054a6:	2b07      	cmp	r3, #7
  4054a8:	9427      	str	r4, [sp, #156]	; 0x9c
  4054aa:	9326      	str	r3, [sp, #152]	; 0x98
  4054ac:	e888 0006 	stmia.w	r8, {r1, r2}
  4054b0:	f300 83d6 	bgt.w	405c60 <_svfprintf_r+0xac4>
  4054b4:	f108 0808 	add.w	r8, r8, #8
  4054b8:	2d80      	cmp	r5, #128	; 0x80
  4054ba:	f000 8315 	beq.w	405ae8 <_svfprintf_r+0x94c>
  4054be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4054c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4054c2:	1a9f      	subs	r7, r3, r2
  4054c4:	2f00      	cmp	r7, #0
  4054c6:	dd36      	ble.n	405536 <_svfprintf_r+0x39a>
  4054c8:	2f10      	cmp	r7, #16
  4054ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4054cc:	4d8e      	ldr	r5, [pc, #568]	; (405708 <_svfprintf_r+0x56c>)
  4054ce:	dd27      	ble.n	405520 <_svfprintf_r+0x384>
  4054d0:	4642      	mov	r2, r8
  4054d2:	4621      	mov	r1, r4
  4054d4:	46b0      	mov	r8, r6
  4054d6:	f04f 0b10 	mov.w	fp, #16
  4054da:	462e      	mov	r6, r5
  4054dc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4054de:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4054e0:	e004      	b.n	4054ec <_svfprintf_r+0x350>
  4054e2:	3f10      	subs	r7, #16
  4054e4:	2f10      	cmp	r7, #16
  4054e6:	f102 0208 	add.w	r2, r2, #8
  4054ea:	dd15      	ble.n	405518 <_svfprintf_r+0x37c>
  4054ec:	3301      	adds	r3, #1
  4054ee:	3110      	adds	r1, #16
  4054f0:	2b07      	cmp	r3, #7
  4054f2:	9127      	str	r1, [sp, #156]	; 0x9c
  4054f4:	9326      	str	r3, [sp, #152]	; 0x98
  4054f6:	e882 0840 	stmia.w	r2, {r6, fp}
  4054fa:	ddf2      	ble.n	4054e2 <_svfprintf_r+0x346>
  4054fc:	aa25      	add	r2, sp, #148	; 0x94
  4054fe:	4629      	mov	r1, r5
  405500:	4620      	mov	r0, r4
  405502:	f004 fa6d 	bl	4099e0 <__ssprint_r>
  405506:	2800      	cmp	r0, #0
  405508:	f47f af1a 	bne.w	405340 <_svfprintf_r+0x1a4>
  40550c:	3f10      	subs	r7, #16
  40550e:	2f10      	cmp	r7, #16
  405510:	9927      	ldr	r1, [sp, #156]	; 0x9c
  405512:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405514:	464a      	mov	r2, r9
  405516:	dce9      	bgt.n	4054ec <_svfprintf_r+0x350>
  405518:	4635      	mov	r5, r6
  40551a:	460c      	mov	r4, r1
  40551c:	4646      	mov	r6, r8
  40551e:	4690      	mov	r8, r2
  405520:	3301      	adds	r3, #1
  405522:	443c      	add	r4, r7
  405524:	2b07      	cmp	r3, #7
  405526:	9427      	str	r4, [sp, #156]	; 0x9c
  405528:	9326      	str	r3, [sp, #152]	; 0x98
  40552a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40552e:	f300 8381 	bgt.w	405c34 <_svfprintf_r+0xa98>
  405532:	f108 0808 	add.w	r8, r8, #8
  405536:	9b07      	ldr	r3, [sp, #28]
  405538:	05df      	lsls	r7, r3, #23
  40553a:	f100 8268 	bmi.w	405a0e <_svfprintf_r+0x872>
  40553e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405540:	990e      	ldr	r1, [sp, #56]	; 0x38
  405542:	f8c8 6000 	str.w	r6, [r8]
  405546:	3301      	adds	r3, #1
  405548:	440c      	add	r4, r1
  40554a:	2b07      	cmp	r3, #7
  40554c:	9427      	str	r4, [sp, #156]	; 0x9c
  40554e:	f8c8 1004 	str.w	r1, [r8, #4]
  405552:	9326      	str	r3, [sp, #152]	; 0x98
  405554:	f300 834d 	bgt.w	405bf2 <_svfprintf_r+0xa56>
  405558:	f108 0808 	add.w	r8, r8, #8
  40555c:	9b07      	ldr	r3, [sp, #28]
  40555e:	075b      	lsls	r3, r3, #29
  405560:	d53a      	bpl.n	4055d8 <_svfprintf_r+0x43c>
  405562:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405564:	9a08      	ldr	r2, [sp, #32]
  405566:	1a9d      	subs	r5, r3, r2
  405568:	2d00      	cmp	r5, #0
  40556a:	dd35      	ble.n	4055d8 <_svfprintf_r+0x43c>
  40556c:	2d10      	cmp	r5, #16
  40556e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405570:	dd20      	ble.n	4055b4 <_svfprintf_r+0x418>
  405572:	2610      	movs	r6, #16
  405574:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405576:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  40557a:	e004      	b.n	405586 <_svfprintf_r+0x3ea>
  40557c:	3d10      	subs	r5, #16
  40557e:	2d10      	cmp	r5, #16
  405580:	f108 0808 	add.w	r8, r8, #8
  405584:	dd16      	ble.n	4055b4 <_svfprintf_r+0x418>
  405586:	3301      	adds	r3, #1
  405588:	4a5e      	ldr	r2, [pc, #376]	; (405704 <_svfprintf_r+0x568>)
  40558a:	9326      	str	r3, [sp, #152]	; 0x98
  40558c:	3410      	adds	r4, #16
  40558e:	2b07      	cmp	r3, #7
  405590:	9427      	str	r4, [sp, #156]	; 0x9c
  405592:	e888 0044 	stmia.w	r8, {r2, r6}
  405596:	ddf1      	ble.n	40557c <_svfprintf_r+0x3e0>
  405598:	aa25      	add	r2, sp, #148	; 0x94
  40559a:	4659      	mov	r1, fp
  40559c:	4638      	mov	r0, r7
  40559e:	f004 fa1f 	bl	4099e0 <__ssprint_r>
  4055a2:	2800      	cmp	r0, #0
  4055a4:	f47f aecc 	bne.w	405340 <_svfprintf_r+0x1a4>
  4055a8:	3d10      	subs	r5, #16
  4055aa:	2d10      	cmp	r5, #16
  4055ac:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4055ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4055b0:	46c8      	mov	r8, r9
  4055b2:	dce8      	bgt.n	405586 <_svfprintf_r+0x3ea>
  4055b4:	3301      	adds	r3, #1
  4055b6:	4a53      	ldr	r2, [pc, #332]	; (405704 <_svfprintf_r+0x568>)
  4055b8:	9326      	str	r3, [sp, #152]	; 0x98
  4055ba:	442c      	add	r4, r5
  4055bc:	2b07      	cmp	r3, #7
  4055be:	9427      	str	r4, [sp, #156]	; 0x9c
  4055c0:	e888 0024 	stmia.w	r8, {r2, r5}
  4055c4:	dd08      	ble.n	4055d8 <_svfprintf_r+0x43c>
  4055c6:	aa25      	add	r2, sp, #148	; 0x94
  4055c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4055ca:	980c      	ldr	r0, [sp, #48]	; 0x30
  4055cc:	f004 fa08 	bl	4099e0 <__ssprint_r>
  4055d0:	2800      	cmp	r0, #0
  4055d2:	f47f aeb5 	bne.w	405340 <_svfprintf_r+0x1a4>
  4055d6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4055d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4055da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4055dc:	9908      	ldr	r1, [sp, #32]
  4055de:	428a      	cmp	r2, r1
  4055e0:	bfac      	ite	ge
  4055e2:	189b      	addge	r3, r3, r2
  4055e4:	185b      	addlt	r3, r3, r1
  4055e6:	9309      	str	r3, [sp, #36]	; 0x24
  4055e8:	2c00      	cmp	r4, #0
  4055ea:	f040 830d 	bne.w	405c08 <_svfprintf_r+0xa6c>
  4055ee:	2300      	movs	r3, #0
  4055f0:	9326      	str	r3, [sp, #152]	; 0x98
  4055f2:	46c8      	mov	r8, r9
  4055f4:	e5f9      	b.n	4051ea <_svfprintf_r+0x4e>
  4055f6:	9311      	str	r3, [sp, #68]	; 0x44
  4055f8:	f01b 0320 	ands.w	r3, fp, #32
  4055fc:	f040 81e3 	bne.w	4059c6 <_svfprintf_r+0x82a>
  405600:	f01b 0210 	ands.w	r2, fp, #16
  405604:	f040 842e 	bne.w	405e64 <_svfprintf_r+0xcc8>
  405608:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  40560c:	f000 842a 	beq.w	405e64 <_svfprintf_r+0xcc8>
  405610:	990f      	ldr	r1, [sp, #60]	; 0x3c
  405612:	4613      	mov	r3, r2
  405614:	460a      	mov	r2, r1
  405616:	3204      	adds	r2, #4
  405618:	880c      	ldrh	r4, [r1, #0]
  40561a:	920f      	str	r2, [sp, #60]	; 0x3c
  40561c:	2500      	movs	r5, #0
  40561e:	e6b0      	b.n	405382 <_svfprintf_r+0x1e6>
  405620:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405622:	9311      	str	r3, [sp, #68]	; 0x44
  405624:	6816      	ldr	r6, [r2, #0]
  405626:	2400      	movs	r4, #0
  405628:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  40562c:	1d15      	adds	r5, r2, #4
  40562e:	2e00      	cmp	r6, #0
  405630:	f000 86a7 	beq.w	406382 <_svfprintf_r+0x11e6>
  405634:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405636:	1c53      	adds	r3, r2, #1
  405638:	f000 8609 	beq.w	40624e <_svfprintf_r+0x10b2>
  40563c:	4621      	mov	r1, r4
  40563e:	4630      	mov	r0, r6
  405640:	f003 fc36 	bl	408eb0 <memchr>
  405644:	2800      	cmp	r0, #0
  405646:	f000 86e1 	beq.w	40640c <_svfprintf_r+0x1270>
  40564a:	1b83      	subs	r3, r0, r6
  40564c:	930e      	str	r3, [sp, #56]	; 0x38
  40564e:	940a      	str	r4, [sp, #40]	; 0x28
  405650:	950f      	str	r5, [sp, #60]	; 0x3c
  405652:	f8cd b01c 	str.w	fp, [sp, #28]
  405656:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40565a:	9308      	str	r3, [sp, #32]
  40565c:	9412      	str	r4, [sp, #72]	; 0x48
  40565e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405662:	e6b3      	b.n	4053cc <_svfprintf_r+0x230>
  405664:	f89a 3000 	ldrb.w	r3, [sl]
  405668:	2201      	movs	r2, #1
  40566a:	212b      	movs	r1, #43	; 0x2b
  40566c:	e5ee      	b.n	40524c <_svfprintf_r+0xb0>
  40566e:	f04b 0b20 	orr.w	fp, fp, #32
  405672:	f89a 3000 	ldrb.w	r3, [sl]
  405676:	e5e9      	b.n	40524c <_svfprintf_r+0xb0>
  405678:	9311      	str	r3, [sp, #68]	; 0x44
  40567a:	2a00      	cmp	r2, #0
  40567c:	f040 8795 	bne.w	4065aa <_svfprintf_r+0x140e>
  405680:	4b22      	ldr	r3, [pc, #136]	; (40570c <_svfprintf_r+0x570>)
  405682:	9318      	str	r3, [sp, #96]	; 0x60
  405684:	f01b 0f20 	tst.w	fp, #32
  405688:	f040 8111 	bne.w	4058ae <_svfprintf_r+0x712>
  40568c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40568e:	f01b 0f10 	tst.w	fp, #16
  405692:	4613      	mov	r3, r2
  405694:	f040 83e1 	bne.w	405e5a <_svfprintf_r+0xcbe>
  405698:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40569c:	f000 83dd 	beq.w	405e5a <_svfprintf_r+0xcbe>
  4056a0:	3304      	adds	r3, #4
  4056a2:	8814      	ldrh	r4, [r2, #0]
  4056a4:	930f      	str	r3, [sp, #60]	; 0x3c
  4056a6:	2500      	movs	r5, #0
  4056a8:	f01b 0f01 	tst.w	fp, #1
  4056ac:	f000 810c 	beq.w	4058c8 <_svfprintf_r+0x72c>
  4056b0:	ea54 0305 	orrs.w	r3, r4, r5
  4056b4:	f000 8108 	beq.w	4058c8 <_svfprintf_r+0x72c>
  4056b8:	2330      	movs	r3, #48	; 0x30
  4056ba:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  4056be:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  4056c2:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  4056c6:	f04b 0b02 	orr.w	fp, fp, #2
  4056ca:	2302      	movs	r3, #2
  4056cc:	e659      	b.n	405382 <_svfprintf_r+0x1e6>
  4056ce:	f89a 3000 	ldrb.w	r3, [sl]
  4056d2:	2900      	cmp	r1, #0
  4056d4:	f47f adba 	bne.w	40524c <_svfprintf_r+0xb0>
  4056d8:	2201      	movs	r2, #1
  4056da:	2120      	movs	r1, #32
  4056dc:	e5b6      	b.n	40524c <_svfprintf_r+0xb0>
  4056de:	f04b 0b01 	orr.w	fp, fp, #1
  4056e2:	f89a 3000 	ldrb.w	r3, [sl]
  4056e6:	e5b1      	b.n	40524c <_svfprintf_r+0xb0>
  4056e8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  4056ea:	6823      	ldr	r3, [r4, #0]
  4056ec:	930d      	str	r3, [sp, #52]	; 0x34
  4056ee:	4618      	mov	r0, r3
  4056f0:	2800      	cmp	r0, #0
  4056f2:	4623      	mov	r3, r4
  4056f4:	f103 0304 	add.w	r3, r3, #4
  4056f8:	f6ff ae0a 	blt.w	405310 <_svfprintf_r+0x174>
  4056fc:	930f      	str	r3, [sp, #60]	; 0x3c
  4056fe:	f89a 3000 	ldrb.w	r3, [sl]
  405702:	e5a3      	b.n	40524c <_svfprintf_r+0xb0>
  405704:	0040a6ec 	.word	0x0040a6ec
  405708:	0040a6fc 	.word	0x0040a6fc
  40570c:	0040a6cc 	.word	0x0040a6cc
  405710:	f04b 0b10 	orr.w	fp, fp, #16
  405714:	f01b 0f20 	tst.w	fp, #32
  405718:	9311      	str	r3, [sp, #68]	; 0x44
  40571a:	f43f ae23 	beq.w	405364 <_svfprintf_r+0x1c8>
  40571e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405720:	3507      	adds	r5, #7
  405722:	f025 0307 	bic.w	r3, r5, #7
  405726:	f103 0208 	add.w	r2, r3, #8
  40572a:	e9d3 4500 	ldrd	r4, r5, [r3]
  40572e:	920f      	str	r2, [sp, #60]	; 0x3c
  405730:	2301      	movs	r3, #1
  405732:	e626      	b.n	405382 <_svfprintf_r+0x1e6>
  405734:	f89a 3000 	ldrb.w	r3, [sl]
  405738:	2b2a      	cmp	r3, #42	; 0x2a
  40573a:	f10a 0401 	add.w	r4, sl, #1
  40573e:	f000 8727 	beq.w	406590 <_svfprintf_r+0x13f4>
  405742:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  405746:	2809      	cmp	r0, #9
  405748:	46a2      	mov	sl, r4
  40574a:	f200 86ad 	bhi.w	4064a8 <_svfprintf_r+0x130c>
  40574e:	2300      	movs	r3, #0
  405750:	461c      	mov	r4, r3
  405752:	f81a 3b01 	ldrb.w	r3, [sl], #1
  405756:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40575a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40575e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  405762:	2809      	cmp	r0, #9
  405764:	d9f5      	bls.n	405752 <_svfprintf_r+0x5b6>
  405766:	940a      	str	r4, [sp, #40]	; 0x28
  405768:	e572      	b.n	405250 <_svfprintf_r+0xb4>
  40576a:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  40576e:	f89a 3000 	ldrb.w	r3, [sl]
  405772:	e56b      	b.n	40524c <_svfprintf_r+0xb0>
  405774:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  405778:	f89a 3000 	ldrb.w	r3, [sl]
  40577c:	e566      	b.n	40524c <_svfprintf_r+0xb0>
  40577e:	f89a 3000 	ldrb.w	r3, [sl]
  405782:	2b6c      	cmp	r3, #108	; 0x6c
  405784:	bf03      	ittte	eq
  405786:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  40578a:	f04b 0b20 	orreq.w	fp, fp, #32
  40578e:	f10a 0a01 	addeq.w	sl, sl, #1
  405792:	f04b 0b10 	orrne.w	fp, fp, #16
  405796:	e559      	b.n	40524c <_svfprintf_r+0xb0>
  405798:	2a00      	cmp	r2, #0
  40579a:	f040 8711 	bne.w	4065c0 <_svfprintf_r+0x1424>
  40579e:	f01b 0f20 	tst.w	fp, #32
  4057a2:	f040 84f9 	bne.w	406198 <_svfprintf_r+0xffc>
  4057a6:	f01b 0f10 	tst.w	fp, #16
  4057aa:	f040 84ac 	bne.w	406106 <_svfprintf_r+0xf6a>
  4057ae:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4057b2:	f000 84a8 	beq.w	406106 <_svfprintf_r+0xf6a>
  4057b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4057b8:	6813      	ldr	r3, [r2, #0]
  4057ba:	3204      	adds	r2, #4
  4057bc:	920f      	str	r2, [sp, #60]	; 0x3c
  4057be:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  4057c2:	801a      	strh	r2, [r3, #0]
  4057c4:	e511      	b.n	4051ea <_svfprintf_r+0x4e>
  4057c6:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4057c8:	4bb3      	ldr	r3, [pc, #716]	; (405a98 <_svfprintf_r+0x8fc>)
  4057ca:	680c      	ldr	r4, [r1, #0]
  4057cc:	9318      	str	r3, [sp, #96]	; 0x60
  4057ce:	2230      	movs	r2, #48	; 0x30
  4057d0:	2378      	movs	r3, #120	; 0x78
  4057d2:	3104      	adds	r1, #4
  4057d4:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  4057d8:	9311      	str	r3, [sp, #68]	; 0x44
  4057da:	f04b 0b02 	orr.w	fp, fp, #2
  4057de:	910f      	str	r1, [sp, #60]	; 0x3c
  4057e0:	2500      	movs	r5, #0
  4057e2:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  4057e6:	2302      	movs	r3, #2
  4057e8:	e5cb      	b.n	405382 <_svfprintf_r+0x1e6>
  4057ea:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4057ec:	9311      	str	r3, [sp, #68]	; 0x44
  4057ee:	680a      	ldr	r2, [r1, #0]
  4057f0:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4057f4:	2300      	movs	r3, #0
  4057f6:	460a      	mov	r2, r1
  4057f8:	461f      	mov	r7, r3
  4057fa:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4057fe:	3204      	adds	r2, #4
  405800:	2301      	movs	r3, #1
  405802:	9308      	str	r3, [sp, #32]
  405804:	f8cd b01c 	str.w	fp, [sp, #28]
  405808:	970a      	str	r7, [sp, #40]	; 0x28
  40580a:	9712      	str	r7, [sp, #72]	; 0x48
  40580c:	920f      	str	r2, [sp, #60]	; 0x3c
  40580e:	930e      	str	r3, [sp, #56]	; 0x38
  405810:	ae28      	add	r6, sp, #160	; 0xa0
  405812:	e5df      	b.n	4053d4 <_svfprintf_r+0x238>
  405814:	9311      	str	r3, [sp, #68]	; 0x44
  405816:	2a00      	cmp	r2, #0
  405818:	f040 86ea 	bne.w	4065f0 <_svfprintf_r+0x1454>
  40581c:	f01b 0f20 	tst.w	fp, #32
  405820:	d15d      	bne.n	4058de <_svfprintf_r+0x742>
  405822:	f01b 0f10 	tst.w	fp, #16
  405826:	f040 8308 	bne.w	405e3a <_svfprintf_r+0xc9e>
  40582a:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40582e:	f000 8304 	beq.w	405e3a <_svfprintf_r+0xc9e>
  405832:	990f      	ldr	r1, [sp, #60]	; 0x3c
  405834:	f9b1 4000 	ldrsh.w	r4, [r1]
  405838:	3104      	adds	r1, #4
  40583a:	17e5      	asrs	r5, r4, #31
  40583c:	4622      	mov	r2, r4
  40583e:	462b      	mov	r3, r5
  405840:	910f      	str	r1, [sp, #60]	; 0x3c
  405842:	2a00      	cmp	r2, #0
  405844:	f173 0300 	sbcs.w	r3, r3, #0
  405848:	db58      	blt.n	4058fc <_svfprintf_r+0x760>
  40584a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40584c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405850:	1c4a      	adds	r2, r1, #1
  405852:	f04f 0301 	mov.w	r3, #1
  405856:	f47f ad9b 	bne.w	405390 <_svfprintf_r+0x1f4>
  40585a:	ea54 0205 	orrs.w	r2, r4, r5
  40585e:	f000 81df 	beq.w	405c20 <_svfprintf_r+0xa84>
  405862:	f8cd b01c 	str.w	fp, [sp, #28]
  405866:	2b01      	cmp	r3, #1
  405868:	f000 827b 	beq.w	405d62 <_svfprintf_r+0xbc6>
  40586c:	2b02      	cmp	r3, #2
  40586e:	f040 8206 	bne.w	405c7e <_svfprintf_r+0xae2>
  405872:	9818      	ldr	r0, [sp, #96]	; 0x60
  405874:	464e      	mov	r6, r9
  405876:	0923      	lsrs	r3, r4, #4
  405878:	f004 010f 	and.w	r1, r4, #15
  40587c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  405880:	092a      	lsrs	r2, r5, #4
  405882:	461c      	mov	r4, r3
  405884:	4615      	mov	r5, r2
  405886:	5c43      	ldrb	r3, [r0, r1]
  405888:	f806 3d01 	strb.w	r3, [r6, #-1]!
  40588c:	ea54 0305 	orrs.w	r3, r4, r5
  405890:	d1f1      	bne.n	405876 <_svfprintf_r+0x6da>
  405892:	eba9 0306 	sub.w	r3, r9, r6
  405896:	930e      	str	r3, [sp, #56]	; 0x38
  405898:	e590      	b.n	4053bc <_svfprintf_r+0x220>
  40589a:	9311      	str	r3, [sp, #68]	; 0x44
  40589c:	2a00      	cmp	r2, #0
  40589e:	f040 86a3 	bne.w	4065e8 <_svfprintf_r+0x144c>
  4058a2:	4b7e      	ldr	r3, [pc, #504]	; (405a9c <_svfprintf_r+0x900>)
  4058a4:	9318      	str	r3, [sp, #96]	; 0x60
  4058a6:	f01b 0f20 	tst.w	fp, #32
  4058aa:	f43f aeef 	beq.w	40568c <_svfprintf_r+0x4f0>
  4058ae:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4058b0:	3507      	adds	r5, #7
  4058b2:	f025 0307 	bic.w	r3, r5, #7
  4058b6:	f103 0208 	add.w	r2, r3, #8
  4058ba:	f01b 0f01 	tst.w	fp, #1
  4058be:	920f      	str	r2, [sp, #60]	; 0x3c
  4058c0:	e9d3 4500 	ldrd	r4, r5, [r3]
  4058c4:	f47f aef4 	bne.w	4056b0 <_svfprintf_r+0x514>
  4058c8:	2302      	movs	r3, #2
  4058ca:	e55a      	b.n	405382 <_svfprintf_r+0x1e6>
  4058cc:	9311      	str	r3, [sp, #68]	; 0x44
  4058ce:	2a00      	cmp	r2, #0
  4058d0:	f040 8686 	bne.w	4065e0 <_svfprintf_r+0x1444>
  4058d4:	f04b 0b10 	orr.w	fp, fp, #16
  4058d8:	f01b 0f20 	tst.w	fp, #32
  4058dc:	d0a1      	beq.n	405822 <_svfprintf_r+0x686>
  4058de:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4058e0:	3507      	adds	r5, #7
  4058e2:	f025 0507 	bic.w	r5, r5, #7
  4058e6:	e9d5 2300 	ldrd	r2, r3, [r5]
  4058ea:	2a00      	cmp	r2, #0
  4058ec:	f105 0108 	add.w	r1, r5, #8
  4058f0:	461d      	mov	r5, r3
  4058f2:	f173 0300 	sbcs.w	r3, r3, #0
  4058f6:	910f      	str	r1, [sp, #60]	; 0x3c
  4058f8:	4614      	mov	r4, r2
  4058fa:	daa6      	bge.n	40584a <_svfprintf_r+0x6ae>
  4058fc:	272d      	movs	r7, #45	; 0x2d
  4058fe:	4264      	negs	r4, r4
  405900:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  405904:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  405908:	2301      	movs	r3, #1
  40590a:	e53d      	b.n	405388 <_svfprintf_r+0x1ec>
  40590c:	9311      	str	r3, [sp, #68]	; 0x44
  40590e:	2a00      	cmp	r2, #0
  405910:	f040 8662 	bne.w	4065d8 <_svfprintf_r+0x143c>
  405914:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405916:	3507      	adds	r5, #7
  405918:	f025 0307 	bic.w	r3, r5, #7
  40591c:	f103 0208 	add.w	r2, r3, #8
  405920:	920f      	str	r2, [sp, #60]	; 0x3c
  405922:	681a      	ldr	r2, [r3, #0]
  405924:	9215      	str	r2, [sp, #84]	; 0x54
  405926:	685b      	ldr	r3, [r3, #4]
  405928:	9314      	str	r3, [sp, #80]	; 0x50
  40592a:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40592c:	9d15      	ldr	r5, [sp, #84]	; 0x54
  40592e:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  405932:	4628      	mov	r0, r5
  405934:	4621      	mov	r1, r4
  405936:	f04f 32ff 	mov.w	r2, #4294967295
  40593a:	4b59      	ldr	r3, [pc, #356]	; (405aa0 <_svfprintf_r+0x904>)
  40593c:	f004 fb54 	bl	409fe8 <__aeabi_dcmpun>
  405940:	2800      	cmp	r0, #0
  405942:	f040 834a 	bne.w	405fda <_svfprintf_r+0xe3e>
  405946:	4628      	mov	r0, r5
  405948:	4621      	mov	r1, r4
  40594a:	f04f 32ff 	mov.w	r2, #4294967295
  40594e:	4b54      	ldr	r3, [pc, #336]	; (405aa0 <_svfprintf_r+0x904>)
  405950:	f004 fb2c 	bl	409fac <__aeabi_dcmple>
  405954:	2800      	cmp	r0, #0
  405956:	f040 8340 	bne.w	405fda <_svfprintf_r+0xe3e>
  40595a:	a815      	add	r0, sp, #84	; 0x54
  40595c:	c80d      	ldmia	r0, {r0, r2, r3}
  40595e:	9914      	ldr	r1, [sp, #80]	; 0x50
  405960:	f004 fb1a 	bl	409f98 <__aeabi_dcmplt>
  405964:	2800      	cmp	r0, #0
  405966:	f040 8530 	bne.w	4063ca <_svfprintf_r+0x122e>
  40596a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40596e:	4e4d      	ldr	r6, [pc, #308]	; (405aa4 <_svfprintf_r+0x908>)
  405970:	4b4d      	ldr	r3, [pc, #308]	; (405aa8 <_svfprintf_r+0x90c>)
  405972:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  405976:	9007      	str	r0, [sp, #28]
  405978:	9811      	ldr	r0, [sp, #68]	; 0x44
  40597a:	2203      	movs	r2, #3
  40597c:	2100      	movs	r1, #0
  40597e:	9208      	str	r2, [sp, #32]
  405980:	910a      	str	r1, [sp, #40]	; 0x28
  405982:	2847      	cmp	r0, #71	; 0x47
  405984:	bfd8      	it	le
  405986:	461e      	movle	r6, r3
  405988:	920e      	str	r2, [sp, #56]	; 0x38
  40598a:	9112      	str	r1, [sp, #72]	; 0x48
  40598c:	e51e      	b.n	4053cc <_svfprintf_r+0x230>
  40598e:	f04b 0b08 	orr.w	fp, fp, #8
  405992:	f89a 3000 	ldrb.w	r3, [sl]
  405996:	e459      	b.n	40524c <_svfprintf_r+0xb0>
  405998:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40599c:	2300      	movs	r3, #0
  40599e:	461c      	mov	r4, r3
  4059a0:	f81a 3b01 	ldrb.w	r3, [sl], #1
  4059a4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4059a8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4059ac:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4059b0:	2809      	cmp	r0, #9
  4059b2:	d9f5      	bls.n	4059a0 <_svfprintf_r+0x804>
  4059b4:	940d      	str	r4, [sp, #52]	; 0x34
  4059b6:	e44b      	b.n	405250 <_svfprintf_r+0xb4>
  4059b8:	f04b 0b10 	orr.w	fp, fp, #16
  4059bc:	9311      	str	r3, [sp, #68]	; 0x44
  4059be:	f01b 0320 	ands.w	r3, fp, #32
  4059c2:	f43f ae1d 	beq.w	405600 <_svfprintf_r+0x464>
  4059c6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4059c8:	3507      	adds	r5, #7
  4059ca:	f025 0307 	bic.w	r3, r5, #7
  4059ce:	f103 0208 	add.w	r2, r3, #8
  4059d2:	e9d3 4500 	ldrd	r4, r5, [r3]
  4059d6:	920f      	str	r2, [sp, #60]	; 0x3c
  4059d8:	2300      	movs	r3, #0
  4059da:	e4d2      	b.n	405382 <_svfprintf_r+0x1e6>
  4059dc:	9311      	str	r3, [sp, #68]	; 0x44
  4059de:	2a00      	cmp	r2, #0
  4059e0:	f040 85e7 	bne.w	4065b2 <_svfprintf_r+0x1416>
  4059e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4059e6:	2a00      	cmp	r2, #0
  4059e8:	f43f aca3 	beq.w	405332 <_svfprintf_r+0x196>
  4059ec:	2300      	movs	r3, #0
  4059ee:	2101      	movs	r1, #1
  4059f0:	461f      	mov	r7, r3
  4059f2:	9108      	str	r1, [sp, #32]
  4059f4:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4059f8:	f8cd b01c 	str.w	fp, [sp, #28]
  4059fc:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  405a00:	930a      	str	r3, [sp, #40]	; 0x28
  405a02:	9312      	str	r3, [sp, #72]	; 0x48
  405a04:	910e      	str	r1, [sp, #56]	; 0x38
  405a06:	ae28      	add	r6, sp, #160	; 0xa0
  405a08:	e4e4      	b.n	4053d4 <_svfprintf_r+0x238>
  405a0a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405a0c:	e534      	b.n	405478 <_svfprintf_r+0x2dc>
  405a0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405a10:	2b65      	cmp	r3, #101	; 0x65
  405a12:	f340 80a7 	ble.w	405b64 <_svfprintf_r+0x9c8>
  405a16:	a815      	add	r0, sp, #84	; 0x54
  405a18:	c80d      	ldmia	r0, {r0, r2, r3}
  405a1a:	9914      	ldr	r1, [sp, #80]	; 0x50
  405a1c:	f004 fab2 	bl	409f84 <__aeabi_dcmpeq>
  405a20:	2800      	cmp	r0, #0
  405a22:	f000 8150 	beq.w	405cc6 <_svfprintf_r+0xb2a>
  405a26:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405a28:	4a20      	ldr	r2, [pc, #128]	; (405aac <_svfprintf_r+0x910>)
  405a2a:	f8c8 2000 	str.w	r2, [r8]
  405a2e:	3301      	adds	r3, #1
  405a30:	3401      	adds	r4, #1
  405a32:	2201      	movs	r2, #1
  405a34:	2b07      	cmp	r3, #7
  405a36:	9427      	str	r4, [sp, #156]	; 0x9c
  405a38:	9326      	str	r3, [sp, #152]	; 0x98
  405a3a:	f8c8 2004 	str.w	r2, [r8, #4]
  405a3e:	f300 836a 	bgt.w	406116 <_svfprintf_r+0xf7a>
  405a42:	f108 0808 	add.w	r8, r8, #8
  405a46:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405a48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  405a4a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405a4c:	4293      	cmp	r3, r2
  405a4e:	db03      	blt.n	405a58 <_svfprintf_r+0x8bc>
  405a50:	9b07      	ldr	r3, [sp, #28]
  405a52:	07dd      	lsls	r5, r3, #31
  405a54:	f57f ad82 	bpl.w	40555c <_svfprintf_r+0x3c0>
  405a58:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405a5a:	9919      	ldr	r1, [sp, #100]	; 0x64
  405a5c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  405a5e:	f8c8 2000 	str.w	r2, [r8]
  405a62:	3301      	adds	r3, #1
  405a64:	440c      	add	r4, r1
  405a66:	2b07      	cmp	r3, #7
  405a68:	f8c8 1004 	str.w	r1, [r8, #4]
  405a6c:	9427      	str	r4, [sp, #156]	; 0x9c
  405a6e:	9326      	str	r3, [sp, #152]	; 0x98
  405a70:	f300 839e 	bgt.w	4061b0 <_svfprintf_r+0x1014>
  405a74:	f108 0808 	add.w	r8, r8, #8
  405a78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405a7a:	1e5e      	subs	r6, r3, #1
  405a7c:	2e00      	cmp	r6, #0
  405a7e:	f77f ad6d 	ble.w	40555c <_svfprintf_r+0x3c0>
  405a82:	2e10      	cmp	r6, #16
  405a84:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405a86:	4d0a      	ldr	r5, [pc, #40]	; (405ab0 <_svfprintf_r+0x914>)
  405a88:	f340 81f5 	ble.w	405e76 <_svfprintf_r+0xcda>
  405a8c:	4622      	mov	r2, r4
  405a8e:	2710      	movs	r7, #16
  405a90:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  405a94:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  405a96:	e013      	b.n	405ac0 <_svfprintf_r+0x924>
  405a98:	0040a6cc 	.word	0x0040a6cc
  405a9c:	0040a6b8 	.word	0x0040a6b8
  405aa0:	7fefffff 	.word	0x7fefffff
  405aa4:	0040a6ac 	.word	0x0040a6ac
  405aa8:	0040a6a8 	.word	0x0040a6a8
  405aac:	0040a6e8 	.word	0x0040a6e8
  405ab0:	0040a6fc 	.word	0x0040a6fc
  405ab4:	f108 0808 	add.w	r8, r8, #8
  405ab8:	3e10      	subs	r6, #16
  405aba:	2e10      	cmp	r6, #16
  405abc:	f340 81da 	ble.w	405e74 <_svfprintf_r+0xcd8>
  405ac0:	3301      	adds	r3, #1
  405ac2:	3210      	adds	r2, #16
  405ac4:	2b07      	cmp	r3, #7
  405ac6:	9227      	str	r2, [sp, #156]	; 0x9c
  405ac8:	9326      	str	r3, [sp, #152]	; 0x98
  405aca:	e888 00a0 	stmia.w	r8, {r5, r7}
  405ace:	ddf1      	ble.n	405ab4 <_svfprintf_r+0x918>
  405ad0:	aa25      	add	r2, sp, #148	; 0x94
  405ad2:	4621      	mov	r1, r4
  405ad4:	4658      	mov	r0, fp
  405ad6:	f003 ff83 	bl	4099e0 <__ssprint_r>
  405ada:	2800      	cmp	r0, #0
  405adc:	f47f ac30 	bne.w	405340 <_svfprintf_r+0x1a4>
  405ae0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405ae2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405ae4:	46c8      	mov	r8, r9
  405ae6:	e7e7      	b.n	405ab8 <_svfprintf_r+0x91c>
  405ae8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405aea:	9a08      	ldr	r2, [sp, #32]
  405aec:	1a9f      	subs	r7, r3, r2
  405aee:	2f00      	cmp	r7, #0
  405af0:	f77f ace5 	ble.w	4054be <_svfprintf_r+0x322>
  405af4:	2f10      	cmp	r7, #16
  405af6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405af8:	4db6      	ldr	r5, [pc, #728]	; (405dd4 <_svfprintf_r+0xc38>)
  405afa:	dd27      	ble.n	405b4c <_svfprintf_r+0x9b0>
  405afc:	4642      	mov	r2, r8
  405afe:	4621      	mov	r1, r4
  405b00:	46b0      	mov	r8, r6
  405b02:	f04f 0b10 	mov.w	fp, #16
  405b06:	462e      	mov	r6, r5
  405b08:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405b0a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  405b0c:	e004      	b.n	405b18 <_svfprintf_r+0x97c>
  405b0e:	3f10      	subs	r7, #16
  405b10:	2f10      	cmp	r7, #16
  405b12:	f102 0208 	add.w	r2, r2, #8
  405b16:	dd15      	ble.n	405b44 <_svfprintf_r+0x9a8>
  405b18:	3301      	adds	r3, #1
  405b1a:	3110      	adds	r1, #16
  405b1c:	2b07      	cmp	r3, #7
  405b1e:	9127      	str	r1, [sp, #156]	; 0x9c
  405b20:	9326      	str	r3, [sp, #152]	; 0x98
  405b22:	e882 0840 	stmia.w	r2, {r6, fp}
  405b26:	ddf2      	ble.n	405b0e <_svfprintf_r+0x972>
  405b28:	aa25      	add	r2, sp, #148	; 0x94
  405b2a:	4629      	mov	r1, r5
  405b2c:	4620      	mov	r0, r4
  405b2e:	f003 ff57 	bl	4099e0 <__ssprint_r>
  405b32:	2800      	cmp	r0, #0
  405b34:	f47f ac04 	bne.w	405340 <_svfprintf_r+0x1a4>
  405b38:	3f10      	subs	r7, #16
  405b3a:	2f10      	cmp	r7, #16
  405b3c:	9927      	ldr	r1, [sp, #156]	; 0x9c
  405b3e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405b40:	464a      	mov	r2, r9
  405b42:	dce9      	bgt.n	405b18 <_svfprintf_r+0x97c>
  405b44:	4635      	mov	r5, r6
  405b46:	460c      	mov	r4, r1
  405b48:	4646      	mov	r6, r8
  405b4a:	4690      	mov	r8, r2
  405b4c:	3301      	adds	r3, #1
  405b4e:	443c      	add	r4, r7
  405b50:	2b07      	cmp	r3, #7
  405b52:	9427      	str	r4, [sp, #156]	; 0x9c
  405b54:	9326      	str	r3, [sp, #152]	; 0x98
  405b56:	e888 00a0 	stmia.w	r8, {r5, r7}
  405b5a:	f300 8232 	bgt.w	405fc2 <_svfprintf_r+0xe26>
  405b5e:	f108 0808 	add.w	r8, r8, #8
  405b62:	e4ac      	b.n	4054be <_svfprintf_r+0x322>
  405b64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405b66:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405b68:	2b01      	cmp	r3, #1
  405b6a:	f340 81fe 	ble.w	405f6a <_svfprintf_r+0xdce>
  405b6e:	3701      	adds	r7, #1
  405b70:	3401      	adds	r4, #1
  405b72:	2301      	movs	r3, #1
  405b74:	2f07      	cmp	r7, #7
  405b76:	9427      	str	r4, [sp, #156]	; 0x9c
  405b78:	9726      	str	r7, [sp, #152]	; 0x98
  405b7a:	f8c8 6000 	str.w	r6, [r8]
  405b7e:	f8c8 3004 	str.w	r3, [r8, #4]
  405b82:	f300 8203 	bgt.w	405f8c <_svfprintf_r+0xdf0>
  405b86:	f108 0808 	add.w	r8, r8, #8
  405b8a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405b8c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  405b8e:	f8c8 3000 	str.w	r3, [r8]
  405b92:	3701      	adds	r7, #1
  405b94:	4414      	add	r4, r2
  405b96:	2f07      	cmp	r7, #7
  405b98:	9427      	str	r4, [sp, #156]	; 0x9c
  405b9a:	9726      	str	r7, [sp, #152]	; 0x98
  405b9c:	f8c8 2004 	str.w	r2, [r8, #4]
  405ba0:	f300 8200 	bgt.w	405fa4 <_svfprintf_r+0xe08>
  405ba4:	f108 0808 	add.w	r8, r8, #8
  405ba8:	a815      	add	r0, sp, #84	; 0x54
  405baa:	c80d      	ldmia	r0, {r0, r2, r3}
  405bac:	9914      	ldr	r1, [sp, #80]	; 0x50
  405bae:	f004 f9e9 	bl	409f84 <__aeabi_dcmpeq>
  405bb2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405bb4:	2800      	cmp	r0, #0
  405bb6:	f040 8101 	bne.w	405dbc <_svfprintf_r+0xc20>
  405bba:	3b01      	subs	r3, #1
  405bbc:	3701      	adds	r7, #1
  405bbe:	3601      	adds	r6, #1
  405bc0:	441c      	add	r4, r3
  405bc2:	2f07      	cmp	r7, #7
  405bc4:	9726      	str	r7, [sp, #152]	; 0x98
  405bc6:	9427      	str	r4, [sp, #156]	; 0x9c
  405bc8:	f8c8 6000 	str.w	r6, [r8]
  405bcc:	f8c8 3004 	str.w	r3, [r8, #4]
  405bd0:	f300 8127 	bgt.w	405e22 <_svfprintf_r+0xc86>
  405bd4:	f108 0808 	add.w	r8, r8, #8
  405bd8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  405bda:	f8c8 2004 	str.w	r2, [r8, #4]
  405bde:	3701      	adds	r7, #1
  405be0:	4414      	add	r4, r2
  405be2:	ab21      	add	r3, sp, #132	; 0x84
  405be4:	2f07      	cmp	r7, #7
  405be6:	9427      	str	r4, [sp, #156]	; 0x9c
  405be8:	9726      	str	r7, [sp, #152]	; 0x98
  405bea:	f8c8 3000 	str.w	r3, [r8]
  405bee:	f77f acb3 	ble.w	405558 <_svfprintf_r+0x3bc>
  405bf2:	aa25      	add	r2, sp, #148	; 0x94
  405bf4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405bf6:	980c      	ldr	r0, [sp, #48]	; 0x30
  405bf8:	f003 fef2 	bl	4099e0 <__ssprint_r>
  405bfc:	2800      	cmp	r0, #0
  405bfe:	f47f ab9f 	bne.w	405340 <_svfprintf_r+0x1a4>
  405c02:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405c04:	46c8      	mov	r8, r9
  405c06:	e4a9      	b.n	40555c <_svfprintf_r+0x3c0>
  405c08:	aa25      	add	r2, sp, #148	; 0x94
  405c0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405c0c:	980c      	ldr	r0, [sp, #48]	; 0x30
  405c0e:	f003 fee7 	bl	4099e0 <__ssprint_r>
  405c12:	2800      	cmp	r0, #0
  405c14:	f43f aceb 	beq.w	4055ee <_svfprintf_r+0x452>
  405c18:	f7ff bb92 	b.w	405340 <_svfprintf_r+0x1a4>
  405c1c:	f8dd b01c 	ldr.w	fp, [sp, #28]
  405c20:	2b01      	cmp	r3, #1
  405c22:	f000 8134 	beq.w	405e8e <_svfprintf_r+0xcf2>
  405c26:	2b02      	cmp	r3, #2
  405c28:	d125      	bne.n	405c76 <_svfprintf_r+0xada>
  405c2a:	f8cd b01c 	str.w	fp, [sp, #28]
  405c2e:	2400      	movs	r4, #0
  405c30:	2500      	movs	r5, #0
  405c32:	e61e      	b.n	405872 <_svfprintf_r+0x6d6>
  405c34:	aa25      	add	r2, sp, #148	; 0x94
  405c36:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405c38:	980c      	ldr	r0, [sp, #48]	; 0x30
  405c3a:	f003 fed1 	bl	4099e0 <__ssprint_r>
  405c3e:	2800      	cmp	r0, #0
  405c40:	f47f ab7e 	bne.w	405340 <_svfprintf_r+0x1a4>
  405c44:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405c46:	46c8      	mov	r8, r9
  405c48:	e475      	b.n	405536 <_svfprintf_r+0x39a>
  405c4a:	aa25      	add	r2, sp, #148	; 0x94
  405c4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405c4e:	980c      	ldr	r0, [sp, #48]	; 0x30
  405c50:	f003 fec6 	bl	4099e0 <__ssprint_r>
  405c54:	2800      	cmp	r0, #0
  405c56:	f47f ab73 	bne.w	405340 <_svfprintf_r+0x1a4>
  405c5a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405c5c:	46c8      	mov	r8, r9
  405c5e:	e41b      	b.n	405498 <_svfprintf_r+0x2fc>
  405c60:	aa25      	add	r2, sp, #148	; 0x94
  405c62:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405c64:	980c      	ldr	r0, [sp, #48]	; 0x30
  405c66:	f003 febb 	bl	4099e0 <__ssprint_r>
  405c6a:	2800      	cmp	r0, #0
  405c6c:	f47f ab68 	bne.w	405340 <_svfprintf_r+0x1a4>
  405c70:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405c72:	46c8      	mov	r8, r9
  405c74:	e420      	b.n	4054b8 <_svfprintf_r+0x31c>
  405c76:	f8cd b01c 	str.w	fp, [sp, #28]
  405c7a:	2400      	movs	r4, #0
  405c7c:	2500      	movs	r5, #0
  405c7e:	4649      	mov	r1, r9
  405c80:	e000      	b.n	405c84 <_svfprintf_r+0xae8>
  405c82:	4631      	mov	r1, r6
  405c84:	08e2      	lsrs	r2, r4, #3
  405c86:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  405c8a:	08e8      	lsrs	r0, r5, #3
  405c8c:	f004 0307 	and.w	r3, r4, #7
  405c90:	4605      	mov	r5, r0
  405c92:	4614      	mov	r4, r2
  405c94:	3330      	adds	r3, #48	; 0x30
  405c96:	ea54 0205 	orrs.w	r2, r4, r5
  405c9a:	f801 3c01 	strb.w	r3, [r1, #-1]
  405c9e:	f101 36ff 	add.w	r6, r1, #4294967295
  405ca2:	d1ee      	bne.n	405c82 <_svfprintf_r+0xae6>
  405ca4:	9a07      	ldr	r2, [sp, #28]
  405ca6:	07d2      	lsls	r2, r2, #31
  405ca8:	f57f adf3 	bpl.w	405892 <_svfprintf_r+0x6f6>
  405cac:	2b30      	cmp	r3, #48	; 0x30
  405cae:	f43f adf0 	beq.w	405892 <_svfprintf_r+0x6f6>
  405cb2:	3902      	subs	r1, #2
  405cb4:	2330      	movs	r3, #48	; 0x30
  405cb6:	f806 3c01 	strb.w	r3, [r6, #-1]
  405cba:	eba9 0301 	sub.w	r3, r9, r1
  405cbe:	930e      	str	r3, [sp, #56]	; 0x38
  405cc0:	460e      	mov	r6, r1
  405cc2:	f7ff bb7b 	b.w	4053bc <_svfprintf_r+0x220>
  405cc6:	991f      	ldr	r1, [sp, #124]	; 0x7c
  405cc8:	2900      	cmp	r1, #0
  405cca:	f340 822e 	ble.w	40612a <_svfprintf_r+0xf8e>
  405cce:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405cd0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  405cd2:	4293      	cmp	r3, r2
  405cd4:	bfa8      	it	ge
  405cd6:	4613      	movge	r3, r2
  405cd8:	2b00      	cmp	r3, #0
  405cda:	461f      	mov	r7, r3
  405cdc:	dd0d      	ble.n	405cfa <_svfprintf_r+0xb5e>
  405cde:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405ce0:	f8c8 6000 	str.w	r6, [r8]
  405ce4:	3301      	adds	r3, #1
  405ce6:	443c      	add	r4, r7
  405ce8:	2b07      	cmp	r3, #7
  405cea:	9427      	str	r4, [sp, #156]	; 0x9c
  405cec:	f8c8 7004 	str.w	r7, [r8, #4]
  405cf0:	9326      	str	r3, [sp, #152]	; 0x98
  405cf2:	f300 831f 	bgt.w	406334 <_svfprintf_r+0x1198>
  405cf6:	f108 0808 	add.w	r8, r8, #8
  405cfa:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405cfc:	2f00      	cmp	r7, #0
  405cfe:	bfa8      	it	ge
  405d00:	1bdb      	subge	r3, r3, r7
  405d02:	2b00      	cmp	r3, #0
  405d04:	461f      	mov	r7, r3
  405d06:	f340 80d6 	ble.w	405eb6 <_svfprintf_r+0xd1a>
  405d0a:	2f10      	cmp	r7, #16
  405d0c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405d0e:	4d31      	ldr	r5, [pc, #196]	; (405dd4 <_svfprintf_r+0xc38>)
  405d10:	f340 81ed 	ble.w	4060ee <_svfprintf_r+0xf52>
  405d14:	4642      	mov	r2, r8
  405d16:	4621      	mov	r1, r4
  405d18:	46b0      	mov	r8, r6
  405d1a:	f04f 0b10 	mov.w	fp, #16
  405d1e:	462e      	mov	r6, r5
  405d20:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405d22:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  405d24:	e004      	b.n	405d30 <_svfprintf_r+0xb94>
  405d26:	3208      	adds	r2, #8
  405d28:	3f10      	subs	r7, #16
  405d2a:	2f10      	cmp	r7, #16
  405d2c:	f340 81db 	ble.w	4060e6 <_svfprintf_r+0xf4a>
  405d30:	3301      	adds	r3, #1
  405d32:	3110      	adds	r1, #16
  405d34:	2b07      	cmp	r3, #7
  405d36:	9127      	str	r1, [sp, #156]	; 0x9c
  405d38:	9326      	str	r3, [sp, #152]	; 0x98
  405d3a:	e882 0840 	stmia.w	r2, {r6, fp}
  405d3e:	ddf2      	ble.n	405d26 <_svfprintf_r+0xb8a>
  405d40:	aa25      	add	r2, sp, #148	; 0x94
  405d42:	4629      	mov	r1, r5
  405d44:	4620      	mov	r0, r4
  405d46:	f003 fe4b 	bl	4099e0 <__ssprint_r>
  405d4a:	2800      	cmp	r0, #0
  405d4c:	f47f aaf8 	bne.w	405340 <_svfprintf_r+0x1a4>
  405d50:	9927      	ldr	r1, [sp, #156]	; 0x9c
  405d52:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405d54:	464a      	mov	r2, r9
  405d56:	e7e7      	b.n	405d28 <_svfprintf_r+0xb8c>
  405d58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405d5a:	930e      	str	r3, [sp, #56]	; 0x38
  405d5c:	464e      	mov	r6, r9
  405d5e:	f7ff bb2d 	b.w	4053bc <_svfprintf_r+0x220>
  405d62:	2d00      	cmp	r5, #0
  405d64:	bf08      	it	eq
  405d66:	2c0a      	cmpeq	r4, #10
  405d68:	f0c0 808f 	bcc.w	405e8a <_svfprintf_r+0xcee>
  405d6c:	464e      	mov	r6, r9
  405d6e:	4620      	mov	r0, r4
  405d70:	4629      	mov	r1, r5
  405d72:	220a      	movs	r2, #10
  405d74:	2300      	movs	r3, #0
  405d76:	f004 f94d 	bl	40a014 <__aeabi_uldivmod>
  405d7a:	3230      	adds	r2, #48	; 0x30
  405d7c:	f806 2d01 	strb.w	r2, [r6, #-1]!
  405d80:	4620      	mov	r0, r4
  405d82:	4629      	mov	r1, r5
  405d84:	2300      	movs	r3, #0
  405d86:	220a      	movs	r2, #10
  405d88:	f004 f944 	bl	40a014 <__aeabi_uldivmod>
  405d8c:	4604      	mov	r4, r0
  405d8e:	460d      	mov	r5, r1
  405d90:	ea54 0305 	orrs.w	r3, r4, r5
  405d94:	d1eb      	bne.n	405d6e <_svfprintf_r+0xbd2>
  405d96:	eba9 0306 	sub.w	r3, r9, r6
  405d9a:	930e      	str	r3, [sp, #56]	; 0x38
  405d9c:	f7ff bb0e 	b.w	4053bc <_svfprintf_r+0x220>
  405da0:	aa25      	add	r2, sp, #148	; 0x94
  405da2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405da4:	980c      	ldr	r0, [sp, #48]	; 0x30
  405da6:	f003 fe1b 	bl	4099e0 <__ssprint_r>
  405daa:	2800      	cmp	r0, #0
  405dac:	f47f aac8 	bne.w	405340 <_svfprintf_r+0x1a4>
  405db0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405db4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405db6:	46c8      	mov	r8, r9
  405db8:	f7ff bb5e 	b.w	405478 <_svfprintf_r+0x2dc>
  405dbc:	1e5e      	subs	r6, r3, #1
  405dbe:	2e00      	cmp	r6, #0
  405dc0:	f77f af0a 	ble.w	405bd8 <_svfprintf_r+0xa3c>
  405dc4:	2e10      	cmp	r6, #16
  405dc6:	4d03      	ldr	r5, [pc, #12]	; (405dd4 <_svfprintf_r+0xc38>)
  405dc8:	dd22      	ble.n	405e10 <_svfprintf_r+0xc74>
  405dca:	4622      	mov	r2, r4
  405dcc:	f04f 0b10 	mov.w	fp, #16
  405dd0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405dd2:	e006      	b.n	405de2 <_svfprintf_r+0xc46>
  405dd4:	0040a6fc 	.word	0x0040a6fc
  405dd8:	3e10      	subs	r6, #16
  405dda:	2e10      	cmp	r6, #16
  405ddc:	f108 0808 	add.w	r8, r8, #8
  405de0:	dd15      	ble.n	405e0e <_svfprintf_r+0xc72>
  405de2:	3701      	adds	r7, #1
  405de4:	3210      	adds	r2, #16
  405de6:	2f07      	cmp	r7, #7
  405de8:	9227      	str	r2, [sp, #156]	; 0x9c
  405dea:	9726      	str	r7, [sp, #152]	; 0x98
  405dec:	e888 0820 	stmia.w	r8, {r5, fp}
  405df0:	ddf2      	ble.n	405dd8 <_svfprintf_r+0xc3c>
  405df2:	aa25      	add	r2, sp, #148	; 0x94
  405df4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405df6:	4620      	mov	r0, r4
  405df8:	f003 fdf2 	bl	4099e0 <__ssprint_r>
  405dfc:	2800      	cmp	r0, #0
  405dfe:	f47f aa9f 	bne.w	405340 <_svfprintf_r+0x1a4>
  405e02:	3e10      	subs	r6, #16
  405e04:	2e10      	cmp	r6, #16
  405e06:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405e08:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405e0a:	46c8      	mov	r8, r9
  405e0c:	dce9      	bgt.n	405de2 <_svfprintf_r+0xc46>
  405e0e:	4614      	mov	r4, r2
  405e10:	3701      	adds	r7, #1
  405e12:	4434      	add	r4, r6
  405e14:	2f07      	cmp	r7, #7
  405e16:	9427      	str	r4, [sp, #156]	; 0x9c
  405e18:	9726      	str	r7, [sp, #152]	; 0x98
  405e1a:	e888 0060 	stmia.w	r8, {r5, r6}
  405e1e:	f77f aed9 	ble.w	405bd4 <_svfprintf_r+0xa38>
  405e22:	aa25      	add	r2, sp, #148	; 0x94
  405e24:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405e26:	980c      	ldr	r0, [sp, #48]	; 0x30
  405e28:	f003 fdda 	bl	4099e0 <__ssprint_r>
  405e2c:	2800      	cmp	r0, #0
  405e2e:	f47f aa87 	bne.w	405340 <_svfprintf_r+0x1a4>
  405e32:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405e34:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405e36:	46c8      	mov	r8, r9
  405e38:	e6ce      	b.n	405bd8 <_svfprintf_r+0xa3c>
  405e3a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405e3c:	6814      	ldr	r4, [r2, #0]
  405e3e:	4613      	mov	r3, r2
  405e40:	3304      	adds	r3, #4
  405e42:	17e5      	asrs	r5, r4, #31
  405e44:	930f      	str	r3, [sp, #60]	; 0x3c
  405e46:	4622      	mov	r2, r4
  405e48:	462b      	mov	r3, r5
  405e4a:	e4fa      	b.n	405842 <_svfprintf_r+0x6a6>
  405e4c:	3204      	adds	r2, #4
  405e4e:	681c      	ldr	r4, [r3, #0]
  405e50:	920f      	str	r2, [sp, #60]	; 0x3c
  405e52:	2301      	movs	r3, #1
  405e54:	2500      	movs	r5, #0
  405e56:	f7ff ba94 	b.w	405382 <_svfprintf_r+0x1e6>
  405e5a:	681c      	ldr	r4, [r3, #0]
  405e5c:	3304      	adds	r3, #4
  405e5e:	930f      	str	r3, [sp, #60]	; 0x3c
  405e60:	2500      	movs	r5, #0
  405e62:	e421      	b.n	4056a8 <_svfprintf_r+0x50c>
  405e64:	990f      	ldr	r1, [sp, #60]	; 0x3c
  405e66:	460a      	mov	r2, r1
  405e68:	3204      	adds	r2, #4
  405e6a:	680c      	ldr	r4, [r1, #0]
  405e6c:	920f      	str	r2, [sp, #60]	; 0x3c
  405e6e:	2500      	movs	r5, #0
  405e70:	f7ff ba87 	b.w	405382 <_svfprintf_r+0x1e6>
  405e74:	4614      	mov	r4, r2
  405e76:	3301      	adds	r3, #1
  405e78:	4434      	add	r4, r6
  405e7a:	2b07      	cmp	r3, #7
  405e7c:	9427      	str	r4, [sp, #156]	; 0x9c
  405e7e:	9326      	str	r3, [sp, #152]	; 0x98
  405e80:	e888 0060 	stmia.w	r8, {r5, r6}
  405e84:	f77f ab68 	ble.w	405558 <_svfprintf_r+0x3bc>
  405e88:	e6b3      	b.n	405bf2 <_svfprintf_r+0xa56>
  405e8a:	f8dd b01c 	ldr.w	fp, [sp, #28]
  405e8e:	f8cd b01c 	str.w	fp, [sp, #28]
  405e92:	ae42      	add	r6, sp, #264	; 0x108
  405e94:	3430      	adds	r4, #48	; 0x30
  405e96:	2301      	movs	r3, #1
  405e98:	f806 4d41 	strb.w	r4, [r6, #-65]!
  405e9c:	930e      	str	r3, [sp, #56]	; 0x38
  405e9e:	f7ff ba8d 	b.w	4053bc <_svfprintf_r+0x220>
  405ea2:	aa25      	add	r2, sp, #148	; 0x94
  405ea4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405ea6:	980c      	ldr	r0, [sp, #48]	; 0x30
  405ea8:	f003 fd9a 	bl	4099e0 <__ssprint_r>
  405eac:	2800      	cmp	r0, #0
  405eae:	f47f aa47 	bne.w	405340 <_svfprintf_r+0x1a4>
  405eb2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405eb4:	46c8      	mov	r8, r9
  405eb6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  405eb8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405eba:	429a      	cmp	r2, r3
  405ebc:	db44      	blt.n	405f48 <_svfprintf_r+0xdac>
  405ebe:	9b07      	ldr	r3, [sp, #28]
  405ec0:	07d9      	lsls	r1, r3, #31
  405ec2:	d441      	bmi.n	405f48 <_svfprintf_r+0xdac>
  405ec4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405ec6:	9812      	ldr	r0, [sp, #72]	; 0x48
  405ec8:	1a9a      	subs	r2, r3, r2
  405eca:	1a1d      	subs	r5, r3, r0
  405ecc:	4295      	cmp	r5, r2
  405ece:	bfa8      	it	ge
  405ed0:	4615      	movge	r5, r2
  405ed2:	2d00      	cmp	r5, #0
  405ed4:	dd0e      	ble.n	405ef4 <_svfprintf_r+0xd58>
  405ed6:	9926      	ldr	r1, [sp, #152]	; 0x98
  405ed8:	f8c8 5004 	str.w	r5, [r8, #4]
  405edc:	3101      	adds	r1, #1
  405ede:	4406      	add	r6, r0
  405ee0:	442c      	add	r4, r5
  405ee2:	2907      	cmp	r1, #7
  405ee4:	f8c8 6000 	str.w	r6, [r8]
  405ee8:	9427      	str	r4, [sp, #156]	; 0x9c
  405eea:	9126      	str	r1, [sp, #152]	; 0x98
  405eec:	f300 823b 	bgt.w	406366 <_svfprintf_r+0x11ca>
  405ef0:	f108 0808 	add.w	r8, r8, #8
  405ef4:	2d00      	cmp	r5, #0
  405ef6:	bfac      	ite	ge
  405ef8:	1b56      	subge	r6, r2, r5
  405efa:	4616      	movlt	r6, r2
  405efc:	2e00      	cmp	r6, #0
  405efe:	f77f ab2d 	ble.w	40555c <_svfprintf_r+0x3c0>
  405f02:	2e10      	cmp	r6, #16
  405f04:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405f06:	4db0      	ldr	r5, [pc, #704]	; (4061c8 <_svfprintf_r+0x102c>)
  405f08:	ddb5      	ble.n	405e76 <_svfprintf_r+0xcda>
  405f0a:	4622      	mov	r2, r4
  405f0c:	2710      	movs	r7, #16
  405f0e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  405f12:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  405f14:	e004      	b.n	405f20 <_svfprintf_r+0xd84>
  405f16:	f108 0808 	add.w	r8, r8, #8
  405f1a:	3e10      	subs	r6, #16
  405f1c:	2e10      	cmp	r6, #16
  405f1e:	dda9      	ble.n	405e74 <_svfprintf_r+0xcd8>
  405f20:	3301      	adds	r3, #1
  405f22:	3210      	adds	r2, #16
  405f24:	2b07      	cmp	r3, #7
  405f26:	9227      	str	r2, [sp, #156]	; 0x9c
  405f28:	9326      	str	r3, [sp, #152]	; 0x98
  405f2a:	e888 00a0 	stmia.w	r8, {r5, r7}
  405f2e:	ddf2      	ble.n	405f16 <_svfprintf_r+0xd7a>
  405f30:	aa25      	add	r2, sp, #148	; 0x94
  405f32:	4621      	mov	r1, r4
  405f34:	4658      	mov	r0, fp
  405f36:	f003 fd53 	bl	4099e0 <__ssprint_r>
  405f3a:	2800      	cmp	r0, #0
  405f3c:	f47f aa00 	bne.w	405340 <_svfprintf_r+0x1a4>
  405f40:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405f42:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405f44:	46c8      	mov	r8, r9
  405f46:	e7e8      	b.n	405f1a <_svfprintf_r+0xd7e>
  405f48:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405f4a:	9819      	ldr	r0, [sp, #100]	; 0x64
  405f4c:	991a      	ldr	r1, [sp, #104]	; 0x68
  405f4e:	f8c8 1000 	str.w	r1, [r8]
  405f52:	3301      	adds	r3, #1
  405f54:	4404      	add	r4, r0
  405f56:	2b07      	cmp	r3, #7
  405f58:	9427      	str	r4, [sp, #156]	; 0x9c
  405f5a:	f8c8 0004 	str.w	r0, [r8, #4]
  405f5e:	9326      	str	r3, [sp, #152]	; 0x98
  405f60:	f300 81f5 	bgt.w	40634e <_svfprintf_r+0x11b2>
  405f64:	f108 0808 	add.w	r8, r8, #8
  405f68:	e7ac      	b.n	405ec4 <_svfprintf_r+0xd28>
  405f6a:	9b07      	ldr	r3, [sp, #28]
  405f6c:	07da      	lsls	r2, r3, #31
  405f6e:	f53f adfe 	bmi.w	405b6e <_svfprintf_r+0x9d2>
  405f72:	3701      	adds	r7, #1
  405f74:	3401      	adds	r4, #1
  405f76:	2301      	movs	r3, #1
  405f78:	2f07      	cmp	r7, #7
  405f7a:	9427      	str	r4, [sp, #156]	; 0x9c
  405f7c:	9726      	str	r7, [sp, #152]	; 0x98
  405f7e:	f8c8 6000 	str.w	r6, [r8]
  405f82:	f8c8 3004 	str.w	r3, [r8, #4]
  405f86:	f77f ae25 	ble.w	405bd4 <_svfprintf_r+0xa38>
  405f8a:	e74a      	b.n	405e22 <_svfprintf_r+0xc86>
  405f8c:	aa25      	add	r2, sp, #148	; 0x94
  405f8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405f90:	980c      	ldr	r0, [sp, #48]	; 0x30
  405f92:	f003 fd25 	bl	4099e0 <__ssprint_r>
  405f96:	2800      	cmp	r0, #0
  405f98:	f47f a9d2 	bne.w	405340 <_svfprintf_r+0x1a4>
  405f9c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405f9e:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405fa0:	46c8      	mov	r8, r9
  405fa2:	e5f2      	b.n	405b8a <_svfprintf_r+0x9ee>
  405fa4:	aa25      	add	r2, sp, #148	; 0x94
  405fa6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405fa8:	980c      	ldr	r0, [sp, #48]	; 0x30
  405faa:	f003 fd19 	bl	4099e0 <__ssprint_r>
  405fae:	2800      	cmp	r0, #0
  405fb0:	f47f a9c6 	bne.w	405340 <_svfprintf_r+0x1a4>
  405fb4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405fb6:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405fb8:	46c8      	mov	r8, r9
  405fba:	e5f5      	b.n	405ba8 <_svfprintf_r+0xa0c>
  405fbc:	464e      	mov	r6, r9
  405fbe:	f7ff b9fd 	b.w	4053bc <_svfprintf_r+0x220>
  405fc2:	aa25      	add	r2, sp, #148	; 0x94
  405fc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405fc6:	980c      	ldr	r0, [sp, #48]	; 0x30
  405fc8:	f003 fd0a 	bl	4099e0 <__ssprint_r>
  405fcc:	2800      	cmp	r0, #0
  405fce:	f47f a9b7 	bne.w	405340 <_svfprintf_r+0x1a4>
  405fd2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405fd4:	46c8      	mov	r8, r9
  405fd6:	f7ff ba72 	b.w	4054be <_svfprintf_r+0x322>
  405fda:	9c15      	ldr	r4, [sp, #84]	; 0x54
  405fdc:	4622      	mov	r2, r4
  405fde:	4620      	mov	r0, r4
  405fe0:	9c14      	ldr	r4, [sp, #80]	; 0x50
  405fe2:	4623      	mov	r3, r4
  405fe4:	4621      	mov	r1, r4
  405fe6:	f003 ffff 	bl	409fe8 <__aeabi_dcmpun>
  405fea:	2800      	cmp	r0, #0
  405fec:	f040 8286 	bne.w	4064fc <_svfprintf_r+0x1360>
  405ff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405ff2:	3301      	adds	r3, #1
  405ff4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405ff6:	f023 0320 	bic.w	r3, r3, #32
  405ffa:	930e      	str	r3, [sp, #56]	; 0x38
  405ffc:	f000 81e2 	beq.w	4063c4 <_svfprintf_r+0x1228>
  406000:	2b47      	cmp	r3, #71	; 0x47
  406002:	f000 811e 	beq.w	406242 <_svfprintf_r+0x10a6>
  406006:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  40600a:	9307      	str	r3, [sp, #28]
  40600c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40600e:	1e1f      	subs	r7, r3, #0
  406010:	9b15      	ldr	r3, [sp, #84]	; 0x54
  406012:	9308      	str	r3, [sp, #32]
  406014:	bfbb      	ittet	lt
  406016:	463b      	movlt	r3, r7
  406018:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  40601c:	2300      	movge	r3, #0
  40601e:	232d      	movlt	r3, #45	; 0x2d
  406020:	9310      	str	r3, [sp, #64]	; 0x40
  406022:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406024:	2b66      	cmp	r3, #102	; 0x66
  406026:	f000 81bb 	beq.w	4063a0 <_svfprintf_r+0x1204>
  40602a:	2b46      	cmp	r3, #70	; 0x46
  40602c:	f000 80df 	beq.w	4061ee <_svfprintf_r+0x1052>
  406030:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  406032:	9a08      	ldr	r2, [sp, #32]
  406034:	2b45      	cmp	r3, #69	; 0x45
  406036:	bf0c      	ite	eq
  406038:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  40603a:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  40603c:	a823      	add	r0, sp, #140	; 0x8c
  40603e:	a920      	add	r1, sp, #128	; 0x80
  406040:	bf08      	it	eq
  406042:	1c5d      	addeq	r5, r3, #1
  406044:	9004      	str	r0, [sp, #16]
  406046:	9103      	str	r1, [sp, #12]
  406048:	a81f      	add	r0, sp, #124	; 0x7c
  40604a:	2102      	movs	r1, #2
  40604c:	463b      	mov	r3, r7
  40604e:	9002      	str	r0, [sp, #8]
  406050:	9501      	str	r5, [sp, #4]
  406052:	9100      	str	r1, [sp, #0]
  406054:	980c      	ldr	r0, [sp, #48]	; 0x30
  406056:	f001 faa3 	bl	4075a0 <_dtoa_r>
  40605a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40605c:	2b67      	cmp	r3, #103	; 0x67
  40605e:	4606      	mov	r6, r0
  406060:	f040 81e0 	bne.w	406424 <_svfprintf_r+0x1288>
  406064:	f01b 0f01 	tst.w	fp, #1
  406068:	f000 8246 	beq.w	4064f8 <_svfprintf_r+0x135c>
  40606c:	1974      	adds	r4, r6, r5
  40606e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  406070:	9808      	ldr	r0, [sp, #32]
  406072:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  406074:	4639      	mov	r1, r7
  406076:	f003 ff85 	bl	409f84 <__aeabi_dcmpeq>
  40607a:	2800      	cmp	r0, #0
  40607c:	f040 8165 	bne.w	40634a <_svfprintf_r+0x11ae>
  406080:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  406082:	42a3      	cmp	r3, r4
  406084:	d206      	bcs.n	406094 <_svfprintf_r+0xef8>
  406086:	2130      	movs	r1, #48	; 0x30
  406088:	1c5a      	adds	r2, r3, #1
  40608a:	9223      	str	r2, [sp, #140]	; 0x8c
  40608c:	7019      	strb	r1, [r3, #0]
  40608e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  406090:	429c      	cmp	r4, r3
  406092:	d8f9      	bhi.n	406088 <_svfprintf_r+0xeec>
  406094:	1b9b      	subs	r3, r3, r6
  406096:	9313      	str	r3, [sp, #76]	; 0x4c
  406098:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40609a:	2b47      	cmp	r3, #71	; 0x47
  40609c:	f000 80e9 	beq.w	406272 <_svfprintf_r+0x10d6>
  4060a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4060a2:	2b65      	cmp	r3, #101	; 0x65
  4060a4:	f340 81cd 	ble.w	406442 <_svfprintf_r+0x12a6>
  4060a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4060aa:	2b66      	cmp	r3, #102	; 0x66
  4060ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4060ae:	9312      	str	r3, [sp, #72]	; 0x48
  4060b0:	f000 819e 	beq.w	4063f0 <_svfprintf_r+0x1254>
  4060b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4060b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4060b8:	4619      	mov	r1, r3
  4060ba:	4291      	cmp	r1, r2
  4060bc:	f300 818a 	bgt.w	4063d4 <_svfprintf_r+0x1238>
  4060c0:	f01b 0f01 	tst.w	fp, #1
  4060c4:	f040 8213 	bne.w	4064ee <_svfprintf_r+0x1352>
  4060c8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4060cc:	9308      	str	r3, [sp, #32]
  4060ce:	2367      	movs	r3, #103	; 0x67
  4060d0:	920e      	str	r2, [sp, #56]	; 0x38
  4060d2:	9311      	str	r3, [sp, #68]	; 0x44
  4060d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4060d6:	2b00      	cmp	r3, #0
  4060d8:	f040 80c4 	bne.w	406264 <_svfprintf_r+0x10c8>
  4060dc:	930a      	str	r3, [sp, #40]	; 0x28
  4060de:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4060e2:	f7ff b973 	b.w	4053cc <_svfprintf_r+0x230>
  4060e6:	4635      	mov	r5, r6
  4060e8:	460c      	mov	r4, r1
  4060ea:	4646      	mov	r6, r8
  4060ec:	4690      	mov	r8, r2
  4060ee:	3301      	adds	r3, #1
  4060f0:	443c      	add	r4, r7
  4060f2:	2b07      	cmp	r3, #7
  4060f4:	9427      	str	r4, [sp, #156]	; 0x9c
  4060f6:	9326      	str	r3, [sp, #152]	; 0x98
  4060f8:	e888 00a0 	stmia.w	r8, {r5, r7}
  4060fc:	f73f aed1 	bgt.w	405ea2 <_svfprintf_r+0xd06>
  406100:	f108 0808 	add.w	r8, r8, #8
  406104:	e6d7      	b.n	405eb6 <_svfprintf_r+0xd1a>
  406106:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406108:	6813      	ldr	r3, [r2, #0]
  40610a:	3204      	adds	r2, #4
  40610c:	920f      	str	r2, [sp, #60]	; 0x3c
  40610e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  406110:	601a      	str	r2, [r3, #0]
  406112:	f7ff b86a 	b.w	4051ea <_svfprintf_r+0x4e>
  406116:	aa25      	add	r2, sp, #148	; 0x94
  406118:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40611a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40611c:	f003 fc60 	bl	4099e0 <__ssprint_r>
  406120:	2800      	cmp	r0, #0
  406122:	f47f a90d 	bne.w	405340 <_svfprintf_r+0x1a4>
  406126:	46c8      	mov	r8, r9
  406128:	e48d      	b.n	405a46 <_svfprintf_r+0x8aa>
  40612a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40612c:	4a27      	ldr	r2, [pc, #156]	; (4061cc <_svfprintf_r+0x1030>)
  40612e:	f8c8 2000 	str.w	r2, [r8]
  406132:	3301      	adds	r3, #1
  406134:	3401      	adds	r4, #1
  406136:	2201      	movs	r2, #1
  406138:	2b07      	cmp	r3, #7
  40613a:	9427      	str	r4, [sp, #156]	; 0x9c
  40613c:	9326      	str	r3, [sp, #152]	; 0x98
  40613e:	f8c8 2004 	str.w	r2, [r8, #4]
  406142:	dc72      	bgt.n	40622a <_svfprintf_r+0x108e>
  406144:	f108 0808 	add.w	r8, r8, #8
  406148:	b929      	cbnz	r1, 406156 <_svfprintf_r+0xfba>
  40614a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40614c:	b91b      	cbnz	r3, 406156 <_svfprintf_r+0xfba>
  40614e:	9b07      	ldr	r3, [sp, #28]
  406150:	07d8      	lsls	r0, r3, #31
  406152:	f57f aa03 	bpl.w	40555c <_svfprintf_r+0x3c0>
  406156:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406158:	9819      	ldr	r0, [sp, #100]	; 0x64
  40615a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40615c:	f8c8 2000 	str.w	r2, [r8]
  406160:	3301      	adds	r3, #1
  406162:	4602      	mov	r2, r0
  406164:	4422      	add	r2, r4
  406166:	2b07      	cmp	r3, #7
  406168:	9227      	str	r2, [sp, #156]	; 0x9c
  40616a:	f8c8 0004 	str.w	r0, [r8, #4]
  40616e:	9326      	str	r3, [sp, #152]	; 0x98
  406170:	f300 818d 	bgt.w	40648e <_svfprintf_r+0x12f2>
  406174:	f108 0808 	add.w	r8, r8, #8
  406178:	2900      	cmp	r1, #0
  40617a:	f2c0 8165 	blt.w	406448 <_svfprintf_r+0x12ac>
  40617e:	9913      	ldr	r1, [sp, #76]	; 0x4c
  406180:	f8c8 6000 	str.w	r6, [r8]
  406184:	3301      	adds	r3, #1
  406186:	188c      	adds	r4, r1, r2
  406188:	2b07      	cmp	r3, #7
  40618a:	9427      	str	r4, [sp, #156]	; 0x9c
  40618c:	9326      	str	r3, [sp, #152]	; 0x98
  40618e:	f8c8 1004 	str.w	r1, [r8, #4]
  406192:	f77f a9e1 	ble.w	405558 <_svfprintf_r+0x3bc>
  406196:	e52c      	b.n	405bf2 <_svfprintf_r+0xa56>
  406198:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40619a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40619c:	6813      	ldr	r3, [r2, #0]
  40619e:	17cd      	asrs	r5, r1, #31
  4061a0:	4608      	mov	r0, r1
  4061a2:	3204      	adds	r2, #4
  4061a4:	4629      	mov	r1, r5
  4061a6:	920f      	str	r2, [sp, #60]	; 0x3c
  4061a8:	e9c3 0100 	strd	r0, r1, [r3]
  4061ac:	f7ff b81d 	b.w	4051ea <_svfprintf_r+0x4e>
  4061b0:	aa25      	add	r2, sp, #148	; 0x94
  4061b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4061b4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4061b6:	f003 fc13 	bl	4099e0 <__ssprint_r>
  4061ba:	2800      	cmp	r0, #0
  4061bc:	f47f a8c0 	bne.w	405340 <_svfprintf_r+0x1a4>
  4061c0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4061c2:	46c8      	mov	r8, r9
  4061c4:	e458      	b.n	405a78 <_svfprintf_r+0x8dc>
  4061c6:	bf00      	nop
  4061c8:	0040a6fc 	.word	0x0040a6fc
  4061cc:	0040a6e8 	.word	0x0040a6e8
  4061d0:	2140      	movs	r1, #64	; 0x40
  4061d2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4061d4:	f7fe fab2 	bl	40473c <_malloc_r>
  4061d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4061da:	6010      	str	r0, [r2, #0]
  4061dc:	6110      	str	r0, [r2, #16]
  4061de:	2800      	cmp	r0, #0
  4061e0:	f000 81f2 	beq.w	4065c8 <_svfprintf_r+0x142c>
  4061e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4061e6:	2340      	movs	r3, #64	; 0x40
  4061e8:	6153      	str	r3, [r2, #20]
  4061ea:	f7fe bfee 	b.w	4051ca <_svfprintf_r+0x2e>
  4061ee:	a823      	add	r0, sp, #140	; 0x8c
  4061f0:	a920      	add	r1, sp, #128	; 0x80
  4061f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4061f4:	9004      	str	r0, [sp, #16]
  4061f6:	9103      	str	r1, [sp, #12]
  4061f8:	a81f      	add	r0, sp, #124	; 0x7c
  4061fa:	2103      	movs	r1, #3
  4061fc:	9002      	str	r0, [sp, #8]
  4061fe:	9a08      	ldr	r2, [sp, #32]
  406200:	9401      	str	r4, [sp, #4]
  406202:	463b      	mov	r3, r7
  406204:	9100      	str	r1, [sp, #0]
  406206:	980c      	ldr	r0, [sp, #48]	; 0x30
  406208:	f001 f9ca 	bl	4075a0 <_dtoa_r>
  40620c:	4625      	mov	r5, r4
  40620e:	4606      	mov	r6, r0
  406210:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406212:	2b46      	cmp	r3, #70	; 0x46
  406214:	eb06 0405 	add.w	r4, r6, r5
  406218:	f47f af29 	bne.w	40606e <_svfprintf_r+0xed2>
  40621c:	7833      	ldrb	r3, [r6, #0]
  40621e:	2b30      	cmp	r3, #48	; 0x30
  406220:	f000 8178 	beq.w	406514 <_svfprintf_r+0x1378>
  406224:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  406226:	442c      	add	r4, r5
  406228:	e721      	b.n	40606e <_svfprintf_r+0xed2>
  40622a:	aa25      	add	r2, sp, #148	; 0x94
  40622c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40622e:	980c      	ldr	r0, [sp, #48]	; 0x30
  406230:	f003 fbd6 	bl	4099e0 <__ssprint_r>
  406234:	2800      	cmp	r0, #0
  406236:	f47f a883 	bne.w	405340 <_svfprintf_r+0x1a4>
  40623a:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40623c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40623e:	46c8      	mov	r8, r9
  406240:	e782      	b.n	406148 <_svfprintf_r+0xfac>
  406242:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406244:	2b00      	cmp	r3, #0
  406246:	bf08      	it	eq
  406248:	2301      	moveq	r3, #1
  40624a:	930a      	str	r3, [sp, #40]	; 0x28
  40624c:	e6db      	b.n	406006 <_svfprintf_r+0xe6a>
  40624e:	4630      	mov	r0, r6
  406250:	940a      	str	r4, [sp, #40]	; 0x28
  406252:	f7fe ff35 	bl	4050c0 <strlen>
  406256:	950f      	str	r5, [sp, #60]	; 0x3c
  406258:	900e      	str	r0, [sp, #56]	; 0x38
  40625a:	f8cd b01c 	str.w	fp, [sp, #28]
  40625e:	4603      	mov	r3, r0
  406260:	f7ff b9f9 	b.w	405656 <_svfprintf_r+0x4ba>
  406264:	272d      	movs	r7, #45	; 0x2d
  406266:	2300      	movs	r3, #0
  406268:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40626c:	930a      	str	r3, [sp, #40]	; 0x28
  40626e:	f7ff b8ae 	b.w	4053ce <_svfprintf_r+0x232>
  406272:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  406274:	9312      	str	r3, [sp, #72]	; 0x48
  406276:	461a      	mov	r2, r3
  406278:	3303      	adds	r3, #3
  40627a:	db04      	blt.n	406286 <_svfprintf_r+0x10ea>
  40627c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40627e:	4619      	mov	r1, r3
  406280:	4291      	cmp	r1, r2
  406282:	f6bf af17 	bge.w	4060b4 <_svfprintf_r+0xf18>
  406286:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406288:	3b02      	subs	r3, #2
  40628a:	9311      	str	r3, [sp, #68]	; 0x44
  40628c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  406290:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  406294:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406296:	3b01      	subs	r3, #1
  406298:	2b00      	cmp	r3, #0
  40629a:	931f      	str	r3, [sp, #124]	; 0x7c
  40629c:	bfbd      	ittte	lt
  40629e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  4062a0:	f1c3 0301 	rsblt	r3, r3, #1
  4062a4:	222d      	movlt	r2, #45	; 0x2d
  4062a6:	222b      	movge	r2, #43	; 0x2b
  4062a8:	2b09      	cmp	r3, #9
  4062aa:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  4062ae:	f340 8116 	ble.w	4064de <_svfprintf_r+0x1342>
  4062b2:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  4062b6:	4620      	mov	r0, r4
  4062b8:	4dab      	ldr	r5, [pc, #684]	; (406568 <_svfprintf_r+0x13cc>)
  4062ba:	e000      	b.n	4062be <_svfprintf_r+0x1122>
  4062bc:	4610      	mov	r0, r2
  4062be:	fb85 1203 	smull	r1, r2, r5, r3
  4062c2:	17d9      	asrs	r1, r3, #31
  4062c4:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  4062c8:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4062cc:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  4062d0:	3230      	adds	r2, #48	; 0x30
  4062d2:	2909      	cmp	r1, #9
  4062d4:	f800 2c01 	strb.w	r2, [r0, #-1]
  4062d8:	460b      	mov	r3, r1
  4062da:	f100 32ff 	add.w	r2, r0, #4294967295
  4062de:	dced      	bgt.n	4062bc <_svfprintf_r+0x1120>
  4062e0:	3330      	adds	r3, #48	; 0x30
  4062e2:	3802      	subs	r0, #2
  4062e4:	b2d9      	uxtb	r1, r3
  4062e6:	4284      	cmp	r4, r0
  4062e8:	f802 1c01 	strb.w	r1, [r2, #-1]
  4062ec:	f240 8165 	bls.w	4065ba <_svfprintf_r+0x141e>
  4062f0:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  4062f4:	4613      	mov	r3, r2
  4062f6:	e001      	b.n	4062fc <_svfprintf_r+0x1160>
  4062f8:	f813 1b01 	ldrb.w	r1, [r3], #1
  4062fc:	f800 1b01 	strb.w	r1, [r0], #1
  406300:	42a3      	cmp	r3, r4
  406302:	d1f9      	bne.n	4062f8 <_svfprintf_r+0x115c>
  406304:	3301      	adds	r3, #1
  406306:	1a9b      	subs	r3, r3, r2
  406308:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  40630c:	4413      	add	r3, r2
  40630e:	aa21      	add	r2, sp, #132	; 0x84
  406310:	1a9b      	subs	r3, r3, r2
  406312:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  406314:	931b      	str	r3, [sp, #108]	; 0x6c
  406316:	2a01      	cmp	r2, #1
  406318:	4413      	add	r3, r2
  40631a:	930e      	str	r3, [sp, #56]	; 0x38
  40631c:	f340 8119 	ble.w	406552 <_svfprintf_r+0x13b6>
  406320:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  406322:	9a19      	ldr	r2, [sp, #100]	; 0x64
  406324:	4413      	add	r3, r2
  406326:	930e      	str	r3, [sp, #56]	; 0x38
  406328:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40632c:	9308      	str	r3, [sp, #32]
  40632e:	2300      	movs	r3, #0
  406330:	9312      	str	r3, [sp, #72]	; 0x48
  406332:	e6cf      	b.n	4060d4 <_svfprintf_r+0xf38>
  406334:	aa25      	add	r2, sp, #148	; 0x94
  406336:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406338:	980c      	ldr	r0, [sp, #48]	; 0x30
  40633a:	f003 fb51 	bl	4099e0 <__ssprint_r>
  40633e:	2800      	cmp	r0, #0
  406340:	f47e affe 	bne.w	405340 <_svfprintf_r+0x1a4>
  406344:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406346:	46c8      	mov	r8, r9
  406348:	e4d7      	b.n	405cfa <_svfprintf_r+0xb5e>
  40634a:	4623      	mov	r3, r4
  40634c:	e6a2      	b.n	406094 <_svfprintf_r+0xef8>
  40634e:	aa25      	add	r2, sp, #148	; 0x94
  406350:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406352:	980c      	ldr	r0, [sp, #48]	; 0x30
  406354:	f003 fb44 	bl	4099e0 <__ssprint_r>
  406358:	2800      	cmp	r0, #0
  40635a:	f47e aff1 	bne.w	405340 <_svfprintf_r+0x1a4>
  40635e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  406360:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406362:	46c8      	mov	r8, r9
  406364:	e5ae      	b.n	405ec4 <_svfprintf_r+0xd28>
  406366:	aa25      	add	r2, sp, #148	; 0x94
  406368:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40636a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40636c:	f003 fb38 	bl	4099e0 <__ssprint_r>
  406370:	2800      	cmp	r0, #0
  406372:	f47e afe5 	bne.w	405340 <_svfprintf_r+0x1a4>
  406376:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  406378:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40637a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40637c:	1a9a      	subs	r2, r3, r2
  40637e:	46c8      	mov	r8, r9
  406380:	e5b8      	b.n	405ef4 <_svfprintf_r+0xd58>
  406382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406384:	9612      	str	r6, [sp, #72]	; 0x48
  406386:	2b06      	cmp	r3, #6
  406388:	bf28      	it	cs
  40638a:	2306      	movcs	r3, #6
  40638c:	960a      	str	r6, [sp, #40]	; 0x28
  40638e:	4637      	mov	r7, r6
  406390:	9308      	str	r3, [sp, #32]
  406392:	950f      	str	r5, [sp, #60]	; 0x3c
  406394:	f8cd b01c 	str.w	fp, [sp, #28]
  406398:	930e      	str	r3, [sp, #56]	; 0x38
  40639a:	4e74      	ldr	r6, [pc, #464]	; (40656c <_svfprintf_r+0x13d0>)
  40639c:	f7ff b816 	b.w	4053cc <_svfprintf_r+0x230>
  4063a0:	a823      	add	r0, sp, #140	; 0x8c
  4063a2:	a920      	add	r1, sp, #128	; 0x80
  4063a4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4063a6:	9004      	str	r0, [sp, #16]
  4063a8:	9103      	str	r1, [sp, #12]
  4063aa:	a81f      	add	r0, sp, #124	; 0x7c
  4063ac:	2103      	movs	r1, #3
  4063ae:	9002      	str	r0, [sp, #8]
  4063b0:	9a08      	ldr	r2, [sp, #32]
  4063b2:	9501      	str	r5, [sp, #4]
  4063b4:	463b      	mov	r3, r7
  4063b6:	9100      	str	r1, [sp, #0]
  4063b8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4063ba:	f001 f8f1 	bl	4075a0 <_dtoa_r>
  4063be:	4606      	mov	r6, r0
  4063c0:	1944      	adds	r4, r0, r5
  4063c2:	e72b      	b.n	40621c <_svfprintf_r+0x1080>
  4063c4:	2306      	movs	r3, #6
  4063c6:	930a      	str	r3, [sp, #40]	; 0x28
  4063c8:	e61d      	b.n	406006 <_svfprintf_r+0xe6a>
  4063ca:	272d      	movs	r7, #45	; 0x2d
  4063cc:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4063d0:	f7ff bacd 	b.w	40596e <_svfprintf_r+0x7d2>
  4063d4:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4063d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4063d8:	4413      	add	r3, r2
  4063da:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4063dc:	930e      	str	r3, [sp, #56]	; 0x38
  4063de:	2a00      	cmp	r2, #0
  4063e0:	f340 80b0 	ble.w	406544 <_svfprintf_r+0x13a8>
  4063e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4063e8:	9308      	str	r3, [sp, #32]
  4063ea:	2367      	movs	r3, #103	; 0x67
  4063ec:	9311      	str	r3, [sp, #68]	; 0x44
  4063ee:	e671      	b.n	4060d4 <_svfprintf_r+0xf38>
  4063f0:	2b00      	cmp	r3, #0
  4063f2:	f340 80c3 	ble.w	40657c <_svfprintf_r+0x13e0>
  4063f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4063f8:	2a00      	cmp	r2, #0
  4063fa:	f040 8099 	bne.w	406530 <_svfprintf_r+0x1394>
  4063fe:	f01b 0f01 	tst.w	fp, #1
  406402:	f040 8095 	bne.w	406530 <_svfprintf_r+0x1394>
  406406:	9308      	str	r3, [sp, #32]
  406408:	930e      	str	r3, [sp, #56]	; 0x38
  40640a:	e663      	b.n	4060d4 <_svfprintf_r+0xf38>
  40640c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40640e:	9308      	str	r3, [sp, #32]
  406410:	930e      	str	r3, [sp, #56]	; 0x38
  406412:	900a      	str	r0, [sp, #40]	; 0x28
  406414:	950f      	str	r5, [sp, #60]	; 0x3c
  406416:	f8cd b01c 	str.w	fp, [sp, #28]
  40641a:	9012      	str	r0, [sp, #72]	; 0x48
  40641c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  406420:	f7fe bfd4 	b.w	4053cc <_svfprintf_r+0x230>
  406424:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406426:	2b47      	cmp	r3, #71	; 0x47
  406428:	f47f ae20 	bne.w	40606c <_svfprintf_r+0xed0>
  40642c:	f01b 0f01 	tst.w	fp, #1
  406430:	f47f aeee 	bne.w	406210 <_svfprintf_r+0x1074>
  406434:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  406436:	1b9b      	subs	r3, r3, r6
  406438:	9313      	str	r3, [sp, #76]	; 0x4c
  40643a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40643c:	2b47      	cmp	r3, #71	; 0x47
  40643e:	f43f af18 	beq.w	406272 <_svfprintf_r+0x10d6>
  406442:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  406444:	9312      	str	r3, [sp, #72]	; 0x48
  406446:	e721      	b.n	40628c <_svfprintf_r+0x10f0>
  406448:	424f      	negs	r7, r1
  40644a:	3110      	adds	r1, #16
  40644c:	4d48      	ldr	r5, [pc, #288]	; (406570 <_svfprintf_r+0x13d4>)
  40644e:	da2f      	bge.n	4064b0 <_svfprintf_r+0x1314>
  406450:	2410      	movs	r4, #16
  406452:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  406456:	e004      	b.n	406462 <_svfprintf_r+0x12c6>
  406458:	f108 0808 	add.w	r8, r8, #8
  40645c:	3f10      	subs	r7, #16
  40645e:	2f10      	cmp	r7, #16
  406460:	dd26      	ble.n	4064b0 <_svfprintf_r+0x1314>
  406462:	3301      	adds	r3, #1
  406464:	3210      	adds	r2, #16
  406466:	2b07      	cmp	r3, #7
  406468:	9227      	str	r2, [sp, #156]	; 0x9c
  40646a:	9326      	str	r3, [sp, #152]	; 0x98
  40646c:	f8c8 5000 	str.w	r5, [r8]
  406470:	f8c8 4004 	str.w	r4, [r8, #4]
  406474:	ddf0      	ble.n	406458 <_svfprintf_r+0x12bc>
  406476:	aa25      	add	r2, sp, #148	; 0x94
  406478:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40647a:	4658      	mov	r0, fp
  40647c:	f003 fab0 	bl	4099e0 <__ssprint_r>
  406480:	2800      	cmp	r0, #0
  406482:	f47e af5d 	bne.w	405340 <_svfprintf_r+0x1a4>
  406486:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  406488:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40648a:	46c8      	mov	r8, r9
  40648c:	e7e6      	b.n	40645c <_svfprintf_r+0x12c0>
  40648e:	aa25      	add	r2, sp, #148	; 0x94
  406490:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406492:	980c      	ldr	r0, [sp, #48]	; 0x30
  406494:	f003 faa4 	bl	4099e0 <__ssprint_r>
  406498:	2800      	cmp	r0, #0
  40649a:	f47e af51 	bne.w	405340 <_svfprintf_r+0x1a4>
  40649e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4064a0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4064a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4064a4:	46c8      	mov	r8, r9
  4064a6:	e667      	b.n	406178 <_svfprintf_r+0xfdc>
  4064a8:	2000      	movs	r0, #0
  4064aa:	900a      	str	r0, [sp, #40]	; 0x28
  4064ac:	f7fe bed0 	b.w	405250 <_svfprintf_r+0xb4>
  4064b0:	3301      	adds	r3, #1
  4064b2:	443a      	add	r2, r7
  4064b4:	2b07      	cmp	r3, #7
  4064b6:	e888 00a0 	stmia.w	r8, {r5, r7}
  4064ba:	9227      	str	r2, [sp, #156]	; 0x9c
  4064bc:	9326      	str	r3, [sp, #152]	; 0x98
  4064be:	f108 0808 	add.w	r8, r8, #8
  4064c2:	f77f ae5c 	ble.w	40617e <_svfprintf_r+0xfe2>
  4064c6:	aa25      	add	r2, sp, #148	; 0x94
  4064c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4064ca:	980c      	ldr	r0, [sp, #48]	; 0x30
  4064cc:	f003 fa88 	bl	4099e0 <__ssprint_r>
  4064d0:	2800      	cmp	r0, #0
  4064d2:	f47e af35 	bne.w	405340 <_svfprintf_r+0x1a4>
  4064d6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4064d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4064da:	46c8      	mov	r8, r9
  4064dc:	e64f      	b.n	40617e <_svfprintf_r+0xfe2>
  4064de:	3330      	adds	r3, #48	; 0x30
  4064e0:	2230      	movs	r2, #48	; 0x30
  4064e2:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  4064e6:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  4064ea:	ab22      	add	r3, sp, #136	; 0x88
  4064ec:	e70f      	b.n	40630e <_svfprintf_r+0x1172>
  4064ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4064f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4064f2:	4413      	add	r3, r2
  4064f4:	930e      	str	r3, [sp, #56]	; 0x38
  4064f6:	e775      	b.n	4063e4 <_svfprintf_r+0x1248>
  4064f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4064fa:	e5cb      	b.n	406094 <_svfprintf_r+0xef8>
  4064fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4064fe:	4e1d      	ldr	r6, [pc, #116]	; (406574 <_svfprintf_r+0x13d8>)
  406500:	2b00      	cmp	r3, #0
  406502:	bfb6      	itet	lt
  406504:	272d      	movlt	r7, #45	; 0x2d
  406506:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  40650a:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  40650e:	4b1a      	ldr	r3, [pc, #104]	; (406578 <_svfprintf_r+0x13dc>)
  406510:	f7ff ba2f 	b.w	405972 <_svfprintf_r+0x7d6>
  406514:	9a16      	ldr	r2, [sp, #88]	; 0x58
  406516:	9808      	ldr	r0, [sp, #32]
  406518:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40651a:	4639      	mov	r1, r7
  40651c:	f003 fd32 	bl	409f84 <__aeabi_dcmpeq>
  406520:	2800      	cmp	r0, #0
  406522:	f47f ae7f 	bne.w	406224 <_svfprintf_r+0x1088>
  406526:	f1c5 0501 	rsb	r5, r5, #1
  40652a:	951f      	str	r5, [sp, #124]	; 0x7c
  40652c:	442c      	add	r4, r5
  40652e:	e59e      	b.n	40606e <_svfprintf_r+0xed2>
  406530:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406532:	9a19      	ldr	r2, [sp, #100]	; 0x64
  406534:	4413      	add	r3, r2
  406536:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  406538:	441a      	add	r2, r3
  40653a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40653e:	920e      	str	r2, [sp, #56]	; 0x38
  406540:	9308      	str	r3, [sp, #32]
  406542:	e5c7      	b.n	4060d4 <_svfprintf_r+0xf38>
  406544:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406546:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406548:	f1c3 0301 	rsb	r3, r3, #1
  40654c:	441a      	add	r2, r3
  40654e:	4613      	mov	r3, r2
  406550:	e7d0      	b.n	4064f4 <_svfprintf_r+0x1358>
  406552:	f01b 0301 	ands.w	r3, fp, #1
  406556:	9312      	str	r3, [sp, #72]	; 0x48
  406558:	f47f aee2 	bne.w	406320 <_svfprintf_r+0x1184>
  40655c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40655e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  406562:	9308      	str	r3, [sp, #32]
  406564:	e5b6      	b.n	4060d4 <_svfprintf_r+0xf38>
  406566:	bf00      	nop
  406568:	66666667 	.word	0x66666667
  40656c:	0040a6e0 	.word	0x0040a6e0
  406570:	0040a6fc 	.word	0x0040a6fc
  406574:	0040a6b4 	.word	0x0040a6b4
  406578:	0040a6b0 	.word	0x0040a6b0
  40657c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40657e:	b913      	cbnz	r3, 406586 <_svfprintf_r+0x13ea>
  406580:	f01b 0f01 	tst.w	fp, #1
  406584:	d002      	beq.n	40658c <_svfprintf_r+0x13f0>
  406586:	9b19      	ldr	r3, [sp, #100]	; 0x64
  406588:	3301      	adds	r3, #1
  40658a:	e7d4      	b.n	406536 <_svfprintf_r+0x139a>
  40658c:	2301      	movs	r3, #1
  40658e:	e73a      	b.n	406406 <_svfprintf_r+0x126a>
  406590:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  406592:	f89a 3001 	ldrb.w	r3, [sl, #1]
  406596:	6828      	ldr	r0, [r5, #0]
  406598:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  40659c:	900a      	str	r0, [sp, #40]	; 0x28
  40659e:	4628      	mov	r0, r5
  4065a0:	3004      	adds	r0, #4
  4065a2:	46a2      	mov	sl, r4
  4065a4:	900f      	str	r0, [sp, #60]	; 0x3c
  4065a6:	f7fe be51 	b.w	40524c <_svfprintf_r+0xb0>
  4065aa:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4065ae:	f7ff b867 	b.w	405680 <_svfprintf_r+0x4e4>
  4065b2:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4065b6:	f7ff ba15 	b.w	4059e4 <_svfprintf_r+0x848>
  4065ba:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  4065be:	e6a6      	b.n	40630e <_svfprintf_r+0x1172>
  4065c0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4065c4:	f7ff b8eb 	b.w	40579e <_svfprintf_r+0x602>
  4065c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4065ca:	230c      	movs	r3, #12
  4065cc:	6013      	str	r3, [r2, #0]
  4065ce:	f04f 33ff 	mov.w	r3, #4294967295
  4065d2:	9309      	str	r3, [sp, #36]	; 0x24
  4065d4:	f7fe bebd 	b.w	405352 <_svfprintf_r+0x1b6>
  4065d8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4065dc:	f7ff b99a 	b.w	405914 <_svfprintf_r+0x778>
  4065e0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4065e4:	f7ff b976 	b.w	4058d4 <_svfprintf_r+0x738>
  4065e8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4065ec:	f7ff b959 	b.w	4058a2 <_svfprintf_r+0x706>
  4065f0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4065f4:	f7ff b912 	b.w	40581c <_svfprintf_r+0x680>

004065f8 <__sprint_r.part.0>:
  4065f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4065fc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4065fe:	049c      	lsls	r4, r3, #18
  406600:	4693      	mov	fp, r2
  406602:	d52f      	bpl.n	406664 <__sprint_r.part.0+0x6c>
  406604:	6893      	ldr	r3, [r2, #8]
  406606:	6812      	ldr	r2, [r2, #0]
  406608:	b353      	cbz	r3, 406660 <__sprint_r.part.0+0x68>
  40660a:	460e      	mov	r6, r1
  40660c:	4607      	mov	r7, r0
  40660e:	f102 0908 	add.w	r9, r2, #8
  406612:	e919 0420 	ldmdb	r9, {r5, sl}
  406616:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40661a:	d017      	beq.n	40664c <__sprint_r.part.0+0x54>
  40661c:	3d04      	subs	r5, #4
  40661e:	2400      	movs	r4, #0
  406620:	e001      	b.n	406626 <__sprint_r.part.0+0x2e>
  406622:	45a0      	cmp	r8, r4
  406624:	d010      	beq.n	406648 <__sprint_r.part.0+0x50>
  406626:	4632      	mov	r2, r6
  406628:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40662c:	4638      	mov	r0, r7
  40662e:	f002 f87b 	bl	408728 <_fputwc_r>
  406632:	1c43      	adds	r3, r0, #1
  406634:	f104 0401 	add.w	r4, r4, #1
  406638:	d1f3      	bne.n	406622 <__sprint_r.part.0+0x2a>
  40663a:	2300      	movs	r3, #0
  40663c:	f8cb 3008 	str.w	r3, [fp, #8]
  406640:	f8cb 3004 	str.w	r3, [fp, #4]
  406644:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406648:	f8db 3008 	ldr.w	r3, [fp, #8]
  40664c:	f02a 0a03 	bic.w	sl, sl, #3
  406650:	eba3 030a 	sub.w	r3, r3, sl
  406654:	f8cb 3008 	str.w	r3, [fp, #8]
  406658:	f109 0908 	add.w	r9, r9, #8
  40665c:	2b00      	cmp	r3, #0
  40665e:	d1d8      	bne.n	406612 <__sprint_r.part.0+0x1a>
  406660:	2000      	movs	r0, #0
  406662:	e7ea      	b.n	40663a <__sprint_r.part.0+0x42>
  406664:	f002 f9ca 	bl	4089fc <__sfvwrite_r>
  406668:	2300      	movs	r3, #0
  40666a:	f8cb 3008 	str.w	r3, [fp, #8]
  40666e:	f8cb 3004 	str.w	r3, [fp, #4]
  406672:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406676:	bf00      	nop

00406678 <_vfiprintf_r>:
  406678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40667c:	b0ad      	sub	sp, #180	; 0xb4
  40667e:	461d      	mov	r5, r3
  406680:	468b      	mov	fp, r1
  406682:	4690      	mov	r8, r2
  406684:	9307      	str	r3, [sp, #28]
  406686:	9006      	str	r0, [sp, #24]
  406688:	b118      	cbz	r0, 406692 <_vfiprintf_r+0x1a>
  40668a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40668c:	2b00      	cmp	r3, #0
  40668e:	f000 80f3 	beq.w	406878 <_vfiprintf_r+0x200>
  406692:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406696:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40669a:	07df      	lsls	r7, r3, #31
  40669c:	b281      	uxth	r1, r0
  40669e:	d402      	bmi.n	4066a6 <_vfiprintf_r+0x2e>
  4066a0:	058e      	lsls	r6, r1, #22
  4066a2:	f140 80fc 	bpl.w	40689e <_vfiprintf_r+0x226>
  4066a6:	048c      	lsls	r4, r1, #18
  4066a8:	d40a      	bmi.n	4066c0 <_vfiprintf_r+0x48>
  4066aa:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4066ae:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  4066b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4066b6:	f8ab 100c 	strh.w	r1, [fp, #12]
  4066ba:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  4066be:	b289      	uxth	r1, r1
  4066c0:	0708      	lsls	r0, r1, #28
  4066c2:	f140 80b3 	bpl.w	40682c <_vfiprintf_r+0x1b4>
  4066c6:	f8db 3010 	ldr.w	r3, [fp, #16]
  4066ca:	2b00      	cmp	r3, #0
  4066cc:	f000 80ae 	beq.w	40682c <_vfiprintf_r+0x1b4>
  4066d0:	f001 031a 	and.w	r3, r1, #26
  4066d4:	2b0a      	cmp	r3, #10
  4066d6:	f000 80b5 	beq.w	406844 <_vfiprintf_r+0x1cc>
  4066da:	2300      	movs	r3, #0
  4066dc:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  4066e0:	930b      	str	r3, [sp, #44]	; 0x2c
  4066e2:	9311      	str	r3, [sp, #68]	; 0x44
  4066e4:	9310      	str	r3, [sp, #64]	; 0x40
  4066e6:	9303      	str	r3, [sp, #12]
  4066e8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  4066ec:	46ca      	mov	sl, r9
  4066ee:	f8cd b010 	str.w	fp, [sp, #16]
  4066f2:	f898 3000 	ldrb.w	r3, [r8]
  4066f6:	4644      	mov	r4, r8
  4066f8:	b1fb      	cbz	r3, 40673a <_vfiprintf_r+0xc2>
  4066fa:	2b25      	cmp	r3, #37	; 0x25
  4066fc:	d102      	bne.n	406704 <_vfiprintf_r+0x8c>
  4066fe:	e01c      	b.n	40673a <_vfiprintf_r+0xc2>
  406700:	2b25      	cmp	r3, #37	; 0x25
  406702:	d003      	beq.n	40670c <_vfiprintf_r+0x94>
  406704:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  406708:	2b00      	cmp	r3, #0
  40670a:	d1f9      	bne.n	406700 <_vfiprintf_r+0x88>
  40670c:	eba4 0508 	sub.w	r5, r4, r8
  406710:	b19d      	cbz	r5, 40673a <_vfiprintf_r+0xc2>
  406712:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406714:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406716:	f8ca 8000 	str.w	r8, [sl]
  40671a:	3301      	adds	r3, #1
  40671c:	442a      	add	r2, r5
  40671e:	2b07      	cmp	r3, #7
  406720:	f8ca 5004 	str.w	r5, [sl, #4]
  406724:	9211      	str	r2, [sp, #68]	; 0x44
  406726:	9310      	str	r3, [sp, #64]	; 0x40
  406728:	dd7a      	ble.n	406820 <_vfiprintf_r+0x1a8>
  40672a:	2a00      	cmp	r2, #0
  40672c:	f040 84b0 	bne.w	407090 <_vfiprintf_r+0xa18>
  406730:	9b03      	ldr	r3, [sp, #12]
  406732:	9210      	str	r2, [sp, #64]	; 0x40
  406734:	442b      	add	r3, r5
  406736:	46ca      	mov	sl, r9
  406738:	9303      	str	r3, [sp, #12]
  40673a:	7823      	ldrb	r3, [r4, #0]
  40673c:	2b00      	cmp	r3, #0
  40673e:	f000 83e0 	beq.w	406f02 <_vfiprintf_r+0x88a>
  406742:	2000      	movs	r0, #0
  406744:	f04f 0300 	mov.w	r3, #0
  406748:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  40674c:	f104 0801 	add.w	r8, r4, #1
  406750:	7862      	ldrb	r2, [r4, #1]
  406752:	4605      	mov	r5, r0
  406754:	4606      	mov	r6, r0
  406756:	4603      	mov	r3, r0
  406758:	f04f 34ff 	mov.w	r4, #4294967295
  40675c:	f108 0801 	add.w	r8, r8, #1
  406760:	f1a2 0120 	sub.w	r1, r2, #32
  406764:	2958      	cmp	r1, #88	; 0x58
  406766:	f200 82de 	bhi.w	406d26 <_vfiprintf_r+0x6ae>
  40676a:	e8df f011 	tbh	[pc, r1, lsl #1]
  40676e:	0221      	.short	0x0221
  406770:	02dc02dc 	.word	0x02dc02dc
  406774:	02dc0229 	.word	0x02dc0229
  406778:	02dc02dc 	.word	0x02dc02dc
  40677c:	02dc02dc 	.word	0x02dc02dc
  406780:	028902dc 	.word	0x028902dc
  406784:	02dc0295 	.word	0x02dc0295
  406788:	02bd00a2 	.word	0x02bd00a2
  40678c:	019f02dc 	.word	0x019f02dc
  406790:	01a401a4 	.word	0x01a401a4
  406794:	01a401a4 	.word	0x01a401a4
  406798:	01a401a4 	.word	0x01a401a4
  40679c:	01a401a4 	.word	0x01a401a4
  4067a0:	02dc01a4 	.word	0x02dc01a4
  4067a4:	02dc02dc 	.word	0x02dc02dc
  4067a8:	02dc02dc 	.word	0x02dc02dc
  4067ac:	02dc02dc 	.word	0x02dc02dc
  4067b0:	02dc02dc 	.word	0x02dc02dc
  4067b4:	01b202dc 	.word	0x01b202dc
  4067b8:	02dc02dc 	.word	0x02dc02dc
  4067bc:	02dc02dc 	.word	0x02dc02dc
  4067c0:	02dc02dc 	.word	0x02dc02dc
  4067c4:	02dc02dc 	.word	0x02dc02dc
  4067c8:	02dc02dc 	.word	0x02dc02dc
  4067cc:	02dc0197 	.word	0x02dc0197
  4067d0:	02dc02dc 	.word	0x02dc02dc
  4067d4:	02dc02dc 	.word	0x02dc02dc
  4067d8:	02dc019b 	.word	0x02dc019b
  4067dc:	025302dc 	.word	0x025302dc
  4067e0:	02dc02dc 	.word	0x02dc02dc
  4067e4:	02dc02dc 	.word	0x02dc02dc
  4067e8:	02dc02dc 	.word	0x02dc02dc
  4067ec:	02dc02dc 	.word	0x02dc02dc
  4067f0:	02dc02dc 	.word	0x02dc02dc
  4067f4:	021b025a 	.word	0x021b025a
  4067f8:	02dc02dc 	.word	0x02dc02dc
  4067fc:	026e02dc 	.word	0x026e02dc
  406800:	02dc021b 	.word	0x02dc021b
  406804:	027302dc 	.word	0x027302dc
  406808:	01f502dc 	.word	0x01f502dc
  40680c:	02090182 	.word	0x02090182
  406810:	02dc02d7 	.word	0x02dc02d7
  406814:	02dc029a 	.word	0x02dc029a
  406818:	02dc00a7 	.word	0x02dc00a7
  40681c:	022e02dc 	.word	0x022e02dc
  406820:	f10a 0a08 	add.w	sl, sl, #8
  406824:	9b03      	ldr	r3, [sp, #12]
  406826:	442b      	add	r3, r5
  406828:	9303      	str	r3, [sp, #12]
  40682a:	e786      	b.n	40673a <_vfiprintf_r+0xc2>
  40682c:	4659      	mov	r1, fp
  40682e:	9806      	ldr	r0, [sp, #24]
  406830:	f000 fdac 	bl	40738c <__swsetup_r>
  406834:	bb18      	cbnz	r0, 40687e <_vfiprintf_r+0x206>
  406836:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40683a:	f001 031a 	and.w	r3, r1, #26
  40683e:	2b0a      	cmp	r3, #10
  406840:	f47f af4b 	bne.w	4066da <_vfiprintf_r+0x62>
  406844:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  406848:	2b00      	cmp	r3, #0
  40684a:	f6ff af46 	blt.w	4066da <_vfiprintf_r+0x62>
  40684e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406852:	07db      	lsls	r3, r3, #31
  406854:	d405      	bmi.n	406862 <_vfiprintf_r+0x1ea>
  406856:	058f      	lsls	r7, r1, #22
  406858:	d403      	bmi.n	406862 <_vfiprintf_r+0x1ea>
  40685a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40685e:	f002 fa91 	bl	408d84 <__retarget_lock_release_recursive>
  406862:	462b      	mov	r3, r5
  406864:	4642      	mov	r2, r8
  406866:	4659      	mov	r1, fp
  406868:	9806      	ldr	r0, [sp, #24]
  40686a:	f000 fd4d 	bl	407308 <__sbprintf>
  40686e:	9003      	str	r0, [sp, #12]
  406870:	9803      	ldr	r0, [sp, #12]
  406872:	b02d      	add	sp, #180	; 0xb4
  406874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406878:	f001 feb4 	bl	4085e4 <__sinit>
  40687c:	e709      	b.n	406692 <_vfiprintf_r+0x1a>
  40687e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406882:	07d9      	lsls	r1, r3, #31
  406884:	d404      	bmi.n	406890 <_vfiprintf_r+0x218>
  406886:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40688a:	059a      	lsls	r2, r3, #22
  40688c:	f140 84aa 	bpl.w	4071e4 <_vfiprintf_r+0xb6c>
  406890:	f04f 33ff 	mov.w	r3, #4294967295
  406894:	9303      	str	r3, [sp, #12]
  406896:	9803      	ldr	r0, [sp, #12]
  406898:	b02d      	add	sp, #180	; 0xb4
  40689a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40689e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4068a2:	f002 fa6d 	bl	408d80 <__retarget_lock_acquire_recursive>
  4068a6:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4068aa:	b281      	uxth	r1, r0
  4068ac:	e6fb      	b.n	4066a6 <_vfiprintf_r+0x2e>
  4068ae:	4276      	negs	r6, r6
  4068b0:	9207      	str	r2, [sp, #28]
  4068b2:	f043 0304 	orr.w	r3, r3, #4
  4068b6:	f898 2000 	ldrb.w	r2, [r8]
  4068ba:	e74f      	b.n	40675c <_vfiprintf_r+0xe4>
  4068bc:	9608      	str	r6, [sp, #32]
  4068be:	069e      	lsls	r6, r3, #26
  4068c0:	f100 8450 	bmi.w	407164 <_vfiprintf_r+0xaec>
  4068c4:	9907      	ldr	r1, [sp, #28]
  4068c6:	06dd      	lsls	r5, r3, #27
  4068c8:	460a      	mov	r2, r1
  4068ca:	f100 83ef 	bmi.w	4070ac <_vfiprintf_r+0xa34>
  4068ce:	0658      	lsls	r0, r3, #25
  4068d0:	f140 83ec 	bpl.w	4070ac <_vfiprintf_r+0xa34>
  4068d4:	880e      	ldrh	r6, [r1, #0]
  4068d6:	3104      	adds	r1, #4
  4068d8:	2700      	movs	r7, #0
  4068da:	2201      	movs	r2, #1
  4068dc:	9107      	str	r1, [sp, #28]
  4068de:	f04f 0100 	mov.w	r1, #0
  4068e2:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  4068e6:	2500      	movs	r5, #0
  4068e8:	1c61      	adds	r1, r4, #1
  4068ea:	f000 8116 	beq.w	406b1a <_vfiprintf_r+0x4a2>
  4068ee:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  4068f2:	9102      	str	r1, [sp, #8]
  4068f4:	ea56 0107 	orrs.w	r1, r6, r7
  4068f8:	f040 8114 	bne.w	406b24 <_vfiprintf_r+0x4ac>
  4068fc:	2c00      	cmp	r4, #0
  4068fe:	f040 835c 	bne.w	406fba <_vfiprintf_r+0x942>
  406902:	2a00      	cmp	r2, #0
  406904:	f040 83b7 	bne.w	407076 <_vfiprintf_r+0x9fe>
  406908:	f013 0301 	ands.w	r3, r3, #1
  40690c:	9305      	str	r3, [sp, #20]
  40690e:	f000 8457 	beq.w	4071c0 <_vfiprintf_r+0xb48>
  406912:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  406916:	2330      	movs	r3, #48	; 0x30
  406918:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  40691c:	9b05      	ldr	r3, [sp, #20]
  40691e:	42a3      	cmp	r3, r4
  406920:	bfb8      	it	lt
  406922:	4623      	movlt	r3, r4
  406924:	9301      	str	r3, [sp, #4]
  406926:	b10d      	cbz	r5, 40692c <_vfiprintf_r+0x2b4>
  406928:	3301      	adds	r3, #1
  40692a:	9301      	str	r3, [sp, #4]
  40692c:	9b02      	ldr	r3, [sp, #8]
  40692e:	f013 0302 	ands.w	r3, r3, #2
  406932:	9309      	str	r3, [sp, #36]	; 0x24
  406934:	d002      	beq.n	40693c <_vfiprintf_r+0x2c4>
  406936:	9b01      	ldr	r3, [sp, #4]
  406938:	3302      	adds	r3, #2
  40693a:	9301      	str	r3, [sp, #4]
  40693c:	9b02      	ldr	r3, [sp, #8]
  40693e:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  406942:	930a      	str	r3, [sp, #40]	; 0x28
  406944:	f040 8217 	bne.w	406d76 <_vfiprintf_r+0x6fe>
  406948:	9b08      	ldr	r3, [sp, #32]
  40694a:	9a01      	ldr	r2, [sp, #4]
  40694c:	1a9d      	subs	r5, r3, r2
  40694e:	2d00      	cmp	r5, #0
  406950:	f340 8211 	ble.w	406d76 <_vfiprintf_r+0x6fe>
  406954:	2d10      	cmp	r5, #16
  406956:	f340 8490 	ble.w	40727a <_vfiprintf_r+0xc02>
  40695a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40695c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40695e:	4ec4      	ldr	r6, [pc, #784]	; (406c70 <_vfiprintf_r+0x5f8>)
  406960:	46d6      	mov	lr, sl
  406962:	2710      	movs	r7, #16
  406964:	46a2      	mov	sl, r4
  406966:	4619      	mov	r1, r3
  406968:	9c06      	ldr	r4, [sp, #24]
  40696a:	e007      	b.n	40697c <_vfiprintf_r+0x304>
  40696c:	f101 0c02 	add.w	ip, r1, #2
  406970:	f10e 0e08 	add.w	lr, lr, #8
  406974:	4601      	mov	r1, r0
  406976:	3d10      	subs	r5, #16
  406978:	2d10      	cmp	r5, #16
  40697a:	dd11      	ble.n	4069a0 <_vfiprintf_r+0x328>
  40697c:	1c48      	adds	r0, r1, #1
  40697e:	3210      	adds	r2, #16
  406980:	2807      	cmp	r0, #7
  406982:	9211      	str	r2, [sp, #68]	; 0x44
  406984:	e88e 00c0 	stmia.w	lr, {r6, r7}
  406988:	9010      	str	r0, [sp, #64]	; 0x40
  40698a:	ddef      	ble.n	40696c <_vfiprintf_r+0x2f4>
  40698c:	2a00      	cmp	r2, #0
  40698e:	f040 81e4 	bne.w	406d5a <_vfiprintf_r+0x6e2>
  406992:	3d10      	subs	r5, #16
  406994:	2d10      	cmp	r5, #16
  406996:	4611      	mov	r1, r2
  406998:	f04f 0c01 	mov.w	ip, #1
  40699c:	46ce      	mov	lr, r9
  40699e:	dced      	bgt.n	40697c <_vfiprintf_r+0x304>
  4069a0:	4654      	mov	r4, sl
  4069a2:	4661      	mov	r1, ip
  4069a4:	46f2      	mov	sl, lr
  4069a6:	442a      	add	r2, r5
  4069a8:	2907      	cmp	r1, #7
  4069aa:	9211      	str	r2, [sp, #68]	; 0x44
  4069ac:	f8ca 6000 	str.w	r6, [sl]
  4069b0:	f8ca 5004 	str.w	r5, [sl, #4]
  4069b4:	9110      	str	r1, [sp, #64]	; 0x40
  4069b6:	f300 82ec 	bgt.w	406f92 <_vfiprintf_r+0x91a>
  4069ba:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4069be:	f10a 0a08 	add.w	sl, sl, #8
  4069c2:	1c48      	adds	r0, r1, #1
  4069c4:	2d00      	cmp	r5, #0
  4069c6:	f040 81de 	bne.w	406d86 <_vfiprintf_r+0x70e>
  4069ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4069cc:	2b00      	cmp	r3, #0
  4069ce:	f000 81f8 	beq.w	406dc2 <_vfiprintf_r+0x74a>
  4069d2:	3202      	adds	r2, #2
  4069d4:	a90e      	add	r1, sp, #56	; 0x38
  4069d6:	2302      	movs	r3, #2
  4069d8:	2807      	cmp	r0, #7
  4069da:	9211      	str	r2, [sp, #68]	; 0x44
  4069dc:	9010      	str	r0, [sp, #64]	; 0x40
  4069de:	e88a 000a 	stmia.w	sl, {r1, r3}
  4069e2:	f340 81ea 	ble.w	406dba <_vfiprintf_r+0x742>
  4069e6:	2a00      	cmp	r2, #0
  4069e8:	f040 838c 	bne.w	407104 <_vfiprintf_r+0xa8c>
  4069ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4069ee:	2b80      	cmp	r3, #128	; 0x80
  4069f0:	f04f 0001 	mov.w	r0, #1
  4069f4:	4611      	mov	r1, r2
  4069f6:	46ca      	mov	sl, r9
  4069f8:	f040 81e7 	bne.w	406dca <_vfiprintf_r+0x752>
  4069fc:	9b08      	ldr	r3, [sp, #32]
  4069fe:	9d01      	ldr	r5, [sp, #4]
  406a00:	1b5e      	subs	r6, r3, r5
  406a02:	2e00      	cmp	r6, #0
  406a04:	f340 81e1 	ble.w	406dca <_vfiprintf_r+0x752>
  406a08:	2e10      	cmp	r6, #16
  406a0a:	4d9a      	ldr	r5, [pc, #616]	; (406c74 <_vfiprintf_r+0x5fc>)
  406a0c:	f340 8450 	ble.w	4072b0 <_vfiprintf_r+0xc38>
  406a10:	46d4      	mov	ip, sl
  406a12:	2710      	movs	r7, #16
  406a14:	46a2      	mov	sl, r4
  406a16:	9c06      	ldr	r4, [sp, #24]
  406a18:	e007      	b.n	406a2a <_vfiprintf_r+0x3b2>
  406a1a:	f101 0e02 	add.w	lr, r1, #2
  406a1e:	f10c 0c08 	add.w	ip, ip, #8
  406a22:	4601      	mov	r1, r0
  406a24:	3e10      	subs	r6, #16
  406a26:	2e10      	cmp	r6, #16
  406a28:	dd11      	ble.n	406a4e <_vfiprintf_r+0x3d6>
  406a2a:	1c48      	adds	r0, r1, #1
  406a2c:	3210      	adds	r2, #16
  406a2e:	2807      	cmp	r0, #7
  406a30:	9211      	str	r2, [sp, #68]	; 0x44
  406a32:	e88c 00a0 	stmia.w	ip, {r5, r7}
  406a36:	9010      	str	r0, [sp, #64]	; 0x40
  406a38:	ddef      	ble.n	406a1a <_vfiprintf_r+0x3a2>
  406a3a:	2a00      	cmp	r2, #0
  406a3c:	f040 829d 	bne.w	406f7a <_vfiprintf_r+0x902>
  406a40:	3e10      	subs	r6, #16
  406a42:	2e10      	cmp	r6, #16
  406a44:	f04f 0e01 	mov.w	lr, #1
  406a48:	4611      	mov	r1, r2
  406a4a:	46cc      	mov	ip, r9
  406a4c:	dced      	bgt.n	406a2a <_vfiprintf_r+0x3b2>
  406a4e:	4654      	mov	r4, sl
  406a50:	46e2      	mov	sl, ip
  406a52:	4432      	add	r2, r6
  406a54:	f1be 0f07 	cmp.w	lr, #7
  406a58:	9211      	str	r2, [sp, #68]	; 0x44
  406a5a:	e88a 0060 	stmia.w	sl, {r5, r6}
  406a5e:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  406a62:	f300 8369 	bgt.w	407138 <_vfiprintf_r+0xac0>
  406a66:	f10a 0a08 	add.w	sl, sl, #8
  406a6a:	f10e 0001 	add.w	r0, lr, #1
  406a6e:	4671      	mov	r1, lr
  406a70:	e1ab      	b.n	406dca <_vfiprintf_r+0x752>
  406a72:	9608      	str	r6, [sp, #32]
  406a74:	f013 0220 	ands.w	r2, r3, #32
  406a78:	f040 838c 	bne.w	407194 <_vfiprintf_r+0xb1c>
  406a7c:	f013 0110 	ands.w	r1, r3, #16
  406a80:	f040 831a 	bne.w	4070b8 <_vfiprintf_r+0xa40>
  406a84:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  406a88:	f000 8316 	beq.w	4070b8 <_vfiprintf_r+0xa40>
  406a8c:	9807      	ldr	r0, [sp, #28]
  406a8e:	460a      	mov	r2, r1
  406a90:	4601      	mov	r1, r0
  406a92:	3104      	adds	r1, #4
  406a94:	8806      	ldrh	r6, [r0, #0]
  406a96:	9107      	str	r1, [sp, #28]
  406a98:	2700      	movs	r7, #0
  406a9a:	e720      	b.n	4068de <_vfiprintf_r+0x266>
  406a9c:	9608      	str	r6, [sp, #32]
  406a9e:	f043 0310 	orr.w	r3, r3, #16
  406aa2:	e7e7      	b.n	406a74 <_vfiprintf_r+0x3fc>
  406aa4:	9608      	str	r6, [sp, #32]
  406aa6:	f043 0310 	orr.w	r3, r3, #16
  406aaa:	e708      	b.n	4068be <_vfiprintf_r+0x246>
  406aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406ab0:	f898 2000 	ldrb.w	r2, [r8]
  406ab4:	e652      	b.n	40675c <_vfiprintf_r+0xe4>
  406ab6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  406aba:	2600      	movs	r6, #0
  406abc:	f818 2b01 	ldrb.w	r2, [r8], #1
  406ac0:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  406ac4:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  406ac8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  406acc:	2909      	cmp	r1, #9
  406ace:	d9f5      	bls.n	406abc <_vfiprintf_r+0x444>
  406ad0:	e646      	b.n	406760 <_vfiprintf_r+0xe8>
  406ad2:	9608      	str	r6, [sp, #32]
  406ad4:	2800      	cmp	r0, #0
  406ad6:	f040 8408 	bne.w	4072ea <_vfiprintf_r+0xc72>
  406ada:	f043 0310 	orr.w	r3, r3, #16
  406ade:	069e      	lsls	r6, r3, #26
  406ae0:	f100 834c 	bmi.w	40717c <_vfiprintf_r+0xb04>
  406ae4:	06dd      	lsls	r5, r3, #27
  406ae6:	f100 82f3 	bmi.w	4070d0 <_vfiprintf_r+0xa58>
  406aea:	0658      	lsls	r0, r3, #25
  406aec:	f140 82f0 	bpl.w	4070d0 <_vfiprintf_r+0xa58>
  406af0:	9d07      	ldr	r5, [sp, #28]
  406af2:	f9b5 6000 	ldrsh.w	r6, [r5]
  406af6:	462a      	mov	r2, r5
  406af8:	17f7      	asrs	r7, r6, #31
  406afa:	3204      	adds	r2, #4
  406afc:	4630      	mov	r0, r6
  406afe:	4639      	mov	r1, r7
  406b00:	9207      	str	r2, [sp, #28]
  406b02:	2800      	cmp	r0, #0
  406b04:	f171 0200 	sbcs.w	r2, r1, #0
  406b08:	f2c0 835d 	blt.w	4071c6 <_vfiprintf_r+0xb4e>
  406b0c:	1c61      	adds	r1, r4, #1
  406b0e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406b12:	f04f 0201 	mov.w	r2, #1
  406b16:	f47f aeea 	bne.w	4068ee <_vfiprintf_r+0x276>
  406b1a:	ea56 0107 	orrs.w	r1, r6, r7
  406b1e:	f000 824d 	beq.w	406fbc <_vfiprintf_r+0x944>
  406b22:	9302      	str	r3, [sp, #8]
  406b24:	2a01      	cmp	r2, #1
  406b26:	f000 828c 	beq.w	407042 <_vfiprintf_r+0x9ca>
  406b2a:	2a02      	cmp	r2, #2
  406b2c:	f040 825c 	bne.w	406fe8 <_vfiprintf_r+0x970>
  406b30:	980b      	ldr	r0, [sp, #44]	; 0x2c
  406b32:	46cb      	mov	fp, r9
  406b34:	0933      	lsrs	r3, r6, #4
  406b36:	f006 010f 	and.w	r1, r6, #15
  406b3a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  406b3e:	093a      	lsrs	r2, r7, #4
  406b40:	461e      	mov	r6, r3
  406b42:	4617      	mov	r7, r2
  406b44:	5c43      	ldrb	r3, [r0, r1]
  406b46:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  406b4a:	ea56 0307 	orrs.w	r3, r6, r7
  406b4e:	d1f1      	bne.n	406b34 <_vfiprintf_r+0x4bc>
  406b50:	eba9 030b 	sub.w	r3, r9, fp
  406b54:	9305      	str	r3, [sp, #20]
  406b56:	e6e1      	b.n	40691c <_vfiprintf_r+0x2a4>
  406b58:	2800      	cmp	r0, #0
  406b5a:	f040 83c0 	bne.w	4072de <_vfiprintf_r+0xc66>
  406b5e:	0699      	lsls	r1, r3, #26
  406b60:	f100 8367 	bmi.w	407232 <_vfiprintf_r+0xbba>
  406b64:	06da      	lsls	r2, r3, #27
  406b66:	f100 80f1 	bmi.w	406d4c <_vfiprintf_r+0x6d4>
  406b6a:	065b      	lsls	r3, r3, #25
  406b6c:	f140 80ee 	bpl.w	406d4c <_vfiprintf_r+0x6d4>
  406b70:	9a07      	ldr	r2, [sp, #28]
  406b72:	6813      	ldr	r3, [r2, #0]
  406b74:	3204      	adds	r2, #4
  406b76:	9207      	str	r2, [sp, #28]
  406b78:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  406b7c:	801a      	strh	r2, [r3, #0]
  406b7e:	e5b8      	b.n	4066f2 <_vfiprintf_r+0x7a>
  406b80:	9807      	ldr	r0, [sp, #28]
  406b82:	4a3d      	ldr	r2, [pc, #244]	; (406c78 <_vfiprintf_r+0x600>)
  406b84:	9608      	str	r6, [sp, #32]
  406b86:	920b      	str	r2, [sp, #44]	; 0x2c
  406b88:	6806      	ldr	r6, [r0, #0]
  406b8a:	2278      	movs	r2, #120	; 0x78
  406b8c:	2130      	movs	r1, #48	; 0x30
  406b8e:	3004      	adds	r0, #4
  406b90:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  406b94:	f043 0302 	orr.w	r3, r3, #2
  406b98:	9007      	str	r0, [sp, #28]
  406b9a:	2700      	movs	r7, #0
  406b9c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  406ba0:	2202      	movs	r2, #2
  406ba2:	e69c      	b.n	4068de <_vfiprintf_r+0x266>
  406ba4:	9608      	str	r6, [sp, #32]
  406ba6:	2800      	cmp	r0, #0
  406ba8:	d099      	beq.n	406ade <_vfiprintf_r+0x466>
  406baa:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406bae:	e796      	b.n	406ade <_vfiprintf_r+0x466>
  406bb0:	f898 2000 	ldrb.w	r2, [r8]
  406bb4:	2d00      	cmp	r5, #0
  406bb6:	f47f add1 	bne.w	40675c <_vfiprintf_r+0xe4>
  406bba:	2001      	movs	r0, #1
  406bbc:	2520      	movs	r5, #32
  406bbe:	e5cd      	b.n	40675c <_vfiprintf_r+0xe4>
  406bc0:	f043 0301 	orr.w	r3, r3, #1
  406bc4:	f898 2000 	ldrb.w	r2, [r8]
  406bc8:	e5c8      	b.n	40675c <_vfiprintf_r+0xe4>
  406bca:	9608      	str	r6, [sp, #32]
  406bcc:	2800      	cmp	r0, #0
  406bce:	f040 8393 	bne.w	4072f8 <_vfiprintf_r+0xc80>
  406bd2:	4929      	ldr	r1, [pc, #164]	; (406c78 <_vfiprintf_r+0x600>)
  406bd4:	910b      	str	r1, [sp, #44]	; 0x2c
  406bd6:	069f      	lsls	r7, r3, #26
  406bd8:	f100 82e8 	bmi.w	4071ac <_vfiprintf_r+0xb34>
  406bdc:	9807      	ldr	r0, [sp, #28]
  406bde:	06de      	lsls	r6, r3, #27
  406be0:	4601      	mov	r1, r0
  406be2:	f100 8270 	bmi.w	4070c6 <_vfiprintf_r+0xa4e>
  406be6:	065d      	lsls	r5, r3, #25
  406be8:	f140 826d 	bpl.w	4070c6 <_vfiprintf_r+0xa4e>
  406bec:	3104      	adds	r1, #4
  406bee:	8806      	ldrh	r6, [r0, #0]
  406bf0:	9107      	str	r1, [sp, #28]
  406bf2:	2700      	movs	r7, #0
  406bf4:	07d8      	lsls	r0, r3, #31
  406bf6:	f140 8222 	bpl.w	40703e <_vfiprintf_r+0x9c6>
  406bfa:	ea56 0107 	orrs.w	r1, r6, r7
  406bfe:	f000 821e 	beq.w	40703e <_vfiprintf_r+0x9c6>
  406c02:	2130      	movs	r1, #48	; 0x30
  406c04:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  406c08:	f043 0302 	orr.w	r3, r3, #2
  406c0c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  406c10:	2202      	movs	r2, #2
  406c12:	e664      	b.n	4068de <_vfiprintf_r+0x266>
  406c14:	9608      	str	r6, [sp, #32]
  406c16:	2800      	cmp	r0, #0
  406c18:	f040 836b 	bne.w	4072f2 <_vfiprintf_r+0xc7a>
  406c1c:	4917      	ldr	r1, [pc, #92]	; (406c7c <_vfiprintf_r+0x604>)
  406c1e:	910b      	str	r1, [sp, #44]	; 0x2c
  406c20:	e7d9      	b.n	406bd6 <_vfiprintf_r+0x55e>
  406c22:	9907      	ldr	r1, [sp, #28]
  406c24:	9608      	str	r6, [sp, #32]
  406c26:	680a      	ldr	r2, [r1, #0]
  406c28:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  406c2c:	f04f 0000 	mov.w	r0, #0
  406c30:	460a      	mov	r2, r1
  406c32:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  406c36:	3204      	adds	r2, #4
  406c38:	2001      	movs	r0, #1
  406c3a:	9001      	str	r0, [sp, #4]
  406c3c:	9207      	str	r2, [sp, #28]
  406c3e:	9005      	str	r0, [sp, #20]
  406c40:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  406c44:	9302      	str	r3, [sp, #8]
  406c46:	2400      	movs	r4, #0
  406c48:	e670      	b.n	40692c <_vfiprintf_r+0x2b4>
  406c4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406c4e:	f898 2000 	ldrb.w	r2, [r8]
  406c52:	e583      	b.n	40675c <_vfiprintf_r+0xe4>
  406c54:	f898 2000 	ldrb.w	r2, [r8]
  406c58:	2a6c      	cmp	r2, #108	; 0x6c
  406c5a:	bf03      	ittte	eq
  406c5c:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  406c60:	f043 0320 	orreq.w	r3, r3, #32
  406c64:	f108 0801 	addeq.w	r8, r8, #1
  406c68:	f043 0310 	orrne.w	r3, r3, #16
  406c6c:	e576      	b.n	40675c <_vfiprintf_r+0xe4>
  406c6e:	bf00      	nop
  406c70:	0040a70c 	.word	0x0040a70c
  406c74:	0040a71c 	.word	0x0040a71c
  406c78:	0040a6cc 	.word	0x0040a6cc
  406c7c:	0040a6b8 	.word	0x0040a6b8
  406c80:	9907      	ldr	r1, [sp, #28]
  406c82:	680e      	ldr	r6, [r1, #0]
  406c84:	460a      	mov	r2, r1
  406c86:	2e00      	cmp	r6, #0
  406c88:	f102 0204 	add.w	r2, r2, #4
  406c8c:	f6ff ae0f 	blt.w	4068ae <_vfiprintf_r+0x236>
  406c90:	9207      	str	r2, [sp, #28]
  406c92:	f898 2000 	ldrb.w	r2, [r8]
  406c96:	e561      	b.n	40675c <_vfiprintf_r+0xe4>
  406c98:	f898 2000 	ldrb.w	r2, [r8]
  406c9c:	2001      	movs	r0, #1
  406c9e:	252b      	movs	r5, #43	; 0x2b
  406ca0:	e55c      	b.n	40675c <_vfiprintf_r+0xe4>
  406ca2:	9907      	ldr	r1, [sp, #28]
  406ca4:	9608      	str	r6, [sp, #32]
  406ca6:	f8d1 b000 	ldr.w	fp, [r1]
  406caa:	f04f 0200 	mov.w	r2, #0
  406cae:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  406cb2:	1d0e      	adds	r6, r1, #4
  406cb4:	f1bb 0f00 	cmp.w	fp, #0
  406cb8:	f000 82e5 	beq.w	407286 <_vfiprintf_r+0xc0e>
  406cbc:	1c67      	adds	r7, r4, #1
  406cbe:	f000 82c4 	beq.w	40724a <_vfiprintf_r+0xbd2>
  406cc2:	4622      	mov	r2, r4
  406cc4:	2100      	movs	r1, #0
  406cc6:	4658      	mov	r0, fp
  406cc8:	9301      	str	r3, [sp, #4]
  406cca:	f002 f8f1 	bl	408eb0 <memchr>
  406cce:	9b01      	ldr	r3, [sp, #4]
  406cd0:	2800      	cmp	r0, #0
  406cd2:	f000 82e5 	beq.w	4072a0 <_vfiprintf_r+0xc28>
  406cd6:	eba0 020b 	sub.w	r2, r0, fp
  406cda:	9205      	str	r2, [sp, #20]
  406cdc:	9607      	str	r6, [sp, #28]
  406cde:	9302      	str	r3, [sp, #8]
  406ce0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406ce4:	2400      	movs	r4, #0
  406ce6:	e619      	b.n	40691c <_vfiprintf_r+0x2a4>
  406ce8:	f898 2000 	ldrb.w	r2, [r8]
  406cec:	2a2a      	cmp	r2, #42	; 0x2a
  406cee:	f108 0701 	add.w	r7, r8, #1
  406cf2:	f000 82e9 	beq.w	4072c8 <_vfiprintf_r+0xc50>
  406cf6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  406cfa:	2909      	cmp	r1, #9
  406cfc:	46b8      	mov	r8, r7
  406cfe:	f04f 0400 	mov.w	r4, #0
  406d02:	f63f ad2d 	bhi.w	406760 <_vfiprintf_r+0xe8>
  406d06:	f818 2b01 	ldrb.w	r2, [r8], #1
  406d0a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  406d0e:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  406d12:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  406d16:	2909      	cmp	r1, #9
  406d18:	d9f5      	bls.n	406d06 <_vfiprintf_r+0x68e>
  406d1a:	e521      	b.n	406760 <_vfiprintf_r+0xe8>
  406d1c:	f043 0320 	orr.w	r3, r3, #32
  406d20:	f898 2000 	ldrb.w	r2, [r8]
  406d24:	e51a      	b.n	40675c <_vfiprintf_r+0xe4>
  406d26:	9608      	str	r6, [sp, #32]
  406d28:	2800      	cmp	r0, #0
  406d2a:	f040 82db 	bne.w	4072e4 <_vfiprintf_r+0xc6c>
  406d2e:	2a00      	cmp	r2, #0
  406d30:	f000 80e7 	beq.w	406f02 <_vfiprintf_r+0x88a>
  406d34:	2101      	movs	r1, #1
  406d36:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  406d3a:	f04f 0200 	mov.w	r2, #0
  406d3e:	9101      	str	r1, [sp, #4]
  406d40:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  406d44:	9105      	str	r1, [sp, #20]
  406d46:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  406d4a:	e77b      	b.n	406c44 <_vfiprintf_r+0x5cc>
  406d4c:	9a07      	ldr	r2, [sp, #28]
  406d4e:	6813      	ldr	r3, [r2, #0]
  406d50:	3204      	adds	r2, #4
  406d52:	9207      	str	r2, [sp, #28]
  406d54:	9a03      	ldr	r2, [sp, #12]
  406d56:	601a      	str	r2, [r3, #0]
  406d58:	e4cb      	b.n	4066f2 <_vfiprintf_r+0x7a>
  406d5a:	aa0f      	add	r2, sp, #60	; 0x3c
  406d5c:	9904      	ldr	r1, [sp, #16]
  406d5e:	4620      	mov	r0, r4
  406d60:	f7ff fc4a 	bl	4065f8 <__sprint_r.part.0>
  406d64:	2800      	cmp	r0, #0
  406d66:	f040 8139 	bne.w	406fdc <_vfiprintf_r+0x964>
  406d6a:	9910      	ldr	r1, [sp, #64]	; 0x40
  406d6c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406d6e:	f101 0c01 	add.w	ip, r1, #1
  406d72:	46ce      	mov	lr, r9
  406d74:	e5ff      	b.n	406976 <_vfiprintf_r+0x2fe>
  406d76:	9910      	ldr	r1, [sp, #64]	; 0x40
  406d78:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406d7a:	1c48      	adds	r0, r1, #1
  406d7c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406d80:	2d00      	cmp	r5, #0
  406d82:	f43f ae22 	beq.w	4069ca <_vfiprintf_r+0x352>
  406d86:	3201      	adds	r2, #1
  406d88:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  406d8c:	2101      	movs	r1, #1
  406d8e:	2807      	cmp	r0, #7
  406d90:	9211      	str	r2, [sp, #68]	; 0x44
  406d92:	9010      	str	r0, [sp, #64]	; 0x40
  406d94:	f8ca 5000 	str.w	r5, [sl]
  406d98:	f8ca 1004 	str.w	r1, [sl, #4]
  406d9c:	f340 8108 	ble.w	406fb0 <_vfiprintf_r+0x938>
  406da0:	2a00      	cmp	r2, #0
  406da2:	f040 81bc 	bne.w	40711e <_vfiprintf_r+0xaa6>
  406da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406da8:	2b00      	cmp	r3, #0
  406daa:	f43f ae1f 	beq.w	4069ec <_vfiprintf_r+0x374>
  406dae:	ab0e      	add	r3, sp, #56	; 0x38
  406db0:	2202      	movs	r2, #2
  406db2:	4608      	mov	r0, r1
  406db4:	931c      	str	r3, [sp, #112]	; 0x70
  406db6:	921d      	str	r2, [sp, #116]	; 0x74
  406db8:	46ca      	mov	sl, r9
  406dba:	4601      	mov	r1, r0
  406dbc:	f10a 0a08 	add.w	sl, sl, #8
  406dc0:	3001      	adds	r0, #1
  406dc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406dc4:	2b80      	cmp	r3, #128	; 0x80
  406dc6:	f43f ae19 	beq.w	4069fc <_vfiprintf_r+0x384>
  406dca:	9b05      	ldr	r3, [sp, #20]
  406dcc:	1ae4      	subs	r4, r4, r3
  406dce:	2c00      	cmp	r4, #0
  406dd0:	dd2e      	ble.n	406e30 <_vfiprintf_r+0x7b8>
  406dd2:	2c10      	cmp	r4, #16
  406dd4:	4db3      	ldr	r5, [pc, #716]	; (4070a4 <_vfiprintf_r+0xa2c>)
  406dd6:	dd1e      	ble.n	406e16 <_vfiprintf_r+0x79e>
  406dd8:	46d6      	mov	lr, sl
  406dda:	2610      	movs	r6, #16
  406ddc:	9f06      	ldr	r7, [sp, #24]
  406dde:	f8dd a010 	ldr.w	sl, [sp, #16]
  406de2:	e006      	b.n	406df2 <_vfiprintf_r+0x77a>
  406de4:	1c88      	adds	r0, r1, #2
  406de6:	f10e 0e08 	add.w	lr, lr, #8
  406dea:	4619      	mov	r1, r3
  406dec:	3c10      	subs	r4, #16
  406dee:	2c10      	cmp	r4, #16
  406df0:	dd10      	ble.n	406e14 <_vfiprintf_r+0x79c>
  406df2:	1c4b      	adds	r3, r1, #1
  406df4:	3210      	adds	r2, #16
  406df6:	2b07      	cmp	r3, #7
  406df8:	9211      	str	r2, [sp, #68]	; 0x44
  406dfa:	e88e 0060 	stmia.w	lr, {r5, r6}
  406dfe:	9310      	str	r3, [sp, #64]	; 0x40
  406e00:	ddf0      	ble.n	406de4 <_vfiprintf_r+0x76c>
  406e02:	2a00      	cmp	r2, #0
  406e04:	d165      	bne.n	406ed2 <_vfiprintf_r+0x85a>
  406e06:	3c10      	subs	r4, #16
  406e08:	2c10      	cmp	r4, #16
  406e0a:	f04f 0001 	mov.w	r0, #1
  406e0e:	4611      	mov	r1, r2
  406e10:	46ce      	mov	lr, r9
  406e12:	dcee      	bgt.n	406df2 <_vfiprintf_r+0x77a>
  406e14:	46f2      	mov	sl, lr
  406e16:	4422      	add	r2, r4
  406e18:	2807      	cmp	r0, #7
  406e1a:	9211      	str	r2, [sp, #68]	; 0x44
  406e1c:	f8ca 5000 	str.w	r5, [sl]
  406e20:	f8ca 4004 	str.w	r4, [sl, #4]
  406e24:	9010      	str	r0, [sp, #64]	; 0x40
  406e26:	f300 8085 	bgt.w	406f34 <_vfiprintf_r+0x8bc>
  406e2a:	f10a 0a08 	add.w	sl, sl, #8
  406e2e:	3001      	adds	r0, #1
  406e30:	9905      	ldr	r1, [sp, #20]
  406e32:	f8ca b000 	str.w	fp, [sl]
  406e36:	440a      	add	r2, r1
  406e38:	2807      	cmp	r0, #7
  406e3a:	9211      	str	r2, [sp, #68]	; 0x44
  406e3c:	f8ca 1004 	str.w	r1, [sl, #4]
  406e40:	9010      	str	r0, [sp, #64]	; 0x40
  406e42:	f340 8082 	ble.w	406f4a <_vfiprintf_r+0x8d2>
  406e46:	2a00      	cmp	r2, #0
  406e48:	f040 8118 	bne.w	40707c <_vfiprintf_r+0xa04>
  406e4c:	9b02      	ldr	r3, [sp, #8]
  406e4e:	9210      	str	r2, [sp, #64]	; 0x40
  406e50:	0758      	lsls	r0, r3, #29
  406e52:	d535      	bpl.n	406ec0 <_vfiprintf_r+0x848>
  406e54:	9b08      	ldr	r3, [sp, #32]
  406e56:	9901      	ldr	r1, [sp, #4]
  406e58:	1a5c      	subs	r4, r3, r1
  406e5a:	2c00      	cmp	r4, #0
  406e5c:	f340 80e7 	ble.w	40702e <_vfiprintf_r+0x9b6>
  406e60:	46ca      	mov	sl, r9
  406e62:	2c10      	cmp	r4, #16
  406e64:	f340 8218 	ble.w	407298 <_vfiprintf_r+0xc20>
  406e68:	9910      	ldr	r1, [sp, #64]	; 0x40
  406e6a:	4e8f      	ldr	r6, [pc, #572]	; (4070a8 <_vfiprintf_r+0xa30>)
  406e6c:	9f06      	ldr	r7, [sp, #24]
  406e6e:	f8dd b010 	ldr.w	fp, [sp, #16]
  406e72:	2510      	movs	r5, #16
  406e74:	e006      	b.n	406e84 <_vfiprintf_r+0x80c>
  406e76:	1c88      	adds	r0, r1, #2
  406e78:	f10a 0a08 	add.w	sl, sl, #8
  406e7c:	4619      	mov	r1, r3
  406e7e:	3c10      	subs	r4, #16
  406e80:	2c10      	cmp	r4, #16
  406e82:	dd11      	ble.n	406ea8 <_vfiprintf_r+0x830>
  406e84:	1c4b      	adds	r3, r1, #1
  406e86:	3210      	adds	r2, #16
  406e88:	2b07      	cmp	r3, #7
  406e8a:	9211      	str	r2, [sp, #68]	; 0x44
  406e8c:	f8ca 6000 	str.w	r6, [sl]
  406e90:	f8ca 5004 	str.w	r5, [sl, #4]
  406e94:	9310      	str	r3, [sp, #64]	; 0x40
  406e96:	ddee      	ble.n	406e76 <_vfiprintf_r+0x7fe>
  406e98:	bb42      	cbnz	r2, 406eec <_vfiprintf_r+0x874>
  406e9a:	3c10      	subs	r4, #16
  406e9c:	2c10      	cmp	r4, #16
  406e9e:	f04f 0001 	mov.w	r0, #1
  406ea2:	4611      	mov	r1, r2
  406ea4:	46ca      	mov	sl, r9
  406ea6:	dced      	bgt.n	406e84 <_vfiprintf_r+0x80c>
  406ea8:	4422      	add	r2, r4
  406eaa:	2807      	cmp	r0, #7
  406eac:	9211      	str	r2, [sp, #68]	; 0x44
  406eae:	f8ca 6000 	str.w	r6, [sl]
  406eb2:	f8ca 4004 	str.w	r4, [sl, #4]
  406eb6:	9010      	str	r0, [sp, #64]	; 0x40
  406eb8:	dd51      	ble.n	406f5e <_vfiprintf_r+0x8e6>
  406eba:	2a00      	cmp	r2, #0
  406ebc:	f040 819b 	bne.w	4071f6 <_vfiprintf_r+0xb7e>
  406ec0:	9b03      	ldr	r3, [sp, #12]
  406ec2:	9a08      	ldr	r2, [sp, #32]
  406ec4:	9901      	ldr	r1, [sp, #4]
  406ec6:	428a      	cmp	r2, r1
  406ec8:	bfac      	ite	ge
  406eca:	189b      	addge	r3, r3, r2
  406ecc:	185b      	addlt	r3, r3, r1
  406ece:	9303      	str	r3, [sp, #12]
  406ed0:	e04e      	b.n	406f70 <_vfiprintf_r+0x8f8>
  406ed2:	aa0f      	add	r2, sp, #60	; 0x3c
  406ed4:	4651      	mov	r1, sl
  406ed6:	4638      	mov	r0, r7
  406ed8:	f7ff fb8e 	bl	4065f8 <__sprint_r.part.0>
  406edc:	2800      	cmp	r0, #0
  406ede:	f040 813f 	bne.w	407160 <_vfiprintf_r+0xae8>
  406ee2:	9910      	ldr	r1, [sp, #64]	; 0x40
  406ee4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406ee6:	1c48      	adds	r0, r1, #1
  406ee8:	46ce      	mov	lr, r9
  406eea:	e77f      	b.n	406dec <_vfiprintf_r+0x774>
  406eec:	aa0f      	add	r2, sp, #60	; 0x3c
  406eee:	4659      	mov	r1, fp
  406ef0:	4638      	mov	r0, r7
  406ef2:	f7ff fb81 	bl	4065f8 <__sprint_r.part.0>
  406ef6:	b960      	cbnz	r0, 406f12 <_vfiprintf_r+0x89a>
  406ef8:	9910      	ldr	r1, [sp, #64]	; 0x40
  406efa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406efc:	1c48      	adds	r0, r1, #1
  406efe:	46ca      	mov	sl, r9
  406f00:	e7bd      	b.n	406e7e <_vfiprintf_r+0x806>
  406f02:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406f04:	f8dd b010 	ldr.w	fp, [sp, #16]
  406f08:	2b00      	cmp	r3, #0
  406f0a:	f040 81d4 	bne.w	4072b6 <_vfiprintf_r+0xc3e>
  406f0e:	2300      	movs	r3, #0
  406f10:	9310      	str	r3, [sp, #64]	; 0x40
  406f12:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406f16:	f013 0f01 	tst.w	r3, #1
  406f1a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  406f1e:	d102      	bne.n	406f26 <_vfiprintf_r+0x8ae>
  406f20:	059a      	lsls	r2, r3, #22
  406f22:	f140 80de 	bpl.w	4070e2 <_vfiprintf_r+0xa6a>
  406f26:	065b      	lsls	r3, r3, #25
  406f28:	f53f acb2 	bmi.w	406890 <_vfiprintf_r+0x218>
  406f2c:	9803      	ldr	r0, [sp, #12]
  406f2e:	b02d      	add	sp, #180	; 0xb4
  406f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406f34:	2a00      	cmp	r2, #0
  406f36:	f040 8106 	bne.w	407146 <_vfiprintf_r+0xace>
  406f3a:	9a05      	ldr	r2, [sp, #20]
  406f3c:	921d      	str	r2, [sp, #116]	; 0x74
  406f3e:	2301      	movs	r3, #1
  406f40:	9211      	str	r2, [sp, #68]	; 0x44
  406f42:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  406f46:	9310      	str	r3, [sp, #64]	; 0x40
  406f48:	46ca      	mov	sl, r9
  406f4a:	f10a 0a08 	add.w	sl, sl, #8
  406f4e:	9b02      	ldr	r3, [sp, #8]
  406f50:	0759      	lsls	r1, r3, #29
  406f52:	d504      	bpl.n	406f5e <_vfiprintf_r+0x8e6>
  406f54:	9b08      	ldr	r3, [sp, #32]
  406f56:	9901      	ldr	r1, [sp, #4]
  406f58:	1a5c      	subs	r4, r3, r1
  406f5a:	2c00      	cmp	r4, #0
  406f5c:	dc81      	bgt.n	406e62 <_vfiprintf_r+0x7ea>
  406f5e:	9b03      	ldr	r3, [sp, #12]
  406f60:	9908      	ldr	r1, [sp, #32]
  406f62:	9801      	ldr	r0, [sp, #4]
  406f64:	4281      	cmp	r1, r0
  406f66:	bfac      	ite	ge
  406f68:	185b      	addge	r3, r3, r1
  406f6a:	181b      	addlt	r3, r3, r0
  406f6c:	9303      	str	r3, [sp, #12]
  406f6e:	bb72      	cbnz	r2, 406fce <_vfiprintf_r+0x956>
  406f70:	2300      	movs	r3, #0
  406f72:	9310      	str	r3, [sp, #64]	; 0x40
  406f74:	46ca      	mov	sl, r9
  406f76:	f7ff bbbc 	b.w	4066f2 <_vfiprintf_r+0x7a>
  406f7a:	aa0f      	add	r2, sp, #60	; 0x3c
  406f7c:	9904      	ldr	r1, [sp, #16]
  406f7e:	4620      	mov	r0, r4
  406f80:	f7ff fb3a 	bl	4065f8 <__sprint_r.part.0>
  406f84:	bb50      	cbnz	r0, 406fdc <_vfiprintf_r+0x964>
  406f86:	9910      	ldr	r1, [sp, #64]	; 0x40
  406f88:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406f8a:	f101 0e01 	add.w	lr, r1, #1
  406f8e:	46cc      	mov	ip, r9
  406f90:	e548      	b.n	406a24 <_vfiprintf_r+0x3ac>
  406f92:	2a00      	cmp	r2, #0
  406f94:	f040 8140 	bne.w	407218 <_vfiprintf_r+0xba0>
  406f98:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  406f9c:	2900      	cmp	r1, #0
  406f9e:	f000 811b 	beq.w	4071d8 <_vfiprintf_r+0xb60>
  406fa2:	2201      	movs	r2, #1
  406fa4:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  406fa8:	4610      	mov	r0, r2
  406faa:	921d      	str	r2, [sp, #116]	; 0x74
  406fac:	911c      	str	r1, [sp, #112]	; 0x70
  406fae:	46ca      	mov	sl, r9
  406fb0:	4601      	mov	r1, r0
  406fb2:	f10a 0a08 	add.w	sl, sl, #8
  406fb6:	3001      	adds	r0, #1
  406fb8:	e507      	b.n	4069ca <_vfiprintf_r+0x352>
  406fba:	9b02      	ldr	r3, [sp, #8]
  406fbc:	2a01      	cmp	r2, #1
  406fbe:	f000 8098 	beq.w	4070f2 <_vfiprintf_r+0xa7a>
  406fc2:	2a02      	cmp	r2, #2
  406fc4:	d10d      	bne.n	406fe2 <_vfiprintf_r+0x96a>
  406fc6:	9302      	str	r3, [sp, #8]
  406fc8:	2600      	movs	r6, #0
  406fca:	2700      	movs	r7, #0
  406fcc:	e5b0      	b.n	406b30 <_vfiprintf_r+0x4b8>
  406fce:	aa0f      	add	r2, sp, #60	; 0x3c
  406fd0:	9904      	ldr	r1, [sp, #16]
  406fd2:	9806      	ldr	r0, [sp, #24]
  406fd4:	f7ff fb10 	bl	4065f8 <__sprint_r.part.0>
  406fd8:	2800      	cmp	r0, #0
  406fda:	d0c9      	beq.n	406f70 <_vfiprintf_r+0x8f8>
  406fdc:	f8dd b010 	ldr.w	fp, [sp, #16]
  406fe0:	e797      	b.n	406f12 <_vfiprintf_r+0x89a>
  406fe2:	9302      	str	r3, [sp, #8]
  406fe4:	2600      	movs	r6, #0
  406fe6:	2700      	movs	r7, #0
  406fe8:	4649      	mov	r1, r9
  406fea:	e000      	b.n	406fee <_vfiprintf_r+0x976>
  406fec:	4659      	mov	r1, fp
  406fee:	08f2      	lsrs	r2, r6, #3
  406ff0:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  406ff4:	08f8      	lsrs	r0, r7, #3
  406ff6:	f006 0307 	and.w	r3, r6, #7
  406ffa:	4607      	mov	r7, r0
  406ffc:	4616      	mov	r6, r2
  406ffe:	3330      	adds	r3, #48	; 0x30
  407000:	ea56 0207 	orrs.w	r2, r6, r7
  407004:	f801 3c01 	strb.w	r3, [r1, #-1]
  407008:	f101 3bff 	add.w	fp, r1, #4294967295
  40700c:	d1ee      	bne.n	406fec <_vfiprintf_r+0x974>
  40700e:	9a02      	ldr	r2, [sp, #8]
  407010:	07d6      	lsls	r6, r2, #31
  407012:	f57f ad9d 	bpl.w	406b50 <_vfiprintf_r+0x4d8>
  407016:	2b30      	cmp	r3, #48	; 0x30
  407018:	f43f ad9a 	beq.w	406b50 <_vfiprintf_r+0x4d8>
  40701c:	3902      	subs	r1, #2
  40701e:	2330      	movs	r3, #48	; 0x30
  407020:	f80b 3c01 	strb.w	r3, [fp, #-1]
  407024:	eba9 0301 	sub.w	r3, r9, r1
  407028:	9305      	str	r3, [sp, #20]
  40702a:	468b      	mov	fp, r1
  40702c:	e476      	b.n	40691c <_vfiprintf_r+0x2a4>
  40702e:	9b03      	ldr	r3, [sp, #12]
  407030:	9a08      	ldr	r2, [sp, #32]
  407032:	428a      	cmp	r2, r1
  407034:	bfac      	ite	ge
  407036:	189b      	addge	r3, r3, r2
  407038:	185b      	addlt	r3, r3, r1
  40703a:	9303      	str	r3, [sp, #12]
  40703c:	e798      	b.n	406f70 <_vfiprintf_r+0x8f8>
  40703e:	2202      	movs	r2, #2
  407040:	e44d      	b.n	4068de <_vfiprintf_r+0x266>
  407042:	2f00      	cmp	r7, #0
  407044:	bf08      	it	eq
  407046:	2e0a      	cmpeq	r6, #10
  407048:	d352      	bcc.n	4070f0 <_vfiprintf_r+0xa78>
  40704a:	46cb      	mov	fp, r9
  40704c:	4630      	mov	r0, r6
  40704e:	4639      	mov	r1, r7
  407050:	220a      	movs	r2, #10
  407052:	2300      	movs	r3, #0
  407054:	f002 ffde 	bl	40a014 <__aeabi_uldivmod>
  407058:	3230      	adds	r2, #48	; 0x30
  40705a:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  40705e:	4630      	mov	r0, r6
  407060:	4639      	mov	r1, r7
  407062:	2300      	movs	r3, #0
  407064:	220a      	movs	r2, #10
  407066:	f002 ffd5 	bl	40a014 <__aeabi_uldivmod>
  40706a:	4606      	mov	r6, r0
  40706c:	460f      	mov	r7, r1
  40706e:	ea56 0307 	orrs.w	r3, r6, r7
  407072:	d1eb      	bne.n	40704c <_vfiprintf_r+0x9d4>
  407074:	e56c      	b.n	406b50 <_vfiprintf_r+0x4d8>
  407076:	9405      	str	r4, [sp, #20]
  407078:	46cb      	mov	fp, r9
  40707a:	e44f      	b.n	40691c <_vfiprintf_r+0x2a4>
  40707c:	aa0f      	add	r2, sp, #60	; 0x3c
  40707e:	9904      	ldr	r1, [sp, #16]
  407080:	9806      	ldr	r0, [sp, #24]
  407082:	f7ff fab9 	bl	4065f8 <__sprint_r.part.0>
  407086:	2800      	cmp	r0, #0
  407088:	d1a8      	bne.n	406fdc <_vfiprintf_r+0x964>
  40708a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40708c:	46ca      	mov	sl, r9
  40708e:	e75e      	b.n	406f4e <_vfiprintf_r+0x8d6>
  407090:	aa0f      	add	r2, sp, #60	; 0x3c
  407092:	9904      	ldr	r1, [sp, #16]
  407094:	9806      	ldr	r0, [sp, #24]
  407096:	f7ff faaf 	bl	4065f8 <__sprint_r.part.0>
  40709a:	2800      	cmp	r0, #0
  40709c:	d19e      	bne.n	406fdc <_vfiprintf_r+0x964>
  40709e:	46ca      	mov	sl, r9
  4070a0:	f7ff bbc0 	b.w	406824 <_vfiprintf_r+0x1ac>
  4070a4:	0040a71c 	.word	0x0040a71c
  4070a8:	0040a70c 	.word	0x0040a70c
  4070ac:	3104      	adds	r1, #4
  4070ae:	6816      	ldr	r6, [r2, #0]
  4070b0:	9107      	str	r1, [sp, #28]
  4070b2:	2201      	movs	r2, #1
  4070b4:	2700      	movs	r7, #0
  4070b6:	e412      	b.n	4068de <_vfiprintf_r+0x266>
  4070b8:	9807      	ldr	r0, [sp, #28]
  4070ba:	4601      	mov	r1, r0
  4070bc:	3104      	adds	r1, #4
  4070be:	6806      	ldr	r6, [r0, #0]
  4070c0:	9107      	str	r1, [sp, #28]
  4070c2:	2700      	movs	r7, #0
  4070c4:	e40b      	b.n	4068de <_vfiprintf_r+0x266>
  4070c6:	680e      	ldr	r6, [r1, #0]
  4070c8:	3104      	adds	r1, #4
  4070ca:	9107      	str	r1, [sp, #28]
  4070cc:	2700      	movs	r7, #0
  4070ce:	e591      	b.n	406bf4 <_vfiprintf_r+0x57c>
  4070d0:	9907      	ldr	r1, [sp, #28]
  4070d2:	680e      	ldr	r6, [r1, #0]
  4070d4:	460a      	mov	r2, r1
  4070d6:	17f7      	asrs	r7, r6, #31
  4070d8:	3204      	adds	r2, #4
  4070da:	9207      	str	r2, [sp, #28]
  4070dc:	4630      	mov	r0, r6
  4070de:	4639      	mov	r1, r7
  4070e0:	e50f      	b.n	406b02 <_vfiprintf_r+0x48a>
  4070e2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4070e6:	f001 fe4d 	bl	408d84 <__retarget_lock_release_recursive>
  4070ea:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4070ee:	e71a      	b.n	406f26 <_vfiprintf_r+0x8ae>
  4070f0:	9b02      	ldr	r3, [sp, #8]
  4070f2:	9302      	str	r3, [sp, #8]
  4070f4:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4070f8:	3630      	adds	r6, #48	; 0x30
  4070fa:	2301      	movs	r3, #1
  4070fc:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  407100:	9305      	str	r3, [sp, #20]
  407102:	e40b      	b.n	40691c <_vfiprintf_r+0x2a4>
  407104:	aa0f      	add	r2, sp, #60	; 0x3c
  407106:	9904      	ldr	r1, [sp, #16]
  407108:	9806      	ldr	r0, [sp, #24]
  40710a:	f7ff fa75 	bl	4065f8 <__sprint_r.part.0>
  40710e:	2800      	cmp	r0, #0
  407110:	f47f af64 	bne.w	406fdc <_vfiprintf_r+0x964>
  407114:	9910      	ldr	r1, [sp, #64]	; 0x40
  407116:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407118:	1c48      	adds	r0, r1, #1
  40711a:	46ca      	mov	sl, r9
  40711c:	e651      	b.n	406dc2 <_vfiprintf_r+0x74a>
  40711e:	aa0f      	add	r2, sp, #60	; 0x3c
  407120:	9904      	ldr	r1, [sp, #16]
  407122:	9806      	ldr	r0, [sp, #24]
  407124:	f7ff fa68 	bl	4065f8 <__sprint_r.part.0>
  407128:	2800      	cmp	r0, #0
  40712a:	f47f af57 	bne.w	406fdc <_vfiprintf_r+0x964>
  40712e:	9910      	ldr	r1, [sp, #64]	; 0x40
  407130:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407132:	1c48      	adds	r0, r1, #1
  407134:	46ca      	mov	sl, r9
  407136:	e448      	b.n	4069ca <_vfiprintf_r+0x352>
  407138:	2a00      	cmp	r2, #0
  40713a:	f040 8091 	bne.w	407260 <_vfiprintf_r+0xbe8>
  40713e:	2001      	movs	r0, #1
  407140:	4611      	mov	r1, r2
  407142:	46ca      	mov	sl, r9
  407144:	e641      	b.n	406dca <_vfiprintf_r+0x752>
  407146:	aa0f      	add	r2, sp, #60	; 0x3c
  407148:	9904      	ldr	r1, [sp, #16]
  40714a:	9806      	ldr	r0, [sp, #24]
  40714c:	f7ff fa54 	bl	4065f8 <__sprint_r.part.0>
  407150:	2800      	cmp	r0, #0
  407152:	f47f af43 	bne.w	406fdc <_vfiprintf_r+0x964>
  407156:	9810      	ldr	r0, [sp, #64]	; 0x40
  407158:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40715a:	3001      	adds	r0, #1
  40715c:	46ca      	mov	sl, r9
  40715e:	e667      	b.n	406e30 <_vfiprintf_r+0x7b8>
  407160:	46d3      	mov	fp, sl
  407162:	e6d6      	b.n	406f12 <_vfiprintf_r+0x89a>
  407164:	9e07      	ldr	r6, [sp, #28]
  407166:	3607      	adds	r6, #7
  407168:	f026 0207 	bic.w	r2, r6, #7
  40716c:	f102 0108 	add.w	r1, r2, #8
  407170:	e9d2 6700 	ldrd	r6, r7, [r2]
  407174:	9107      	str	r1, [sp, #28]
  407176:	2201      	movs	r2, #1
  407178:	f7ff bbb1 	b.w	4068de <_vfiprintf_r+0x266>
  40717c:	9e07      	ldr	r6, [sp, #28]
  40717e:	3607      	adds	r6, #7
  407180:	f026 0607 	bic.w	r6, r6, #7
  407184:	e9d6 0100 	ldrd	r0, r1, [r6]
  407188:	f106 0208 	add.w	r2, r6, #8
  40718c:	9207      	str	r2, [sp, #28]
  40718e:	4606      	mov	r6, r0
  407190:	460f      	mov	r7, r1
  407192:	e4b6      	b.n	406b02 <_vfiprintf_r+0x48a>
  407194:	9e07      	ldr	r6, [sp, #28]
  407196:	3607      	adds	r6, #7
  407198:	f026 0207 	bic.w	r2, r6, #7
  40719c:	f102 0108 	add.w	r1, r2, #8
  4071a0:	e9d2 6700 	ldrd	r6, r7, [r2]
  4071a4:	9107      	str	r1, [sp, #28]
  4071a6:	2200      	movs	r2, #0
  4071a8:	f7ff bb99 	b.w	4068de <_vfiprintf_r+0x266>
  4071ac:	9e07      	ldr	r6, [sp, #28]
  4071ae:	3607      	adds	r6, #7
  4071b0:	f026 0107 	bic.w	r1, r6, #7
  4071b4:	f101 0008 	add.w	r0, r1, #8
  4071b8:	9007      	str	r0, [sp, #28]
  4071ba:	e9d1 6700 	ldrd	r6, r7, [r1]
  4071be:	e519      	b.n	406bf4 <_vfiprintf_r+0x57c>
  4071c0:	46cb      	mov	fp, r9
  4071c2:	f7ff bbab 	b.w	40691c <_vfiprintf_r+0x2a4>
  4071c6:	252d      	movs	r5, #45	; 0x2d
  4071c8:	4276      	negs	r6, r6
  4071ca:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  4071ce:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4071d2:	2201      	movs	r2, #1
  4071d4:	f7ff bb88 	b.w	4068e8 <_vfiprintf_r+0x270>
  4071d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4071da:	b9b3      	cbnz	r3, 40720a <_vfiprintf_r+0xb92>
  4071dc:	4611      	mov	r1, r2
  4071de:	2001      	movs	r0, #1
  4071e0:	46ca      	mov	sl, r9
  4071e2:	e5f2      	b.n	406dca <_vfiprintf_r+0x752>
  4071e4:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4071e8:	f001 fdcc 	bl	408d84 <__retarget_lock_release_recursive>
  4071ec:	f04f 33ff 	mov.w	r3, #4294967295
  4071f0:	9303      	str	r3, [sp, #12]
  4071f2:	f7ff bb50 	b.w	406896 <_vfiprintf_r+0x21e>
  4071f6:	aa0f      	add	r2, sp, #60	; 0x3c
  4071f8:	9904      	ldr	r1, [sp, #16]
  4071fa:	9806      	ldr	r0, [sp, #24]
  4071fc:	f7ff f9fc 	bl	4065f8 <__sprint_r.part.0>
  407200:	2800      	cmp	r0, #0
  407202:	f47f aeeb 	bne.w	406fdc <_vfiprintf_r+0x964>
  407206:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407208:	e6a9      	b.n	406f5e <_vfiprintf_r+0x8e6>
  40720a:	ab0e      	add	r3, sp, #56	; 0x38
  40720c:	2202      	movs	r2, #2
  40720e:	931c      	str	r3, [sp, #112]	; 0x70
  407210:	921d      	str	r2, [sp, #116]	; 0x74
  407212:	2001      	movs	r0, #1
  407214:	46ca      	mov	sl, r9
  407216:	e5d0      	b.n	406dba <_vfiprintf_r+0x742>
  407218:	aa0f      	add	r2, sp, #60	; 0x3c
  40721a:	9904      	ldr	r1, [sp, #16]
  40721c:	9806      	ldr	r0, [sp, #24]
  40721e:	f7ff f9eb 	bl	4065f8 <__sprint_r.part.0>
  407222:	2800      	cmp	r0, #0
  407224:	f47f aeda 	bne.w	406fdc <_vfiprintf_r+0x964>
  407228:	9910      	ldr	r1, [sp, #64]	; 0x40
  40722a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40722c:	1c48      	adds	r0, r1, #1
  40722e:	46ca      	mov	sl, r9
  407230:	e5a4      	b.n	406d7c <_vfiprintf_r+0x704>
  407232:	9a07      	ldr	r2, [sp, #28]
  407234:	9903      	ldr	r1, [sp, #12]
  407236:	6813      	ldr	r3, [r2, #0]
  407238:	17cd      	asrs	r5, r1, #31
  40723a:	4608      	mov	r0, r1
  40723c:	3204      	adds	r2, #4
  40723e:	4629      	mov	r1, r5
  407240:	9207      	str	r2, [sp, #28]
  407242:	e9c3 0100 	strd	r0, r1, [r3]
  407246:	f7ff ba54 	b.w	4066f2 <_vfiprintf_r+0x7a>
  40724a:	4658      	mov	r0, fp
  40724c:	9607      	str	r6, [sp, #28]
  40724e:	9302      	str	r3, [sp, #8]
  407250:	f7fd ff36 	bl	4050c0 <strlen>
  407254:	2400      	movs	r4, #0
  407256:	9005      	str	r0, [sp, #20]
  407258:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40725c:	f7ff bb5e 	b.w	40691c <_vfiprintf_r+0x2a4>
  407260:	aa0f      	add	r2, sp, #60	; 0x3c
  407262:	9904      	ldr	r1, [sp, #16]
  407264:	9806      	ldr	r0, [sp, #24]
  407266:	f7ff f9c7 	bl	4065f8 <__sprint_r.part.0>
  40726a:	2800      	cmp	r0, #0
  40726c:	f47f aeb6 	bne.w	406fdc <_vfiprintf_r+0x964>
  407270:	9910      	ldr	r1, [sp, #64]	; 0x40
  407272:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407274:	1c48      	adds	r0, r1, #1
  407276:	46ca      	mov	sl, r9
  407278:	e5a7      	b.n	406dca <_vfiprintf_r+0x752>
  40727a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40727c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40727e:	4e20      	ldr	r6, [pc, #128]	; (407300 <_vfiprintf_r+0xc88>)
  407280:	3101      	adds	r1, #1
  407282:	f7ff bb90 	b.w	4069a6 <_vfiprintf_r+0x32e>
  407286:	2c06      	cmp	r4, #6
  407288:	bf28      	it	cs
  40728a:	2406      	movcs	r4, #6
  40728c:	9405      	str	r4, [sp, #20]
  40728e:	9607      	str	r6, [sp, #28]
  407290:	9401      	str	r4, [sp, #4]
  407292:	f8df b070 	ldr.w	fp, [pc, #112]	; 407304 <_vfiprintf_r+0xc8c>
  407296:	e4d5      	b.n	406c44 <_vfiprintf_r+0x5cc>
  407298:	9810      	ldr	r0, [sp, #64]	; 0x40
  40729a:	4e19      	ldr	r6, [pc, #100]	; (407300 <_vfiprintf_r+0xc88>)
  40729c:	3001      	adds	r0, #1
  40729e:	e603      	b.n	406ea8 <_vfiprintf_r+0x830>
  4072a0:	9405      	str	r4, [sp, #20]
  4072a2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4072a6:	9607      	str	r6, [sp, #28]
  4072a8:	9302      	str	r3, [sp, #8]
  4072aa:	4604      	mov	r4, r0
  4072ac:	f7ff bb36 	b.w	40691c <_vfiprintf_r+0x2a4>
  4072b0:	4686      	mov	lr, r0
  4072b2:	f7ff bbce 	b.w	406a52 <_vfiprintf_r+0x3da>
  4072b6:	9806      	ldr	r0, [sp, #24]
  4072b8:	aa0f      	add	r2, sp, #60	; 0x3c
  4072ba:	4659      	mov	r1, fp
  4072bc:	f7ff f99c 	bl	4065f8 <__sprint_r.part.0>
  4072c0:	2800      	cmp	r0, #0
  4072c2:	f43f ae24 	beq.w	406f0e <_vfiprintf_r+0x896>
  4072c6:	e624      	b.n	406f12 <_vfiprintf_r+0x89a>
  4072c8:	9907      	ldr	r1, [sp, #28]
  4072ca:	f898 2001 	ldrb.w	r2, [r8, #1]
  4072ce:	680c      	ldr	r4, [r1, #0]
  4072d0:	3104      	adds	r1, #4
  4072d2:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  4072d6:	46b8      	mov	r8, r7
  4072d8:	9107      	str	r1, [sp, #28]
  4072da:	f7ff ba3f 	b.w	40675c <_vfiprintf_r+0xe4>
  4072de:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4072e2:	e43c      	b.n	406b5e <_vfiprintf_r+0x4e6>
  4072e4:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4072e8:	e521      	b.n	406d2e <_vfiprintf_r+0x6b6>
  4072ea:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4072ee:	f7ff bbf4 	b.w	406ada <_vfiprintf_r+0x462>
  4072f2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4072f6:	e491      	b.n	406c1c <_vfiprintf_r+0x5a4>
  4072f8:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4072fc:	e469      	b.n	406bd2 <_vfiprintf_r+0x55a>
  4072fe:	bf00      	nop
  407300:	0040a70c 	.word	0x0040a70c
  407304:	0040a6e0 	.word	0x0040a6e0

00407308 <__sbprintf>:
  407308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40730c:	460c      	mov	r4, r1
  40730e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  407312:	8989      	ldrh	r1, [r1, #12]
  407314:	6e66      	ldr	r6, [r4, #100]	; 0x64
  407316:	89e5      	ldrh	r5, [r4, #14]
  407318:	9619      	str	r6, [sp, #100]	; 0x64
  40731a:	f021 0102 	bic.w	r1, r1, #2
  40731e:	4606      	mov	r6, r0
  407320:	69e0      	ldr	r0, [r4, #28]
  407322:	f8ad 100c 	strh.w	r1, [sp, #12]
  407326:	4617      	mov	r7, r2
  407328:	f44f 6180 	mov.w	r1, #1024	; 0x400
  40732c:	6a62      	ldr	r2, [r4, #36]	; 0x24
  40732e:	f8ad 500e 	strh.w	r5, [sp, #14]
  407332:	4698      	mov	r8, r3
  407334:	ad1a      	add	r5, sp, #104	; 0x68
  407336:	2300      	movs	r3, #0
  407338:	9007      	str	r0, [sp, #28]
  40733a:	a816      	add	r0, sp, #88	; 0x58
  40733c:	9209      	str	r2, [sp, #36]	; 0x24
  40733e:	9306      	str	r3, [sp, #24]
  407340:	9500      	str	r5, [sp, #0]
  407342:	9504      	str	r5, [sp, #16]
  407344:	9102      	str	r1, [sp, #8]
  407346:	9105      	str	r1, [sp, #20]
  407348:	f001 fd16 	bl	408d78 <__retarget_lock_init_recursive>
  40734c:	4643      	mov	r3, r8
  40734e:	463a      	mov	r2, r7
  407350:	4669      	mov	r1, sp
  407352:	4630      	mov	r0, r6
  407354:	f7ff f990 	bl	406678 <_vfiprintf_r>
  407358:	1e05      	subs	r5, r0, #0
  40735a:	db07      	blt.n	40736c <__sbprintf+0x64>
  40735c:	4630      	mov	r0, r6
  40735e:	4669      	mov	r1, sp
  407360:	f001 f8e8 	bl	408534 <_fflush_r>
  407364:	2800      	cmp	r0, #0
  407366:	bf18      	it	ne
  407368:	f04f 35ff 	movne.w	r5, #4294967295
  40736c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  407370:	065b      	lsls	r3, r3, #25
  407372:	d503      	bpl.n	40737c <__sbprintf+0x74>
  407374:	89a3      	ldrh	r3, [r4, #12]
  407376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40737a:	81a3      	strh	r3, [r4, #12]
  40737c:	9816      	ldr	r0, [sp, #88]	; 0x58
  40737e:	f001 fcfd 	bl	408d7c <__retarget_lock_close_recursive>
  407382:	4628      	mov	r0, r5
  407384:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  407388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040738c <__swsetup_r>:
  40738c:	b538      	push	{r3, r4, r5, lr}
  40738e:	4b30      	ldr	r3, [pc, #192]	; (407450 <__swsetup_r+0xc4>)
  407390:	681b      	ldr	r3, [r3, #0]
  407392:	4605      	mov	r5, r0
  407394:	460c      	mov	r4, r1
  407396:	b113      	cbz	r3, 40739e <__swsetup_r+0x12>
  407398:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40739a:	2a00      	cmp	r2, #0
  40739c:	d038      	beq.n	407410 <__swsetup_r+0x84>
  40739e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4073a2:	b293      	uxth	r3, r2
  4073a4:	0718      	lsls	r0, r3, #28
  4073a6:	d50c      	bpl.n	4073c2 <__swsetup_r+0x36>
  4073a8:	6920      	ldr	r0, [r4, #16]
  4073aa:	b1a8      	cbz	r0, 4073d8 <__swsetup_r+0x4c>
  4073ac:	f013 0201 	ands.w	r2, r3, #1
  4073b0:	d01e      	beq.n	4073f0 <__swsetup_r+0x64>
  4073b2:	6963      	ldr	r3, [r4, #20]
  4073b4:	2200      	movs	r2, #0
  4073b6:	425b      	negs	r3, r3
  4073b8:	61a3      	str	r3, [r4, #24]
  4073ba:	60a2      	str	r2, [r4, #8]
  4073bc:	b1f0      	cbz	r0, 4073fc <__swsetup_r+0x70>
  4073be:	2000      	movs	r0, #0
  4073c0:	bd38      	pop	{r3, r4, r5, pc}
  4073c2:	06d9      	lsls	r1, r3, #27
  4073c4:	d53c      	bpl.n	407440 <__swsetup_r+0xb4>
  4073c6:	0758      	lsls	r0, r3, #29
  4073c8:	d426      	bmi.n	407418 <__swsetup_r+0x8c>
  4073ca:	6920      	ldr	r0, [r4, #16]
  4073cc:	f042 0308 	orr.w	r3, r2, #8
  4073d0:	81a3      	strh	r3, [r4, #12]
  4073d2:	b29b      	uxth	r3, r3
  4073d4:	2800      	cmp	r0, #0
  4073d6:	d1e9      	bne.n	4073ac <__swsetup_r+0x20>
  4073d8:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4073dc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4073e0:	d0e4      	beq.n	4073ac <__swsetup_r+0x20>
  4073e2:	4628      	mov	r0, r5
  4073e4:	4621      	mov	r1, r4
  4073e6:	f001 fcfd 	bl	408de4 <__smakebuf_r>
  4073ea:	89a3      	ldrh	r3, [r4, #12]
  4073ec:	6920      	ldr	r0, [r4, #16]
  4073ee:	e7dd      	b.n	4073ac <__swsetup_r+0x20>
  4073f0:	0799      	lsls	r1, r3, #30
  4073f2:	bf58      	it	pl
  4073f4:	6962      	ldrpl	r2, [r4, #20]
  4073f6:	60a2      	str	r2, [r4, #8]
  4073f8:	2800      	cmp	r0, #0
  4073fa:	d1e0      	bne.n	4073be <__swsetup_r+0x32>
  4073fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407400:	061a      	lsls	r2, r3, #24
  407402:	d5dd      	bpl.n	4073c0 <__swsetup_r+0x34>
  407404:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407408:	81a3      	strh	r3, [r4, #12]
  40740a:	f04f 30ff 	mov.w	r0, #4294967295
  40740e:	bd38      	pop	{r3, r4, r5, pc}
  407410:	4618      	mov	r0, r3
  407412:	f001 f8e7 	bl	4085e4 <__sinit>
  407416:	e7c2      	b.n	40739e <__swsetup_r+0x12>
  407418:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40741a:	b151      	cbz	r1, 407432 <__swsetup_r+0xa6>
  40741c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  407420:	4299      	cmp	r1, r3
  407422:	d004      	beq.n	40742e <__swsetup_r+0xa2>
  407424:	4628      	mov	r0, r5
  407426:	f001 fa03 	bl	408830 <_free_r>
  40742a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40742e:	2300      	movs	r3, #0
  407430:	6323      	str	r3, [r4, #48]	; 0x30
  407432:	2300      	movs	r3, #0
  407434:	6920      	ldr	r0, [r4, #16]
  407436:	6063      	str	r3, [r4, #4]
  407438:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40743c:	6020      	str	r0, [r4, #0]
  40743e:	e7c5      	b.n	4073cc <__swsetup_r+0x40>
  407440:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  407444:	2309      	movs	r3, #9
  407446:	602b      	str	r3, [r5, #0]
  407448:	f04f 30ff 	mov.w	r0, #4294967295
  40744c:	81a2      	strh	r2, [r4, #12]
  40744e:	bd38      	pop	{r3, r4, r5, pc}
  407450:	20400024 	.word	0x20400024

00407454 <register_fini>:
  407454:	4b02      	ldr	r3, [pc, #8]	; (407460 <register_fini+0xc>)
  407456:	b113      	cbz	r3, 40745e <register_fini+0xa>
  407458:	4802      	ldr	r0, [pc, #8]	; (407464 <register_fini+0x10>)
  40745a:	f000 b805 	b.w	407468 <atexit>
  40745e:	4770      	bx	lr
  407460:	00000000 	.word	0x00000000
  407464:	00408655 	.word	0x00408655

00407468 <atexit>:
  407468:	2300      	movs	r3, #0
  40746a:	4601      	mov	r1, r0
  40746c:	461a      	mov	r2, r3
  40746e:	4618      	mov	r0, r3
  407470:	f002 bbda 	b.w	409c28 <__register_exitproc>

00407474 <quorem>:
  407474:	6902      	ldr	r2, [r0, #16]
  407476:	690b      	ldr	r3, [r1, #16]
  407478:	4293      	cmp	r3, r2
  40747a:	f300 808d 	bgt.w	407598 <quorem+0x124>
  40747e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407482:	f103 38ff 	add.w	r8, r3, #4294967295
  407486:	f101 0714 	add.w	r7, r1, #20
  40748a:	f100 0b14 	add.w	fp, r0, #20
  40748e:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  407492:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  407496:	ea4f 0488 	mov.w	r4, r8, lsl #2
  40749a:	b083      	sub	sp, #12
  40749c:	3201      	adds	r2, #1
  40749e:	fbb3 f9f2 	udiv	r9, r3, r2
  4074a2:	eb0b 0304 	add.w	r3, fp, r4
  4074a6:	9400      	str	r4, [sp, #0]
  4074a8:	eb07 0a04 	add.w	sl, r7, r4
  4074ac:	9301      	str	r3, [sp, #4]
  4074ae:	f1b9 0f00 	cmp.w	r9, #0
  4074b2:	d039      	beq.n	407528 <quorem+0xb4>
  4074b4:	2500      	movs	r5, #0
  4074b6:	462e      	mov	r6, r5
  4074b8:	46bc      	mov	ip, r7
  4074ba:	46de      	mov	lr, fp
  4074bc:	f85c 4b04 	ldr.w	r4, [ip], #4
  4074c0:	f8de 3000 	ldr.w	r3, [lr]
  4074c4:	b2a2      	uxth	r2, r4
  4074c6:	fb09 5502 	mla	r5, r9, r2, r5
  4074ca:	0c22      	lsrs	r2, r4, #16
  4074cc:	0c2c      	lsrs	r4, r5, #16
  4074ce:	fb09 4202 	mla	r2, r9, r2, r4
  4074d2:	b2ad      	uxth	r5, r5
  4074d4:	1b75      	subs	r5, r6, r5
  4074d6:	b296      	uxth	r6, r2
  4074d8:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  4074dc:	fa15 f383 	uxtah	r3, r5, r3
  4074e0:	eb06 4623 	add.w	r6, r6, r3, asr #16
  4074e4:	b29b      	uxth	r3, r3
  4074e6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  4074ea:	45e2      	cmp	sl, ip
  4074ec:	ea4f 4512 	mov.w	r5, r2, lsr #16
  4074f0:	f84e 3b04 	str.w	r3, [lr], #4
  4074f4:	ea4f 4626 	mov.w	r6, r6, asr #16
  4074f8:	d2e0      	bcs.n	4074bc <quorem+0x48>
  4074fa:	9b00      	ldr	r3, [sp, #0]
  4074fc:	f85b 3003 	ldr.w	r3, [fp, r3]
  407500:	b993      	cbnz	r3, 407528 <quorem+0xb4>
  407502:	9c01      	ldr	r4, [sp, #4]
  407504:	1f23      	subs	r3, r4, #4
  407506:	459b      	cmp	fp, r3
  407508:	d20c      	bcs.n	407524 <quorem+0xb0>
  40750a:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40750e:	b94b      	cbnz	r3, 407524 <quorem+0xb0>
  407510:	f1a4 0308 	sub.w	r3, r4, #8
  407514:	e002      	b.n	40751c <quorem+0xa8>
  407516:	681a      	ldr	r2, [r3, #0]
  407518:	3b04      	subs	r3, #4
  40751a:	b91a      	cbnz	r2, 407524 <quorem+0xb0>
  40751c:	459b      	cmp	fp, r3
  40751e:	f108 38ff 	add.w	r8, r8, #4294967295
  407522:	d3f8      	bcc.n	407516 <quorem+0xa2>
  407524:	f8c0 8010 	str.w	r8, [r0, #16]
  407528:	4604      	mov	r4, r0
  40752a:	f001 ff73 	bl	409414 <__mcmp>
  40752e:	2800      	cmp	r0, #0
  407530:	db2e      	blt.n	407590 <quorem+0x11c>
  407532:	f109 0901 	add.w	r9, r9, #1
  407536:	465d      	mov	r5, fp
  407538:	2300      	movs	r3, #0
  40753a:	f857 1b04 	ldr.w	r1, [r7], #4
  40753e:	6828      	ldr	r0, [r5, #0]
  407540:	b28a      	uxth	r2, r1
  407542:	1a9a      	subs	r2, r3, r2
  407544:	0c0b      	lsrs	r3, r1, #16
  407546:	fa12 f280 	uxtah	r2, r2, r0
  40754a:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  40754e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  407552:	b292      	uxth	r2, r2
  407554:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  407558:	45ba      	cmp	sl, r7
  40755a:	f845 2b04 	str.w	r2, [r5], #4
  40755e:	ea4f 4323 	mov.w	r3, r3, asr #16
  407562:	d2ea      	bcs.n	40753a <quorem+0xc6>
  407564:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  407568:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  40756c:	b982      	cbnz	r2, 407590 <quorem+0x11c>
  40756e:	1f1a      	subs	r2, r3, #4
  407570:	4593      	cmp	fp, r2
  407572:	d20b      	bcs.n	40758c <quorem+0x118>
  407574:	f853 2c04 	ldr.w	r2, [r3, #-4]
  407578:	b942      	cbnz	r2, 40758c <quorem+0x118>
  40757a:	3b08      	subs	r3, #8
  40757c:	e002      	b.n	407584 <quorem+0x110>
  40757e:	681a      	ldr	r2, [r3, #0]
  407580:	3b04      	subs	r3, #4
  407582:	b91a      	cbnz	r2, 40758c <quorem+0x118>
  407584:	459b      	cmp	fp, r3
  407586:	f108 38ff 	add.w	r8, r8, #4294967295
  40758a:	d3f8      	bcc.n	40757e <quorem+0x10a>
  40758c:	f8c4 8010 	str.w	r8, [r4, #16]
  407590:	4648      	mov	r0, r9
  407592:	b003      	add	sp, #12
  407594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407598:	2000      	movs	r0, #0
  40759a:	4770      	bx	lr
  40759c:	0000      	movs	r0, r0
	...

004075a0 <_dtoa_r>:
  4075a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4075a4:	6c01      	ldr	r1, [r0, #64]	; 0x40
  4075a6:	b09b      	sub	sp, #108	; 0x6c
  4075a8:	4604      	mov	r4, r0
  4075aa:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  4075ac:	4692      	mov	sl, r2
  4075ae:	469b      	mov	fp, r3
  4075b0:	b141      	cbz	r1, 4075c4 <_dtoa_r+0x24>
  4075b2:	6c42      	ldr	r2, [r0, #68]	; 0x44
  4075b4:	604a      	str	r2, [r1, #4]
  4075b6:	2301      	movs	r3, #1
  4075b8:	4093      	lsls	r3, r2
  4075ba:	608b      	str	r3, [r1, #8]
  4075bc:	f001 fd52 	bl	409064 <_Bfree>
  4075c0:	2300      	movs	r3, #0
  4075c2:	6423      	str	r3, [r4, #64]	; 0x40
  4075c4:	f1bb 0f00 	cmp.w	fp, #0
  4075c8:	465d      	mov	r5, fp
  4075ca:	db35      	blt.n	407638 <_dtoa_r+0x98>
  4075cc:	2300      	movs	r3, #0
  4075ce:	6033      	str	r3, [r6, #0]
  4075d0:	4b9d      	ldr	r3, [pc, #628]	; (407848 <_dtoa_r+0x2a8>)
  4075d2:	43ab      	bics	r3, r5
  4075d4:	d015      	beq.n	407602 <_dtoa_r+0x62>
  4075d6:	4650      	mov	r0, sl
  4075d8:	4659      	mov	r1, fp
  4075da:	2200      	movs	r2, #0
  4075dc:	2300      	movs	r3, #0
  4075de:	f002 fcd1 	bl	409f84 <__aeabi_dcmpeq>
  4075e2:	4680      	mov	r8, r0
  4075e4:	2800      	cmp	r0, #0
  4075e6:	d02d      	beq.n	407644 <_dtoa_r+0xa4>
  4075e8:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4075ea:	2301      	movs	r3, #1
  4075ec:	6013      	str	r3, [r2, #0]
  4075ee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4075f0:	2b00      	cmp	r3, #0
  4075f2:	f000 80bd 	beq.w	407770 <_dtoa_r+0x1d0>
  4075f6:	4895      	ldr	r0, [pc, #596]	; (40784c <_dtoa_r+0x2ac>)
  4075f8:	6018      	str	r0, [r3, #0]
  4075fa:	3801      	subs	r0, #1
  4075fc:	b01b      	add	sp, #108	; 0x6c
  4075fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407602:	9a26      	ldr	r2, [sp, #152]	; 0x98
  407604:	f242 730f 	movw	r3, #9999	; 0x270f
  407608:	6013      	str	r3, [r2, #0]
  40760a:	f1ba 0f00 	cmp.w	sl, #0
  40760e:	d10d      	bne.n	40762c <_dtoa_r+0x8c>
  407610:	f3c5 0513 	ubfx	r5, r5, #0, #20
  407614:	b955      	cbnz	r5, 40762c <_dtoa_r+0x8c>
  407616:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  407618:	488d      	ldr	r0, [pc, #564]	; (407850 <_dtoa_r+0x2b0>)
  40761a:	2b00      	cmp	r3, #0
  40761c:	d0ee      	beq.n	4075fc <_dtoa_r+0x5c>
  40761e:	f100 0308 	add.w	r3, r0, #8
  407622:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  407624:	6013      	str	r3, [r2, #0]
  407626:	b01b      	add	sp, #108	; 0x6c
  407628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40762c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40762e:	4889      	ldr	r0, [pc, #548]	; (407854 <_dtoa_r+0x2b4>)
  407630:	2b00      	cmp	r3, #0
  407632:	d0e3      	beq.n	4075fc <_dtoa_r+0x5c>
  407634:	1cc3      	adds	r3, r0, #3
  407636:	e7f4      	b.n	407622 <_dtoa_r+0x82>
  407638:	2301      	movs	r3, #1
  40763a:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  40763e:	6033      	str	r3, [r6, #0]
  407640:	46ab      	mov	fp, r5
  407642:	e7c5      	b.n	4075d0 <_dtoa_r+0x30>
  407644:	aa18      	add	r2, sp, #96	; 0x60
  407646:	ab19      	add	r3, sp, #100	; 0x64
  407648:	9201      	str	r2, [sp, #4]
  40764a:	9300      	str	r3, [sp, #0]
  40764c:	4652      	mov	r2, sl
  40764e:	465b      	mov	r3, fp
  407650:	4620      	mov	r0, r4
  407652:	f001 ff7f 	bl	409554 <__d2b>
  407656:	0d2b      	lsrs	r3, r5, #20
  407658:	4681      	mov	r9, r0
  40765a:	d071      	beq.n	407740 <_dtoa_r+0x1a0>
  40765c:	f3cb 0213 	ubfx	r2, fp, #0, #20
  407660:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  407664:	9f18      	ldr	r7, [sp, #96]	; 0x60
  407666:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  40766a:	4650      	mov	r0, sl
  40766c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  407670:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  407674:	2200      	movs	r2, #0
  407676:	4b78      	ldr	r3, [pc, #480]	; (407858 <_dtoa_r+0x2b8>)
  407678:	f7fc fc26 	bl	403ec8 <__aeabi_dsub>
  40767c:	a36c      	add	r3, pc, #432	; (adr r3, 407830 <_dtoa_r+0x290>)
  40767e:	e9d3 2300 	ldrd	r2, r3, [r3]
  407682:	f7fc fdd5 	bl	404230 <__aeabi_dmul>
  407686:	a36c      	add	r3, pc, #432	; (adr r3, 407838 <_dtoa_r+0x298>)
  407688:	e9d3 2300 	ldrd	r2, r3, [r3]
  40768c:	f7fc fc1e 	bl	403ecc <__adddf3>
  407690:	e9cd 0102 	strd	r0, r1, [sp, #8]
  407694:	4630      	mov	r0, r6
  407696:	f7fc fd65 	bl	404164 <__aeabi_i2d>
  40769a:	a369      	add	r3, pc, #420	; (adr r3, 407840 <_dtoa_r+0x2a0>)
  40769c:	e9d3 2300 	ldrd	r2, r3, [r3]
  4076a0:	f7fc fdc6 	bl	404230 <__aeabi_dmul>
  4076a4:	4602      	mov	r2, r0
  4076a6:	460b      	mov	r3, r1
  4076a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4076ac:	f7fc fc0e 	bl	403ecc <__adddf3>
  4076b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4076b4:	f7fc ffce 	bl	404654 <__aeabi_d2iz>
  4076b8:	2200      	movs	r2, #0
  4076ba:	9002      	str	r0, [sp, #8]
  4076bc:	2300      	movs	r3, #0
  4076be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4076c2:	f002 fc69 	bl	409f98 <__aeabi_dcmplt>
  4076c6:	2800      	cmp	r0, #0
  4076c8:	f040 8173 	bne.w	4079b2 <_dtoa_r+0x412>
  4076cc:	9d02      	ldr	r5, [sp, #8]
  4076ce:	2d16      	cmp	r5, #22
  4076d0:	f200 815d 	bhi.w	40798e <_dtoa_r+0x3ee>
  4076d4:	4b61      	ldr	r3, [pc, #388]	; (40785c <_dtoa_r+0x2bc>)
  4076d6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  4076da:	e9d3 0100 	ldrd	r0, r1, [r3]
  4076de:	4652      	mov	r2, sl
  4076e0:	465b      	mov	r3, fp
  4076e2:	f002 fc77 	bl	409fd4 <__aeabi_dcmpgt>
  4076e6:	2800      	cmp	r0, #0
  4076e8:	f000 81c5 	beq.w	407a76 <_dtoa_r+0x4d6>
  4076ec:	1e6b      	subs	r3, r5, #1
  4076ee:	9302      	str	r3, [sp, #8]
  4076f0:	2300      	movs	r3, #0
  4076f2:	930e      	str	r3, [sp, #56]	; 0x38
  4076f4:	1bbf      	subs	r7, r7, r6
  4076f6:	1e7b      	subs	r3, r7, #1
  4076f8:	9306      	str	r3, [sp, #24]
  4076fa:	f100 8154 	bmi.w	4079a6 <_dtoa_r+0x406>
  4076fe:	2300      	movs	r3, #0
  407700:	9308      	str	r3, [sp, #32]
  407702:	9b02      	ldr	r3, [sp, #8]
  407704:	2b00      	cmp	r3, #0
  407706:	f2c0 8145 	blt.w	407994 <_dtoa_r+0x3f4>
  40770a:	9a06      	ldr	r2, [sp, #24]
  40770c:	930d      	str	r3, [sp, #52]	; 0x34
  40770e:	4611      	mov	r1, r2
  407710:	4419      	add	r1, r3
  407712:	2300      	movs	r3, #0
  407714:	9106      	str	r1, [sp, #24]
  407716:	930c      	str	r3, [sp, #48]	; 0x30
  407718:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40771a:	2b09      	cmp	r3, #9
  40771c:	d82a      	bhi.n	407774 <_dtoa_r+0x1d4>
  40771e:	2b05      	cmp	r3, #5
  407720:	f340 865b 	ble.w	4083da <_dtoa_r+0xe3a>
  407724:	3b04      	subs	r3, #4
  407726:	9324      	str	r3, [sp, #144]	; 0x90
  407728:	2500      	movs	r5, #0
  40772a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40772c:	3b02      	subs	r3, #2
  40772e:	2b03      	cmp	r3, #3
  407730:	f200 8642 	bhi.w	4083b8 <_dtoa_r+0xe18>
  407734:	e8df f013 	tbh	[pc, r3, lsl #1]
  407738:	02c903d4 	.word	0x02c903d4
  40773c:	046103df 	.word	0x046103df
  407740:	9f18      	ldr	r7, [sp, #96]	; 0x60
  407742:	9e19      	ldr	r6, [sp, #100]	; 0x64
  407744:	443e      	add	r6, r7
  407746:	f206 4332 	addw	r3, r6, #1074	; 0x432
  40774a:	2b20      	cmp	r3, #32
  40774c:	f340 818e 	ble.w	407a6c <_dtoa_r+0x4cc>
  407750:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  407754:	f206 4012 	addw	r0, r6, #1042	; 0x412
  407758:	409d      	lsls	r5, r3
  40775a:	fa2a f000 	lsr.w	r0, sl, r0
  40775e:	4328      	orrs	r0, r5
  407760:	f7fc fcf0 	bl	404144 <__aeabi_ui2d>
  407764:	2301      	movs	r3, #1
  407766:	3e01      	subs	r6, #1
  407768:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40776c:	9314      	str	r3, [sp, #80]	; 0x50
  40776e:	e781      	b.n	407674 <_dtoa_r+0xd4>
  407770:	483b      	ldr	r0, [pc, #236]	; (407860 <_dtoa_r+0x2c0>)
  407772:	e743      	b.n	4075fc <_dtoa_r+0x5c>
  407774:	2100      	movs	r1, #0
  407776:	6461      	str	r1, [r4, #68]	; 0x44
  407778:	4620      	mov	r0, r4
  40777a:	9125      	str	r1, [sp, #148]	; 0x94
  40777c:	f001 fc4c 	bl	409018 <_Balloc>
  407780:	f04f 33ff 	mov.w	r3, #4294967295
  407784:	930a      	str	r3, [sp, #40]	; 0x28
  407786:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407788:	930f      	str	r3, [sp, #60]	; 0x3c
  40778a:	2301      	movs	r3, #1
  40778c:	9004      	str	r0, [sp, #16]
  40778e:	6420      	str	r0, [r4, #64]	; 0x40
  407790:	9224      	str	r2, [sp, #144]	; 0x90
  407792:	930b      	str	r3, [sp, #44]	; 0x2c
  407794:	9b19      	ldr	r3, [sp, #100]	; 0x64
  407796:	2b00      	cmp	r3, #0
  407798:	f2c0 80d9 	blt.w	40794e <_dtoa_r+0x3ae>
  40779c:	9a02      	ldr	r2, [sp, #8]
  40779e:	2a0e      	cmp	r2, #14
  4077a0:	f300 80d5 	bgt.w	40794e <_dtoa_r+0x3ae>
  4077a4:	4b2d      	ldr	r3, [pc, #180]	; (40785c <_dtoa_r+0x2bc>)
  4077a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4077aa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4077ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
  4077b2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4077b4:	2b00      	cmp	r3, #0
  4077b6:	f2c0 83ba 	blt.w	407f2e <_dtoa_r+0x98e>
  4077ba:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  4077be:	4650      	mov	r0, sl
  4077c0:	462a      	mov	r2, r5
  4077c2:	4633      	mov	r3, r6
  4077c4:	4659      	mov	r1, fp
  4077c6:	f7fc fe5d 	bl	404484 <__aeabi_ddiv>
  4077ca:	f7fc ff43 	bl	404654 <__aeabi_d2iz>
  4077ce:	4680      	mov	r8, r0
  4077d0:	f7fc fcc8 	bl	404164 <__aeabi_i2d>
  4077d4:	462a      	mov	r2, r5
  4077d6:	4633      	mov	r3, r6
  4077d8:	f7fc fd2a 	bl	404230 <__aeabi_dmul>
  4077dc:	460b      	mov	r3, r1
  4077de:	4602      	mov	r2, r0
  4077e0:	4659      	mov	r1, fp
  4077e2:	4650      	mov	r0, sl
  4077e4:	f7fc fb70 	bl	403ec8 <__aeabi_dsub>
  4077e8:	9d04      	ldr	r5, [sp, #16]
  4077ea:	f108 0330 	add.w	r3, r8, #48	; 0x30
  4077ee:	702b      	strb	r3, [r5, #0]
  4077f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4077f2:	2b01      	cmp	r3, #1
  4077f4:	4606      	mov	r6, r0
  4077f6:	460f      	mov	r7, r1
  4077f8:	f105 0501 	add.w	r5, r5, #1
  4077fc:	d068      	beq.n	4078d0 <_dtoa_r+0x330>
  4077fe:	2200      	movs	r2, #0
  407800:	4b18      	ldr	r3, [pc, #96]	; (407864 <_dtoa_r+0x2c4>)
  407802:	f7fc fd15 	bl	404230 <__aeabi_dmul>
  407806:	2200      	movs	r2, #0
  407808:	2300      	movs	r3, #0
  40780a:	4606      	mov	r6, r0
  40780c:	460f      	mov	r7, r1
  40780e:	f002 fbb9 	bl	409f84 <__aeabi_dcmpeq>
  407812:	2800      	cmp	r0, #0
  407814:	f040 8088 	bne.w	407928 <_dtoa_r+0x388>
  407818:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  40781c:	f04f 0a00 	mov.w	sl, #0
  407820:	f8df b040 	ldr.w	fp, [pc, #64]	; 407864 <_dtoa_r+0x2c4>
  407824:	940c      	str	r4, [sp, #48]	; 0x30
  407826:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  40782a:	e028      	b.n	40787e <_dtoa_r+0x2de>
  40782c:	f3af 8000 	nop.w
  407830:	636f4361 	.word	0x636f4361
  407834:	3fd287a7 	.word	0x3fd287a7
  407838:	8b60c8b3 	.word	0x8b60c8b3
  40783c:	3fc68a28 	.word	0x3fc68a28
  407840:	509f79fb 	.word	0x509f79fb
  407844:	3fd34413 	.word	0x3fd34413
  407848:	7ff00000 	.word	0x7ff00000
  40784c:	0040a6e9 	.word	0x0040a6e9
  407850:	0040a72c 	.word	0x0040a72c
  407854:	0040a738 	.word	0x0040a738
  407858:	3ff80000 	.word	0x3ff80000
  40785c:	0040a778 	.word	0x0040a778
  407860:	0040a6e8 	.word	0x0040a6e8
  407864:	40240000 	.word	0x40240000
  407868:	f7fc fce2 	bl	404230 <__aeabi_dmul>
  40786c:	2200      	movs	r2, #0
  40786e:	2300      	movs	r3, #0
  407870:	4606      	mov	r6, r0
  407872:	460f      	mov	r7, r1
  407874:	f002 fb86 	bl	409f84 <__aeabi_dcmpeq>
  407878:	2800      	cmp	r0, #0
  40787a:	f040 83c1 	bne.w	408000 <_dtoa_r+0xa60>
  40787e:	4642      	mov	r2, r8
  407880:	464b      	mov	r3, r9
  407882:	4630      	mov	r0, r6
  407884:	4639      	mov	r1, r7
  407886:	f7fc fdfd 	bl	404484 <__aeabi_ddiv>
  40788a:	f7fc fee3 	bl	404654 <__aeabi_d2iz>
  40788e:	4604      	mov	r4, r0
  407890:	f7fc fc68 	bl	404164 <__aeabi_i2d>
  407894:	4642      	mov	r2, r8
  407896:	464b      	mov	r3, r9
  407898:	f7fc fcca 	bl	404230 <__aeabi_dmul>
  40789c:	4602      	mov	r2, r0
  40789e:	460b      	mov	r3, r1
  4078a0:	4630      	mov	r0, r6
  4078a2:	4639      	mov	r1, r7
  4078a4:	f7fc fb10 	bl	403ec8 <__aeabi_dsub>
  4078a8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  4078ac:	9e04      	ldr	r6, [sp, #16]
  4078ae:	f805 eb01 	strb.w	lr, [r5], #1
  4078b2:	eba5 0e06 	sub.w	lr, r5, r6
  4078b6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  4078b8:	45b6      	cmp	lr, r6
  4078ba:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4078be:	4652      	mov	r2, sl
  4078c0:	465b      	mov	r3, fp
  4078c2:	d1d1      	bne.n	407868 <_dtoa_r+0x2c8>
  4078c4:	46a0      	mov	r8, r4
  4078c6:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  4078ca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4078cc:	4606      	mov	r6, r0
  4078ce:	460f      	mov	r7, r1
  4078d0:	4632      	mov	r2, r6
  4078d2:	463b      	mov	r3, r7
  4078d4:	4630      	mov	r0, r6
  4078d6:	4639      	mov	r1, r7
  4078d8:	f7fc faf8 	bl	403ecc <__adddf3>
  4078dc:	4606      	mov	r6, r0
  4078de:	460f      	mov	r7, r1
  4078e0:	4602      	mov	r2, r0
  4078e2:	460b      	mov	r3, r1
  4078e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4078e8:	f002 fb56 	bl	409f98 <__aeabi_dcmplt>
  4078ec:	b948      	cbnz	r0, 407902 <_dtoa_r+0x362>
  4078ee:	4632      	mov	r2, r6
  4078f0:	463b      	mov	r3, r7
  4078f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4078f6:	f002 fb45 	bl	409f84 <__aeabi_dcmpeq>
  4078fa:	b1a8      	cbz	r0, 407928 <_dtoa_r+0x388>
  4078fc:	f018 0f01 	tst.w	r8, #1
  407900:	d012      	beq.n	407928 <_dtoa_r+0x388>
  407902:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  407906:	9a04      	ldr	r2, [sp, #16]
  407908:	1e6b      	subs	r3, r5, #1
  40790a:	e004      	b.n	407916 <_dtoa_r+0x376>
  40790c:	429a      	cmp	r2, r3
  40790e:	f000 8401 	beq.w	408114 <_dtoa_r+0xb74>
  407912:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  407916:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  40791a:	f103 0501 	add.w	r5, r3, #1
  40791e:	d0f5      	beq.n	40790c <_dtoa_r+0x36c>
  407920:	f108 0801 	add.w	r8, r8, #1
  407924:	f883 8000 	strb.w	r8, [r3]
  407928:	4649      	mov	r1, r9
  40792a:	4620      	mov	r0, r4
  40792c:	f001 fb9a 	bl	409064 <_Bfree>
  407930:	2200      	movs	r2, #0
  407932:	9b02      	ldr	r3, [sp, #8]
  407934:	702a      	strb	r2, [r5, #0]
  407936:	9a26      	ldr	r2, [sp, #152]	; 0x98
  407938:	3301      	adds	r3, #1
  40793a:	6013      	str	r3, [r2, #0]
  40793c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40793e:	2b00      	cmp	r3, #0
  407940:	f000 839e 	beq.w	408080 <_dtoa_r+0xae0>
  407944:	9804      	ldr	r0, [sp, #16]
  407946:	601d      	str	r5, [r3, #0]
  407948:	b01b      	add	sp, #108	; 0x6c
  40794a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40794e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  407950:	2a00      	cmp	r2, #0
  407952:	d03e      	beq.n	4079d2 <_dtoa_r+0x432>
  407954:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407956:	2a01      	cmp	r2, #1
  407958:	f340 8311 	ble.w	407f7e <_dtoa_r+0x9de>
  40795c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40795e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407960:	1e5f      	subs	r7, r3, #1
  407962:	42ba      	cmp	r2, r7
  407964:	f2c0 838f 	blt.w	408086 <_dtoa_r+0xae6>
  407968:	1bd7      	subs	r7, r2, r7
  40796a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40796c:	2b00      	cmp	r3, #0
  40796e:	f2c0 848b 	blt.w	408288 <_dtoa_r+0xce8>
  407972:	9d08      	ldr	r5, [sp, #32]
  407974:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407976:	9a08      	ldr	r2, [sp, #32]
  407978:	441a      	add	r2, r3
  40797a:	9208      	str	r2, [sp, #32]
  40797c:	9a06      	ldr	r2, [sp, #24]
  40797e:	2101      	movs	r1, #1
  407980:	441a      	add	r2, r3
  407982:	4620      	mov	r0, r4
  407984:	9206      	str	r2, [sp, #24]
  407986:	f001 fc07 	bl	409198 <__i2b>
  40798a:	4606      	mov	r6, r0
  40798c:	e024      	b.n	4079d8 <_dtoa_r+0x438>
  40798e:	2301      	movs	r3, #1
  407990:	930e      	str	r3, [sp, #56]	; 0x38
  407992:	e6af      	b.n	4076f4 <_dtoa_r+0x154>
  407994:	9a08      	ldr	r2, [sp, #32]
  407996:	9b02      	ldr	r3, [sp, #8]
  407998:	1ad2      	subs	r2, r2, r3
  40799a:	425b      	negs	r3, r3
  40799c:	930c      	str	r3, [sp, #48]	; 0x30
  40799e:	2300      	movs	r3, #0
  4079a0:	9208      	str	r2, [sp, #32]
  4079a2:	930d      	str	r3, [sp, #52]	; 0x34
  4079a4:	e6b8      	b.n	407718 <_dtoa_r+0x178>
  4079a6:	f1c7 0301 	rsb	r3, r7, #1
  4079aa:	9308      	str	r3, [sp, #32]
  4079ac:	2300      	movs	r3, #0
  4079ae:	9306      	str	r3, [sp, #24]
  4079b0:	e6a7      	b.n	407702 <_dtoa_r+0x162>
  4079b2:	9d02      	ldr	r5, [sp, #8]
  4079b4:	4628      	mov	r0, r5
  4079b6:	f7fc fbd5 	bl	404164 <__aeabi_i2d>
  4079ba:	4602      	mov	r2, r0
  4079bc:	460b      	mov	r3, r1
  4079be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4079c2:	f002 fadf 	bl	409f84 <__aeabi_dcmpeq>
  4079c6:	2800      	cmp	r0, #0
  4079c8:	f47f ae80 	bne.w	4076cc <_dtoa_r+0x12c>
  4079cc:	1e6b      	subs	r3, r5, #1
  4079ce:	9302      	str	r3, [sp, #8]
  4079d0:	e67c      	b.n	4076cc <_dtoa_r+0x12c>
  4079d2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4079d4:	9d08      	ldr	r5, [sp, #32]
  4079d6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  4079d8:	2d00      	cmp	r5, #0
  4079da:	dd0c      	ble.n	4079f6 <_dtoa_r+0x456>
  4079dc:	9906      	ldr	r1, [sp, #24]
  4079de:	2900      	cmp	r1, #0
  4079e0:	460b      	mov	r3, r1
  4079e2:	dd08      	ble.n	4079f6 <_dtoa_r+0x456>
  4079e4:	42a9      	cmp	r1, r5
  4079e6:	9a08      	ldr	r2, [sp, #32]
  4079e8:	bfa8      	it	ge
  4079ea:	462b      	movge	r3, r5
  4079ec:	1ad2      	subs	r2, r2, r3
  4079ee:	1aed      	subs	r5, r5, r3
  4079f0:	1acb      	subs	r3, r1, r3
  4079f2:	9208      	str	r2, [sp, #32]
  4079f4:	9306      	str	r3, [sp, #24]
  4079f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4079f8:	b1d3      	cbz	r3, 407a30 <_dtoa_r+0x490>
  4079fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4079fc:	2b00      	cmp	r3, #0
  4079fe:	f000 82b7 	beq.w	407f70 <_dtoa_r+0x9d0>
  407a02:	2f00      	cmp	r7, #0
  407a04:	dd10      	ble.n	407a28 <_dtoa_r+0x488>
  407a06:	4631      	mov	r1, r6
  407a08:	463a      	mov	r2, r7
  407a0a:	4620      	mov	r0, r4
  407a0c:	f001 fc60 	bl	4092d0 <__pow5mult>
  407a10:	464a      	mov	r2, r9
  407a12:	4601      	mov	r1, r0
  407a14:	4606      	mov	r6, r0
  407a16:	4620      	mov	r0, r4
  407a18:	f001 fbc8 	bl	4091ac <__multiply>
  407a1c:	4649      	mov	r1, r9
  407a1e:	4680      	mov	r8, r0
  407a20:	4620      	mov	r0, r4
  407a22:	f001 fb1f 	bl	409064 <_Bfree>
  407a26:	46c1      	mov	r9, r8
  407a28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407a2a:	1bda      	subs	r2, r3, r7
  407a2c:	f040 82a1 	bne.w	407f72 <_dtoa_r+0x9d2>
  407a30:	2101      	movs	r1, #1
  407a32:	4620      	mov	r0, r4
  407a34:	f001 fbb0 	bl	409198 <__i2b>
  407a38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407a3a:	2b00      	cmp	r3, #0
  407a3c:	4680      	mov	r8, r0
  407a3e:	dd1c      	ble.n	407a7a <_dtoa_r+0x4da>
  407a40:	4601      	mov	r1, r0
  407a42:	461a      	mov	r2, r3
  407a44:	4620      	mov	r0, r4
  407a46:	f001 fc43 	bl	4092d0 <__pow5mult>
  407a4a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407a4c:	2b01      	cmp	r3, #1
  407a4e:	4680      	mov	r8, r0
  407a50:	f340 8254 	ble.w	407efc <_dtoa_r+0x95c>
  407a54:	2300      	movs	r3, #0
  407a56:	930c      	str	r3, [sp, #48]	; 0x30
  407a58:	f8d8 3010 	ldr.w	r3, [r8, #16]
  407a5c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  407a60:	6918      	ldr	r0, [r3, #16]
  407a62:	f001 fb49 	bl	4090f8 <__hi0bits>
  407a66:	f1c0 0020 	rsb	r0, r0, #32
  407a6a:	e010      	b.n	407a8e <_dtoa_r+0x4ee>
  407a6c:	f1c3 0520 	rsb	r5, r3, #32
  407a70:	fa0a f005 	lsl.w	r0, sl, r5
  407a74:	e674      	b.n	407760 <_dtoa_r+0x1c0>
  407a76:	900e      	str	r0, [sp, #56]	; 0x38
  407a78:	e63c      	b.n	4076f4 <_dtoa_r+0x154>
  407a7a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407a7c:	2b01      	cmp	r3, #1
  407a7e:	f340 8287 	ble.w	407f90 <_dtoa_r+0x9f0>
  407a82:	2300      	movs	r3, #0
  407a84:	930c      	str	r3, [sp, #48]	; 0x30
  407a86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407a88:	2001      	movs	r0, #1
  407a8a:	2b00      	cmp	r3, #0
  407a8c:	d1e4      	bne.n	407a58 <_dtoa_r+0x4b8>
  407a8e:	9a06      	ldr	r2, [sp, #24]
  407a90:	4410      	add	r0, r2
  407a92:	f010 001f 	ands.w	r0, r0, #31
  407a96:	f000 80a1 	beq.w	407bdc <_dtoa_r+0x63c>
  407a9a:	f1c0 0320 	rsb	r3, r0, #32
  407a9e:	2b04      	cmp	r3, #4
  407aa0:	f340 849e 	ble.w	4083e0 <_dtoa_r+0xe40>
  407aa4:	9b08      	ldr	r3, [sp, #32]
  407aa6:	f1c0 001c 	rsb	r0, r0, #28
  407aaa:	4403      	add	r3, r0
  407aac:	9308      	str	r3, [sp, #32]
  407aae:	4613      	mov	r3, r2
  407ab0:	4403      	add	r3, r0
  407ab2:	4405      	add	r5, r0
  407ab4:	9306      	str	r3, [sp, #24]
  407ab6:	9b08      	ldr	r3, [sp, #32]
  407ab8:	2b00      	cmp	r3, #0
  407aba:	dd05      	ble.n	407ac8 <_dtoa_r+0x528>
  407abc:	4649      	mov	r1, r9
  407abe:	461a      	mov	r2, r3
  407ac0:	4620      	mov	r0, r4
  407ac2:	f001 fc55 	bl	409370 <__lshift>
  407ac6:	4681      	mov	r9, r0
  407ac8:	9b06      	ldr	r3, [sp, #24]
  407aca:	2b00      	cmp	r3, #0
  407acc:	dd05      	ble.n	407ada <_dtoa_r+0x53a>
  407ace:	4641      	mov	r1, r8
  407ad0:	461a      	mov	r2, r3
  407ad2:	4620      	mov	r0, r4
  407ad4:	f001 fc4c 	bl	409370 <__lshift>
  407ad8:	4680      	mov	r8, r0
  407ada:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407adc:	2b00      	cmp	r3, #0
  407ade:	f040 8086 	bne.w	407bee <_dtoa_r+0x64e>
  407ae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407ae4:	2b00      	cmp	r3, #0
  407ae6:	f340 8266 	ble.w	407fb6 <_dtoa_r+0xa16>
  407aea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407aec:	2b00      	cmp	r3, #0
  407aee:	f000 8098 	beq.w	407c22 <_dtoa_r+0x682>
  407af2:	2d00      	cmp	r5, #0
  407af4:	dd05      	ble.n	407b02 <_dtoa_r+0x562>
  407af6:	4631      	mov	r1, r6
  407af8:	462a      	mov	r2, r5
  407afa:	4620      	mov	r0, r4
  407afc:	f001 fc38 	bl	409370 <__lshift>
  407b00:	4606      	mov	r6, r0
  407b02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407b04:	2b00      	cmp	r3, #0
  407b06:	f040 8337 	bne.w	408178 <_dtoa_r+0xbd8>
  407b0a:	9606      	str	r6, [sp, #24]
  407b0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407b0e:	9a04      	ldr	r2, [sp, #16]
  407b10:	f8dd b018 	ldr.w	fp, [sp, #24]
  407b14:	3b01      	subs	r3, #1
  407b16:	18d3      	adds	r3, r2, r3
  407b18:	930b      	str	r3, [sp, #44]	; 0x2c
  407b1a:	f00a 0301 	and.w	r3, sl, #1
  407b1e:	930c      	str	r3, [sp, #48]	; 0x30
  407b20:	4617      	mov	r7, r2
  407b22:	46c2      	mov	sl, r8
  407b24:	4651      	mov	r1, sl
  407b26:	4648      	mov	r0, r9
  407b28:	f7ff fca4 	bl	407474 <quorem>
  407b2c:	4631      	mov	r1, r6
  407b2e:	4605      	mov	r5, r0
  407b30:	4648      	mov	r0, r9
  407b32:	f001 fc6f 	bl	409414 <__mcmp>
  407b36:	465a      	mov	r2, fp
  407b38:	900a      	str	r0, [sp, #40]	; 0x28
  407b3a:	4651      	mov	r1, sl
  407b3c:	4620      	mov	r0, r4
  407b3e:	f001 fc85 	bl	40944c <__mdiff>
  407b42:	68c2      	ldr	r2, [r0, #12]
  407b44:	4680      	mov	r8, r0
  407b46:	f105 0330 	add.w	r3, r5, #48	; 0x30
  407b4a:	2a00      	cmp	r2, #0
  407b4c:	f040 822b 	bne.w	407fa6 <_dtoa_r+0xa06>
  407b50:	4601      	mov	r1, r0
  407b52:	4648      	mov	r0, r9
  407b54:	9308      	str	r3, [sp, #32]
  407b56:	f001 fc5d 	bl	409414 <__mcmp>
  407b5a:	4641      	mov	r1, r8
  407b5c:	9006      	str	r0, [sp, #24]
  407b5e:	4620      	mov	r0, r4
  407b60:	f001 fa80 	bl	409064 <_Bfree>
  407b64:	9a06      	ldr	r2, [sp, #24]
  407b66:	9b08      	ldr	r3, [sp, #32]
  407b68:	b932      	cbnz	r2, 407b78 <_dtoa_r+0x5d8>
  407b6a:	9924      	ldr	r1, [sp, #144]	; 0x90
  407b6c:	b921      	cbnz	r1, 407b78 <_dtoa_r+0x5d8>
  407b6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407b70:	2a00      	cmp	r2, #0
  407b72:	f000 83ef 	beq.w	408354 <_dtoa_r+0xdb4>
  407b76:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407b78:	990a      	ldr	r1, [sp, #40]	; 0x28
  407b7a:	2900      	cmp	r1, #0
  407b7c:	f2c0 829f 	blt.w	4080be <_dtoa_r+0xb1e>
  407b80:	d105      	bne.n	407b8e <_dtoa_r+0x5ee>
  407b82:	9924      	ldr	r1, [sp, #144]	; 0x90
  407b84:	b919      	cbnz	r1, 407b8e <_dtoa_r+0x5ee>
  407b86:	990c      	ldr	r1, [sp, #48]	; 0x30
  407b88:	2900      	cmp	r1, #0
  407b8a:	f000 8298 	beq.w	4080be <_dtoa_r+0xb1e>
  407b8e:	2a00      	cmp	r2, #0
  407b90:	f300 8306 	bgt.w	4081a0 <_dtoa_r+0xc00>
  407b94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  407b96:	703b      	strb	r3, [r7, #0]
  407b98:	f107 0801 	add.w	r8, r7, #1
  407b9c:	4297      	cmp	r7, r2
  407b9e:	4645      	mov	r5, r8
  407ba0:	f000 830c 	beq.w	4081bc <_dtoa_r+0xc1c>
  407ba4:	4649      	mov	r1, r9
  407ba6:	2300      	movs	r3, #0
  407ba8:	220a      	movs	r2, #10
  407baa:	4620      	mov	r0, r4
  407bac:	f001 fa64 	bl	409078 <__multadd>
  407bb0:	455e      	cmp	r6, fp
  407bb2:	4681      	mov	r9, r0
  407bb4:	4631      	mov	r1, r6
  407bb6:	f04f 0300 	mov.w	r3, #0
  407bba:	f04f 020a 	mov.w	r2, #10
  407bbe:	4620      	mov	r0, r4
  407bc0:	f000 81eb 	beq.w	407f9a <_dtoa_r+0x9fa>
  407bc4:	f001 fa58 	bl	409078 <__multadd>
  407bc8:	4659      	mov	r1, fp
  407bca:	4606      	mov	r6, r0
  407bcc:	2300      	movs	r3, #0
  407bce:	220a      	movs	r2, #10
  407bd0:	4620      	mov	r0, r4
  407bd2:	f001 fa51 	bl	409078 <__multadd>
  407bd6:	4647      	mov	r7, r8
  407bd8:	4683      	mov	fp, r0
  407bda:	e7a3      	b.n	407b24 <_dtoa_r+0x584>
  407bdc:	201c      	movs	r0, #28
  407bde:	9b08      	ldr	r3, [sp, #32]
  407be0:	4403      	add	r3, r0
  407be2:	9308      	str	r3, [sp, #32]
  407be4:	9b06      	ldr	r3, [sp, #24]
  407be6:	4403      	add	r3, r0
  407be8:	4405      	add	r5, r0
  407bea:	9306      	str	r3, [sp, #24]
  407bec:	e763      	b.n	407ab6 <_dtoa_r+0x516>
  407bee:	4641      	mov	r1, r8
  407bf0:	4648      	mov	r0, r9
  407bf2:	f001 fc0f 	bl	409414 <__mcmp>
  407bf6:	2800      	cmp	r0, #0
  407bf8:	f6bf af73 	bge.w	407ae2 <_dtoa_r+0x542>
  407bfc:	9f02      	ldr	r7, [sp, #8]
  407bfe:	4649      	mov	r1, r9
  407c00:	2300      	movs	r3, #0
  407c02:	220a      	movs	r2, #10
  407c04:	4620      	mov	r0, r4
  407c06:	3f01      	subs	r7, #1
  407c08:	9702      	str	r7, [sp, #8]
  407c0a:	f001 fa35 	bl	409078 <__multadd>
  407c0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407c10:	4681      	mov	r9, r0
  407c12:	2b00      	cmp	r3, #0
  407c14:	f040 83b6 	bne.w	408384 <_dtoa_r+0xde4>
  407c18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407c1a:	2b00      	cmp	r3, #0
  407c1c:	f340 83bf 	ble.w	40839e <_dtoa_r+0xdfe>
  407c20:	930a      	str	r3, [sp, #40]	; 0x28
  407c22:	f8dd b010 	ldr.w	fp, [sp, #16]
  407c26:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  407c28:	465d      	mov	r5, fp
  407c2a:	e002      	b.n	407c32 <_dtoa_r+0x692>
  407c2c:	f001 fa24 	bl	409078 <__multadd>
  407c30:	4681      	mov	r9, r0
  407c32:	4641      	mov	r1, r8
  407c34:	4648      	mov	r0, r9
  407c36:	f7ff fc1d 	bl	407474 <quorem>
  407c3a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  407c3e:	f805 ab01 	strb.w	sl, [r5], #1
  407c42:	eba5 030b 	sub.w	r3, r5, fp
  407c46:	42bb      	cmp	r3, r7
  407c48:	f04f 020a 	mov.w	r2, #10
  407c4c:	f04f 0300 	mov.w	r3, #0
  407c50:	4649      	mov	r1, r9
  407c52:	4620      	mov	r0, r4
  407c54:	dbea      	blt.n	407c2c <_dtoa_r+0x68c>
  407c56:	9b04      	ldr	r3, [sp, #16]
  407c58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  407c5a:	2a01      	cmp	r2, #1
  407c5c:	bfac      	ite	ge
  407c5e:	189b      	addge	r3, r3, r2
  407c60:	3301      	addlt	r3, #1
  407c62:	461d      	mov	r5, r3
  407c64:	f04f 0b00 	mov.w	fp, #0
  407c68:	4649      	mov	r1, r9
  407c6a:	2201      	movs	r2, #1
  407c6c:	4620      	mov	r0, r4
  407c6e:	f001 fb7f 	bl	409370 <__lshift>
  407c72:	4641      	mov	r1, r8
  407c74:	4681      	mov	r9, r0
  407c76:	f001 fbcd 	bl	409414 <__mcmp>
  407c7a:	2800      	cmp	r0, #0
  407c7c:	f340 823d 	ble.w	4080fa <_dtoa_r+0xb5a>
  407c80:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  407c84:	9904      	ldr	r1, [sp, #16]
  407c86:	1e6b      	subs	r3, r5, #1
  407c88:	e004      	b.n	407c94 <_dtoa_r+0x6f4>
  407c8a:	428b      	cmp	r3, r1
  407c8c:	f000 81ae 	beq.w	407fec <_dtoa_r+0xa4c>
  407c90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  407c94:	2a39      	cmp	r2, #57	; 0x39
  407c96:	f103 0501 	add.w	r5, r3, #1
  407c9a:	d0f6      	beq.n	407c8a <_dtoa_r+0x6ea>
  407c9c:	3201      	adds	r2, #1
  407c9e:	701a      	strb	r2, [r3, #0]
  407ca0:	4641      	mov	r1, r8
  407ca2:	4620      	mov	r0, r4
  407ca4:	f001 f9de 	bl	409064 <_Bfree>
  407ca8:	2e00      	cmp	r6, #0
  407caa:	f43f ae3d 	beq.w	407928 <_dtoa_r+0x388>
  407cae:	f1bb 0f00 	cmp.w	fp, #0
  407cb2:	d005      	beq.n	407cc0 <_dtoa_r+0x720>
  407cb4:	45b3      	cmp	fp, r6
  407cb6:	d003      	beq.n	407cc0 <_dtoa_r+0x720>
  407cb8:	4659      	mov	r1, fp
  407cba:	4620      	mov	r0, r4
  407cbc:	f001 f9d2 	bl	409064 <_Bfree>
  407cc0:	4631      	mov	r1, r6
  407cc2:	4620      	mov	r0, r4
  407cc4:	f001 f9ce 	bl	409064 <_Bfree>
  407cc8:	e62e      	b.n	407928 <_dtoa_r+0x388>
  407cca:	2300      	movs	r3, #0
  407ccc:	930b      	str	r3, [sp, #44]	; 0x2c
  407cce:	9b02      	ldr	r3, [sp, #8]
  407cd0:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407cd2:	4413      	add	r3, r2
  407cd4:	930f      	str	r3, [sp, #60]	; 0x3c
  407cd6:	3301      	adds	r3, #1
  407cd8:	2b01      	cmp	r3, #1
  407cda:	461f      	mov	r7, r3
  407cdc:	461e      	mov	r6, r3
  407cde:	930a      	str	r3, [sp, #40]	; 0x28
  407ce0:	bfb8      	it	lt
  407ce2:	2701      	movlt	r7, #1
  407ce4:	2100      	movs	r1, #0
  407ce6:	2f17      	cmp	r7, #23
  407ce8:	6461      	str	r1, [r4, #68]	; 0x44
  407cea:	d90a      	bls.n	407d02 <_dtoa_r+0x762>
  407cec:	2201      	movs	r2, #1
  407cee:	2304      	movs	r3, #4
  407cf0:	005b      	lsls	r3, r3, #1
  407cf2:	f103 0014 	add.w	r0, r3, #20
  407cf6:	4287      	cmp	r7, r0
  407cf8:	4611      	mov	r1, r2
  407cfa:	f102 0201 	add.w	r2, r2, #1
  407cfe:	d2f7      	bcs.n	407cf0 <_dtoa_r+0x750>
  407d00:	6461      	str	r1, [r4, #68]	; 0x44
  407d02:	4620      	mov	r0, r4
  407d04:	f001 f988 	bl	409018 <_Balloc>
  407d08:	2e0e      	cmp	r6, #14
  407d0a:	9004      	str	r0, [sp, #16]
  407d0c:	6420      	str	r0, [r4, #64]	; 0x40
  407d0e:	f63f ad41 	bhi.w	407794 <_dtoa_r+0x1f4>
  407d12:	2d00      	cmp	r5, #0
  407d14:	f43f ad3e 	beq.w	407794 <_dtoa_r+0x1f4>
  407d18:	9902      	ldr	r1, [sp, #8]
  407d1a:	2900      	cmp	r1, #0
  407d1c:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  407d20:	f340 8202 	ble.w	408128 <_dtoa_r+0xb88>
  407d24:	4bb8      	ldr	r3, [pc, #736]	; (408008 <_dtoa_r+0xa68>)
  407d26:	f001 020f 	and.w	r2, r1, #15
  407d2a:	110d      	asrs	r5, r1, #4
  407d2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  407d30:	06e9      	lsls	r1, r5, #27
  407d32:	e9d3 6700 	ldrd	r6, r7, [r3]
  407d36:	f140 81ae 	bpl.w	408096 <_dtoa_r+0xaf6>
  407d3a:	4bb4      	ldr	r3, [pc, #720]	; (40800c <_dtoa_r+0xa6c>)
  407d3c:	4650      	mov	r0, sl
  407d3e:	4659      	mov	r1, fp
  407d40:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  407d44:	f7fc fb9e 	bl	404484 <__aeabi_ddiv>
  407d48:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  407d4c:	f005 050f 	and.w	r5, r5, #15
  407d50:	f04f 0a03 	mov.w	sl, #3
  407d54:	b18d      	cbz	r5, 407d7a <_dtoa_r+0x7da>
  407d56:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 40800c <_dtoa_r+0xa6c>
  407d5a:	07ea      	lsls	r2, r5, #31
  407d5c:	d509      	bpl.n	407d72 <_dtoa_r+0x7d2>
  407d5e:	4630      	mov	r0, r6
  407d60:	4639      	mov	r1, r7
  407d62:	e9d8 2300 	ldrd	r2, r3, [r8]
  407d66:	f7fc fa63 	bl	404230 <__aeabi_dmul>
  407d6a:	f10a 0a01 	add.w	sl, sl, #1
  407d6e:	4606      	mov	r6, r0
  407d70:	460f      	mov	r7, r1
  407d72:	106d      	asrs	r5, r5, #1
  407d74:	f108 0808 	add.w	r8, r8, #8
  407d78:	d1ef      	bne.n	407d5a <_dtoa_r+0x7ba>
  407d7a:	463b      	mov	r3, r7
  407d7c:	4632      	mov	r2, r6
  407d7e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  407d82:	f7fc fb7f 	bl	404484 <__aeabi_ddiv>
  407d86:	4607      	mov	r7, r0
  407d88:	4688      	mov	r8, r1
  407d8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407d8c:	b143      	cbz	r3, 407da0 <_dtoa_r+0x800>
  407d8e:	2200      	movs	r2, #0
  407d90:	4b9f      	ldr	r3, [pc, #636]	; (408010 <_dtoa_r+0xa70>)
  407d92:	4638      	mov	r0, r7
  407d94:	4641      	mov	r1, r8
  407d96:	f002 f8ff 	bl	409f98 <__aeabi_dcmplt>
  407d9a:	2800      	cmp	r0, #0
  407d9c:	f040 8286 	bne.w	4082ac <_dtoa_r+0xd0c>
  407da0:	4650      	mov	r0, sl
  407da2:	f7fc f9df 	bl	404164 <__aeabi_i2d>
  407da6:	463a      	mov	r2, r7
  407da8:	4643      	mov	r3, r8
  407daa:	f7fc fa41 	bl	404230 <__aeabi_dmul>
  407dae:	4b99      	ldr	r3, [pc, #612]	; (408014 <_dtoa_r+0xa74>)
  407db0:	2200      	movs	r2, #0
  407db2:	f7fc f88b 	bl	403ecc <__adddf3>
  407db6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407db8:	4605      	mov	r5, r0
  407dba:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  407dbe:	2b00      	cmp	r3, #0
  407dc0:	f000 813e 	beq.w	408040 <_dtoa_r+0xaa0>
  407dc4:	9b02      	ldr	r3, [sp, #8]
  407dc6:	9315      	str	r3, [sp, #84]	; 0x54
  407dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407dca:	9312      	str	r3, [sp, #72]	; 0x48
  407dcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407dce:	2b00      	cmp	r3, #0
  407dd0:	f000 81fa 	beq.w	4081c8 <_dtoa_r+0xc28>
  407dd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
  407dd6:	4b8c      	ldr	r3, [pc, #560]	; (408008 <_dtoa_r+0xa68>)
  407dd8:	498f      	ldr	r1, [pc, #572]	; (408018 <_dtoa_r+0xa78>)
  407dda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  407dde:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  407de2:	2000      	movs	r0, #0
  407de4:	f7fc fb4e 	bl	404484 <__aeabi_ddiv>
  407de8:	462a      	mov	r2, r5
  407dea:	4633      	mov	r3, r6
  407dec:	f7fc f86c 	bl	403ec8 <__aeabi_dsub>
  407df0:	4682      	mov	sl, r0
  407df2:	468b      	mov	fp, r1
  407df4:	4638      	mov	r0, r7
  407df6:	4641      	mov	r1, r8
  407df8:	f7fc fc2c 	bl	404654 <__aeabi_d2iz>
  407dfc:	4605      	mov	r5, r0
  407dfe:	f7fc f9b1 	bl	404164 <__aeabi_i2d>
  407e02:	4602      	mov	r2, r0
  407e04:	460b      	mov	r3, r1
  407e06:	4638      	mov	r0, r7
  407e08:	4641      	mov	r1, r8
  407e0a:	f7fc f85d 	bl	403ec8 <__aeabi_dsub>
  407e0e:	3530      	adds	r5, #48	; 0x30
  407e10:	fa5f f885 	uxtb.w	r8, r5
  407e14:	9d04      	ldr	r5, [sp, #16]
  407e16:	4606      	mov	r6, r0
  407e18:	460f      	mov	r7, r1
  407e1a:	f885 8000 	strb.w	r8, [r5]
  407e1e:	4602      	mov	r2, r0
  407e20:	460b      	mov	r3, r1
  407e22:	4650      	mov	r0, sl
  407e24:	4659      	mov	r1, fp
  407e26:	3501      	adds	r5, #1
  407e28:	f002 f8d4 	bl	409fd4 <__aeabi_dcmpgt>
  407e2c:	2800      	cmp	r0, #0
  407e2e:	d154      	bne.n	407eda <_dtoa_r+0x93a>
  407e30:	4632      	mov	r2, r6
  407e32:	463b      	mov	r3, r7
  407e34:	2000      	movs	r0, #0
  407e36:	4976      	ldr	r1, [pc, #472]	; (408010 <_dtoa_r+0xa70>)
  407e38:	f7fc f846 	bl	403ec8 <__aeabi_dsub>
  407e3c:	4602      	mov	r2, r0
  407e3e:	460b      	mov	r3, r1
  407e40:	4650      	mov	r0, sl
  407e42:	4659      	mov	r1, fp
  407e44:	f002 f8c6 	bl	409fd4 <__aeabi_dcmpgt>
  407e48:	2800      	cmp	r0, #0
  407e4a:	f040 8270 	bne.w	40832e <_dtoa_r+0xd8e>
  407e4e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  407e50:	2a01      	cmp	r2, #1
  407e52:	f000 8111 	beq.w	408078 <_dtoa_r+0xad8>
  407e56:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407e58:	9a04      	ldr	r2, [sp, #16]
  407e5a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  407e5e:	4413      	add	r3, r2
  407e60:	4699      	mov	r9, r3
  407e62:	e00d      	b.n	407e80 <_dtoa_r+0x8e0>
  407e64:	2000      	movs	r0, #0
  407e66:	496a      	ldr	r1, [pc, #424]	; (408010 <_dtoa_r+0xa70>)
  407e68:	f7fc f82e 	bl	403ec8 <__aeabi_dsub>
  407e6c:	4652      	mov	r2, sl
  407e6e:	465b      	mov	r3, fp
  407e70:	f002 f892 	bl	409f98 <__aeabi_dcmplt>
  407e74:	2800      	cmp	r0, #0
  407e76:	f040 8258 	bne.w	40832a <_dtoa_r+0xd8a>
  407e7a:	454d      	cmp	r5, r9
  407e7c:	f000 80fa 	beq.w	408074 <_dtoa_r+0xad4>
  407e80:	4650      	mov	r0, sl
  407e82:	4659      	mov	r1, fp
  407e84:	2200      	movs	r2, #0
  407e86:	4b65      	ldr	r3, [pc, #404]	; (40801c <_dtoa_r+0xa7c>)
  407e88:	f7fc f9d2 	bl	404230 <__aeabi_dmul>
  407e8c:	2200      	movs	r2, #0
  407e8e:	4b63      	ldr	r3, [pc, #396]	; (40801c <_dtoa_r+0xa7c>)
  407e90:	4682      	mov	sl, r0
  407e92:	468b      	mov	fp, r1
  407e94:	4630      	mov	r0, r6
  407e96:	4639      	mov	r1, r7
  407e98:	f7fc f9ca 	bl	404230 <__aeabi_dmul>
  407e9c:	460f      	mov	r7, r1
  407e9e:	4606      	mov	r6, r0
  407ea0:	f7fc fbd8 	bl	404654 <__aeabi_d2iz>
  407ea4:	4680      	mov	r8, r0
  407ea6:	f7fc f95d 	bl	404164 <__aeabi_i2d>
  407eaa:	4602      	mov	r2, r0
  407eac:	460b      	mov	r3, r1
  407eae:	4630      	mov	r0, r6
  407eb0:	4639      	mov	r1, r7
  407eb2:	f7fc f809 	bl	403ec8 <__aeabi_dsub>
  407eb6:	f108 0830 	add.w	r8, r8, #48	; 0x30
  407eba:	fa5f f888 	uxtb.w	r8, r8
  407ebe:	4652      	mov	r2, sl
  407ec0:	465b      	mov	r3, fp
  407ec2:	f805 8b01 	strb.w	r8, [r5], #1
  407ec6:	4606      	mov	r6, r0
  407ec8:	460f      	mov	r7, r1
  407eca:	f002 f865 	bl	409f98 <__aeabi_dcmplt>
  407ece:	4632      	mov	r2, r6
  407ed0:	463b      	mov	r3, r7
  407ed2:	2800      	cmp	r0, #0
  407ed4:	d0c6      	beq.n	407e64 <_dtoa_r+0x8c4>
  407ed6:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  407eda:	9b15      	ldr	r3, [sp, #84]	; 0x54
  407edc:	9302      	str	r3, [sp, #8]
  407ede:	e523      	b.n	407928 <_dtoa_r+0x388>
  407ee0:	2300      	movs	r3, #0
  407ee2:	930b      	str	r3, [sp, #44]	; 0x2c
  407ee4:	9b25      	ldr	r3, [sp, #148]	; 0x94
  407ee6:	2b00      	cmp	r3, #0
  407ee8:	f340 80dc 	ble.w	4080a4 <_dtoa_r+0xb04>
  407eec:	461f      	mov	r7, r3
  407eee:	461e      	mov	r6, r3
  407ef0:	930f      	str	r3, [sp, #60]	; 0x3c
  407ef2:	930a      	str	r3, [sp, #40]	; 0x28
  407ef4:	e6f6      	b.n	407ce4 <_dtoa_r+0x744>
  407ef6:	2301      	movs	r3, #1
  407ef8:	930b      	str	r3, [sp, #44]	; 0x2c
  407efa:	e7f3      	b.n	407ee4 <_dtoa_r+0x944>
  407efc:	f1ba 0f00 	cmp.w	sl, #0
  407f00:	f47f ada8 	bne.w	407a54 <_dtoa_r+0x4b4>
  407f04:	f3cb 0313 	ubfx	r3, fp, #0, #20
  407f08:	2b00      	cmp	r3, #0
  407f0a:	f47f adba 	bne.w	407a82 <_dtoa_r+0x4e2>
  407f0e:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  407f12:	0d3f      	lsrs	r7, r7, #20
  407f14:	053f      	lsls	r7, r7, #20
  407f16:	2f00      	cmp	r7, #0
  407f18:	f000 820d 	beq.w	408336 <_dtoa_r+0xd96>
  407f1c:	9b08      	ldr	r3, [sp, #32]
  407f1e:	3301      	adds	r3, #1
  407f20:	9308      	str	r3, [sp, #32]
  407f22:	9b06      	ldr	r3, [sp, #24]
  407f24:	3301      	adds	r3, #1
  407f26:	9306      	str	r3, [sp, #24]
  407f28:	2301      	movs	r3, #1
  407f2a:	930c      	str	r3, [sp, #48]	; 0x30
  407f2c:	e5ab      	b.n	407a86 <_dtoa_r+0x4e6>
  407f2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407f30:	2b00      	cmp	r3, #0
  407f32:	f73f ac42 	bgt.w	4077ba <_dtoa_r+0x21a>
  407f36:	f040 8221 	bne.w	40837c <_dtoa_r+0xddc>
  407f3a:	2200      	movs	r2, #0
  407f3c:	4b38      	ldr	r3, [pc, #224]	; (408020 <_dtoa_r+0xa80>)
  407f3e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  407f42:	f7fc f975 	bl	404230 <__aeabi_dmul>
  407f46:	4652      	mov	r2, sl
  407f48:	465b      	mov	r3, fp
  407f4a:	f002 f839 	bl	409fc0 <__aeabi_dcmpge>
  407f4e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  407f52:	4646      	mov	r6, r8
  407f54:	2800      	cmp	r0, #0
  407f56:	d041      	beq.n	407fdc <_dtoa_r+0xa3c>
  407f58:	9b25      	ldr	r3, [sp, #148]	; 0x94
  407f5a:	9d04      	ldr	r5, [sp, #16]
  407f5c:	43db      	mvns	r3, r3
  407f5e:	9302      	str	r3, [sp, #8]
  407f60:	4641      	mov	r1, r8
  407f62:	4620      	mov	r0, r4
  407f64:	f001 f87e 	bl	409064 <_Bfree>
  407f68:	2e00      	cmp	r6, #0
  407f6a:	f43f acdd 	beq.w	407928 <_dtoa_r+0x388>
  407f6e:	e6a7      	b.n	407cc0 <_dtoa_r+0x720>
  407f70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407f72:	4649      	mov	r1, r9
  407f74:	4620      	mov	r0, r4
  407f76:	f001 f9ab 	bl	4092d0 <__pow5mult>
  407f7a:	4681      	mov	r9, r0
  407f7c:	e558      	b.n	407a30 <_dtoa_r+0x490>
  407f7e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  407f80:	2a00      	cmp	r2, #0
  407f82:	f000 8187 	beq.w	408294 <_dtoa_r+0xcf4>
  407f86:	f203 4333 	addw	r3, r3, #1075	; 0x433
  407f8a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  407f8c:	9d08      	ldr	r5, [sp, #32]
  407f8e:	e4f2      	b.n	407976 <_dtoa_r+0x3d6>
  407f90:	f1ba 0f00 	cmp.w	sl, #0
  407f94:	f47f ad75 	bne.w	407a82 <_dtoa_r+0x4e2>
  407f98:	e7b4      	b.n	407f04 <_dtoa_r+0x964>
  407f9a:	f001 f86d 	bl	409078 <__multadd>
  407f9e:	4647      	mov	r7, r8
  407fa0:	4606      	mov	r6, r0
  407fa2:	4683      	mov	fp, r0
  407fa4:	e5be      	b.n	407b24 <_dtoa_r+0x584>
  407fa6:	4601      	mov	r1, r0
  407fa8:	4620      	mov	r0, r4
  407faa:	9306      	str	r3, [sp, #24]
  407fac:	f001 f85a 	bl	409064 <_Bfree>
  407fb0:	2201      	movs	r2, #1
  407fb2:	9b06      	ldr	r3, [sp, #24]
  407fb4:	e5e0      	b.n	407b78 <_dtoa_r+0x5d8>
  407fb6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407fb8:	2b02      	cmp	r3, #2
  407fba:	f77f ad96 	ble.w	407aea <_dtoa_r+0x54a>
  407fbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407fc0:	2b00      	cmp	r3, #0
  407fc2:	d1c9      	bne.n	407f58 <_dtoa_r+0x9b8>
  407fc4:	4641      	mov	r1, r8
  407fc6:	2205      	movs	r2, #5
  407fc8:	4620      	mov	r0, r4
  407fca:	f001 f855 	bl	409078 <__multadd>
  407fce:	4601      	mov	r1, r0
  407fd0:	4680      	mov	r8, r0
  407fd2:	4648      	mov	r0, r9
  407fd4:	f001 fa1e 	bl	409414 <__mcmp>
  407fd8:	2800      	cmp	r0, #0
  407fda:	ddbd      	ble.n	407f58 <_dtoa_r+0x9b8>
  407fdc:	9a02      	ldr	r2, [sp, #8]
  407fde:	9904      	ldr	r1, [sp, #16]
  407fe0:	2331      	movs	r3, #49	; 0x31
  407fe2:	3201      	adds	r2, #1
  407fe4:	9202      	str	r2, [sp, #8]
  407fe6:	700b      	strb	r3, [r1, #0]
  407fe8:	1c4d      	adds	r5, r1, #1
  407fea:	e7b9      	b.n	407f60 <_dtoa_r+0x9c0>
  407fec:	9a02      	ldr	r2, [sp, #8]
  407fee:	3201      	adds	r2, #1
  407ff0:	9202      	str	r2, [sp, #8]
  407ff2:	9a04      	ldr	r2, [sp, #16]
  407ff4:	2331      	movs	r3, #49	; 0x31
  407ff6:	7013      	strb	r3, [r2, #0]
  407ff8:	e652      	b.n	407ca0 <_dtoa_r+0x700>
  407ffa:	2301      	movs	r3, #1
  407ffc:	930b      	str	r3, [sp, #44]	; 0x2c
  407ffe:	e666      	b.n	407cce <_dtoa_r+0x72e>
  408000:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  408004:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  408006:	e48f      	b.n	407928 <_dtoa_r+0x388>
  408008:	0040a778 	.word	0x0040a778
  40800c:	0040a750 	.word	0x0040a750
  408010:	3ff00000 	.word	0x3ff00000
  408014:	401c0000 	.word	0x401c0000
  408018:	3fe00000 	.word	0x3fe00000
  40801c:	40240000 	.word	0x40240000
  408020:	40140000 	.word	0x40140000
  408024:	4650      	mov	r0, sl
  408026:	f7fc f89d 	bl	404164 <__aeabi_i2d>
  40802a:	463a      	mov	r2, r7
  40802c:	4643      	mov	r3, r8
  40802e:	f7fc f8ff 	bl	404230 <__aeabi_dmul>
  408032:	2200      	movs	r2, #0
  408034:	4bc1      	ldr	r3, [pc, #772]	; (40833c <_dtoa_r+0xd9c>)
  408036:	f7fb ff49 	bl	403ecc <__adddf3>
  40803a:	4605      	mov	r5, r0
  40803c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  408040:	4641      	mov	r1, r8
  408042:	2200      	movs	r2, #0
  408044:	4bbe      	ldr	r3, [pc, #760]	; (408340 <_dtoa_r+0xda0>)
  408046:	4638      	mov	r0, r7
  408048:	f7fb ff3e 	bl	403ec8 <__aeabi_dsub>
  40804c:	462a      	mov	r2, r5
  40804e:	4633      	mov	r3, r6
  408050:	4682      	mov	sl, r0
  408052:	468b      	mov	fp, r1
  408054:	f001 ffbe 	bl	409fd4 <__aeabi_dcmpgt>
  408058:	4680      	mov	r8, r0
  40805a:	2800      	cmp	r0, #0
  40805c:	f040 8110 	bne.w	408280 <_dtoa_r+0xce0>
  408060:	462a      	mov	r2, r5
  408062:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  408066:	4650      	mov	r0, sl
  408068:	4659      	mov	r1, fp
  40806a:	f001 ff95 	bl	409f98 <__aeabi_dcmplt>
  40806e:	b118      	cbz	r0, 408078 <_dtoa_r+0xad8>
  408070:	4646      	mov	r6, r8
  408072:	e771      	b.n	407f58 <_dtoa_r+0x9b8>
  408074:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  408078:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  40807c:	f7ff bb8a 	b.w	407794 <_dtoa_r+0x1f4>
  408080:	9804      	ldr	r0, [sp, #16]
  408082:	f7ff babb 	b.w	4075fc <_dtoa_r+0x5c>
  408086:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408088:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40808a:	970c      	str	r7, [sp, #48]	; 0x30
  40808c:	1afb      	subs	r3, r7, r3
  40808e:	441a      	add	r2, r3
  408090:	920d      	str	r2, [sp, #52]	; 0x34
  408092:	2700      	movs	r7, #0
  408094:	e469      	b.n	40796a <_dtoa_r+0x3ca>
  408096:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  40809a:	f04f 0a02 	mov.w	sl, #2
  40809e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  4080a2:	e657      	b.n	407d54 <_dtoa_r+0x7b4>
  4080a4:	2100      	movs	r1, #0
  4080a6:	2301      	movs	r3, #1
  4080a8:	6461      	str	r1, [r4, #68]	; 0x44
  4080aa:	4620      	mov	r0, r4
  4080ac:	9325      	str	r3, [sp, #148]	; 0x94
  4080ae:	f000 ffb3 	bl	409018 <_Balloc>
  4080b2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4080b4:	9004      	str	r0, [sp, #16]
  4080b6:	6420      	str	r0, [r4, #64]	; 0x40
  4080b8:	930a      	str	r3, [sp, #40]	; 0x28
  4080ba:	930f      	str	r3, [sp, #60]	; 0x3c
  4080bc:	e629      	b.n	407d12 <_dtoa_r+0x772>
  4080be:	2a00      	cmp	r2, #0
  4080c0:	46d0      	mov	r8, sl
  4080c2:	f8cd b018 	str.w	fp, [sp, #24]
  4080c6:	469a      	mov	sl, r3
  4080c8:	dd11      	ble.n	4080ee <_dtoa_r+0xb4e>
  4080ca:	4649      	mov	r1, r9
  4080cc:	2201      	movs	r2, #1
  4080ce:	4620      	mov	r0, r4
  4080d0:	f001 f94e 	bl	409370 <__lshift>
  4080d4:	4641      	mov	r1, r8
  4080d6:	4681      	mov	r9, r0
  4080d8:	f001 f99c 	bl	409414 <__mcmp>
  4080dc:	2800      	cmp	r0, #0
  4080de:	f340 8146 	ble.w	40836e <_dtoa_r+0xdce>
  4080e2:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  4080e6:	f000 8106 	beq.w	4082f6 <_dtoa_r+0xd56>
  4080ea:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  4080ee:	46b3      	mov	fp, r6
  4080f0:	f887 a000 	strb.w	sl, [r7]
  4080f4:	1c7d      	adds	r5, r7, #1
  4080f6:	9e06      	ldr	r6, [sp, #24]
  4080f8:	e5d2      	b.n	407ca0 <_dtoa_r+0x700>
  4080fa:	d104      	bne.n	408106 <_dtoa_r+0xb66>
  4080fc:	f01a 0f01 	tst.w	sl, #1
  408100:	d001      	beq.n	408106 <_dtoa_r+0xb66>
  408102:	e5bd      	b.n	407c80 <_dtoa_r+0x6e0>
  408104:	4615      	mov	r5, r2
  408106:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40810a:	2b30      	cmp	r3, #48	; 0x30
  40810c:	f105 32ff 	add.w	r2, r5, #4294967295
  408110:	d0f8      	beq.n	408104 <_dtoa_r+0xb64>
  408112:	e5c5      	b.n	407ca0 <_dtoa_r+0x700>
  408114:	9904      	ldr	r1, [sp, #16]
  408116:	2230      	movs	r2, #48	; 0x30
  408118:	700a      	strb	r2, [r1, #0]
  40811a:	9a02      	ldr	r2, [sp, #8]
  40811c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  408120:	3201      	adds	r2, #1
  408122:	9202      	str	r2, [sp, #8]
  408124:	f7ff bbfc 	b.w	407920 <_dtoa_r+0x380>
  408128:	f000 80bb 	beq.w	4082a2 <_dtoa_r+0xd02>
  40812c:	9b02      	ldr	r3, [sp, #8]
  40812e:	425d      	negs	r5, r3
  408130:	4b84      	ldr	r3, [pc, #528]	; (408344 <_dtoa_r+0xda4>)
  408132:	f005 020f 	and.w	r2, r5, #15
  408136:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40813a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40813e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  408142:	f7fc f875 	bl	404230 <__aeabi_dmul>
  408146:	112d      	asrs	r5, r5, #4
  408148:	4607      	mov	r7, r0
  40814a:	4688      	mov	r8, r1
  40814c:	f000 812c 	beq.w	4083a8 <_dtoa_r+0xe08>
  408150:	4e7d      	ldr	r6, [pc, #500]	; (408348 <_dtoa_r+0xda8>)
  408152:	f04f 0a02 	mov.w	sl, #2
  408156:	07eb      	lsls	r3, r5, #31
  408158:	d509      	bpl.n	40816e <_dtoa_r+0xbce>
  40815a:	4638      	mov	r0, r7
  40815c:	4641      	mov	r1, r8
  40815e:	e9d6 2300 	ldrd	r2, r3, [r6]
  408162:	f7fc f865 	bl	404230 <__aeabi_dmul>
  408166:	f10a 0a01 	add.w	sl, sl, #1
  40816a:	4607      	mov	r7, r0
  40816c:	4688      	mov	r8, r1
  40816e:	106d      	asrs	r5, r5, #1
  408170:	f106 0608 	add.w	r6, r6, #8
  408174:	d1ef      	bne.n	408156 <_dtoa_r+0xbb6>
  408176:	e608      	b.n	407d8a <_dtoa_r+0x7ea>
  408178:	6871      	ldr	r1, [r6, #4]
  40817a:	4620      	mov	r0, r4
  40817c:	f000 ff4c 	bl	409018 <_Balloc>
  408180:	6933      	ldr	r3, [r6, #16]
  408182:	3302      	adds	r3, #2
  408184:	009a      	lsls	r2, r3, #2
  408186:	4605      	mov	r5, r0
  408188:	f106 010c 	add.w	r1, r6, #12
  40818c:	300c      	adds	r0, #12
  40818e:	f7fc fd85 	bl	404c9c <memcpy>
  408192:	4629      	mov	r1, r5
  408194:	2201      	movs	r2, #1
  408196:	4620      	mov	r0, r4
  408198:	f001 f8ea 	bl	409370 <__lshift>
  40819c:	9006      	str	r0, [sp, #24]
  40819e:	e4b5      	b.n	407b0c <_dtoa_r+0x56c>
  4081a0:	2b39      	cmp	r3, #57	; 0x39
  4081a2:	f8cd b018 	str.w	fp, [sp, #24]
  4081a6:	46d0      	mov	r8, sl
  4081a8:	f000 80a5 	beq.w	4082f6 <_dtoa_r+0xd56>
  4081ac:	f103 0a01 	add.w	sl, r3, #1
  4081b0:	46b3      	mov	fp, r6
  4081b2:	f887 a000 	strb.w	sl, [r7]
  4081b6:	1c7d      	adds	r5, r7, #1
  4081b8:	9e06      	ldr	r6, [sp, #24]
  4081ba:	e571      	b.n	407ca0 <_dtoa_r+0x700>
  4081bc:	465a      	mov	r2, fp
  4081be:	46d0      	mov	r8, sl
  4081c0:	46b3      	mov	fp, r6
  4081c2:	469a      	mov	sl, r3
  4081c4:	4616      	mov	r6, r2
  4081c6:	e54f      	b.n	407c68 <_dtoa_r+0x6c8>
  4081c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4081ca:	495e      	ldr	r1, [pc, #376]	; (408344 <_dtoa_r+0xda4>)
  4081cc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  4081d0:	462a      	mov	r2, r5
  4081d2:	4633      	mov	r3, r6
  4081d4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  4081d8:	f7fc f82a 	bl	404230 <__aeabi_dmul>
  4081dc:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  4081e0:	4638      	mov	r0, r7
  4081e2:	4641      	mov	r1, r8
  4081e4:	f7fc fa36 	bl	404654 <__aeabi_d2iz>
  4081e8:	4605      	mov	r5, r0
  4081ea:	f7fb ffbb 	bl	404164 <__aeabi_i2d>
  4081ee:	460b      	mov	r3, r1
  4081f0:	4602      	mov	r2, r0
  4081f2:	4641      	mov	r1, r8
  4081f4:	4638      	mov	r0, r7
  4081f6:	f7fb fe67 	bl	403ec8 <__aeabi_dsub>
  4081fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4081fc:	460f      	mov	r7, r1
  4081fe:	9904      	ldr	r1, [sp, #16]
  408200:	3530      	adds	r5, #48	; 0x30
  408202:	2b01      	cmp	r3, #1
  408204:	700d      	strb	r5, [r1, #0]
  408206:	4606      	mov	r6, r0
  408208:	f101 0501 	add.w	r5, r1, #1
  40820c:	d026      	beq.n	40825c <_dtoa_r+0xcbc>
  40820e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408210:	9a04      	ldr	r2, [sp, #16]
  408212:	f8df b13c 	ldr.w	fp, [pc, #316]	; 408350 <_dtoa_r+0xdb0>
  408216:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40821a:	4413      	add	r3, r2
  40821c:	f04f 0a00 	mov.w	sl, #0
  408220:	4699      	mov	r9, r3
  408222:	4652      	mov	r2, sl
  408224:	465b      	mov	r3, fp
  408226:	4630      	mov	r0, r6
  408228:	4639      	mov	r1, r7
  40822a:	f7fc f801 	bl	404230 <__aeabi_dmul>
  40822e:	460f      	mov	r7, r1
  408230:	4606      	mov	r6, r0
  408232:	f7fc fa0f 	bl	404654 <__aeabi_d2iz>
  408236:	4680      	mov	r8, r0
  408238:	f7fb ff94 	bl	404164 <__aeabi_i2d>
  40823c:	f108 0830 	add.w	r8, r8, #48	; 0x30
  408240:	4602      	mov	r2, r0
  408242:	460b      	mov	r3, r1
  408244:	4630      	mov	r0, r6
  408246:	4639      	mov	r1, r7
  408248:	f7fb fe3e 	bl	403ec8 <__aeabi_dsub>
  40824c:	f805 8b01 	strb.w	r8, [r5], #1
  408250:	454d      	cmp	r5, r9
  408252:	4606      	mov	r6, r0
  408254:	460f      	mov	r7, r1
  408256:	d1e4      	bne.n	408222 <_dtoa_r+0xc82>
  408258:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40825c:	4b3b      	ldr	r3, [pc, #236]	; (40834c <_dtoa_r+0xdac>)
  40825e:	2200      	movs	r2, #0
  408260:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  408264:	f7fb fe32 	bl	403ecc <__adddf3>
  408268:	4632      	mov	r2, r6
  40826a:	463b      	mov	r3, r7
  40826c:	f001 fe94 	bl	409f98 <__aeabi_dcmplt>
  408270:	2800      	cmp	r0, #0
  408272:	d046      	beq.n	408302 <_dtoa_r+0xd62>
  408274:	9b15      	ldr	r3, [sp, #84]	; 0x54
  408276:	9302      	str	r3, [sp, #8]
  408278:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40827c:	f7ff bb43 	b.w	407906 <_dtoa_r+0x366>
  408280:	f04f 0800 	mov.w	r8, #0
  408284:	4646      	mov	r6, r8
  408286:	e6a9      	b.n	407fdc <_dtoa_r+0xa3c>
  408288:	9b08      	ldr	r3, [sp, #32]
  40828a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40828c:	1a9d      	subs	r5, r3, r2
  40828e:	2300      	movs	r3, #0
  408290:	f7ff bb71 	b.w	407976 <_dtoa_r+0x3d6>
  408294:	9b18      	ldr	r3, [sp, #96]	; 0x60
  408296:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  408298:	9d08      	ldr	r5, [sp, #32]
  40829a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40829e:	f7ff bb6a 	b.w	407976 <_dtoa_r+0x3d6>
  4082a2:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  4082a6:	f04f 0a02 	mov.w	sl, #2
  4082aa:	e56e      	b.n	407d8a <_dtoa_r+0x7ea>
  4082ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4082ae:	2b00      	cmp	r3, #0
  4082b0:	f43f aeb8 	beq.w	408024 <_dtoa_r+0xa84>
  4082b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4082b6:	2b00      	cmp	r3, #0
  4082b8:	f77f aede 	ble.w	408078 <_dtoa_r+0xad8>
  4082bc:	2200      	movs	r2, #0
  4082be:	4b24      	ldr	r3, [pc, #144]	; (408350 <_dtoa_r+0xdb0>)
  4082c0:	4638      	mov	r0, r7
  4082c2:	4641      	mov	r1, r8
  4082c4:	f7fb ffb4 	bl	404230 <__aeabi_dmul>
  4082c8:	4607      	mov	r7, r0
  4082ca:	4688      	mov	r8, r1
  4082cc:	f10a 0001 	add.w	r0, sl, #1
  4082d0:	f7fb ff48 	bl	404164 <__aeabi_i2d>
  4082d4:	463a      	mov	r2, r7
  4082d6:	4643      	mov	r3, r8
  4082d8:	f7fb ffaa 	bl	404230 <__aeabi_dmul>
  4082dc:	2200      	movs	r2, #0
  4082de:	4b17      	ldr	r3, [pc, #92]	; (40833c <_dtoa_r+0xd9c>)
  4082e0:	f7fb fdf4 	bl	403ecc <__adddf3>
  4082e4:	9a02      	ldr	r2, [sp, #8]
  4082e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4082e8:	9312      	str	r3, [sp, #72]	; 0x48
  4082ea:	3a01      	subs	r2, #1
  4082ec:	4605      	mov	r5, r0
  4082ee:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4082f2:	9215      	str	r2, [sp, #84]	; 0x54
  4082f4:	e56a      	b.n	407dcc <_dtoa_r+0x82c>
  4082f6:	2239      	movs	r2, #57	; 0x39
  4082f8:	46b3      	mov	fp, r6
  4082fa:	703a      	strb	r2, [r7, #0]
  4082fc:	9e06      	ldr	r6, [sp, #24]
  4082fe:	1c7d      	adds	r5, r7, #1
  408300:	e4c0      	b.n	407c84 <_dtoa_r+0x6e4>
  408302:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  408306:	2000      	movs	r0, #0
  408308:	4910      	ldr	r1, [pc, #64]	; (40834c <_dtoa_r+0xdac>)
  40830a:	f7fb fddd 	bl	403ec8 <__aeabi_dsub>
  40830e:	4632      	mov	r2, r6
  408310:	463b      	mov	r3, r7
  408312:	f001 fe5f 	bl	409fd4 <__aeabi_dcmpgt>
  408316:	b908      	cbnz	r0, 40831c <_dtoa_r+0xd7c>
  408318:	e6ae      	b.n	408078 <_dtoa_r+0xad8>
  40831a:	4615      	mov	r5, r2
  40831c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  408320:	2b30      	cmp	r3, #48	; 0x30
  408322:	f105 32ff 	add.w	r2, r5, #4294967295
  408326:	d0f8      	beq.n	40831a <_dtoa_r+0xd7a>
  408328:	e5d7      	b.n	407eda <_dtoa_r+0x93a>
  40832a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40832e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  408330:	9302      	str	r3, [sp, #8]
  408332:	f7ff bae8 	b.w	407906 <_dtoa_r+0x366>
  408336:	970c      	str	r7, [sp, #48]	; 0x30
  408338:	f7ff bba5 	b.w	407a86 <_dtoa_r+0x4e6>
  40833c:	401c0000 	.word	0x401c0000
  408340:	40140000 	.word	0x40140000
  408344:	0040a778 	.word	0x0040a778
  408348:	0040a750 	.word	0x0040a750
  40834c:	3fe00000 	.word	0x3fe00000
  408350:	40240000 	.word	0x40240000
  408354:	2b39      	cmp	r3, #57	; 0x39
  408356:	f8cd b018 	str.w	fp, [sp, #24]
  40835a:	46d0      	mov	r8, sl
  40835c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  408360:	469a      	mov	sl, r3
  408362:	d0c8      	beq.n	4082f6 <_dtoa_r+0xd56>
  408364:	f1bb 0f00 	cmp.w	fp, #0
  408368:	f73f aebf 	bgt.w	4080ea <_dtoa_r+0xb4a>
  40836c:	e6bf      	b.n	4080ee <_dtoa_r+0xb4e>
  40836e:	f47f aebe 	bne.w	4080ee <_dtoa_r+0xb4e>
  408372:	f01a 0f01 	tst.w	sl, #1
  408376:	f43f aeba 	beq.w	4080ee <_dtoa_r+0xb4e>
  40837a:	e6b2      	b.n	4080e2 <_dtoa_r+0xb42>
  40837c:	f04f 0800 	mov.w	r8, #0
  408380:	4646      	mov	r6, r8
  408382:	e5e9      	b.n	407f58 <_dtoa_r+0x9b8>
  408384:	4631      	mov	r1, r6
  408386:	2300      	movs	r3, #0
  408388:	220a      	movs	r2, #10
  40838a:	4620      	mov	r0, r4
  40838c:	f000 fe74 	bl	409078 <__multadd>
  408390:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408392:	2b00      	cmp	r3, #0
  408394:	4606      	mov	r6, r0
  408396:	dd0a      	ble.n	4083ae <_dtoa_r+0xe0e>
  408398:	930a      	str	r3, [sp, #40]	; 0x28
  40839a:	f7ff bbaa 	b.w	407af2 <_dtoa_r+0x552>
  40839e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4083a0:	2b02      	cmp	r3, #2
  4083a2:	dc23      	bgt.n	4083ec <_dtoa_r+0xe4c>
  4083a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4083a6:	e43b      	b.n	407c20 <_dtoa_r+0x680>
  4083a8:	f04f 0a02 	mov.w	sl, #2
  4083ac:	e4ed      	b.n	407d8a <_dtoa_r+0x7ea>
  4083ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4083b0:	2b02      	cmp	r3, #2
  4083b2:	dc1b      	bgt.n	4083ec <_dtoa_r+0xe4c>
  4083b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4083b6:	e7ef      	b.n	408398 <_dtoa_r+0xdf8>
  4083b8:	2500      	movs	r5, #0
  4083ba:	6465      	str	r5, [r4, #68]	; 0x44
  4083bc:	4629      	mov	r1, r5
  4083be:	4620      	mov	r0, r4
  4083c0:	f000 fe2a 	bl	409018 <_Balloc>
  4083c4:	f04f 33ff 	mov.w	r3, #4294967295
  4083c8:	930a      	str	r3, [sp, #40]	; 0x28
  4083ca:	930f      	str	r3, [sp, #60]	; 0x3c
  4083cc:	2301      	movs	r3, #1
  4083ce:	9004      	str	r0, [sp, #16]
  4083d0:	9525      	str	r5, [sp, #148]	; 0x94
  4083d2:	6420      	str	r0, [r4, #64]	; 0x40
  4083d4:	930b      	str	r3, [sp, #44]	; 0x2c
  4083d6:	f7ff b9dd 	b.w	407794 <_dtoa_r+0x1f4>
  4083da:	2501      	movs	r5, #1
  4083dc:	f7ff b9a5 	b.w	40772a <_dtoa_r+0x18a>
  4083e0:	f43f ab69 	beq.w	407ab6 <_dtoa_r+0x516>
  4083e4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  4083e8:	f7ff bbf9 	b.w	407bde <_dtoa_r+0x63e>
  4083ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4083ee:	930a      	str	r3, [sp, #40]	; 0x28
  4083f0:	e5e5      	b.n	407fbe <_dtoa_r+0xa1e>
  4083f2:	bf00      	nop

004083f4 <__sflush_r>:
  4083f4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4083f8:	b29a      	uxth	r2, r3
  4083fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4083fe:	460d      	mov	r5, r1
  408400:	0711      	lsls	r1, r2, #28
  408402:	4680      	mov	r8, r0
  408404:	d43a      	bmi.n	40847c <__sflush_r+0x88>
  408406:	686a      	ldr	r2, [r5, #4]
  408408:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40840c:	2a00      	cmp	r2, #0
  40840e:	81ab      	strh	r3, [r5, #12]
  408410:	dd6f      	ble.n	4084f2 <__sflush_r+0xfe>
  408412:	6aac      	ldr	r4, [r5, #40]	; 0x28
  408414:	2c00      	cmp	r4, #0
  408416:	d049      	beq.n	4084ac <__sflush_r+0xb8>
  408418:	2200      	movs	r2, #0
  40841a:	b29b      	uxth	r3, r3
  40841c:	f8d8 6000 	ldr.w	r6, [r8]
  408420:	f8c8 2000 	str.w	r2, [r8]
  408424:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  408428:	d067      	beq.n	4084fa <__sflush_r+0x106>
  40842a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40842c:	075f      	lsls	r7, r3, #29
  40842e:	d505      	bpl.n	40843c <__sflush_r+0x48>
  408430:	6869      	ldr	r1, [r5, #4]
  408432:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  408434:	1a52      	subs	r2, r2, r1
  408436:	b10b      	cbz	r3, 40843c <__sflush_r+0x48>
  408438:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40843a:	1ad2      	subs	r2, r2, r3
  40843c:	2300      	movs	r3, #0
  40843e:	69e9      	ldr	r1, [r5, #28]
  408440:	4640      	mov	r0, r8
  408442:	47a0      	blx	r4
  408444:	1c44      	adds	r4, r0, #1
  408446:	d03c      	beq.n	4084c2 <__sflush_r+0xce>
  408448:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40844c:	692a      	ldr	r2, [r5, #16]
  40844e:	602a      	str	r2, [r5, #0]
  408450:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  408454:	2200      	movs	r2, #0
  408456:	81ab      	strh	r3, [r5, #12]
  408458:	04db      	lsls	r3, r3, #19
  40845a:	606a      	str	r2, [r5, #4]
  40845c:	d447      	bmi.n	4084ee <__sflush_r+0xfa>
  40845e:	6b29      	ldr	r1, [r5, #48]	; 0x30
  408460:	f8c8 6000 	str.w	r6, [r8]
  408464:	b311      	cbz	r1, 4084ac <__sflush_r+0xb8>
  408466:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40846a:	4299      	cmp	r1, r3
  40846c:	d002      	beq.n	408474 <__sflush_r+0x80>
  40846e:	4640      	mov	r0, r8
  408470:	f000 f9de 	bl	408830 <_free_r>
  408474:	2000      	movs	r0, #0
  408476:	6328      	str	r0, [r5, #48]	; 0x30
  408478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40847c:	692e      	ldr	r6, [r5, #16]
  40847e:	b1ae      	cbz	r6, 4084ac <__sflush_r+0xb8>
  408480:	682c      	ldr	r4, [r5, #0]
  408482:	602e      	str	r6, [r5, #0]
  408484:	0791      	lsls	r1, r2, #30
  408486:	bf0c      	ite	eq
  408488:	696b      	ldreq	r3, [r5, #20]
  40848a:	2300      	movne	r3, #0
  40848c:	1ba4      	subs	r4, r4, r6
  40848e:	60ab      	str	r3, [r5, #8]
  408490:	e00a      	b.n	4084a8 <__sflush_r+0xb4>
  408492:	4623      	mov	r3, r4
  408494:	4632      	mov	r2, r6
  408496:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  408498:	69e9      	ldr	r1, [r5, #28]
  40849a:	4640      	mov	r0, r8
  40849c:	47b8      	blx	r7
  40849e:	2800      	cmp	r0, #0
  4084a0:	eba4 0400 	sub.w	r4, r4, r0
  4084a4:	4406      	add	r6, r0
  4084a6:	dd04      	ble.n	4084b2 <__sflush_r+0xbe>
  4084a8:	2c00      	cmp	r4, #0
  4084aa:	dcf2      	bgt.n	408492 <__sflush_r+0x9e>
  4084ac:	2000      	movs	r0, #0
  4084ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4084b2:	89ab      	ldrh	r3, [r5, #12]
  4084b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4084b8:	81ab      	strh	r3, [r5, #12]
  4084ba:	f04f 30ff 	mov.w	r0, #4294967295
  4084be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4084c2:	f8d8 4000 	ldr.w	r4, [r8]
  4084c6:	2c1d      	cmp	r4, #29
  4084c8:	d8f3      	bhi.n	4084b2 <__sflush_r+0xbe>
  4084ca:	4b19      	ldr	r3, [pc, #100]	; (408530 <__sflush_r+0x13c>)
  4084cc:	40e3      	lsrs	r3, r4
  4084ce:	43db      	mvns	r3, r3
  4084d0:	f013 0301 	ands.w	r3, r3, #1
  4084d4:	d1ed      	bne.n	4084b2 <__sflush_r+0xbe>
  4084d6:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4084da:	606b      	str	r3, [r5, #4]
  4084dc:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  4084e0:	6929      	ldr	r1, [r5, #16]
  4084e2:	81ab      	strh	r3, [r5, #12]
  4084e4:	04da      	lsls	r2, r3, #19
  4084e6:	6029      	str	r1, [r5, #0]
  4084e8:	d5b9      	bpl.n	40845e <__sflush_r+0x6a>
  4084ea:	2c00      	cmp	r4, #0
  4084ec:	d1b7      	bne.n	40845e <__sflush_r+0x6a>
  4084ee:	6528      	str	r0, [r5, #80]	; 0x50
  4084f0:	e7b5      	b.n	40845e <__sflush_r+0x6a>
  4084f2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4084f4:	2a00      	cmp	r2, #0
  4084f6:	dc8c      	bgt.n	408412 <__sflush_r+0x1e>
  4084f8:	e7d8      	b.n	4084ac <__sflush_r+0xb8>
  4084fa:	2301      	movs	r3, #1
  4084fc:	69e9      	ldr	r1, [r5, #28]
  4084fe:	4640      	mov	r0, r8
  408500:	47a0      	blx	r4
  408502:	1c43      	adds	r3, r0, #1
  408504:	4602      	mov	r2, r0
  408506:	d002      	beq.n	40850e <__sflush_r+0x11a>
  408508:	89ab      	ldrh	r3, [r5, #12]
  40850a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40850c:	e78e      	b.n	40842c <__sflush_r+0x38>
  40850e:	f8d8 3000 	ldr.w	r3, [r8]
  408512:	2b00      	cmp	r3, #0
  408514:	d0f8      	beq.n	408508 <__sflush_r+0x114>
  408516:	2b1d      	cmp	r3, #29
  408518:	d001      	beq.n	40851e <__sflush_r+0x12a>
  40851a:	2b16      	cmp	r3, #22
  40851c:	d102      	bne.n	408524 <__sflush_r+0x130>
  40851e:	f8c8 6000 	str.w	r6, [r8]
  408522:	e7c3      	b.n	4084ac <__sflush_r+0xb8>
  408524:	89ab      	ldrh	r3, [r5, #12]
  408526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40852a:	81ab      	strh	r3, [r5, #12]
  40852c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408530:	20400001 	.word	0x20400001

00408534 <_fflush_r>:
  408534:	b538      	push	{r3, r4, r5, lr}
  408536:	460d      	mov	r5, r1
  408538:	4604      	mov	r4, r0
  40853a:	b108      	cbz	r0, 408540 <_fflush_r+0xc>
  40853c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40853e:	b1bb      	cbz	r3, 408570 <_fflush_r+0x3c>
  408540:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  408544:	b188      	cbz	r0, 40856a <_fflush_r+0x36>
  408546:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  408548:	07db      	lsls	r3, r3, #31
  40854a:	d401      	bmi.n	408550 <_fflush_r+0x1c>
  40854c:	0581      	lsls	r1, r0, #22
  40854e:	d517      	bpl.n	408580 <_fflush_r+0x4c>
  408550:	4620      	mov	r0, r4
  408552:	4629      	mov	r1, r5
  408554:	f7ff ff4e 	bl	4083f4 <__sflush_r>
  408558:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40855a:	07da      	lsls	r2, r3, #31
  40855c:	4604      	mov	r4, r0
  40855e:	d402      	bmi.n	408566 <_fflush_r+0x32>
  408560:	89ab      	ldrh	r3, [r5, #12]
  408562:	059b      	lsls	r3, r3, #22
  408564:	d507      	bpl.n	408576 <_fflush_r+0x42>
  408566:	4620      	mov	r0, r4
  408568:	bd38      	pop	{r3, r4, r5, pc}
  40856a:	4604      	mov	r4, r0
  40856c:	4620      	mov	r0, r4
  40856e:	bd38      	pop	{r3, r4, r5, pc}
  408570:	f000 f838 	bl	4085e4 <__sinit>
  408574:	e7e4      	b.n	408540 <_fflush_r+0xc>
  408576:	6da8      	ldr	r0, [r5, #88]	; 0x58
  408578:	f000 fc04 	bl	408d84 <__retarget_lock_release_recursive>
  40857c:	4620      	mov	r0, r4
  40857e:	bd38      	pop	{r3, r4, r5, pc}
  408580:	6da8      	ldr	r0, [r5, #88]	; 0x58
  408582:	f000 fbfd 	bl	408d80 <__retarget_lock_acquire_recursive>
  408586:	e7e3      	b.n	408550 <_fflush_r+0x1c>

00408588 <_cleanup_r>:
  408588:	4901      	ldr	r1, [pc, #4]	; (408590 <_cleanup_r+0x8>)
  40858a:	f000 bbaf 	b.w	408cec <_fwalk_reent>
  40858e:	bf00      	nop
  408590:	00409d71 	.word	0x00409d71

00408594 <std.isra.0>:
  408594:	b510      	push	{r4, lr}
  408596:	2300      	movs	r3, #0
  408598:	4604      	mov	r4, r0
  40859a:	8181      	strh	r1, [r0, #12]
  40859c:	81c2      	strh	r2, [r0, #14]
  40859e:	6003      	str	r3, [r0, #0]
  4085a0:	6043      	str	r3, [r0, #4]
  4085a2:	6083      	str	r3, [r0, #8]
  4085a4:	6643      	str	r3, [r0, #100]	; 0x64
  4085a6:	6103      	str	r3, [r0, #16]
  4085a8:	6143      	str	r3, [r0, #20]
  4085aa:	6183      	str	r3, [r0, #24]
  4085ac:	4619      	mov	r1, r3
  4085ae:	2208      	movs	r2, #8
  4085b0:	305c      	adds	r0, #92	; 0x5c
  4085b2:	f7fc fc0d 	bl	404dd0 <memset>
  4085b6:	4807      	ldr	r0, [pc, #28]	; (4085d4 <std.isra.0+0x40>)
  4085b8:	4907      	ldr	r1, [pc, #28]	; (4085d8 <std.isra.0+0x44>)
  4085ba:	4a08      	ldr	r2, [pc, #32]	; (4085dc <std.isra.0+0x48>)
  4085bc:	4b08      	ldr	r3, [pc, #32]	; (4085e0 <std.isra.0+0x4c>)
  4085be:	6220      	str	r0, [r4, #32]
  4085c0:	61e4      	str	r4, [r4, #28]
  4085c2:	6261      	str	r1, [r4, #36]	; 0x24
  4085c4:	62a2      	str	r2, [r4, #40]	; 0x28
  4085c6:	62e3      	str	r3, [r4, #44]	; 0x2c
  4085c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4085cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4085d0:	f000 bbd2 	b.w	408d78 <__retarget_lock_init_recursive>
  4085d4:	00409959 	.word	0x00409959
  4085d8:	0040997d 	.word	0x0040997d
  4085dc:	004099b9 	.word	0x004099b9
  4085e0:	004099d9 	.word	0x004099d9

004085e4 <__sinit>:
  4085e4:	b510      	push	{r4, lr}
  4085e6:	4604      	mov	r4, r0
  4085e8:	4812      	ldr	r0, [pc, #72]	; (408634 <__sinit+0x50>)
  4085ea:	f000 fbc9 	bl	408d80 <__retarget_lock_acquire_recursive>
  4085ee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4085f0:	b9d2      	cbnz	r2, 408628 <__sinit+0x44>
  4085f2:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  4085f6:	4810      	ldr	r0, [pc, #64]	; (408638 <__sinit+0x54>)
  4085f8:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4085fc:	2103      	movs	r1, #3
  4085fe:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  408602:	63e0      	str	r0, [r4, #60]	; 0x3c
  408604:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  408608:	6860      	ldr	r0, [r4, #4]
  40860a:	2104      	movs	r1, #4
  40860c:	f7ff ffc2 	bl	408594 <std.isra.0>
  408610:	2201      	movs	r2, #1
  408612:	2109      	movs	r1, #9
  408614:	68a0      	ldr	r0, [r4, #8]
  408616:	f7ff ffbd 	bl	408594 <std.isra.0>
  40861a:	2202      	movs	r2, #2
  40861c:	2112      	movs	r1, #18
  40861e:	68e0      	ldr	r0, [r4, #12]
  408620:	f7ff ffb8 	bl	408594 <std.isra.0>
  408624:	2301      	movs	r3, #1
  408626:	63a3      	str	r3, [r4, #56]	; 0x38
  408628:	4802      	ldr	r0, [pc, #8]	; (408634 <__sinit+0x50>)
  40862a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40862e:	f000 bba9 	b.w	408d84 <__retarget_lock_release_recursive>
  408632:	bf00      	nop
  408634:	20400ecc 	.word	0x20400ecc
  408638:	00408589 	.word	0x00408589

0040863c <__sfp_lock_acquire>:
  40863c:	4801      	ldr	r0, [pc, #4]	; (408644 <__sfp_lock_acquire+0x8>)
  40863e:	f000 bb9f 	b.w	408d80 <__retarget_lock_acquire_recursive>
  408642:	bf00      	nop
  408644:	20400ee0 	.word	0x20400ee0

00408648 <__sfp_lock_release>:
  408648:	4801      	ldr	r0, [pc, #4]	; (408650 <__sfp_lock_release+0x8>)
  40864a:	f000 bb9b 	b.w	408d84 <__retarget_lock_release_recursive>
  40864e:	bf00      	nop
  408650:	20400ee0 	.word	0x20400ee0

00408654 <__libc_fini_array>:
  408654:	b538      	push	{r3, r4, r5, lr}
  408656:	4c0a      	ldr	r4, [pc, #40]	; (408680 <__libc_fini_array+0x2c>)
  408658:	4d0a      	ldr	r5, [pc, #40]	; (408684 <__libc_fini_array+0x30>)
  40865a:	1b64      	subs	r4, r4, r5
  40865c:	10a4      	asrs	r4, r4, #2
  40865e:	d00a      	beq.n	408676 <__libc_fini_array+0x22>
  408660:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  408664:	3b01      	subs	r3, #1
  408666:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40866a:	3c01      	subs	r4, #1
  40866c:	f855 3904 	ldr.w	r3, [r5], #-4
  408670:	4798      	blx	r3
  408672:	2c00      	cmp	r4, #0
  408674:	d1f9      	bne.n	40866a <__libc_fini_array+0x16>
  408676:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40867a:	f002 b973 	b.w	40a964 <_fini>
  40867e:	bf00      	nop
  408680:	0040a974 	.word	0x0040a974
  408684:	0040a970 	.word	0x0040a970

00408688 <__fputwc>:
  408688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40868c:	b082      	sub	sp, #8
  40868e:	4680      	mov	r8, r0
  408690:	4689      	mov	r9, r1
  408692:	4614      	mov	r4, r2
  408694:	f000 fb54 	bl	408d40 <__locale_mb_cur_max>
  408698:	2801      	cmp	r0, #1
  40869a:	d036      	beq.n	40870a <__fputwc+0x82>
  40869c:	464a      	mov	r2, r9
  40869e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  4086a2:	a901      	add	r1, sp, #4
  4086a4:	4640      	mov	r0, r8
  4086a6:	f001 fa71 	bl	409b8c <_wcrtomb_r>
  4086aa:	1c42      	adds	r2, r0, #1
  4086ac:	4606      	mov	r6, r0
  4086ae:	d025      	beq.n	4086fc <__fputwc+0x74>
  4086b0:	b3a8      	cbz	r0, 40871e <__fputwc+0x96>
  4086b2:	f89d e004 	ldrb.w	lr, [sp, #4]
  4086b6:	2500      	movs	r5, #0
  4086b8:	f10d 0a04 	add.w	sl, sp, #4
  4086bc:	e009      	b.n	4086d2 <__fputwc+0x4a>
  4086be:	6823      	ldr	r3, [r4, #0]
  4086c0:	1c5a      	adds	r2, r3, #1
  4086c2:	6022      	str	r2, [r4, #0]
  4086c4:	f883 e000 	strb.w	lr, [r3]
  4086c8:	3501      	adds	r5, #1
  4086ca:	42b5      	cmp	r5, r6
  4086cc:	d227      	bcs.n	40871e <__fputwc+0x96>
  4086ce:	f815 e00a 	ldrb.w	lr, [r5, sl]
  4086d2:	68a3      	ldr	r3, [r4, #8]
  4086d4:	3b01      	subs	r3, #1
  4086d6:	2b00      	cmp	r3, #0
  4086d8:	60a3      	str	r3, [r4, #8]
  4086da:	daf0      	bge.n	4086be <__fputwc+0x36>
  4086dc:	69a7      	ldr	r7, [r4, #24]
  4086de:	42bb      	cmp	r3, r7
  4086e0:	4671      	mov	r1, lr
  4086e2:	4622      	mov	r2, r4
  4086e4:	4640      	mov	r0, r8
  4086e6:	db02      	blt.n	4086ee <__fputwc+0x66>
  4086e8:	f1be 0f0a 	cmp.w	lr, #10
  4086ec:	d1e7      	bne.n	4086be <__fputwc+0x36>
  4086ee:	f001 f9f5 	bl	409adc <__swbuf_r>
  4086f2:	1c43      	adds	r3, r0, #1
  4086f4:	d1e8      	bne.n	4086c8 <__fputwc+0x40>
  4086f6:	b002      	add	sp, #8
  4086f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4086fc:	89a3      	ldrh	r3, [r4, #12]
  4086fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408702:	81a3      	strh	r3, [r4, #12]
  408704:	b002      	add	sp, #8
  408706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40870a:	f109 33ff 	add.w	r3, r9, #4294967295
  40870e:	2bfe      	cmp	r3, #254	; 0xfe
  408710:	d8c4      	bhi.n	40869c <__fputwc+0x14>
  408712:	fa5f fe89 	uxtb.w	lr, r9
  408716:	4606      	mov	r6, r0
  408718:	f88d e004 	strb.w	lr, [sp, #4]
  40871c:	e7cb      	b.n	4086b6 <__fputwc+0x2e>
  40871e:	4648      	mov	r0, r9
  408720:	b002      	add	sp, #8
  408722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408726:	bf00      	nop

00408728 <_fputwc_r>:
  408728:	b530      	push	{r4, r5, lr}
  40872a:	6e53      	ldr	r3, [r2, #100]	; 0x64
  40872c:	f013 0f01 	tst.w	r3, #1
  408730:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  408734:	4614      	mov	r4, r2
  408736:	b083      	sub	sp, #12
  408738:	4605      	mov	r5, r0
  40873a:	b29a      	uxth	r2, r3
  40873c:	d101      	bne.n	408742 <_fputwc_r+0x1a>
  40873e:	0590      	lsls	r0, r2, #22
  408740:	d51c      	bpl.n	40877c <_fputwc_r+0x54>
  408742:	0490      	lsls	r0, r2, #18
  408744:	d406      	bmi.n	408754 <_fputwc_r+0x2c>
  408746:	6e62      	ldr	r2, [r4, #100]	; 0x64
  408748:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40874c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  408750:	81a3      	strh	r3, [r4, #12]
  408752:	6662      	str	r2, [r4, #100]	; 0x64
  408754:	4628      	mov	r0, r5
  408756:	4622      	mov	r2, r4
  408758:	f7ff ff96 	bl	408688 <__fputwc>
  40875c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40875e:	07da      	lsls	r2, r3, #31
  408760:	4605      	mov	r5, r0
  408762:	d402      	bmi.n	40876a <_fputwc_r+0x42>
  408764:	89a3      	ldrh	r3, [r4, #12]
  408766:	059b      	lsls	r3, r3, #22
  408768:	d502      	bpl.n	408770 <_fputwc_r+0x48>
  40876a:	4628      	mov	r0, r5
  40876c:	b003      	add	sp, #12
  40876e:	bd30      	pop	{r4, r5, pc}
  408770:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408772:	f000 fb07 	bl	408d84 <__retarget_lock_release_recursive>
  408776:	4628      	mov	r0, r5
  408778:	b003      	add	sp, #12
  40877a:	bd30      	pop	{r4, r5, pc}
  40877c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40877e:	9101      	str	r1, [sp, #4]
  408780:	f000 fafe 	bl	408d80 <__retarget_lock_acquire_recursive>
  408784:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408788:	9901      	ldr	r1, [sp, #4]
  40878a:	b29a      	uxth	r2, r3
  40878c:	e7d9      	b.n	408742 <_fputwc_r+0x1a>
  40878e:	bf00      	nop

00408790 <_malloc_trim_r>:
  408790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408792:	4f24      	ldr	r7, [pc, #144]	; (408824 <_malloc_trim_r+0x94>)
  408794:	460c      	mov	r4, r1
  408796:	4606      	mov	r6, r0
  408798:	f7fc fb68 	bl	404e6c <__malloc_lock>
  40879c:	68bb      	ldr	r3, [r7, #8]
  40879e:	685d      	ldr	r5, [r3, #4]
  4087a0:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4087a4:	310f      	adds	r1, #15
  4087a6:	f025 0503 	bic.w	r5, r5, #3
  4087aa:	4429      	add	r1, r5
  4087ac:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4087b0:	f021 010f 	bic.w	r1, r1, #15
  4087b4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4087b8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4087bc:	db07      	blt.n	4087ce <_malloc_trim_r+0x3e>
  4087be:	2100      	movs	r1, #0
  4087c0:	4630      	mov	r0, r6
  4087c2:	f7fc fb5f 	bl	404e84 <_sbrk_r>
  4087c6:	68bb      	ldr	r3, [r7, #8]
  4087c8:	442b      	add	r3, r5
  4087ca:	4298      	cmp	r0, r3
  4087cc:	d004      	beq.n	4087d8 <_malloc_trim_r+0x48>
  4087ce:	4630      	mov	r0, r6
  4087d0:	f7fc fb52 	bl	404e78 <__malloc_unlock>
  4087d4:	2000      	movs	r0, #0
  4087d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4087d8:	4261      	negs	r1, r4
  4087da:	4630      	mov	r0, r6
  4087dc:	f7fc fb52 	bl	404e84 <_sbrk_r>
  4087e0:	3001      	adds	r0, #1
  4087e2:	d00d      	beq.n	408800 <_malloc_trim_r+0x70>
  4087e4:	4b10      	ldr	r3, [pc, #64]	; (408828 <_malloc_trim_r+0x98>)
  4087e6:	68ba      	ldr	r2, [r7, #8]
  4087e8:	6819      	ldr	r1, [r3, #0]
  4087ea:	1b2d      	subs	r5, r5, r4
  4087ec:	f045 0501 	orr.w	r5, r5, #1
  4087f0:	4630      	mov	r0, r6
  4087f2:	1b09      	subs	r1, r1, r4
  4087f4:	6055      	str	r5, [r2, #4]
  4087f6:	6019      	str	r1, [r3, #0]
  4087f8:	f7fc fb3e 	bl	404e78 <__malloc_unlock>
  4087fc:	2001      	movs	r0, #1
  4087fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408800:	2100      	movs	r1, #0
  408802:	4630      	mov	r0, r6
  408804:	f7fc fb3e 	bl	404e84 <_sbrk_r>
  408808:	68ba      	ldr	r2, [r7, #8]
  40880a:	1a83      	subs	r3, r0, r2
  40880c:	2b0f      	cmp	r3, #15
  40880e:	ddde      	ble.n	4087ce <_malloc_trim_r+0x3e>
  408810:	4c06      	ldr	r4, [pc, #24]	; (40882c <_malloc_trim_r+0x9c>)
  408812:	4905      	ldr	r1, [pc, #20]	; (408828 <_malloc_trim_r+0x98>)
  408814:	6824      	ldr	r4, [r4, #0]
  408816:	f043 0301 	orr.w	r3, r3, #1
  40881a:	1b00      	subs	r0, r0, r4
  40881c:	6053      	str	r3, [r2, #4]
  40881e:	6008      	str	r0, [r1, #0]
  408820:	e7d5      	b.n	4087ce <_malloc_trim_r+0x3e>
  408822:	bf00      	nop
  408824:	20400450 	.word	0x20400450
  408828:	20400db8 	.word	0x20400db8
  40882c:	20400858 	.word	0x20400858

00408830 <_free_r>:
  408830:	2900      	cmp	r1, #0
  408832:	d044      	beq.n	4088be <_free_r+0x8e>
  408834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408838:	460d      	mov	r5, r1
  40883a:	4680      	mov	r8, r0
  40883c:	f7fc fb16 	bl	404e6c <__malloc_lock>
  408840:	f855 7c04 	ldr.w	r7, [r5, #-4]
  408844:	4969      	ldr	r1, [pc, #420]	; (4089ec <_free_r+0x1bc>)
  408846:	f027 0301 	bic.w	r3, r7, #1
  40884a:	f1a5 0408 	sub.w	r4, r5, #8
  40884e:	18e2      	adds	r2, r4, r3
  408850:	688e      	ldr	r6, [r1, #8]
  408852:	6850      	ldr	r0, [r2, #4]
  408854:	42b2      	cmp	r2, r6
  408856:	f020 0003 	bic.w	r0, r0, #3
  40885a:	d05e      	beq.n	40891a <_free_r+0xea>
  40885c:	07fe      	lsls	r6, r7, #31
  40885e:	6050      	str	r0, [r2, #4]
  408860:	d40b      	bmi.n	40887a <_free_r+0x4a>
  408862:	f855 7c08 	ldr.w	r7, [r5, #-8]
  408866:	1be4      	subs	r4, r4, r7
  408868:	f101 0e08 	add.w	lr, r1, #8
  40886c:	68a5      	ldr	r5, [r4, #8]
  40886e:	4575      	cmp	r5, lr
  408870:	443b      	add	r3, r7
  408872:	d06d      	beq.n	408950 <_free_r+0x120>
  408874:	68e7      	ldr	r7, [r4, #12]
  408876:	60ef      	str	r7, [r5, #12]
  408878:	60bd      	str	r5, [r7, #8]
  40887a:	1815      	adds	r5, r2, r0
  40887c:	686d      	ldr	r5, [r5, #4]
  40887e:	07ed      	lsls	r5, r5, #31
  408880:	d53e      	bpl.n	408900 <_free_r+0xd0>
  408882:	f043 0201 	orr.w	r2, r3, #1
  408886:	6062      	str	r2, [r4, #4]
  408888:	50e3      	str	r3, [r4, r3]
  40888a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40888e:	d217      	bcs.n	4088c0 <_free_r+0x90>
  408890:	08db      	lsrs	r3, r3, #3
  408892:	1c58      	adds	r0, r3, #1
  408894:	109a      	asrs	r2, r3, #2
  408896:	684d      	ldr	r5, [r1, #4]
  408898:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  40889c:	60a7      	str	r7, [r4, #8]
  40889e:	2301      	movs	r3, #1
  4088a0:	4093      	lsls	r3, r2
  4088a2:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  4088a6:	432b      	orrs	r3, r5
  4088a8:	3a08      	subs	r2, #8
  4088aa:	60e2      	str	r2, [r4, #12]
  4088ac:	604b      	str	r3, [r1, #4]
  4088ae:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  4088b2:	60fc      	str	r4, [r7, #12]
  4088b4:	4640      	mov	r0, r8
  4088b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4088ba:	f7fc badd 	b.w	404e78 <__malloc_unlock>
  4088be:	4770      	bx	lr
  4088c0:	0a5a      	lsrs	r2, r3, #9
  4088c2:	2a04      	cmp	r2, #4
  4088c4:	d852      	bhi.n	40896c <_free_r+0x13c>
  4088c6:	099a      	lsrs	r2, r3, #6
  4088c8:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4088cc:	00ff      	lsls	r7, r7, #3
  4088ce:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4088d2:	19c8      	adds	r0, r1, r7
  4088d4:	59ca      	ldr	r2, [r1, r7]
  4088d6:	3808      	subs	r0, #8
  4088d8:	4290      	cmp	r0, r2
  4088da:	d04f      	beq.n	40897c <_free_r+0x14c>
  4088dc:	6851      	ldr	r1, [r2, #4]
  4088de:	f021 0103 	bic.w	r1, r1, #3
  4088e2:	428b      	cmp	r3, r1
  4088e4:	d232      	bcs.n	40894c <_free_r+0x11c>
  4088e6:	6892      	ldr	r2, [r2, #8]
  4088e8:	4290      	cmp	r0, r2
  4088ea:	d1f7      	bne.n	4088dc <_free_r+0xac>
  4088ec:	68c3      	ldr	r3, [r0, #12]
  4088ee:	60a0      	str	r0, [r4, #8]
  4088f0:	60e3      	str	r3, [r4, #12]
  4088f2:	609c      	str	r4, [r3, #8]
  4088f4:	60c4      	str	r4, [r0, #12]
  4088f6:	4640      	mov	r0, r8
  4088f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4088fc:	f7fc babc 	b.w	404e78 <__malloc_unlock>
  408900:	6895      	ldr	r5, [r2, #8]
  408902:	4f3b      	ldr	r7, [pc, #236]	; (4089f0 <_free_r+0x1c0>)
  408904:	42bd      	cmp	r5, r7
  408906:	4403      	add	r3, r0
  408908:	d040      	beq.n	40898c <_free_r+0x15c>
  40890a:	68d0      	ldr	r0, [r2, #12]
  40890c:	60e8      	str	r0, [r5, #12]
  40890e:	f043 0201 	orr.w	r2, r3, #1
  408912:	6085      	str	r5, [r0, #8]
  408914:	6062      	str	r2, [r4, #4]
  408916:	50e3      	str	r3, [r4, r3]
  408918:	e7b7      	b.n	40888a <_free_r+0x5a>
  40891a:	07ff      	lsls	r7, r7, #31
  40891c:	4403      	add	r3, r0
  40891e:	d407      	bmi.n	408930 <_free_r+0x100>
  408920:	f855 2c08 	ldr.w	r2, [r5, #-8]
  408924:	1aa4      	subs	r4, r4, r2
  408926:	4413      	add	r3, r2
  408928:	68a0      	ldr	r0, [r4, #8]
  40892a:	68e2      	ldr	r2, [r4, #12]
  40892c:	60c2      	str	r2, [r0, #12]
  40892e:	6090      	str	r0, [r2, #8]
  408930:	4a30      	ldr	r2, [pc, #192]	; (4089f4 <_free_r+0x1c4>)
  408932:	6812      	ldr	r2, [r2, #0]
  408934:	f043 0001 	orr.w	r0, r3, #1
  408938:	4293      	cmp	r3, r2
  40893a:	6060      	str	r0, [r4, #4]
  40893c:	608c      	str	r4, [r1, #8]
  40893e:	d3b9      	bcc.n	4088b4 <_free_r+0x84>
  408940:	4b2d      	ldr	r3, [pc, #180]	; (4089f8 <_free_r+0x1c8>)
  408942:	4640      	mov	r0, r8
  408944:	6819      	ldr	r1, [r3, #0]
  408946:	f7ff ff23 	bl	408790 <_malloc_trim_r>
  40894a:	e7b3      	b.n	4088b4 <_free_r+0x84>
  40894c:	4610      	mov	r0, r2
  40894e:	e7cd      	b.n	4088ec <_free_r+0xbc>
  408950:	1811      	adds	r1, r2, r0
  408952:	6849      	ldr	r1, [r1, #4]
  408954:	07c9      	lsls	r1, r1, #31
  408956:	d444      	bmi.n	4089e2 <_free_r+0x1b2>
  408958:	6891      	ldr	r1, [r2, #8]
  40895a:	68d2      	ldr	r2, [r2, #12]
  40895c:	60ca      	str	r2, [r1, #12]
  40895e:	4403      	add	r3, r0
  408960:	f043 0001 	orr.w	r0, r3, #1
  408964:	6091      	str	r1, [r2, #8]
  408966:	6060      	str	r0, [r4, #4]
  408968:	50e3      	str	r3, [r4, r3]
  40896a:	e7a3      	b.n	4088b4 <_free_r+0x84>
  40896c:	2a14      	cmp	r2, #20
  40896e:	d816      	bhi.n	40899e <_free_r+0x16e>
  408970:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  408974:	00ff      	lsls	r7, r7, #3
  408976:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40897a:	e7aa      	b.n	4088d2 <_free_r+0xa2>
  40897c:	10aa      	asrs	r2, r5, #2
  40897e:	2301      	movs	r3, #1
  408980:	684d      	ldr	r5, [r1, #4]
  408982:	4093      	lsls	r3, r2
  408984:	432b      	orrs	r3, r5
  408986:	604b      	str	r3, [r1, #4]
  408988:	4603      	mov	r3, r0
  40898a:	e7b0      	b.n	4088ee <_free_r+0xbe>
  40898c:	f043 0201 	orr.w	r2, r3, #1
  408990:	614c      	str	r4, [r1, #20]
  408992:	610c      	str	r4, [r1, #16]
  408994:	60e5      	str	r5, [r4, #12]
  408996:	60a5      	str	r5, [r4, #8]
  408998:	6062      	str	r2, [r4, #4]
  40899a:	50e3      	str	r3, [r4, r3]
  40899c:	e78a      	b.n	4088b4 <_free_r+0x84>
  40899e:	2a54      	cmp	r2, #84	; 0x54
  4089a0:	d806      	bhi.n	4089b0 <_free_r+0x180>
  4089a2:	0b1a      	lsrs	r2, r3, #12
  4089a4:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4089a8:	00ff      	lsls	r7, r7, #3
  4089aa:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4089ae:	e790      	b.n	4088d2 <_free_r+0xa2>
  4089b0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4089b4:	d806      	bhi.n	4089c4 <_free_r+0x194>
  4089b6:	0bda      	lsrs	r2, r3, #15
  4089b8:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4089bc:	00ff      	lsls	r7, r7, #3
  4089be:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4089c2:	e786      	b.n	4088d2 <_free_r+0xa2>
  4089c4:	f240 5054 	movw	r0, #1364	; 0x554
  4089c8:	4282      	cmp	r2, r0
  4089ca:	d806      	bhi.n	4089da <_free_r+0x1aa>
  4089cc:	0c9a      	lsrs	r2, r3, #18
  4089ce:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4089d2:	00ff      	lsls	r7, r7, #3
  4089d4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4089d8:	e77b      	b.n	4088d2 <_free_r+0xa2>
  4089da:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4089de:	257e      	movs	r5, #126	; 0x7e
  4089e0:	e777      	b.n	4088d2 <_free_r+0xa2>
  4089e2:	f043 0101 	orr.w	r1, r3, #1
  4089e6:	6061      	str	r1, [r4, #4]
  4089e8:	6013      	str	r3, [r2, #0]
  4089ea:	e763      	b.n	4088b4 <_free_r+0x84>
  4089ec:	20400450 	.word	0x20400450
  4089f0:	20400458 	.word	0x20400458
  4089f4:	2040085c 	.word	0x2040085c
  4089f8:	20400de8 	.word	0x20400de8

004089fc <__sfvwrite_r>:
  4089fc:	6893      	ldr	r3, [r2, #8]
  4089fe:	2b00      	cmp	r3, #0
  408a00:	d073      	beq.n	408aea <__sfvwrite_r+0xee>
  408a02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408a06:	898b      	ldrh	r3, [r1, #12]
  408a08:	b083      	sub	sp, #12
  408a0a:	460c      	mov	r4, r1
  408a0c:	0719      	lsls	r1, r3, #28
  408a0e:	9000      	str	r0, [sp, #0]
  408a10:	4616      	mov	r6, r2
  408a12:	d526      	bpl.n	408a62 <__sfvwrite_r+0x66>
  408a14:	6922      	ldr	r2, [r4, #16]
  408a16:	b322      	cbz	r2, 408a62 <__sfvwrite_r+0x66>
  408a18:	f013 0002 	ands.w	r0, r3, #2
  408a1c:	6835      	ldr	r5, [r6, #0]
  408a1e:	d02c      	beq.n	408a7a <__sfvwrite_r+0x7e>
  408a20:	f04f 0900 	mov.w	r9, #0
  408a24:	4fb0      	ldr	r7, [pc, #704]	; (408ce8 <__sfvwrite_r+0x2ec>)
  408a26:	46c8      	mov	r8, r9
  408a28:	46b2      	mov	sl, r6
  408a2a:	45b8      	cmp	r8, r7
  408a2c:	4643      	mov	r3, r8
  408a2e:	464a      	mov	r2, r9
  408a30:	bf28      	it	cs
  408a32:	463b      	movcs	r3, r7
  408a34:	9800      	ldr	r0, [sp, #0]
  408a36:	f1b8 0f00 	cmp.w	r8, #0
  408a3a:	d050      	beq.n	408ade <__sfvwrite_r+0xe2>
  408a3c:	69e1      	ldr	r1, [r4, #28]
  408a3e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  408a40:	47b0      	blx	r6
  408a42:	2800      	cmp	r0, #0
  408a44:	dd58      	ble.n	408af8 <__sfvwrite_r+0xfc>
  408a46:	f8da 3008 	ldr.w	r3, [sl, #8]
  408a4a:	1a1b      	subs	r3, r3, r0
  408a4c:	4481      	add	r9, r0
  408a4e:	eba8 0800 	sub.w	r8, r8, r0
  408a52:	f8ca 3008 	str.w	r3, [sl, #8]
  408a56:	2b00      	cmp	r3, #0
  408a58:	d1e7      	bne.n	408a2a <__sfvwrite_r+0x2e>
  408a5a:	2000      	movs	r0, #0
  408a5c:	b003      	add	sp, #12
  408a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408a62:	4621      	mov	r1, r4
  408a64:	9800      	ldr	r0, [sp, #0]
  408a66:	f7fe fc91 	bl	40738c <__swsetup_r>
  408a6a:	2800      	cmp	r0, #0
  408a6c:	f040 8133 	bne.w	408cd6 <__sfvwrite_r+0x2da>
  408a70:	89a3      	ldrh	r3, [r4, #12]
  408a72:	6835      	ldr	r5, [r6, #0]
  408a74:	f013 0002 	ands.w	r0, r3, #2
  408a78:	d1d2      	bne.n	408a20 <__sfvwrite_r+0x24>
  408a7a:	f013 0901 	ands.w	r9, r3, #1
  408a7e:	d145      	bne.n	408b0c <__sfvwrite_r+0x110>
  408a80:	464f      	mov	r7, r9
  408a82:	9601      	str	r6, [sp, #4]
  408a84:	b337      	cbz	r7, 408ad4 <__sfvwrite_r+0xd8>
  408a86:	059a      	lsls	r2, r3, #22
  408a88:	f8d4 8008 	ldr.w	r8, [r4, #8]
  408a8c:	f140 8083 	bpl.w	408b96 <__sfvwrite_r+0x19a>
  408a90:	4547      	cmp	r7, r8
  408a92:	46c3      	mov	fp, r8
  408a94:	f0c0 80ab 	bcc.w	408bee <__sfvwrite_r+0x1f2>
  408a98:	f413 6f90 	tst.w	r3, #1152	; 0x480
  408a9c:	f040 80ac 	bne.w	408bf8 <__sfvwrite_r+0x1fc>
  408aa0:	6820      	ldr	r0, [r4, #0]
  408aa2:	46ba      	mov	sl, r7
  408aa4:	465a      	mov	r2, fp
  408aa6:	4649      	mov	r1, r9
  408aa8:	f000 fa52 	bl	408f50 <memmove>
  408aac:	68a2      	ldr	r2, [r4, #8]
  408aae:	6823      	ldr	r3, [r4, #0]
  408ab0:	eba2 0208 	sub.w	r2, r2, r8
  408ab4:	445b      	add	r3, fp
  408ab6:	60a2      	str	r2, [r4, #8]
  408ab8:	6023      	str	r3, [r4, #0]
  408aba:	9a01      	ldr	r2, [sp, #4]
  408abc:	6893      	ldr	r3, [r2, #8]
  408abe:	eba3 030a 	sub.w	r3, r3, sl
  408ac2:	44d1      	add	r9, sl
  408ac4:	eba7 070a 	sub.w	r7, r7, sl
  408ac8:	6093      	str	r3, [r2, #8]
  408aca:	2b00      	cmp	r3, #0
  408acc:	d0c5      	beq.n	408a5a <__sfvwrite_r+0x5e>
  408ace:	89a3      	ldrh	r3, [r4, #12]
  408ad0:	2f00      	cmp	r7, #0
  408ad2:	d1d8      	bne.n	408a86 <__sfvwrite_r+0x8a>
  408ad4:	f8d5 9000 	ldr.w	r9, [r5]
  408ad8:	686f      	ldr	r7, [r5, #4]
  408ada:	3508      	adds	r5, #8
  408adc:	e7d2      	b.n	408a84 <__sfvwrite_r+0x88>
  408ade:	f8d5 9000 	ldr.w	r9, [r5]
  408ae2:	f8d5 8004 	ldr.w	r8, [r5, #4]
  408ae6:	3508      	adds	r5, #8
  408ae8:	e79f      	b.n	408a2a <__sfvwrite_r+0x2e>
  408aea:	2000      	movs	r0, #0
  408aec:	4770      	bx	lr
  408aee:	4621      	mov	r1, r4
  408af0:	9800      	ldr	r0, [sp, #0]
  408af2:	f7ff fd1f 	bl	408534 <_fflush_r>
  408af6:	b370      	cbz	r0, 408b56 <__sfvwrite_r+0x15a>
  408af8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408afc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408b00:	f04f 30ff 	mov.w	r0, #4294967295
  408b04:	81a3      	strh	r3, [r4, #12]
  408b06:	b003      	add	sp, #12
  408b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408b0c:	4681      	mov	r9, r0
  408b0e:	4633      	mov	r3, r6
  408b10:	464e      	mov	r6, r9
  408b12:	46a8      	mov	r8, r5
  408b14:	469a      	mov	sl, r3
  408b16:	464d      	mov	r5, r9
  408b18:	b34e      	cbz	r6, 408b6e <__sfvwrite_r+0x172>
  408b1a:	b380      	cbz	r0, 408b7e <__sfvwrite_r+0x182>
  408b1c:	6820      	ldr	r0, [r4, #0]
  408b1e:	6923      	ldr	r3, [r4, #16]
  408b20:	6962      	ldr	r2, [r4, #20]
  408b22:	45b1      	cmp	r9, r6
  408b24:	46cb      	mov	fp, r9
  408b26:	bf28      	it	cs
  408b28:	46b3      	movcs	fp, r6
  408b2a:	4298      	cmp	r0, r3
  408b2c:	465f      	mov	r7, fp
  408b2e:	d904      	bls.n	408b3a <__sfvwrite_r+0x13e>
  408b30:	68a3      	ldr	r3, [r4, #8]
  408b32:	4413      	add	r3, r2
  408b34:	459b      	cmp	fp, r3
  408b36:	f300 80a6 	bgt.w	408c86 <__sfvwrite_r+0x28a>
  408b3a:	4593      	cmp	fp, r2
  408b3c:	db4b      	blt.n	408bd6 <__sfvwrite_r+0x1da>
  408b3e:	4613      	mov	r3, r2
  408b40:	6a67      	ldr	r7, [r4, #36]	; 0x24
  408b42:	69e1      	ldr	r1, [r4, #28]
  408b44:	9800      	ldr	r0, [sp, #0]
  408b46:	462a      	mov	r2, r5
  408b48:	47b8      	blx	r7
  408b4a:	1e07      	subs	r7, r0, #0
  408b4c:	ddd4      	ble.n	408af8 <__sfvwrite_r+0xfc>
  408b4e:	ebb9 0907 	subs.w	r9, r9, r7
  408b52:	d0cc      	beq.n	408aee <__sfvwrite_r+0xf2>
  408b54:	2001      	movs	r0, #1
  408b56:	f8da 3008 	ldr.w	r3, [sl, #8]
  408b5a:	1bdb      	subs	r3, r3, r7
  408b5c:	443d      	add	r5, r7
  408b5e:	1bf6      	subs	r6, r6, r7
  408b60:	f8ca 3008 	str.w	r3, [sl, #8]
  408b64:	2b00      	cmp	r3, #0
  408b66:	f43f af78 	beq.w	408a5a <__sfvwrite_r+0x5e>
  408b6a:	2e00      	cmp	r6, #0
  408b6c:	d1d5      	bne.n	408b1a <__sfvwrite_r+0x11e>
  408b6e:	f108 0308 	add.w	r3, r8, #8
  408b72:	e913 0060 	ldmdb	r3, {r5, r6}
  408b76:	4698      	mov	r8, r3
  408b78:	3308      	adds	r3, #8
  408b7a:	2e00      	cmp	r6, #0
  408b7c:	d0f9      	beq.n	408b72 <__sfvwrite_r+0x176>
  408b7e:	4632      	mov	r2, r6
  408b80:	210a      	movs	r1, #10
  408b82:	4628      	mov	r0, r5
  408b84:	f000 f994 	bl	408eb0 <memchr>
  408b88:	2800      	cmp	r0, #0
  408b8a:	f000 80a1 	beq.w	408cd0 <__sfvwrite_r+0x2d4>
  408b8e:	3001      	adds	r0, #1
  408b90:	eba0 0905 	sub.w	r9, r0, r5
  408b94:	e7c2      	b.n	408b1c <__sfvwrite_r+0x120>
  408b96:	6820      	ldr	r0, [r4, #0]
  408b98:	6923      	ldr	r3, [r4, #16]
  408b9a:	4298      	cmp	r0, r3
  408b9c:	d802      	bhi.n	408ba4 <__sfvwrite_r+0x1a8>
  408b9e:	6963      	ldr	r3, [r4, #20]
  408ba0:	429f      	cmp	r7, r3
  408ba2:	d25d      	bcs.n	408c60 <__sfvwrite_r+0x264>
  408ba4:	45b8      	cmp	r8, r7
  408ba6:	bf28      	it	cs
  408ba8:	46b8      	movcs	r8, r7
  408baa:	4642      	mov	r2, r8
  408bac:	4649      	mov	r1, r9
  408bae:	f000 f9cf 	bl	408f50 <memmove>
  408bb2:	68a3      	ldr	r3, [r4, #8]
  408bb4:	6822      	ldr	r2, [r4, #0]
  408bb6:	eba3 0308 	sub.w	r3, r3, r8
  408bba:	4442      	add	r2, r8
  408bbc:	60a3      	str	r3, [r4, #8]
  408bbe:	6022      	str	r2, [r4, #0]
  408bc0:	b10b      	cbz	r3, 408bc6 <__sfvwrite_r+0x1ca>
  408bc2:	46c2      	mov	sl, r8
  408bc4:	e779      	b.n	408aba <__sfvwrite_r+0xbe>
  408bc6:	4621      	mov	r1, r4
  408bc8:	9800      	ldr	r0, [sp, #0]
  408bca:	f7ff fcb3 	bl	408534 <_fflush_r>
  408bce:	2800      	cmp	r0, #0
  408bd0:	d192      	bne.n	408af8 <__sfvwrite_r+0xfc>
  408bd2:	46c2      	mov	sl, r8
  408bd4:	e771      	b.n	408aba <__sfvwrite_r+0xbe>
  408bd6:	465a      	mov	r2, fp
  408bd8:	4629      	mov	r1, r5
  408bda:	f000 f9b9 	bl	408f50 <memmove>
  408bde:	68a2      	ldr	r2, [r4, #8]
  408be0:	6823      	ldr	r3, [r4, #0]
  408be2:	eba2 020b 	sub.w	r2, r2, fp
  408be6:	445b      	add	r3, fp
  408be8:	60a2      	str	r2, [r4, #8]
  408bea:	6023      	str	r3, [r4, #0]
  408bec:	e7af      	b.n	408b4e <__sfvwrite_r+0x152>
  408bee:	6820      	ldr	r0, [r4, #0]
  408bf0:	46b8      	mov	r8, r7
  408bf2:	46ba      	mov	sl, r7
  408bf4:	46bb      	mov	fp, r7
  408bf6:	e755      	b.n	408aa4 <__sfvwrite_r+0xa8>
  408bf8:	6962      	ldr	r2, [r4, #20]
  408bfa:	6820      	ldr	r0, [r4, #0]
  408bfc:	6921      	ldr	r1, [r4, #16]
  408bfe:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  408c02:	eba0 0a01 	sub.w	sl, r0, r1
  408c06:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  408c0a:	f10a 0001 	add.w	r0, sl, #1
  408c0e:	ea4f 0868 	mov.w	r8, r8, asr #1
  408c12:	4438      	add	r0, r7
  408c14:	4540      	cmp	r0, r8
  408c16:	4642      	mov	r2, r8
  408c18:	bf84      	itt	hi
  408c1a:	4680      	movhi	r8, r0
  408c1c:	4642      	movhi	r2, r8
  408c1e:	055b      	lsls	r3, r3, #21
  408c20:	d544      	bpl.n	408cac <__sfvwrite_r+0x2b0>
  408c22:	4611      	mov	r1, r2
  408c24:	9800      	ldr	r0, [sp, #0]
  408c26:	f7fb fd89 	bl	40473c <_malloc_r>
  408c2a:	4683      	mov	fp, r0
  408c2c:	2800      	cmp	r0, #0
  408c2e:	d055      	beq.n	408cdc <__sfvwrite_r+0x2e0>
  408c30:	4652      	mov	r2, sl
  408c32:	6921      	ldr	r1, [r4, #16]
  408c34:	f7fc f832 	bl	404c9c <memcpy>
  408c38:	89a3      	ldrh	r3, [r4, #12]
  408c3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  408c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  408c42:	81a3      	strh	r3, [r4, #12]
  408c44:	eb0b 000a 	add.w	r0, fp, sl
  408c48:	eba8 030a 	sub.w	r3, r8, sl
  408c4c:	f8c4 b010 	str.w	fp, [r4, #16]
  408c50:	f8c4 8014 	str.w	r8, [r4, #20]
  408c54:	6020      	str	r0, [r4, #0]
  408c56:	60a3      	str	r3, [r4, #8]
  408c58:	46b8      	mov	r8, r7
  408c5a:	46ba      	mov	sl, r7
  408c5c:	46bb      	mov	fp, r7
  408c5e:	e721      	b.n	408aa4 <__sfvwrite_r+0xa8>
  408c60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  408c64:	42b9      	cmp	r1, r7
  408c66:	bf28      	it	cs
  408c68:	4639      	movcs	r1, r7
  408c6a:	464a      	mov	r2, r9
  408c6c:	fb91 f1f3 	sdiv	r1, r1, r3
  408c70:	9800      	ldr	r0, [sp, #0]
  408c72:	6a66      	ldr	r6, [r4, #36]	; 0x24
  408c74:	fb03 f301 	mul.w	r3, r3, r1
  408c78:	69e1      	ldr	r1, [r4, #28]
  408c7a:	47b0      	blx	r6
  408c7c:	f1b0 0a00 	subs.w	sl, r0, #0
  408c80:	f73f af1b 	bgt.w	408aba <__sfvwrite_r+0xbe>
  408c84:	e738      	b.n	408af8 <__sfvwrite_r+0xfc>
  408c86:	461a      	mov	r2, r3
  408c88:	4629      	mov	r1, r5
  408c8a:	9301      	str	r3, [sp, #4]
  408c8c:	f000 f960 	bl	408f50 <memmove>
  408c90:	6822      	ldr	r2, [r4, #0]
  408c92:	9b01      	ldr	r3, [sp, #4]
  408c94:	9800      	ldr	r0, [sp, #0]
  408c96:	441a      	add	r2, r3
  408c98:	6022      	str	r2, [r4, #0]
  408c9a:	4621      	mov	r1, r4
  408c9c:	f7ff fc4a 	bl	408534 <_fflush_r>
  408ca0:	9b01      	ldr	r3, [sp, #4]
  408ca2:	2800      	cmp	r0, #0
  408ca4:	f47f af28 	bne.w	408af8 <__sfvwrite_r+0xfc>
  408ca8:	461f      	mov	r7, r3
  408caa:	e750      	b.n	408b4e <__sfvwrite_r+0x152>
  408cac:	9800      	ldr	r0, [sp, #0]
  408cae:	f000 fcad 	bl	40960c <_realloc_r>
  408cb2:	4683      	mov	fp, r0
  408cb4:	2800      	cmp	r0, #0
  408cb6:	d1c5      	bne.n	408c44 <__sfvwrite_r+0x248>
  408cb8:	9d00      	ldr	r5, [sp, #0]
  408cba:	6921      	ldr	r1, [r4, #16]
  408cbc:	4628      	mov	r0, r5
  408cbe:	f7ff fdb7 	bl	408830 <_free_r>
  408cc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408cc6:	220c      	movs	r2, #12
  408cc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  408ccc:	602a      	str	r2, [r5, #0]
  408cce:	e715      	b.n	408afc <__sfvwrite_r+0x100>
  408cd0:	f106 0901 	add.w	r9, r6, #1
  408cd4:	e722      	b.n	408b1c <__sfvwrite_r+0x120>
  408cd6:	f04f 30ff 	mov.w	r0, #4294967295
  408cda:	e6bf      	b.n	408a5c <__sfvwrite_r+0x60>
  408cdc:	9a00      	ldr	r2, [sp, #0]
  408cde:	230c      	movs	r3, #12
  408ce0:	6013      	str	r3, [r2, #0]
  408ce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408ce6:	e709      	b.n	408afc <__sfvwrite_r+0x100>
  408ce8:	7ffffc00 	.word	0x7ffffc00

00408cec <_fwalk_reent>:
  408cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408cf0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  408cf4:	d01f      	beq.n	408d36 <_fwalk_reent+0x4a>
  408cf6:	4688      	mov	r8, r1
  408cf8:	4606      	mov	r6, r0
  408cfa:	f04f 0900 	mov.w	r9, #0
  408cfe:	687d      	ldr	r5, [r7, #4]
  408d00:	68bc      	ldr	r4, [r7, #8]
  408d02:	3d01      	subs	r5, #1
  408d04:	d411      	bmi.n	408d2a <_fwalk_reent+0x3e>
  408d06:	89a3      	ldrh	r3, [r4, #12]
  408d08:	2b01      	cmp	r3, #1
  408d0a:	f105 35ff 	add.w	r5, r5, #4294967295
  408d0e:	d908      	bls.n	408d22 <_fwalk_reent+0x36>
  408d10:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  408d14:	3301      	adds	r3, #1
  408d16:	4621      	mov	r1, r4
  408d18:	4630      	mov	r0, r6
  408d1a:	d002      	beq.n	408d22 <_fwalk_reent+0x36>
  408d1c:	47c0      	blx	r8
  408d1e:	ea49 0900 	orr.w	r9, r9, r0
  408d22:	1c6b      	adds	r3, r5, #1
  408d24:	f104 0468 	add.w	r4, r4, #104	; 0x68
  408d28:	d1ed      	bne.n	408d06 <_fwalk_reent+0x1a>
  408d2a:	683f      	ldr	r7, [r7, #0]
  408d2c:	2f00      	cmp	r7, #0
  408d2e:	d1e6      	bne.n	408cfe <_fwalk_reent+0x12>
  408d30:	4648      	mov	r0, r9
  408d32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408d36:	46b9      	mov	r9, r7
  408d38:	4648      	mov	r0, r9
  408d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408d3e:	bf00      	nop

00408d40 <__locale_mb_cur_max>:
  408d40:	4b04      	ldr	r3, [pc, #16]	; (408d54 <__locale_mb_cur_max+0x14>)
  408d42:	4a05      	ldr	r2, [pc, #20]	; (408d58 <__locale_mb_cur_max+0x18>)
  408d44:	681b      	ldr	r3, [r3, #0]
  408d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  408d48:	2b00      	cmp	r3, #0
  408d4a:	bf08      	it	eq
  408d4c:	4613      	moveq	r3, r2
  408d4e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  408d52:	4770      	bx	lr
  408d54:	20400024 	.word	0x20400024
  408d58:	20400864 	.word	0x20400864

00408d5c <_localeconv_r>:
  408d5c:	4a04      	ldr	r2, [pc, #16]	; (408d70 <_localeconv_r+0x14>)
  408d5e:	4b05      	ldr	r3, [pc, #20]	; (408d74 <_localeconv_r+0x18>)
  408d60:	6812      	ldr	r2, [r2, #0]
  408d62:	6b50      	ldr	r0, [r2, #52]	; 0x34
  408d64:	2800      	cmp	r0, #0
  408d66:	bf08      	it	eq
  408d68:	4618      	moveq	r0, r3
  408d6a:	30f0      	adds	r0, #240	; 0xf0
  408d6c:	4770      	bx	lr
  408d6e:	bf00      	nop
  408d70:	20400024 	.word	0x20400024
  408d74:	20400864 	.word	0x20400864

00408d78 <__retarget_lock_init_recursive>:
  408d78:	4770      	bx	lr
  408d7a:	bf00      	nop

00408d7c <__retarget_lock_close_recursive>:
  408d7c:	4770      	bx	lr
  408d7e:	bf00      	nop

00408d80 <__retarget_lock_acquire_recursive>:
  408d80:	4770      	bx	lr
  408d82:	bf00      	nop

00408d84 <__retarget_lock_release_recursive>:
  408d84:	4770      	bx	lr
  408d86:	bf00      	nop

00408d88 <__swhatbuf_r>:
  408d88:	b570      	push	{r4, r5, r6, lr}
  408d8a:	460c      	mov	r4, r1
  408d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408d90:	2900      	cmp	r1, #0
  408d92:	b090      	sub	sp, #64	; 0x40
  408d94:	4615      	mov	r5, r2
  408d96:	461e      	mov	r6, r3
  408d98:	db14      	blt.n	408dc4 <__swhatbuf_r+0x3c>
  408d9a:	aa01      	add	r2, sp, #4
  408d9c:	f001 f84a 	bl	409e34 <_fstat_r>
  408da0:	2800      	cmp	r0, #0
  408da2:	db0f      	blt.n	408dc4 <__swhatbuf_r+0x3c>
  408da4:	9a02      	ldr	r2, [sp, #8]
  408da6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  408daa:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  408dae:	fab2 f282 	clz	r2, r2
  408db2:	0952      	lsrs	r2, r2, #5
  408db4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  408db8:	f44f 6000 	mov.w	r0, #2048	; 0x800
  408dbc:	6032      	str	r2, [r6, #0]
  408dbe:	602b      	str	r3, [r5, #0]
  408dc0:	b010      	add	sp, #64	; 0x40
  408dc2:	bd70      	pop	{r4, r5, r6, pc}
  408dc4:	89a2      	ldrh	r2, [r4, #12]
  408dc6:	2300      	movs	r3, #0
  408dc8:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  408dcc:	6033      	str	r3, [r6, #0]
  408dce:	d004      	beq.n	408dda <__swhatbuf_r+0x52>
  408dd0:	2240      	movs	r2, #64	; 0x40
  408dd2:	4618      	mov	r0, r3
  408dd4:	602a      	str	r2, [r5, #0]
  408dd6:	b010      	add	sp, #64	; 0x40
  408dd8:	bd70      	pop	{r4, r5, r6, pc}
  408dda:	f44f 6380 	mov.w	r3, #1024	; 0x400
  408dde:	602b      	str	r3, [r5, #0]
  408de0:	b010      	add	sp, #64	; 0x40
  408de2:	bd70      	pop	{r4, r5, r6, pc}

00408de4 <__smakebuf_r>:
  408de4:	898a      	ldrh	r2, [r1, #12]
  408de6:	0792      	lsls	r2, r2, #30
  408de8:	460b      	mov	r3, r1
  408dea:	d506      	bpl.n	408dfa <__smakebuf_r+0x16>
  408dec:	f101 0243 	add.w	r2, r1, #67	; 0x43
  408df0:	2101      	movs	r1, #1
  408df2:	601a      	str	r2, [r3, #0]
  408df4:	611a      	str	r2, [r3, #16]
  408df6:	6159      	str	r1, [r3, #20]
  408df8:	4770      	bx	lr
  408dfa:	b5f0      	push	{r4, r5, r6, r7, lr}
  408dfc:	b083      	sub	sp, #12
  408dfe:	ab01      	add	r3, sp, #4
  408e00:	466a      	mov	r2, sp
  408e02:	460c      	mov	r4, r1
  408e04:	4606      	mov	r6, r0
  408e06:	f7ff ffbf 	bl	408d88 <__swhatbuf_r>
  408e0a:	9900      	ldr	r1, [sp, #0]
  408e0c:	4605      	mov	r5, r0
  408e0e:	4630      	mov	r0, r6
  408e10:	f7fb fc94 	bl	40473c <_malloc_r>
  408e14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408e18:	b1d8      	cbz	r0, 408e52 <__smakebuf_r+0x6e>
  408e1a:	9a01      	ldr	r2, [sp, #4]
  408e1c:	4f15      	ldr	r7, [pc, #84]	; (408e74 <__smakebuf_r+0x90>)
  408e1e:	9900      	ldr	r1, [sp, #0]
  408e20:	63f7      	str	r7, [r6, #60]	; 0x3c
  408e22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  408e26:	81a3      	strh	r3, [r4, #12]
  408e28:	6020      	str	r0, [r4, #0]
  408e2a:	6120      	str	r0, [r4, #16]
  408e2c:	6161      	str	r1, [r4, #20]
  408e2e:	b91a      	cbnz	r2, 408e38 <__smakebuf_r+0x54>
  408e30:	432b      	orrs	r3, r5
  408e32:	81a3      	strh	r3, [r4, #12]
  408e34:	b003      	add	sp, #12
  408e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408e38:	4630      	mov	r0, r6
  408e3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  408e3e:	f001 f80d 	bl	409e5c <_isatty_r>
  408e42:	b1a0      	cbz	r0, 408e6e <__smakebuf_r+0x8a>
  408e44:	89a3      	ldrh	r3, [r4, #12]
  408e46:	f023 0303 	bic.w	r3, r3, #3
  408e4a:	f043 0301 	orr.w	r3, r3, #1
  408e4e:	b21b      	sxth	r3, r3
  408e50:	e7ee      	b.n	408e30 <__smakebuf_r+0x4c>
  408e52:	059a      	lsls	r2, r3, #22
  408e54:	d4ee      	bmi.n	408e34 <__smakebuf_r+0x50>
  408e56:	f023 0303 	bic.w	r3, r3, #3
  408e5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  408e5e:	f043 0302 	orr.w	r3, r3, #2
  408e62:	2101      	movs	r1, #1
  408e64:	81a3      	strh	r3, [r4, #12]
  408e66:	6022      	str	r2, [r4, #0]
  408e68:	6122      	str	r2, [r4, #16]
  408e6a:	6161      	str	r1, [r4, #20]
  408e6c:	e7e2      	b.n	408e34 <__smakebuf_r+0x50>
  408e6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408e72:	e7dd      	b.n	408e30 <__smakebuf_r+0x4c>
  408e74:	00408589 	.word	0x00408589

00408e78 <__ascii_mbtowc>:
  408e78:	b082      	sub	sp, #8
  408e7a:	b149      	cbz	r1, 408e90 <__ascii_mbtowc+0x18>
  408e7c:	b15a      	cbz	r2, 408e96 <__ascii_mbtowc+0x1e>
  408e7e:	b16b      	cbz	r3, 408e9c <__ascii_mbtowc+0x24>
  408e80:	7813      	ldrb	r3, [r2, #0]
  408e82:	600b      	str	r3, [r1, #0]
  408e84:	7812      	ldrb	r2, [r2, #0]
  408e86:	1c10      	adds	r0, r2, #0
  408e88:	bf18      	it	ne
  408e8a:	2001      	movne	r0, #1
  408e8c:	b002      	add	sp, #8
  408e8e:	4770      	bx	lr
  408e90:	a901      	add	r1, sp, #4
  408e92:	2a00      	cmp	r2, #0
  408e94:	d1f3      	bne.n	408e7e <__ascii_mbtowc+0x6>
  408e96:	4610      	mov	r0, r2
  408e98:	b002      	add	sp, #8
  408e9a:	4770      	bx	lr
  408e9c:	f06f 0001 	mvn.w	r0, #1
  408ea0:	e7f4      	b.n	408e8c <__ascii_mbtowc+0x14>
  408ea2:	bf00      	nop
	...

00408eb0 <memchr>:
  408eb0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  408eb4:	2a10      	cmp	r2, #16
  408eb6:	db2b      	blt.n	408f10 <memchr+0x60>
  408eb8:	f010 0f07 	tst.w	r0, #7
  408ebc:	d008      	beq.n	408ed0 <memchr+0x20>
  408ebe:	f810 3b01 	ldrb.w	r3, [r0], #1
  408ec2:	3a01      	subs	r2, #1
  408ec4:	428b      	cmp	r3, r1
  408ec6:	d02d      	beq.n	408f24 <memchr+0x74>
  408ec8:	f010 0f07 	tst.w	r0, #7
  408ecc:	b342      	cbz	r2, 408f20 <memchr+0x70>
  408ece:	d1f6      	bne.n	408ebe <memchr+0xe>
  408ed0:	b4f0      	push	{r4, r5, r6, r7}
  408ed2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  408ed6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  408eda:	f022 0407 	bic.w	r4, r2, #7
  408ede:	f07f 0700 	mvns.w	r7, #0
  408ee2:	2300      	movs	r3, #0
  408ee4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  408ee8:	3c08      	subs	r4, #8
  408eea:	ea85 0501 	eor.w	r5, r5, r1
  408eee:	ea86 0601 	eor.w	r6, r6, r1
  408ef2:	fa85 f547 	uadd8	r5, r5, r7
  408ef6:	faa3 f587 	sel	r5, r3, r7
  408efa:	fa86 f647 	uadd8	r6, r6, r7
  408efe:	faa5 f687 	sel	r6, r5, r7
  408f02:	b98e      	cbnz	r6, 408f28 <memchr+0x78>
  408f04:	d1ee      	bne.n	408ee4 <memchr+0x34>
  408f06:	bcf0      	pop	{r4, r5, r6, r7}
  408f08:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  408f0c:	f002 0207 	and.w	r2, r2, #7
  408f10:	b132      	cbz	r2, 408f20 <memchr+0x70>
  408f12:	f810 3b01 	ldrb.w	r3, [r0], #1
  408f16:	3a01      	subs	r2, #1
  408f18:	ea83 0301 	eor.w	r3, r3, r1
  408f1c:	b113      	cbz	r3, 408f24 <memchr+0x74>
  408f1e:	d1f8      	bne.n	408f12 <memchr+0x62>
  408f20:	2000      	movs	r0, #0
  408f22:	4770      	bx	lr
  408f24:	3801      	subs	r0, #1
  408f26:	4770      	bx	lr
  408f28:	2d00      	cmp	r5, #0
  408f2a:	bf06      	itte	eq
  408f2c:	4635      	moveq	r5, r6
  408f2e:	3803      	subeq	r0, #3
  408f30:	3807      	subne	r0, #7
  408f32:	f015 0f01 	tst.w	r5, #1
  408f36:	d107      	bne.n	408f48 <memchr+0x98>
  408f38:	3001      	adds	r0, #1
  408f3a:	f415 7f80 	tst.w	r5, #256	; 0x100
  408f3e:	bf02      	ittt	eq
  408f40:	3001      	addeq	r0, #1
  408f42:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  408f46:	3001      	addeq	r0, #1
  408f48:	bcf0      	pop	{r4, r5, r6, r7}
  408f4a:	3801      	subs	r0, #1
  408f4c:	4770      	bx	lr
  408f4e:	bf00      	nop

00408f50 <memmove>:
  408f50:	4288      	cmp	r0, r1
  408f52:	b5f0      	push	{r4, r5, r6, r7, lr}
  408f54:	d90d      	bls.n	408f72 <memmove+0x22>
  408f56:	188b      	adds	r3, r1, r2
  408f58:	4298      	cmp	r0, r3
  408f5a:	d20a      	bcs.n	408f72 <memmove+0x22>
  408f5c:	1884      	adds	r4, r0, r2
  408f5e:	2a00      	cmp	r2, #0
  408f60:	d051      	beq.n	409006 <memmove+0xb6>
  408f62:	4622      	mov	r2, r4
  408f64:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  408f68:	f802 4d01 	strb.w	r4, [r2, #-1]!
  408f6c:	4299      	cmp	r1, r3
  408f6e:	d1f9      	bne.n	408f64 <memmove+0x14>
  408f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408f72:	2a0f      	cmp	r2, #15
  408f74:	d948      	bls.n	409008 <memmove+0xb8>
  408f76:	ea41 0300 	orr.w	r3, r1, r0
  408f7a:	079b      	lsls	r3, r3, #30
  408f7c:	d146      	bne.n	40900c <memmove+0xbc>
  408f7e:	f100 0410 	add.w	r4, r0, #16
  408f82:	f101 0310 	add.w	r3, r1, #16
  408f86:	4615      	mov	r5, r2
  408f88:	f853 6c10 	ldr.w	r6, [r3, #-16]
  408f8c:	f844 6c10 	str.w	r6, [r4, #-16]
  408f90:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  408f94:	f844 6c0c 	str.w	r6, [r4, #-12]
  408f98:	f853 6c08 	ldr.w	r6, [r3, #-8]
  408f9c:	f844 6c08 	str.w	r6, [r4, #-8]
  408fa0:	3d10      	subs	r5, #16
  408fa2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  408fa6:	f844 6c04 	str.w	r6, [r4, #-4]
  408faa:	2d0f      	cmp	r5, #15
  408fac:	f103 0310 	add.w	r3, r3, #16
  408fb0:	f104 0410 	add.w	r4, r4, #16
  408fb4:	d8e8      	bhi.n	408f88 <memmove+0x38>
  408fb6:	f1a2 0310 	sub.w	r3, r2, #16
  408fba:	f023 030f 	bic.w	r3, r3, #15
  408fbe:	f002 0e0f 	and.w	lr, r2, #15
  408fc2:	3310      	adds	r3, #16
  408fc4:	f1be 0f03 	cmp.w	lr, #3
  408fc8:	4419      	add	r1, r3
  408fca:	4403      	add	r3, r0
  408fcc:	d921      	bls.n	409012 <memmove+0xc2>
  408fce:	1f1e      	subs	r6, r3, #4
  408fd0:	460d      	mov	r5, r1
  408fd2:	4674      	mov	r4, lr
  408fd4:	3c04      	subs	r4, #4
  408fd6:	f855 7b04 	ldr.w	r7, [r5], #4
  408fda:	f846 7f04 	str.w	r7, [r6, #4]!
  408fde:	2c03      	cmp	r4, #3
  408fe0:	d8f8      	bhi.n	408fd4 <memmove+0x84>
  408fe2:	f1ae 0404 	sub.w	r4, lr, #4
  408fe6:	f024 0403 	bic.w	r4, r4, #3
  408fea:	3404      	adds	r4, #4
  408fec:	4421      	add	r1, r4
  408fee:	4423      	add	r3, r4
  408ff0:	f002 0203 	and.w	r2, r2, #3
  408ff4:	b162      	cbz	r2, 409010 <memmove+0xc0>
  408ff6:	3b01      	subs	r3, #1
  408ff8:	440a      	add	r2, r1
  408ffa:	f811 4b01 	ldrb.w	r4, [r1], #1
  408ffe:	f803 4f01 	strb.w	r4, [r3, #1]!
  409002:	428a      	cmp	r2, r1
  409004:	d1f9      	bne.n	408ffa <memmove+0xaa>
  409006:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409008:	4603      	mov	r3, r0
  40900a:	e7f3      	b.n	408ff4 <memmove+0xa4>
  40900c:	4603      	mov	r3, r0
  40900e:	e7f2      	b.n	408ff6 <memmove+0xa6>
  409010:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409012:	4672      	mov	r2, lr
  409014:	e7ee      	b.n	408ff4 <memmove+0xa4>
  409016:	bf00      	nop

00409018 <_Balloc>:
  409018:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40901a:	b570      	push	{r4, r5, r6, lr}
  40901c:	4605      	mov	r5, r0
  40901e:	460c      	mov	r4, r1
  409020:	b14b      	cbz	r3, 409036 <_Balloc+0x1e>
  409022:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  409026:	b180      	cbz	r0, 40904a <_Balloc+0x32>
  409028:	6802      	ldr	r2, [r0, #0]
  40902a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40902e:	2300      	movs	r3, #0
  409030:	6103      	str	r3, [r0, #16]
  409032:	60c3      	str	r3, [r0, #12]
  409034:	bd70      	pop	{r4, r5, r6, pc}
  409036:	2221      	movs	r2, #33	; 0x21
  409038:	2104      	movs	r1, #4
  40903a:	f000 fe57 	bl	409cec <_calloc_r>
  40903e:	64e8      	str	r0, [r5, #76]	; 0x4c
  409040:	4603      	mov	r3, r0
  409042:	2800      	cmp	r0, #0
  409044:	d1ed      	bne.n	409022 <_Balloc+0xa>
  409046:	2000      	movs	r0, #0
  409048:	bd70      	pop	{r4, r5, r6, pc}
  40904a:	2101      	movs	r1, #1
  40904c:	fa01 f604 	lsl.w	r6, r1, r4
  409050:	1d72      	adds	r2, r6, #5
  409052:	4628      	mov	r0, r5
  409054:	0092      	lsls	r2, r2, #2
  409056:	f000 fe49 	bl	409cec <_calloc_r>
  40905a:	2800      	cmp	r0, #0
  40905c:	d0f3      	beq.n	409046 <_Balloc+0x2e>
  40905e:	6044      	str	r4, [r0, #4]
  409060:	6086      	str	r6, [r0, #8]
  409062:	e7e4      	b.n	40902e <_Balloc+0x16>

00409064 <_Bfree>:
  409064:	b131      	cbz	r1, 409074 <_Bfree+0x10>
  409066:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  409068:	684a      	ldr	r2, [r1, #4]
  40906a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40906e:	6008      	str	r0, [r1, #0]
  409070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  409074:	4770      	bx	lr
  409076:	bf00      	nop

00409078 <__multadd>:
  409078:	b5f0      	push	{r4, r5, r6, r7, lr}
  40907a:	690c      	ldr	r4, [r1, #16]
  40907c:	b083      	sub	sp, #12
  40907e:	460d      	mov	r5, r1
  409080:	4606      	mov	r6, r0
  409082:	f101 0e14 	add.w	lr, r1, #20
  409086:	2700      	movs	r7, #0
  409088:	f8de 0000 	ldr.w	r0, [lr]
  40908c:	b281      	uxth	r1, r0
  40908e:	fb02 3301 	mla	r3, r2, r1, r3
  409092:	0c01      	lsrs	r1, r0, #16
  409094:	0c18      	lsrs	r0, r3, #16
  409096:	fb02 0101 	mla	r1, r2, r1, r0
  40909a:	b29b      	uxth	r3, r3
  40909c:	3701      	adds	r7, #1
  40909e:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  4090a2:	42bc      	cmp	r4, r7
  4090a4:	f84e 3b04 	str.w	r3, [lr], #4
  4090a8:	ea4f 4311 	mov.w	r3, r1, lsr #16
  4090ac:	dcec      	bgt.n	409088 <__multadd+0x10>
  4090ae:	b13b      	cbz	r3, 4090c0 <__multadd+0x48>
  4090b0:	68aa      	ldr	r2, [r5, #8]
  4090b2:	4294      	cmp	r4, r2
  4090b4:	da07      	bge.n	4090c6 <__multadd+0x4e>
  4090b6:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  4090ba:	3401      	adds	r4, #1
  4090bc:	6153      	str	r3, [r2, #20]
  4090be:	612c      	str	r4, [r5, #16]
  4090c0:	4628      	mov	r0, r5
  4090c2:	b003      	add	sp, #12
  4090c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4090c6:	6869      	ldr	r1, [r5, #4]
  4090c8:	9301      	str	r3, [sp, #4]
  4090ca:	3101      	adds	r1, #1
  4090cc:	4630      	mov	r0, r6
  4090ce:	f7ff ffa3 	bl	409018 <_Balloc>
  4090d2:	692a      	ldr	r2, [r5, #16]
  4090d4:	3202      	adds	r2, #2
  4090d6:	f105 010c 	add.w	r1, r5, #12
  4090da:	4607      	mov	r7, r0
  4090dc:	0092      	lsls	r2, r2, #2
  4090de:	300c      	adds	r0, #12
  4090e0:	f7fb fddc 	bl	404c9c <memcpy>
  4090e4:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  4090e6:	6869      	ldr	r1, [r5, #4]
  4090e8:	9b01      	ldr	r3, [sp, #4]
  4090ea:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  4090ee:	6028      	str	r0, [r5, #0]
  4090f0:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  4090f4:	463d      	mov	r5, r7
  4090f6:	e7de      	b.n	4090b6 <__multadd+0x3e>

004090f8 <__hi0bits>:
  4090f8:	0c02      	lsrs	r2, r0, #16
  4090fa:	0412      	lsls	r2, r2, #16
  4090fc:	4603      	mov	r3, r0
  4090fe:	b9b2      	cbnz	r2, 40912e <__hi0bits+0x36>
  409100:	0403      	lsls	r3, r0, #16
  409102:	2010      	movs	r0, #16
  409104:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  409108:	bf04      	itt	eq
  40910a:	021b      	lsleq	r3, r3, #8
  40910c:	3008      	addeq	r0, #8
  40910e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  409112:	bf04      	itt	eq
  409114:	011b      	lsleq	r3, r3, #4
  409116:	3004      	addeq	r0, #4
  409118:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  40911c:	bf04      	itt	eq
  40911e:	009b      	lsleq	r3, r3, #2
  409120:	3002      	addeq	r0, #2
  409122:	2b00      	cmp	r3, #0
  409124:	db02      	blt.n	40912c <__hi0bits+0x34>
  409126:	005b      	lsls	r3, r3, #1
  409128:	d403      	bmi.n	409132 <__hi0bits+0x3a>
  40912a:	2020      	movs	r0, #32
  40912c:	4770      	bx	lr
  40912e:	2000      	movs	r0, #0
  409130:	e7e8      	b.n	409104 <__hi0bits+0xc>
  409132:	3001      	adds	r0, #1
  409134:	4770      	bx	lr
  409136:	bf00      	nop

00409138 <__lo0bits>:
  409138:	6803      	ldr	r3, [r0, #0]
  40913a:	f013 0207 	ands.w	r2, r3, #7
  40913e:	4601      	mov	r1, r0
  409140:	d007      	beq.n	409152 <__lo0bits+0x1a>
  409142:	07da      	lsls	r2, r3, #31
  409144:	d421      	bmi.n	40918a <__lo0bits+0x52>
  409146:	0798      	lsls	r0, r3, #30
  409148:	d421      	bmi.n	40918e <__lo0bits+0x56>
  40914a:	089b      	lsrs	r3, r3, #2
  40914c:	600b      	str	r3, [r1, #0]
  40914e:	2002      	movs	r0, #2
  409150:	4770      	bx	lr
  409152:	b298      	uxth	r0, r3
  409154:	b198      	cbz	r0, 40917e <__lo0bits+0x46>
  409156:	4610      	mov	r0, r2
  409158:	f013 0fff 	tst.w	r3, #255	; 0xff
  40915c:	bf04      	itt	eq
  40915e:	0a1b      	lsreq	r3, r3, #8
  409160:	3008      	addeq	r0, #8
  409162:	071a      	lsls	r2, r3, #28
  409164:	bf04      	itt	eq
  409166:	091b      	lsreq	r3, r3, #4
  409168:	3004      	addeq	r0, #4
  40916a:	079a      	lsls	r2, r3, #30
  40916c:	bf04      	itt	eq
  40916e:	089b      	lsreq	r3, r3, #2
  409170:	3002      	addeq	r0, #2
  409172:	07da      	lsls	r2, r3, #31
  409174:	d407      	bmi.n	409186 <__lo0bits+0x4e>
  409176:	085b      	lsrs	r3, r3, #1
  409178:	d104      	bne.n	409184 <__lo0bits+0x4c>
  40917a:	2020      	movs	r0, #32
  40917c:	4770      	bx	lr
  40917e:	0c1b      	lsrs	r3, r3, #16
  409180:	2010      	movs	r0, #16
  409182:	e7e9      	b.n	409158 <__lo0bits+0x20>
  409184:	3001      	adds	r0, #1
  409186:	600b      	str	r3, [r1, #0]
  409188:	4770      	bx	lr
  40918a:	2000      	movs	r0, #0
  40918c:	4770      	bx	lr
  40918e:	085b      	lsrs	r3, r3, #1
  409190:	600b      	str	r3, [r1, #0]
  409192:	2001      	movs	r0, #1
  409194:	4770      	bx	lr
  409196:	bf00      	nop

00409198 <__i2b>:
  409198:	b510      	push	{r4, lr}
  40919a:	460c      	mov	r4, r1
  40919c:	2101      	movs	r1, #1
  40919e:	f7ff ff3b 	bl	409018 <_Balloc>
  4091a2:	2201      	movs	r2, #1
  4091a4:	6144      	str	r4, [r0, #20]
  4091a6:	6102      	str	r2, [r0, #16]
  4091a8:	bd10      	pop	{r4, pc}
  4091aa:	bf00      	nop

004091ac <__multiply>:
  4091ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4091b0:	690c      	ldr	r4, [r1, #16]
  4091b2:	6915      	ldr	r5, [r2, #16]
  4091b4:	42ac      	cmp	r4, r5
  4091b6:	b083      	sub	sp, #12
  4091b8:	468b      	mov	fp, r1
  4091ba:	4616      	mov	r6, r2
  4091bc:	da04      	bge.n	4091c8 <__multiply+0x1c>
  4091be:	4622      	mov	r2, r4
  4091c0:	46b3      	mov	fp, r6
  4091c2:	462c      	mov	r4, r5
  4091c4:	460e      	mov	r6, r1
  4091c6:	4615      	mov	r5, r2
  4091c8:	f8db 3008 	ldr.w	r3, [fp, #8]
  4091cc:	f8db 1004 	ldr.w	r1, [fp, #4]
  4091d0:	eb04 0805 	add.w	r8, r4, r5
  4091d4:	4598      	cmp	r8, r3
  4091d6:	bfc8      	it	gt
  4091d8:	3101      	addgt	r1, #1
  4091da:	f7ff ff1d 	bl	409018 <_Balloc>
  4091de:	f100 0914 	add.w	r9, r0, #20
  4091e2:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  4091e6:	45d1      	cmp	r9, sl
  4091e8:	9000      	str	r0, [sp, #0]
  4091ea:	d205      	bcs.n	4091f8 <__multiply+0x4c>
  4091ec:	464b      	mov	r3, r9
  4091ee:	2100      	movs	r1, #0
  4091f0:	f843 1b04 	str.w	r1, [r3], #4
  4091f4:	459a      	cmp	sl, r3
  4091f6:	d8fb      	bhi.n	4091f0 <__multiply+0x44>
  4091f8:	f106 0c14 	add.w	ip, r6, #20
  4091fc:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  409200:	f10b 0b14 	add.w	fp, fp, #20
  409204:	459c      	cmp	ip, r3
  409206:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40920a:	d24c      	bcs.n	4092a6 <__multiply+0xfa>
  40920c:	f8cd a004 	str.w	sl, [sp, #4]
  409210:	469a      	mov	sl, r3
  409212:	f8dc 5000 	ldr.w	r5, [ip]
  409216:	b2af      	uxth	r7, r5
  409218:	b1ef      	cbz	r7, 409256 <__multiply+0xaa>
  40921a:	2100      	movs	r1, #0
  40921c:	464d      	mov	r5, r9
  40921e:	465e      	mov	r6, fp
  409220:	460c      	mov	r4, r1
  409222:	f856 2b04 	ldr.w	r2, [r6], #4
  409226:	6828      	ldr	r0, [r5, #0]
  409228:	b293      	uxth	r3, r2
  40922a:	b281      	uxth	r1, r0
  40922c:	fb07 1303 	mla	r3, r7, r3, r1
  409230:	0c12      	lsrs	r2, r2, #16
  409232:	0c01      	lsrs	r1, r0, #16
  409234:	4423      	add	r3, r4
  409236:	fb07 1102 	mla	r1, r7, r2, r1
  40923a:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  40923e:	b29b      	uxth	r3, r3
  409240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  409244:	45b6      	cmp	lr, r6
  409246:	f845 3b04 	str.w	r3, [r5], #4
  40924a:	ea4f 4411 	mov.w	r4, r1, lsr #16
  40924e:	d8e8      	bhi.n	409222 <__multiply+0x76>
  409250:	602c      	str	r4, [r5, #0]
  409252:	f8dc 5000 	ldr.w	r5, [ip]
  409256:	0c2d      	lsrs	r5, r5, #16
  409258:	d01d      	beq.n	409296 <__multiply+0xea>
  40925a:	f8d9 3000 	ldr.w	r3, [r9]
  40925e:	4648      	mov	r0, r9
  409260:	461c      	mov	r4, r3
  409262:	4659      	mov	r1, fp
  409264:	2200      	movs	r2, #0
  409266:	880e      	ldrh	r6, [r1, #0]
  409268:	0c24      	lsrs	r4, r4, #16
  40926a:	fb05 4406 	mla	r4, r5, r6, r4
  40926e:	4422      	add	r2, r4
  409270:	b29b      	uxth	r3, r3
  409272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  409276:	f840 3b04 	str.w	r3, [r0], #4
  40927a:	f851 3b04 	ldr.w	r3, [r1], #4
  40927e:	6804      	ldr	r4, [r0, #0]
  409280:	0c1b      	lsrs	r3, r3, #16
  409282:	b2a6      	uxth	r6, r4
  409284:	fb05 6303 	mla	r3, r5, r3, r6
  409288:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  40928c:	458e      	cmp	lr, r1
  40928e:	ea4f 4213 	mov.w	r2, r3, lsr #16
  409292:	d8e8      	bhi.n	409266 <__multiply+0xba>
  409294:	6003      	str	r3, [r0, #0]
  409296:	f10c 0c04 	add.w	ip, ip, #4
  40929a:	45e2      	cmp	sl, ip
  40929c:	f109 0904 	add.w	r9, r9, #4
  4092a0:	d8b7      	bhi.n	409212 <__multiply+0x66>
  4092a2:	f8dd a004 	ldr.w	sl, [sp, #4]
  4092a6:	f1b8 0f00 	cmp.w	r8, #0
  4092aa:	dd0b      	ble.n	4092c4 <__multiply+0x118>
  4092ac:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  4092b0:	f1aa 0a04 	sub.w	sl, sl, #4
  4092b4:	b11b      	cbz	r3, 4092be <__multiply+0x112>
  4092b6:	e005      	b.n	4092c4 <__multiply+0x118>
  4092b8:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  4092bc:	b913      	cbnz	r3, 4092c4 <__multiply+0x118>
  4092be:	f1b8 0801 	subs.w	r8, r8, #1
  4092c2:	d1f9      	bne.n	4092b8 <__multiply+0x10c>
  4092c4:	9800      	ldr	r0, [sp, #0]
  4092c6:	f8c0 8010 	str.w	r8, [r0, #16]
  4092ca:	b003      	add	sp, #12
  4092cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004092d0 <__pow5mult>:
  4092d0:	f012 0303 	ands.w	r3, r2, #3
  4092d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4092d8:	4614      	mov	r4, r2
  4092da:	4607      	mov	r7, r0
  4092dc:	d12e      	bne.n	40933c <__pow5mult+0x6c>
  4092de:	460d      	mov	r5, r1
  4092e0:	10a4      	asrs	r4, r4, #2
  4092e2:	d01c      	beq.n	40931e <__pow5mult+0x4e>
  4092e4:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  4092e6:	b396      	cbz	r6, 40934e <__pow5mult+0x7e>
  4092e8:	07e3      	lsls	r3, r4, #31
  4092ea:	f04f 0800 	mov.w	r8, #0
  4092ee:	d406      	bmi.n	4092fe <__pow5mult+0x2e>
  4092f0:	1064      	asrs	r4, r4, #1
  4092f2:	d014      	beq.n	40931e <__pow5mult+0x4e>
  4092f4:	6830      	ldr	r0, [r6, #0]
  4092f6:	b1a8      	cbz	r0, 409324 <__pow5mult+0x54>
  4092f8:	4606      	mov	r6, r0
  4092fa:	07e3      	lsls	r3, r4, #31
  4092fc:	d5f8      	bpl.n	4092f0 <__pow5mult+0x20>
  4092fe:	4632      	mov	r2, r6
  409300:	4629      	mov	r1, r5
  409302:	4638      	mov	r0, r7
  409304:	f7ff ff52 	bl	4091ac <__multiply>
  409308:	b1b5      	cbz	r5, 409338 <__pow5mult+0x68>
  40930a:	686a      	ldr	r2, [r5, #4]
  40930c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40930e:	1064      	asrs	r4, r4, #1
  409310:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  409314:	6029      	str	r1, [r5, #0]
  409316:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40931a:	4605      	mov	r5, r0
  40931c:	d1ea      	bne.n	4092f4 <__pow5mult+0x24>
  40931e:	4628      	mov	r0, r5
  409320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409324:	4632      	mov	r2, r6
  409326:	4631      	mov	r1, r6
  409328:	4638      	mov	r0, r7
  40932a:	f7ff ff3f 	bl	4091ac <__multiply>
  40932e:	6030      	str	r0, [r6, #0]
  409330:	f8c0 8000 	str.w	r8, [r0]
  409334:	4606      	mov	r6, r0
  409336:	e7e0      	b.n	4092fa <__pow5mult+0x2a>
  409338:	4605      	mov	r5, r0
  40933a:	e7d9      	b.n	4092f0 <__pow5mult+0x20>
  40933c:	1e5a      	subs	r2, r3, #1
  40933e:	4d0b      	ldr	r5, [pc, #44]	; (40936c <__pow5mult+0x9c>)
  409340:	2300      	movs	r3, #0
  409342:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  409346:	f7ff fe97 	bl	409078 <__multadd>
  40934a:	4605      	mov	r5, r0
  40934c:	e7c8      	b.n	4092e0 <__pow5mult+0x10>
  40934e:	2101      	movs	r1, #1
  409350:	4638      	mov	r0, r7
  409352:	f7ff fe61 	bl	409018 <_Balloc>
  409356:	f240 2171 	movw	r1, #625	; 0x271
  40935a:	2201      	movs	r2, #1
  40935c:	2300      	movs	r3, #0
  40935e:	6141      	str	r1, [r0, #20]
  409360:	6102      	str	r2, [r0, #16]
  409362:	4606      	mov	r6, r0
  409364:	64b8      	str	r0, [r7, #72]	; 0x48
  409366:	6003      	str	r3, [r0, #0]
  409368:	e7be      	b.n	4092e8 <__pow5mult+0x18>
  40936a:	bf00      	nop
  40936c:	0040a840 	.word	0x0040a840

00409370 <__lshift>:
  409370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  409374:	4691      	mov	r9, r2
  409376:	690a      	ldr	r2, [r1, #16]
  409378:	688b      	ldr	r3, [r1, #8]
  40937a:	ea4f 1469 	mov.w	r4, r9, asr #5
  40937e:	eb04 0802 	add.w	r8, r4, r2
  409382:	f108 0501 	add.w	r5, r8, #1
  409386:	429d      	cmp	r5, r3
  409388:	460e      	mov	r6, r1
  40938a:	4607      	mov	r7, r0
  40938c:	6849      	ldr	r1, [r1, #4]
  40938e:	dd04      	ble.n	40939a <__lshift+0x2a>
  409390:	005b      	lsls	r3, r3, #1
  409392:	429d      	cmp	r5, r3
  409394:	f101 0101 	add.w	r1, r1, #1
  409398:	dcfa      	bgt.n	409390 <__lshift+0x20>
  40939a:	4638      	mov	r0, r7
  40939c:	f7ff fe3c 	bl	409018 <_Balloc>
  4093a0:	2c00      	cmp	r4, #0
  4093a2:	f100 0314 	add.w	r3, r0, #20
  4093a6:	dd06      	ble.n	4093b6 <__lshift+0x46>
  4093a8:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  4093ac:	2100      	movs	r1, #0
  4093ae:	f843 1b04 	str.w	r1, [r3], #4
  4093b2:	429a      	cmp	r2, r3
  4093b4:	d1fb      	bne.n	4093ae <__lshift+0x3e>
  4093b6:	6934      	ldr	r4, [r6, #16]
  4093b8:	f106 0114 	add.w	r1, r6, #20
  4093bc:	f019 091f 	ands.w	r9, r9, #31
  4093c0:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  4093c4:	d01d      	beq.n	409402 <__lshift+0x92>
  4093c6:	f1c9 0c20 	rsb	ip, r9, #32
  4093ca:	2200      	movs	r2, #0
  4093cc:	680c      	ldr	r4, [r1, #0]
  4093ce:	fa04 f409 	lsl.w	r4, r4, r9
  4093d2:	4314      	orrs	r4, r2
  4093d4:	f843 4b04 	str.w	r4, [r3], #4
  4093d8:	f851 2b04 	ldr.w	r2, [r1], #4
  4093dc:	458e      	cmp	lr, r1
  4093de:	fa22 f20c 	lsr.w	r2, r2, ip
  4093e2:	d8f3      	bhi.n	4093cc <__lshift+0x5c>
  4093e4:	601a      	str	r2, [r3, #0]
  4093e6:	b10a      	cbz	r2, 4093ec <__lshift+0x7c>
  4093e8:	f108 0502 	add.w	r5, r8, #2
  4093ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4093ee:	6872      	ldr	r2, [r6, #4]
  4093f0:	3d01      	subs	r5, #1
  4093f2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4093f6:	6105      	str	r5, [r0, #16]
  4093f8:	6031      	str	r1, [r6, #0]
  4093fa:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  4093fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409402:	3b04      	subs	r3, #4
  409404:	f851 2b04 	ldr.w	r2, [r1], #4
  409408:	f843 2f04 	str.w	r2, [r3, #4]!
  40940c:	458e      	cmp	lr, r1
  40940e:	d8f9      	bhi.n	409404 <__lshift+0x94>
  409410:	e7ec      	b.n	4093ec <__lshift+0x7c>
  409412:	bf00      	nop

00409414 <__mcmp>:
  409414:	b430      	push	{r4, r5}
  409416:	690b      	ldr	r3, [r1, #16]
  409418:	4605      	mov	r5, r0
  40941a:	6900      	ldr	r0, [r0, #16]
  40941c:	1ac0      	subs	r0, r0, r3
  40941e:	d10f      	bne.n	409440 <__mcmp+0x2c>
  409420:	009b      	lsls	r3, r3, #2
  409422:	3514      	adds	r5, #20
  409424:	3114      	adds	r1, #20
  409426:	4419      	add	r1, r3
  409428:	442b      	add	r3, r5
  40942a:	e001      	b.n	409430 <__mcmp+0x1c>
  40942c:	429d      	cmp	r5, r3
  40942e:	d207      	bcs.n	409440 <__mcmp+0x2c>
  409430:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  409434:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  409438:	4294      	cmp	r4, r2
  40943a:	d0f7      	beq.n	40942c <__mcmp+0x18>
  40943c:	d302      	bcc.n	409444 <__mcmp+0x30>
  40943e:	2001      	movs	r0, #1
  409440:	bc30      	pop	{r4, r5}
  409442:	4770      	bx	lr
  409444:	f04f 30ff 	mov.w	r0, #4294967295
  409448:	e7fa      	b.n	409440 <__mcmp+0x2c>
  40944a:	bf00      	nop

0040944c <__mdiff>:
  40944c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409450:	690f      	ldr	r7, [r1, #16]
  409452:	460e      	mov	r6, r1
  409454:	6911      	ldr	r1, [r2, #16]
  409456:	1a7f      	subs	r7, r7, r1
  409458:	2f00      	cmp	r7, #0
  40945a:	4690      	mov	r8, r2
  40945c:	d117      	bne.n	40948e <__mdiff+0x42>
  40945e:	0089      	lsls	r1, r1, #2
  409460:	f106 0514 	add.w	r5, r6, #20
  409464:	f102 0e14 	add.w	lr, r2, #20
  409468:	186b      	adds	r3, r5, r1
  40946a:	4471      	add	r1, lr
  40946c:	e001      	b.n	409472 <__mdiff+0x26>
  40946e:	429d      	cmp	r5, r3
  409470:	d25c      	bcs.n	40952c <__mdiff+0xe0>
  409472:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  409476:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40947a:	42a2      	cmp	r2, r4
  40947c:	d0f7      	beq.n	40946e <__mdiff+0x22>
  40947e:	d25e      	bcs.n	40953e <__mdiff+0xf2>
  409480:	4633      	mov	r3, r6
  409482:	462c      	mov	r4, r5
  409484:	4646      	mov	r6, r8
  409486:	4675      	mov	r5, lr
  409488:	4698      	mov	r8, r3
  40948a:	2701      	movs	r7, #1
  40948c:	e005      	b.n	40949a <__mdiff+0x4e>
  40948e:	db58      	blt.n	409542 <__mdiff+0xf6>
  409490:	f106 0514 	add.w	r5, r6, #20
  409494:	f108 0414 	add.w	r4, r8, #20
  409498:	2700      	movs	r7, #0
  40949a:	6871      	ldr	r1, [r6, #4]
  40949c:	f7ff fdbc 	bl	409018 <_Balloc>
  4094a0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4094a4:	6936      	ldr	r6, [r6, #16]
  4094a6:	60c7      	str	r7, [r0, #12]
  4094a8:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  4094ac:	46a6      	mov	lr, r4
  4094ae:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  4094b2:	f100 0414 	add.w	r4, r0, #20
  4094b6:	2300      	movs	r3, #0
  4094b8:	f85e 1b04 	ldr.w	r1, [lr], #4
  4094bc:	f855 8b04 	ldr.w	r8, [r5], #4
  4094c0:	b28a      	uxth	r2, r1
  4094c2:	fa13 f388 	uxtah	r3, r3, r8
  4094c6:	0c09      	lsrs	r1, r1, #16
  4094c8:	1a9a      	subs	r2, r3, r2
  4094ca:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  4094ce:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4094d2:	b292      	uxth	r2, r2
  4094d4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4094d8:	45f4      	cmp	ip, lr
  4094da:	f844 2b04 	str.w	r2, [r4], #4
  4094de:	ea4f 4323 	mov.w	r3, r3, asr #16
  4094e2:	d8e9      	bhi.n	4094b8 <__mdiff+0x6c>
  4094e4:	42af      	cmp	r7, r5
  4094e6:	d917      	bls.n	409518 <__mdiff+0xcc>
  4094e8:	46a4      	mov	ip, r4
  4094ea:	46ae      	mov	lr, r5
  4094ec:	f85e 2b04 	ldr.w	r2, [lr], #4
  4094f0:	fa13 f382 	uxtah	r3, r3, r2
  4094f4:	1419      	asrs	r1, r3, #16
  4094f6:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  4094fa:	b29b      	uxth	r3, r3
  4094fc:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  409500:	4577      	cmp	r7, lr
  409502:	f84c 2b04 	str.w	r2, [ip], #4
  409506:	ea4f 4321 	mov.w	r3, r1, asr #16
  40950a:	d8ef      	bhi.n	4094ec <__mdiff+0xa0>
  40950c:	43ed      	mvns	r5, r5
  40950e:	442f      	add	r7, r5
  409510:	f027 0703 	bic.w	r7, r7, #3
  409514:	3704      	adds	r7, #4
  409516:	443c      	add	r4, r7
  409518:	3c04      	subs	r4, #4
  40951a:	b922      	cbnz	r2, 409526 <__mdiff+0xda>
  40951c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  409520:	3e01      	subs	r6, #1
  409522:	2b00      	cmp	r3, #0
  409524:	d0fa      	beq.n	40951c <__mdiff+0xd0>
  409526:	6106      	str	r6, [r0, #16]
  409528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40952c:	2100      	movs	r1, #0
  40952e:	f7ff fd73 	bl	409018 <_Balloc>
  409532:	2201      	movs	r2, #1
  409534:	2300      	movs	r3, #0
  409536:	6102      	str	r2, [r0, #16]
  409538:	6143      	str	r3, [r0, #20]
  40953a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40953e:	4674      	mov	r4, lr
  409540:	e7ab      	b.n	40949a <__mdiff+0x4e>
  409542:	4633      	mov	r3, r6
  409544:	f106 0414 	add.w	r4, r6, #20
  409548:	f102 0514 	add.w	r5, r2, #20
  40954c:	4616      	mov	r6, r2
  40954e:	2701      	movs	r7, #1
  409550:	4698      	mov	r8, r3
  409552:	e7a2      	b.n	40949a <__mdiff+0x4e>

00409554 <__d2b>:
  409554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409558:	b082      	sub	sp, #8
  40955a:	2101      	movs	r1, #1
  40955c:	461c      	mov	r4, r3
  40955e:	f3c3 570a 	ubfx	r7, r3, #20, #11
  409562:	4615      	mov	r5, r2
  409564:	9e08      	ldr	r6, [sp, #32]
  409566:	f7ff fd57 	bl	409018 <_Balloc>
  40956a:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40956e:	4680      	mov	r8, r0
  409570:	b10f      	cbz	r7, 409576 <__d2b+0x22>
  409572:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  409576:	9401      	str	r4, [sp, #4]
  409578:	b31d      	cbz	r5, 4095c2 <__d2b+0x6e>
  40957a:	a802      	add	r0, sp, #8
  40957c:	f840 5d08 	str.w	r5, [r0, #-8]!
  409580:	f7ff fdda 	bl	409138 <__lo0bits>
  409584:	2800      	cmp	r0, #0
  409586:	d134      	bne.n	4095f2 <__d2b+0x9e>
  409588:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40958c:	f8c8 2014 	str.w	r2, [r8, #20]
  409590:	2b00      	cmp	r3, #0
  409592:	bf0c      	ite	eq
  409594:	2101      	moveq	r1, #1
  409596:	2102      	movne	r1, #2
  409598:	f8c8 3018 	str.w	r3, [r8, #24]
  40959c:	f8c8 1010 	str.w	r1, [r8, #16]
  4095a0:	b9df      	cbnz	r7, 4095da <__d2b+0x86>
  4095a2:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  4095a6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  4095aa:	6030      	str	r0, [r6, #0]
  4095ac:	6918      	ldr	r0, [r3, #16]
  4095ae:	f7ff fda3 	bl	4090f8 <__hi0bits>
  4095b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4095b4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  4095b8:	6018      	str	r0, [r3, #0]
  4095ba:	4640      	mov	r0, r8
  4095bc:	b002      	add	sp, #8
  4095be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4095c2:	a801      	add	r0, sp, #4
  4095c4:	f7ff fdb8 	bl	409138 <__lo0bits>
  4095c8:	9b01      	ldr	r3, [sp, #4]
  4095ca:	f8c8 3014 	str.w	r3, [r8, #20]
  4095ce:	2101      	movs	r1, #1
  4095d0:	3020      	adds	r0, #32
  4095d2:	f8c8 1010 	str.w	r1, [r8, #16]
  4095d6:	2f00      	cmp	r7, #0
  4095d8:	d0e3      	beq.n	4095a2 <__d2b+0x4e>
  4095da:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4095dc:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  4095e0:	4407      	add	r7, r0
  4095e2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  4095e6:	6037      	str	r7, [r6, #0]
  4095e8:	6018      	str	r0, [r3, #0]
  4095ea:	4640      	mov	r0, r8
  4095ec:	b002      	add	sp, #8
  4095ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4095f2:	e89d 000a 	ldmia.w	sp, {r1, r3}
  4095f6:	f1c0 0220 	rsb	r2, r0, #32
  4095fa:	fa03 f202 	lsl.w	r2, r3, r2
  4095fe:	430a      	orrs	r2, r1
  409600:	40c3      	lsrs	r3, r0
  409602:	9301      	str	r3, [sp, #4]
  409604:	f8c8 2014 	str.w	r2, [r8, #20]
  409608:	e7c2      	b.n	409590 <__d2b+0x3c>
  40960a:	bf00      	nop

0040960c <_realloc_r>:
  40960c:	2900      	cmp	r1, #0
  40960e:	f000 8095 	beq.w	40973c <_realloc_r+0x130>
  409612:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409616:	460d      	mov	r5, r1
  409618:	4616      	mov	r6, r2
  40961a:	b083      	sub	sp, #12
  40961c:	4680      	mov	r8, r0
  40961e:	f106 070b 	add.w	r7, r6, #11
  409622:	f7fb fc23 	bl	404e6c <__malloc_lock>
  409626:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40962a:	2f16      	cmp	r7, #22
  40962c:	f02e 0403 	bic.w	r4, lr, #3
  409630:	f1a5 0908 	sub.w	r9, r5, #8
  409634:	d83c      	bhi.n	4096b0 <_realloc_r+0xa4>
  409636:	2210      	movs	r2, #16
  409638:	4617      	mov	r7, r2
  40963a:	42be      	cmp	r6, r7
  40963c:	d83d      	bhi.n	4096ba <_realloc_r+0xae>
  40963e:	4294      	cmp	r4, r2
  409640:	da43      	bge.n	4096ca <_realloc_r+0xbe>
  409642:	4bc4      	ldr	r3, [pc, #784]	; (409954 <_realloc_r+0x348>)
  409644:	6899      	ldr	r1, [r3, #8]
  409646:	eb09 0004 	add.w	r0, r9, r4
  40964a:	4288      	cmp	r0, r1
  40964c:	f000 80b4 	beq.w	4097b8 <_realloc_r+0x1ac>
  409650:	6843      	ldr	r3, [r0, #4]
  409652:	f023 0101 	bic.w	r1, r3, #1
  409656:	4401      	add	r1, r0
  409658:	6849      	ldr	r1, [r1, #4]
  40965a:	07c9      	lsls	r1, r1, #31
  40965c:	d54c      	bpl.n	4096f8 <_realloc_r+0xec>
  40965e:	f01e 0f01 	tst.w	lr, #1
  409662:	f000 809b 	beq.w	40979c <_realloc_r+0x190>
  409666:	4631      	mov	r1, r6
  409668:	4640      	mov	r0, r8
  40966a:	f7fb f867 	bl	40473c <_malloc_r>
  40966e:	4606      	mov	r6, r0
  409670:	2800      	cmp	r0, #0
  409672:	d03a      	beq.n	4096ea <_realloc_r+0xde>
  409674:	f855 3c04 	ldr.w	r3, [r5, #-4]
  409678:	f023 0301 	bic.w	r3, r3, #1
  40967c:	444b      	add	r3, r9
  40967e:	f1a0 0208 	sub.w	r2, r0, #8
  409682:	429a      	cmp	r2, r3
  409684:	f000 8121 	beq.w	4098ca <_realloc_r+0x2be>
  409688:	1f22      	subs	r2, r4, #4
  40968a:	2a24      	cmp	r2, #36	; 0x24
  40968c:	f200 8107 	bhi.w	40989e <_realloc_r+0x292>
  409690:	2a13      	cmp	r2, #19
  409692:	f200 80db 	bhi.w	40984c <_realloc_r+0x240>
  409696:	4603      	mov	r3, r0
  409698:	462a      	mov	r2, r5
  40969a:	6811      	ldr	r1, [r2, #0]
  40969c:	6019      	str	r1, [r3, #0]
  40969e:	6851      	ldr	r1, [r2, #4]
  4096a0:	6059      	str	r1, [r3, #4]
  4096a2:	6892      	ldr	r2, [r2, #8]
  4096a4:	609a      	str	r2, [r3, #8]
  4096a6:	4629      	mov	r1, r5
  4096a8:	4640      	mov	r0, r8
  4096aa:	f7ff f8c1 	bl	408830 <_free_r>
  4096ae:	e01c      	b.n	4096ea <_realloc_r+0xde>
  4096b0:	f027 0707 	bic.w	r7, r7, #7
  4096b4:	2f00      	cmp	r7, #0
  4096b6:	463a      	mov	r2, r7
  4096b8:	dabf      	bge.n	40963a <_realloc_r+0x2e>
  4096ba:	2600      	movs	r6, #0
  4096bc:	230c      	movs	r3, #12
  4096be:	4630      	mov	r0, r6
  4096c0:	f8c8 3000 	str.w	r3, [r8]
  4096c4:	b003      	add	sp, #12
  4096c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4096ca:	462e      	mov	r6, r5
  4096cc:	1be3      	subs	r3, r4, r7
  4096ce:	2b0f      	cmp	r3, #15
  4096d0:	d81e      	bhi.n	409710 <_realloc_r+0x104>
  4096d2:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4096d6:	f003 0301 	and.w	r3, r3, #1
  4096da:	4323      	orrs	r3, r4
  4096dc:	444c      	add	r4, r9
  4096de:	f8c9 3004 	str.w	r3, [r9, #4]
  4096e2:	6863      	ldr	r3, [r4, #4]
  4096e4:	f043 0301 	orr.w	r3, r3, #1
  4096e8:	6063      	str	r3, [r4, #4]
  4096ea:	4640      	mov	r0, r8
  4096ec:	f7fb fbc4 	bl	404e78 <__malloc_unlock>
  4096f0:	4630      	mov	r0, r6
  4096f2:	b003      	add	sp, #12
  4096f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4096f8:	f023 0303 	bic.w	r3, r3, #3
  4096fc:	18e1      	adds	r1, r4, r3
  4096fe:	4291      	cmp	r1, r2
  409700:	db1f      	blt.n	409742 <_realloc_r+0x136>
  409702:	68c3      	ldr	r3, [r0, #12]
  409704:	6882      	ldr	r2, [r0, #8]
  409706:	462e      	mov	r6, r5
  409708:	60d3      	str	r3, [r2, #12]
  40970a:	460c      	mov	r4, r1
  40970c:	609a      	str	r2, [r3, #8]
  40970e:	e7dd      	b.n	4096cc <_realloc_r+0xc0>
  409710:	f8d9 2004 	ldr.w	r2, [r9, #4]
  409714:	eb09 0107 	add.w	r1, r9, r7
  409718:	f002 0201 	and.w	r2, r2, #1
  40971c:	444c      	add	r4, r9
  40971e:	f043 0301 	orr.w	r3, r3, #1
  409722:	4317      	orrs	r7, r2
  409724:	f8c9 7004 	str.w	r7, [r9, #4]
  409728:	604b      	str	r3, [r1, #4]
  40972a:	6863      	ldr	r3, [r4, #4]
  40972c:	f043 0301 	orr.w	r3, r3, #1
  409730:	3108      	adds	r1, #8
  409732:	6063      	str	r3, [r4, #4]
  409734:	4640      	mov	r0, r8
  409736:	f7ff f87b 	bl	408830 <_free_r>
  40973a:	e7d6      	b.n	4096ea <_realloc_r+0xde>
  40973c:	4611      	mov	r1, r2
  40973e:	f7fa bffd 	b.w	40473c <_malloc_r>
  409742:	f01e 0f01 	tst.w	lr, #1
  409746:	d18e      	bne.n	409666 <_realloc_r+0x5a>
  409748:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40974c:	eba9 0a01 	sub.w	sl, r9, r1
  409750:	f8da 1004 	ldr.w	r1, [sl, #4]
  409754:	f021 0103 	bic.w	r1, r1, #3
  409758:	440b      	add	r3, r1
  40975a:	4423      	add	r3, r4
  40975c:	4293      	cmp	r3, r2
  40975e:	db25      	blt.n	4097ac <_realloc_r+0x1a0>
  409760:	68c2      	ldr	r2, [r0, #12]
  409762:	6881      	ldr	r1, [r0, #8]
  409764:	4656      	mov	r6, sl
  409766:	60ca      	str	r2, [r1, #12]
  409768:	6091      	str	r1, [r2, #8]
  40976a:	f8da 100c 	ldr.w	r1, [sl, #12]
  40976e:	f856 0f08 	ldr.w	r0, [r6, #8]!
  409772:	1f22      	subs	r2, r4, #4
  409774:	2a24      	cmp	r2, #36	; 0x24
  409776:	60c1      	str	r1, [r0, #12]
  409778:	6088      	str	r0, [r1, #8]
  40977a:	f200 8094 	bhi.w	4098a6 <_realloc_r+0x29a>
  40977e:	2a13      	cmp	r2, #19
  409780:	d96f      	bls.n	409862 <_realloc_r+0x256>
  409782:	6829      	ldr	r1, [r5, #0]
  409784:	f8ca 1008 	str.w	r1, [sl, #8]
  409788:	6869      	ldr	r1, [r5, #4]
  40978a:	f8ca 100c 	str.w	r1, [sl, #12]
  40978e:	2a1b      	cmp	r2, #27
  409790:	f200 80a2 	bhi.w	4098d8 <_realloc_r+0x2cc>
  409794:	3508      	adds	r5, #8
  409796:	f10a 0210 	add.w	r2, sl, #16
  40979a:	e063      	b.n	409864 <_realloc_r+0x258>
  40979c:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4097a0:	eba9 0a03 	sub.w	sl, r9, r3
  4097a4:	f8da 1004 	ldr.w	r1, [sl, #4]
  4097a8:	f021 0103 	bic.w	r1, r1, #3
  4097ac:	1863      	adds	r3, r4, r1
  4097ae:	4293      	cmp	r3, r2
  4097b0:	f6ff af59 	blt.w	409666 <_realloc_r+0x5a>
  4097b4:	4656      	mov	r6, sl
  4097b6:	e7d8      	b.n	40976a <_realloc_r+0x15e>
  4097b8:	6841      	ldr	r1, [r0, #4]
  4097ba:	f021 0b03 	bic.w	fp, r1, #3
  4097be:	44a3      	add	fp, r4
  4097c0:	f107 0010 	add.w	r0, r7, #16
  4097c4:	4583      	cmp	fp, r0
  4097c6:	da56      	bge.n	409876 <_realloc_r+0x26a>
  4097c8:	f01e 0f01 	tst.w	lr, #1
  4097cc:	f47f af4b 	bne.w	409666 <_realloc_r+0x5a>
  4097d0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4097d4:	eba9 0a01 	sub.w	sl, r9, r1
  4097d8:	f8da 1004 	ldr.w	r1, [sl, #4]
  4097dc:	f021 0103 	bic.w	r1, r1, #3
  4097e0:	448b      	add	fp, r1
  4097e2:	4558      	cmp	r0, fp
  4097e4:	dce2      	bgt.n	4097ac <_realloc_r+0x1a0>
  4097e6:	4656      	mov	r6, sl
  4097e8:	f8da 100c 	ldr.w	r1, [sl, #12]
  4097ec:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4097f0:	1f22      	subs	r2, r4, #4
  4097f2:	2a24      	cmp	r2, #36	; 0x24
  4097f4:	60c1      	str	r1, [r0, #12]
  4097f6:	6088      	str	r0, [r1, #8]
  4097f8:	f200 808f 	bhi.w	40991a <_realloc_r+0x30e>
  4097fc:	2a13      	cmp	r2, #19
  4097fe:	f240 808a 	bls.w	409916 <_realloc_r+0x30a>
  409802:	6829      	ldr	r1, [r5, #0]
  409804:	f8ca 1008 	str.w	r1, [sl, #8]
  409808:	6869      	ldr	r1, [r5, #4]
  40980a:	f8ca 100c 	str.w	r1, [sl, #12]
  40980e:	2a1b      	cmp	r2, #27
  409810:	f200 808a 	bhi.w	409928 <_realloc_r+0x31c>
  409814:	3508      	adds	r5, #8
  409816:	f10a 0210 	add.w	r2, sl, #16
  40981a:	6829      	ldr	r1, [r5, #0]
  40981c:	6011      	str	r1, [r2, #0]
  40981e:	6869      	ldr	r1, [r5, #4]
  409820:	6051      	str	r1, [r2, #4]
  409822:	68a9      	ldr	r1, [r5, #8]
  409824:	6091      	str	r1, [r2, #8]
  409826:	eb0a 0107 	add.w	r1, sl, r7
  40982a:	ebab 0207 	sub.w	r2, fp, r7
  40982e:	f042 0201 	orr.w	r2, r2, #1
  409832:	6099      	str	r1, [r3, #8]
  409834:	604a      	str	r2, [r1, #4]
  409836:	f8da 3004 	ldr.w	r3, [sl, #4]
  40983a:	f003 0301 	and.w	r3, r3, #1
  40983e:	431f      	orrs	r7, r3
  409840:	4640      	mov	r0, r8
  409842:	f8ca 7004 	str.w	r7, [sl, #4]
  409846:	f7fb fb17 	bl	404e78 <__malloc_unlock>
  40984a:	e751      	b.n	4096f0 <_realloc_r+0xe4>
  40984c:	682b      	ldr	r3, [r5, #0]
  40984e:	6003      	str	r3, [r0, #0]
  409850:	686b      	ldr	r3, [r5, #4]
  409852:	6043      	str	r3, [r0, #4]
  409854:	2a1b      	cmp	r2, #27
  409856:	d82d      	bhi.n	4098b4 <_realloc_r+0x2a8>
  409858:	f100 0308 	add.w	r3, r0, #8
  40985c:	f105 0208 	add.w	r2, r5, #8
  409860:	e71b      	b.n	40969a <_realloc_r+0x8e>
  409862:	4632      	mov	r2, r6
  409864:	6829      	ldr	r1, [r5, #0]
  409866:	6011      	str	r1, [r2, #0]
  409868:	6869      	ldr	r1, [r5, #4]
  40986a:	6051      	str	r1, [r2, #4]
  40986c:	68a9      	ldr	r1, [r5, #8]
  40986e:	6091      	str	r1, [r2, #8]
  409870:	461c      	mov	r4, r3
  409872:	46d1      	mov	r9, sl
  409874:	e72a      	b.n	4096cc <_realloc_r+0xc0>
  409876:	eb09 0107 	add.w	r1, r9, r7
  40987a:	ebab 0b07 	sub.w	fp, fp, r7
  40987e:	f04b 0201 	orr.w	r2, fp, #1
  409882:	6099      	str	r1, [r3, #8]
  409884:	604a      	str	r2, [r1, #4]
  409886:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40988a:	f003 0301 	and.w	r3, r3, #1
  40988e:	431f      	orrs	r7, r3
  409890:	4640      	mov	r0, r8
  409892:	f845 7c04 	str.w	r7, [r5, #-4]
  409896:	f7fb faef 	bl	404e78 <__malloc_unlock>
  40989a:	462e      	mov	r6, r5
  40989c:	e728      	b.n	4096f0 <_realloc_r+0xe4>
  40989e:	4629      	mov	r1, r5
  4098a0:	f7ff fb56 	bl	408f50 <memmove>
  4098a4:	e6ff      	b.n	4096a6 <_realloc_r+0x9a>
  4098a6:	4629      	mov	r1, r5
  4098a8:	4630      	mov	r0, r6
  4098aa:	461c      	mov	r4, r3
  4098ac:	46d1      	mov	r9, sl
  4098ae:	f7ff fb4f 	bl	408f50 <memmove>
  4098b2:	e70b      	b.n	4096cc <_realloc_r+0xc0>
  4098b4:	68ab      	ldr	r3, [r5, #8]
  4098b6:	6083      	str	r3, [r0, #8]
  4098b8:	68eb      	ldr	r3, [r5, #12]
  4098ba:	60c3      	str	r3, [r0, #12]
  4098bc:	2a24      	cmp	r2, #36	; 0x24
  4098be:	d017      	beq.n	4098f0 <_realloc_r+0x2e4>
  4098c0:	f100 0310 	add.w	r3, r0, #16
  4098c4:	f105 0210 	add.w	r2, r5, #16
  4098c8:	e6e7      	b.n	40969a <_realloc_r+0x8e>
  4098ca:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4098ce:	f023 0303 	bic.w	r3, r3, #3
  4098d2:	441c      	add	r4, r3
  4098d4:	462e      	mov	r6, r5
  4098d6:	e6f9      	b.n	4096cc <_realloc_r+0xc0>
  4098d8:	68a9      	ldr	r1, [r5, #8]
  4098da:	f8ca 1010 	str.w	r1, [sl, #16]
  4098de:	68e9      	ldr	r1, [r5, #12]
  4098e0:	f8ca 1014 	str.w	r1, [sl, #20]
  4098e4:	2a24      	cmp	r2, #36	; 0x24
  4098e6:	d00c      	beq.n	409902 <_realloc_r+0x2f6>
  4098e8:	3510      	adds	r5, #16
  4098ea:	f10a 0218 	add.w	r2, sl, #24
  4098ee:	e7b9      	b.n	409864 <_realloc_r+0x258>
  4098f0:	692b      	ldr	r3, [r5, #16]
  4098f2:	6103      	str	r3, [r0, #16]
  4098f4:	696b      	ldr	r3, [r5, #20]
  4098f6:	6143      	str	r3, [r0, #20]
  4098f8:	f105 0218 	add.w	r2, r5, #24
  4098fc:	f100 0318 	add.w	r3, r0, #24
  409900:	e6cb      	b.n	40969a <_realloc_r+0x8e>
  409902:	692a      	ldr	r2, [r5, #16]
  409904:	f8ca 2018 	str.w	r2, [sl, #24]
  409908:	696a      	ldr	r2, [r5, #20]
  40990a:	f8ca 201c 	str.w	r2, [sl, #28]
  40990e:	3518      	adds	r5, #24
  409910:	f10a 0220 	add.w	r2, sl, #32
  409914:	e7a6      	b.n	409864 <_realloc_r+0x258>
  409916:	4632      	mov	r2, r6
  409918:	e77f      	b.n	40981a <_realloc_r+0x20e>
  40991a:	4629      	mov	r1, r5
  40991c:	4630      	mov	r0, r6
  40991e:	9301      	str	r3, [sp, #4]
  409920:	f7ff fb16 	bl	408f50 <memmove>
  409924:	9b01      	ldr	r3, [sp, #4]
  409926:	e77e      	b.n	409826 <_realloc_r+0x21a>
  409928:	68a9      	ldr	r1, [r5, #8]
  40992a:	f8ca 1010 	str.w	r1, [sl, #16]
  40992e:	68e9      	ldr	r1, [r5, #12]
  409930:	f8ca 1014 	str.w	r1, [sl, #20]
  409934:	2a24      	cmp	r2, #36	; 0x24
  409936:	d003      	beq.n	409940 <_realloc_r+0x334>
  409938:	3510      	adds	r5, #16
  40993a:	f10a 0218 	add.w	r2, sl, #24
  40993e:	e76c      	b.n	40981a <_realloc_r+0x20e>
  409940:	692a      	ldr	r2, [r5, #16]
  409942:	f8ca 2018 	str.w	r2, [sl, #24]
  409946:	696a      	ldr	r2, [r5, #20]
  409948:	f8ca 201c 	str.w	r2, [sl, #28]
  40994c:	3518      	adds	r5, #24
  40994e:	f10a 0220 	add.w	r2, sl, #32
  409952:	e762      	b.n	40981a <_realloc_r+0x20e>
  409954:	20400450 	.word	0x20400450

00409958 <__sread>:
  409958:	b510      	push	{r4, lr}
  40995a:	460c      	mov	r4, r1
  40995c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409960:	f000 faa4 	bl	409eac <_read_r>
  409964:	2800      	cmp	r0, #0
  409966:	db03      	blt.n	409970 <__sread+0x18>
  409968:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40996a:	4403      	add	r3, r0
  40996c:	6523      	str	r3, [r4, #80]	; 0x50
  40996e:	bd10      	pop	{r4, pc}
  409970:	89a3      	ldrh	r3, [r4, #12]
  409972:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  409976:	81a3      	strh	r3, [r4, #12]
  409978:	bd10      	pop	{r4, pc}
  40997a:	bf00      	nop

0040997c <__swrite>:
  40997c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409980:	4616      	mov	r6, r2
  409982:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  409986:	461f      	mov	r7, r3
  409988:	05d3      	lsls	r3, r2, #23
  40998a:	460c      	mov	r4, r1
  40998c:	4605      	mov	r5, r0
  40998e:	d507      	bpl.n	4099a0 <__swrite+0x24>
  409990:	2200      	movs	r2, #0
  409992:	2302      	movs	r3, #2
  409994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409998:	f000 fa72 	bl	409e80 <_lseek_r>
  40999c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4099a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4099a4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4099a8:	81a2      	strh	r2, [r4, #12]
  4099aa:	463b      	mov	r3, r7
  4099ac:	4632      	mov	r2, r6
  4099ae:	4628      	mov	r0, r5
  4099b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4099b4:	f000 b922 	b.w	409bfc <_write_r>

004099b8 <__sseek>:
  4099b8:	b510      	push	{r4, lr}
  4099ba:	460c      	mov	r4, r1
  4099bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4099c0:	f000 fa5e 	bl	409e80 <_lseek_r>
  4099c4:	89a3      	ldrh	r3, [r4, #12]
  4099c6:	1c42      	adds	r2, r0, #1
  4099c8:	bf0e      	itee	eq
  4099ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4099ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4099d2:	6520      	strne	r0, [r4, #80]	; 0x50
  4099d4:	81a3      	strh	r3, [r4, #12]
  4099d6:	bd10      	pop	{r4, pc}

004099d8 <__sclose>:
  4099d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4099dc:	f000 b9b6 	b.w	409d4c <_close_r>

004099e0 <__ssprint_r>:
  4099e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4099e4:	6893      	ldr	r3, [r2, #8]
  4099e6:	b083      	sub	sp, #12
  4099e8:	4690      	mov	r8, r2
  4099ea:	2b00      	cmp	r3, #0
  4099ec:	d070      	beq.n	409ad0 <__ssprint_r+0xf0>
  4099ee:	4682      	mov	sl, r0
  4099f0:	460c      	mov	r4, r1
  4099f2:	6817      	ldr	r7, [r2, #0]
  4099f4:	688d      	ldr	r5, [r1, #8]
  4099f6:	6808      	ldr	r0, [r1, #0]
  4099f8:	e042      	b.n	409a80 <__ssprint_r+0xa0>
  4099fa:	89a3      	ldrh	r3, [r4, #12]
  4099fc:	f413 6f90 	tst.w	r3, #1152	; 0x480
  409a00:	d02e      	beq.n	409a60 <__ssprint_r+0x80>
  409a02:	6965      	ldr	r5, [r4, #20]
  409a04:	6921      	ldr	r1, [r4, #16]
  409a06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  409a0a:	eba0 0b01 	sub.w	fp, r0, r1
  409a0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  409a12:	f10b 0001 	add.w	r0, fp, #1
  409a16:	106d      	asrs	r5, r5, #1
  409a18:	4430      	add	r0, r6
  409a1a:	42a8      	cmp	r0, r5
  409a1c:	462a      	mov	r2, r5
  409a1e:	bf84      	itt	hi
  409a20:	4605      	movhi	r5, r0
  409a22:	462a      	movhi	r2, r5
  409a24:	055b      	lsls	r3, r3, #21
  409a26:	d538      	bpl.n	409a9a <__ssprint_r+0xba>
  409a28:	4611      	mov	r1, r2
  409a2a:	4650      	mov	r0, sl
  409a2c:	f7fa fe86 	bl	40473c <_malloc_r>
  409a30:	2800      	cmp	r0, #0
  409a32:	d03c      	beq.n	409aae <__ssprint_r+0xce>
  409a34:	465a      	mov	r2, fp
  409a36:	6921      	ldr	r1, [r4, #16]
  409a38:	9001      	str	r0, [sp, #4]
  409a3a:	f7fb f92f 	bl	404c9c <memcpy>
  409a3e:	89a2      	ldrh	r2, [r4, #12]
  409a40:	9b01      	ldr	r3, [sp, #4]
  409a42:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  409a46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  409a4a:	81a2      	strh	r2, [r4, #12]
  409a4c:	eba5 020b 	sub.w	r2, r5, fp
  409a50:	eb03 000b 	add.w	r0, r3, fp
  409a54:	6165      	str	r5, [r4, #20]
  409a56:	6123      	str	r3, [r4, #16]
  409a58:	6020      	str	r0, [r4, #0]
  409a5a:	60a2      	str	r2, [r4, #8]
  409a5c:	4635      	mov	r5, r6
  409a5e:	46b3      	mov	fp, r6
  409a60:	465a      	mov	r2, fp
  409a62:	4649      	mov	r1, r9
  409a64:	f7ff fa74 	bl	408f50 <memmove>
  409a68:	f8d8 3008 	ldr.w	r3, [r8, #8]
  409a6c:	68a2      	ldr	r2, [r4, #8]
  409a6e:	6820      	ldr	r0, [r4, #0]
  409a70:	1b55      	subs	r5, r2, r5
  409a72:	4458      	add	r0, fp
  409a74:	1b9e      	subs	r6, r3, r6
  409a76:	60a5      	str	r5, [r4, #8]
  409a78:	6020      	str	r0, [r4, #0]
  409a7a:	f8c8 6008 	str.w	r6, [r8, #8]
  409a7e:	b33e      	cbz	r6, 409ad0 <__ssprint_r+0xf0>
  409a80:	687e      	ldr	r6, [r7, #4]
  409a82:	463b      	mov	r3, r7
  409a84:	3708      	adds	r7, #8
  409a86:	2e00      	cmp	r6, #0
  409a88:	d0fa      	beq.n	409a80 <__ssprint_r+0xa0>
  409a8a:	42ae      	cmp	r6, r5
  409a8c:	f8d3 9000 	ldr.w	r9, [r3]
  409a90:	46ab      	mov	fp, r5
  409a92:	d2b2      	bcs.n	4099fa <__ssprint_r+0x1a>
  409a94:	4635      	mov	r5, r6
  409a96:	46b3      	mov	fp, r6
  409a98:	e7e2      	b.n	409a60 <__ssprint_r+0x80>
  409a9a:	4650      	mov	r0, sl
  409a9c:	f7ff fdb6 	bl	40960c <_realloc_r>
  409aa0:	4603      	mov	r3, r0
  409aa2:	2800      	cmp	r0, #0
  409aa4:	d1d2      	bne.n	409a4c <__ssprint_r+0x6c>
  409aa6:	6921      	ldr	r1, [r4, #16]
  409aa8:	4650      	mov	r0, sl
  409aaa:	f7fe fec1 	bl	408830 <_free_r>
  409aae:	230c      	movs	r3, #12
  409ab0:	f8ca 3000 	str.w	r3, [sl]
  409ab4:	89a3      	ldrh	r3, [r4, #12]
  409ab6:	2200      	movs	r2, #0
  409ab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409abc:	f04f 30ff 	mov.w	r0, #4294967295
  409ac0:	81a3      	strh	r3, [r4, #12]
  409ac2:	f8c8 2008 	str.w	r2, [r8, #8]
  409ac6:	f8c8 2004 	str.w	r2, [r8, #4]
  409aca:	b003      	add	sp, #12
  409acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409ad0:	2000      	movs	r0, #0
  409ad2:	f8c8 0004 	str.w	r0, [r8, #4]
  409ad6:	b003      	add	sp, #12
  409ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00409adc <__swbuf_r>:
  409adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409ade:	460d      	mov	r5, r1
  409ae0:	4614      	mov	r4, r2
  409ae2:	4606      	mov	r6, r0
  409ae4:	b110      	cbz	r0, 409aec <__swbuf_r+0x10>
  409ae6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  409ae8:	2b00      	cmp	r3, #0
  409aea:	d04b      	beq.n	409b84 <__swbuf_r+0xa8>
  409aec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  409af0:	69a3      	ldr	r3, [r4, #24]
  409af2:	60a3      	str	r3, [r4, #8]
  409af4:	b291      	uxth	r1, r2
  409af6:	0708      	lsls	r0, r1, #28
  409af8:	d539      	bpl.n	409b6e <__swbuf_r+0x92>
  409afa:	6923      	ldr	r3, [r4, #16]
  409afc:	2b00      	cmp	r3, #0
  409afe:	d036      	beq.n	409b6e <__swbuf_r+0x92>
  409b00:	b2ed      	uxtb	r5, r5
  409b02:	0489      	lsls	r1, r1, #18
  409b04:	462f      	mov	r7, r5
  409b06:	d515      	bpl.n	409b34 <__swbuf_r+0x58>
  409b08:	6822      	ldr	r2, [r4, #0]
  409b0a:	6961      	ldr	r1, [r4, #20]
  409b0c:	1ad3      	subs	r3, r2, r3
  409b0e:	428b      	cmp	r3, r1
  409b10:	da1c      	bge.n	409b4c <__swbuf_r+0x70>
  409b12:	3301      	adds	r3, #1
  409b14:	68a1      	ldr	r1, [r4, #8]
  409b16:	1c50      	adds	r0, r2, #1
  409b18:	3901      	subs	r1, #1
  409b1a:	60a1      	str	r1, [r4, #8]
  409b1c:	6020      	str	r0, [r4, #0]
  409b1e:	7015      	strb	r5, [r2, #0]
  409b20:	6962      	ldr	r2, [r4, #20]
  409b22:	429a      	cmp	r2, r3
  409b24:	d01a      	beq.n	409b5c <__swbuf_r+0x80>
  409b26:	89a3      	ldrh	r3, [r4, #12]
  409b28:	07db      	lsls	r3, r3, #31
  409b2a:	d501      	bpl.n	409b30 <__swbuf_r+0x54>
  409b2c:	2d0a      	cmp	r5, #10
  409b2e:	d015      	beq.n	409b5c <__swbuf_r+0x80>
  409b30:	4638      	mov	r0, r7
  409b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409b34:	6e61      	ldr	r1, [r4, #100]	; 0x64
  409b36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  409b3a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  409b3e:	81a2      	strh	r2, [r4, #12]
  409b40:	6822      	ldr	r2, [r4, #0]
  409b42:	6661      	str	r1, [r4, #100]	; 0x64
  409b44:	6961      	ldr	r1, [r4, #20]
  409b46:	1ad3      	subs	r3, r2, r3
  409b48:	428b      	cmp	r3, r1
  409b4a:	dbe2      	blt.n	409b12 <__swbuf_r+0x36>
  409b4c:	4621      	mov	r1, r4
  409b4e:	4630      	mov	r0, r6
  409b50:	f7fe fcf0 	bl	408534 <_fflush_r>
  409b54:	b940      	cbnz	r0, 409b68 <__swbuf_r+0x8c>
  409b56:	6822      	ldr	r2, [r4, #0]
  409b58:	2301      	movs	r3, #1
  409b5a:	e7db      	b.n	409b14 <__swbuf_r+0x38>
  409b5c:	4621      	mov	r1, r4
  409b5e:	4630      	mov	r0, r6
  409b60:	f7fe fce8 	bl	408534 <_fflush_r>
  409b64:	2800      	cmp	r0, #0
  409b66:	d0e3      	beq.n	409b30 <__swbuf_r+0x54>
  409b68:	f04f 37ff 	mov.w	r7, #4294967295
  409b6c:	e7e0      	b.n	409b30 <__swbuf_r+0x54>
  409b6e:	4621      	mov	r1, r4
  409b70:	4630      	mov	r0, r6
  409b72:	f7fd fc0b 	bl	40738c <__swsetup_r>
  409b76:	2800      	cmp	r0, #0
  409b78:	d1f6      	bne.n	409b68 <__swbuf_r+0x8c>
  409b7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  409b7e:	6923      	ldr	r3, [r4, #16]
  409b80:	b291      	uxth	r1, r2
  409b82:	e7bd      	b.n	409b00 <__swbuf_r+0x24>
  409b84:	f7fe fd2e 	bl	4085e4 <__sinit>
  409b88:	e7b0      	b.n	409aec <__swbuf_r+0x10>
  409b8a:	bf00      	nop

00409b8c <_wcrtomb_r>:
  409b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
  409b8e:	4606      	mov	r6, r0
  409b90:	b085      	sub	sp, #20
  409b92:	461f      	mov	r7, r3
  409b94:	b189      	cbz	r1, 409bba <_wcrtomb_r+0x2e>
  409b96:	4c10      	ldr	r4, [pc, #64]	; (409bd8 <_wcrtomb_r+0x4c>)
  409b98:	4d10      	ldr	r5, [pc, #64]	; (409bdc <_wcrtomb_r+0x50>)
  409b9a:	6824      	ldr	r4, [r4, #0]
  409b9c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  409b9e:	2c00      	cmp	r4, #0
  409ba0:	bf08      	it	eq
  409ba2:	462c      	moveq	r4, r5
  409ba4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  409ba8:	47a0      	blx	r4
  409baa:	1c43      	adds	r3, r0, #1
  409bac:	d103      	bne.n	409bb6 <_wcrtomb_r+0x2a>
  409bae:	2200      	movs	r2, #0
  409bb0:	238a      	movs	r3, #138	; 0x8a
  409bb2:	603a      	str	r2, [r7, #0]
  409bb4:	6033      	str	r3, [r6, #0]
  409bb6:	b005      	add	sp, #20
  409bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409bba:	460c      	mov	r4, r1
  409bbc:	4906      	ldr	r1, [pc, #24]	; (409bd8 <_wcrtomb_r+0x4c>)
  409bbe:	4a07      	ldr	r2, [pc, #28]	; (409bdc <_wcrtomb_r+0x50>)
  409bc0:	6809      	ldr	r1, [r1, #0]
  409bc2:	6b49      	ldr	r1, [r1, #52]	; 0x34
  409bc4:	2900      	cmp	r1, #0
  409bc6:	bf08      	it	eq
  409bc8:	4611      	moveq	r1, r2
  409bca:	4622      	mov	r2, r4
  409bcc:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  409bd0:	a901      	add	r1, sp, #4
  409bd2:	47a0      	blx	r4
  409bd4:	e7e9      	b.n	409baa <_wcrtomb_r+0x1e>
  409bd6:	bf00      	nop
  409bd8:	20400024 	.word	0x20400024
  409bdc:	20400864 	.word	0x20400864

00409be0 <__ascii_wctomb>:
  409be0:	b121      	cbz	r1, 409bec <__ascii_wctomb+0xc>
  409be2:	2aff      	cmp	r2, #255	; 0xff
  409be4:	d804      	bhi.n	409bf0 <__ascii_wctomb+0x10>
  409be6:	700a      	strb	r2, [r1, #0]
  409be8:	2001      	movs	r0, #1
  409bea:	4770      	bx	lr
  409bec:	4608      	mov	r0, r1
  409bee:	4770      	bx	lr
  409bf0:	238a      	movs	r3, #138	; 0x8a
  409bf2:	6003      	str	r3, [r0, #0]
  409bf4:	f04f 30ff 	mov.w	r0, #4294967295
  409bf8:	4770      	bx	lr
  409bfa:	bf00      	nop

00409bfc <_write_r>:
  409bfc:	b570      	push	{r4, r5, r6, lr}
  409bfe:	460d      	mov	r5, r1
  409c00:	4c08      	ldr	r4, [pc, #32]	; (409c24 <_write_r+0x28>)
  409c02:	4611      	mov	r1, r2
  409c04:	4606      	mov	r6, r0
  409c06:	461a      	mov	r2, r3
  409c08:	4628      	mov	r0, r5
  409c0a:	2300      	movs	r3, #0
  409c0c:	6023      	str	r3, [r4, #0]
  409c0e:	f7f7 f9f1 	bl	400ff4 <_write>
  409c12:	1c43      	adds	r3, r0, #1
  409c14:	d000      	beq.n	409c18 <_write_r+0x1c>
  409c16:	bd70      	pop	{r4, r5, r6, pc}
  409c18:	6823      	ldr	r3, [r4, #0]
  409c1a:	2b00      	cmp	r3, #0
  409c1c:	d0fb      	beq.n	409c16 <_write_r+0x1a>
  409c1e:	6033      	str	r3, [r6, #0]
  409c20:	bd70      	pop	{r4, r5, r6, pc}
  409c22:	bf00      	nop
  409c24:	20400ee4 	.word	0x20400ee4

00409c28 <__register_exitproc>:
  409c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  409c2c:	4d2c      	ldr	r5, [pc, #176]	; (409ce0 <__register_exitproc+0xb8>)
  409c2e:	4606      	mov	r6, r0
  409c30:	6828      	ldr	r0, [r5, #0]
  409c32:	4698      	mov	r8, r3
  409c34:	460f      	mov	r7, r1
  409c36:	4691      	mov	r9, r2
  409c38:	f7ff f8a2 	bl	408d80 <__retarget_lock_acquire_recursive>
  409c3c:	4b29      	ldr	r3, [pc, #164]	; (409ce4 <__register_exitproc+0xbc>)
  409c3e:	681c      	ldr	r4, [r3, #0]
  409c40:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  409c44:	2b00      	cmp	r3, #0
  409c46:	d03e      	beq.n	409cc6 <__register_exitproc+0x9e>
  409c48:	685a      	ldr	r2, [r3, #4]
  409c4a:	2a1f      	cmp	r2, #31
  409c4c:	dc1c      	bgt.n	409c88 <__register_exitproc+0x60>
  409c4e:	f102 0e01 	add.w	lr, r2, #1
  409c52:	b176      	cbz	r6, 409c72 <__register_exitproc+0x4a>
  409c54:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  409c58:	2401      	movs	r4, #1
  409c5a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  409c5e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  409c62:	4094      	lsls	r4, r2
  409c64:	4320      	orrs	r0, r4
  409c66:	2e02      	cmp	r6, #2
  409c68:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  409c6c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  409c70:	d023      	beq.n	409cba <__register_exitproc+0x92>
  409c72:	3202      	adds	r2, #2
  409c74:	f8c3 e004 	str.w	lr, [r3, #4]
  409c78:	6828      	ldr	r0, [r5, #0]
  409c7a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  409c7e:	f7ff f881 	bl	408d84 <__retarget_lock_release_recursive>
  409c82:	2000      	movs	r0, #0
  409c84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409c88:	4b17      	ldr	r3, [pc, #92]	; (409ce8 <__register_exitproc+0xc0>)
  409c8a:	b30b      	cbz	r3, 409cd0 <__register_exitproc+0xa8>
  409c8c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  409c90:	f7fa fd44 	bl	40471c <malloc>
  409c94:	4603      	mov	r3, r0
  409c96:	b1d8      	cbz	r0, 409cd0 <__register_exitproc+0xa8>
  409c98:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  409c9c:	6002      	str	r2, [r0, #0]
  409c9e:	2100      	movs	r1, #0
  409ca0:	6041      	str	r1, [r0, #4]
  409ca2:	460a      	mov	r2, r1
  409ca4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  409ca8:	f04f 0e01 	mov.w	lr, #1
  409cac:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  409cb0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  409cb4:	2e00      	cmp	r6, #0
  409cb6:	d0dc      	beq.n	409c72 <__register_exitproc+0x4a>
  409cb8:	e7cc      	b.n	409c54 <__register_exitproc+0x2c>
  409cba:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  409cbe:	430c      	orrs	r4, r1
  409cc0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  409cc4:	e7d5      	b.n	409c72 <__register_exitproc+0x4a>
  409cc6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  409cca:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  409cce:	e7bb      	b.n	409c48 <__register_exitproc+0x20>
  409cd0:	6828      	ldr	r0, [r5, #0]
  409cd2:	f7ff f857 	bl	408d84 <__retarget_lock_release_recursive>
  409cd6:	f04f 30ff 	mov.w	r0, #4294967295
  409cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409cde:	bf00      	nop
  409ce0:	20400860 	.word	0x20400860
  409ce4:	0040a6a4 	.word	0x0040a6a4
  409ce8:	0040471d 	.word	0x0040471d

00409cec <_calloc_r>:
  409cec:	b510      	push	{r4, lr}
  409cee:	fb02 f101 	mul.w	r1, r2, r1
  409cf2:	f7fa fd23 	bl	40473c <_malloc_r>
  409cf6:	4604      	mov	r4, r0
  409cf8:	b1d8      	cbz	r0, 409d32 <_calloc_r+0x46>
  409cfa:	f850 2c04 	ldr.w	r2, [r0, #-4]
  409cfe:	f022 0203 	bic.w	r2, r2, #3
  409d02:	3a04      	subs	r2, #4
  409d04:	2a24      	cmp	r2, #36	; 0x24
  409d06:	d818      	bhi.n	409d3a <_calloc_r+0x4e>
  409d08:	2a13      	cmp	r2, #19
  409d0a:	d914      	bls.n	409d36 <_calloc_r+0x4a>
  409d0c:	2300      	movs	r3, #0
  409d0e:	2a1b      	cmp	r2, #27
  409d10:	6003      	str	r3, [r0, #0]
  409d12:	6043      	str	r3, [r0, #4]
  409d14:	d916      	bls.n	409d44 <_calloc_r+0x58>
  409d16:	2a24      	cmp	r2, #36	; 0x24
  409d18:	6083      	str	r3, [r0, #8]
  409d1a:	60c3      	str	r3, [r0, #12]
  409d1c:	bf11      	iteee	ne
  409d1e:	f100 0210 	addne.w	r2, r0, #16
  409d22:	6103      	streq	r3, [r0, #16]
  409d24:	6143      	streq	r3, [r0, #20]
  409d26:	f100 0218 	addeq.w	r2, r0, #24
  409d2a:	2300      	movs	r3, #0
  409d2c:	6013      	str	r3, [r2, #0]
  409d2e:	6053      	str	r3, [r2, #4]
  409d30:	6093      	str	r3, [r2, #8]
  409d32:	4620      	mov	r0, r4
  409d34:	bd10      	pop	{r4, pc}
  409d36:	4602      	mov	r2, r0
  409d38:	e7f7      	b.n	409d2a <_calloc_r+0x3e>
  409d3a:	2100      	movs	r1, #0
  409d3c:	f7fb f848 	bl	404dd0 <memset>
  409d40:	4620      	mov	r0, r4
  409d42:	bd10      	pop	{r4, pc}
  409d44:	f100 0208 	add.w	r2, r0, #8
  409d48:	e7ef      	b.n	409d2a <_calloc_r+0x3e>
  409d4a:	bf00      	nop

00409d4c <_close_r>:
  409d4c:	b538      	push	{r3, r4, r5, lr}
  409d4e:	4c07      	ldr	r4, [pc, #28]	; (409d6c <_close_r+0x20>)
  409d50:	2300      	movs	r3, #0
  409d52:	4605      	mov	r5, r0
  409d54:	4608      	mov	r0, r1
  409d56:	6023      	str	r3, [r4, #0]
  409d58:	f7f7 fefe 	bl	401b58 <_close>
  409d5c:	1c43      	adds	r3, r0, #1
  409d5e:	d000      	beq.n	409d62 <_close_r+0x16>
  409d60:	bd38      	pop	{r3, r4, r5, pc}
  409d62:	6823      	ldr	r3, [r4, #0]
  409d64:	2b00      	cmp	r3, #0
  409d66:	d0fb      	beq.n	409d60 <_close_r+0x14>
  409d68:	602b      	str	r3, [r5, #0]
  409d6a:	bd38      	pop	{r3, r4, r5, pc}
  409d6c:	20400ee4 	.word	0x20400ee4

00409d70 <_fclose_r>:
  409d70:	b570      	push	{r4, r5, r6, lr}
  409d72:	b159      	cbz	r1, 409d8c <_fclose_r+0x1c>
  409d74:	4605      	mov	r5, r0
  409d76:	460c      	mov	r4, r1
  409d78:	b110      	cbz	r0, 409d80 <_fclose_r+0x10>
  409d7a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  409d7c:	2b00      	cmp	r3, #0
  409d7e:	d03c      	beq.n	409dfa <_fclose_r+0x8a>
  409d80:	6e63      	ldr	r3, [r4, #100]	; 0x64
  409d82:	07d8      	lsls	r0, r3, #31
  409d84:	d505      	bpl.n	409d92 <_fclose_r+0x22>
  409d86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  409d8a:	b92b      	cbnz	r3, 409d98 <_fclose_r+0x28>
  409d8c:	2600      	movs	r6, #0
  409d8e:	4630      	mov	r0, r6
  409d90:	bd70      	pop	{r4, r5, r6, pc}
  409d92:	89a3      	ldrh	r3, [r4, #12]
  409d94:	0599      	lsls	r1, r3, #22
  409d96:	d53c      	bpl.n	409e12 <_fclose_r+0xa2>
  409d98:	4621      	mov	r1, r4
  409d9a:	4628      	mov	r0, r5
  409d9c:	f7fe fb2a 	bl	4083f4 <__sflush_r>
  409da0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  409da2:	4606      	mov	r6, r0
  409da4:	b133      	cbz	r3, 409db4 <_fclose_r+0x44>
  409da6:	69e1      	ldr	r1, [r4, #28]
  409da8:	4628      	mov	r0, r5
  409daa:	4798      	blx	r3
  409dac:	2800      	cmp	r0, #0
  409dae:	bfb8      	it	lt
  409db0:	f04f 36ff 	movlt.w	r6, #4294967295
  409db4:	89a3      	ldrh	r3, [r4, #12]
  409db6:	061a      	lsls	r2, r3, #24
  409db8:	d422      	bmi.n	409e00 <_fclose_r+0x90>
  409dba:	6b21      	ldr	r1, [r4, #48]	; 0x30
  409dbc:	b141      	cbz	r1, 409dd0 <_fclose_r+0x60>
  409dbe:	f104 0340 	add.w	r3, r4, #64	; 0x40
  409dc2:	4299      	cmp	r1, r3
  409dc4:	d002      	beq.n	409dcc <_fclose_r+0x5c>
  409dc6:	4628      	mov	r0, r5
  409dc8:	f7fe fd32 	bl	408830 <_free_r>
  409dcc:	2300      	movs	r3, #0
  409dce:	6323      	str	r3, [r4, #48]	; 0x30
  409dd0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  409dd2:	b121      	cbz	r1, 409dde <_fclose_r+0x6e>
  409dd4:	4628      	mov	r0, r5
  409dd6:	f7fe fd2b 	bl	408830 <_free_r>
  409dda:	2300      	movs	r3, #0
  409ddc:	6463      	str	r3, [r4, #68]	; 0x44
  409dde:	f7fe fc2d 	bl	40863c <__sfp_lock_acquire>
  409de2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  409de4:	2200      	movs	r2, #0
  409de6:	07db      	lsls	r3, r3, #31
  409de8:	81a2      	strh	r2, [r4, #12]
  409dea:	d50e      	bpl.n	409e0a <_fclose_r+0x9a>
  409dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
  409dee:	f7fe ffc5 	bl	408d7c <__retarget_lock_close_recursive>
  409df2:	f7fe fc29 	bl	408648 <__sfp_lock_release>
  409df6:	4630      	mov	r0, r6
  409df8:	bd70      	pop	{r4, r5, r6, pc}
  409dfa:	f7fe fbf3 	bl	4085e4 <__sinit>
  409dfe:	e7bf      	b.n	409d80 <_fclose_r+0x10>
  409e00:	6921      	ldr	r1, [r4, #16]
  409e02:	4628      	mov	r0, r5
  409e04:	f7fe fd14 	bl	408830 <_free_r>
  409e08:	e7d7      	b.n	409dba <_fclose_r+0x4a>
  409e0a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  409e0c:	f7fe ffba 	bl	408d84 <__retarget_lock_release_recursive>
  409e10:	e7ec      	b.n	409dec <_fclose_r+0x7c>
  409e12:	6da0      	ldr	r0, [r4, #88]	; 0x58
  409e14:	f7fe ffb4 	bl	408d80 <__retarget_lock_acquire_recursive>
  409e18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  409e1c:	2b00      	cmp	r3, #0
  409e1e:	d1bb      	bne.n	409d98 <_fclose_r+0x28>
  409e20:	6e66      	ldr	r6, [r4, #100]	; 0x64
  409e22:	f016 0601 	ands.w	r6, r6, #1
  409e26:	d1b1      	bne.n	409d8c <_fclose_r+0x1c>
  409e28:	6da0      	ldr	r0, [r4, #88]	; 0x58
  409e2a:	f7fe ffab 	bl	408d84 <__retarget_lock_release_recursive>
  409e2e:	4630      	mov	r0, r6
  409e30:	bd70      	pop	{r4, r5, r6, pc}
  409e32:	bf00      	nop

00409e34 <_fstat_r>:
  409e34:	b538      	push	{r3, r4, r5, lr}
  409e36:	460b      	mov	r3, r1
  409e38:	4c07      	ldr	r4, [pc, #28]	; (409e58 <_fstat_r+0x24>)
  409e3a:	4605      	mov	r5, r0
  409e3c:	4611      	mov	r1, r2
  409e3e:	4618      	mov	r0, r3
  409e40:	2300      	movs	r3, #0
  409e42:	6023      	str	r3, [r4, #0]
  409e44:	f7f7 fe8b 	bl	401b5e <_fstat>
  409e48:	1c43      	adds	r3, r0, #1
  409e4a:	d000      	beq.n	409e4e <_fstat_r+0x1a>
  409e4c:	bd38      	pop	{r3, r4, r5, pc}
  409e4e:	6823      	ldr	r3, [r4, #0]
  409e50:	2b00      	cmp	r3, #0
  409e52:	d0fb      	beq.n	409e4c <_fstat_r+0x18>
  409e54:	602b      	str	r3, [r5, #0]
  409e56:	bd38      	pop	{r3, r4, r5, pc}
  409e58:	20400ee4 	.word	0x20400ee4

00409e5c <_isatty_r>:
  409e5c:	b538      	push	{r3, r4, r5, lr}
  409e5e:	4c07      	ldr	r4, [pc, #28]	; (409e7c <_isatty_r+0x20>)
  409e60:	2300      	movs	r3, #0
  409e62:	4605      	mov	r5, r0
  409e64:	4608      	mov	r0, r1
  409e66:	6023      	str	r3, [r4, #0]
  409e68:	f7f7 fe7e 	bl	401b68 <_isatty>
  409e6c:	1c43      	adds	r3, r0, #1
  409e6e:	d000      	beq.n	409e72 <_isatty_r+0x16>
  409e70:	bd38      	pop	{r3, r4, r5, pc}
  409e72:	6823      	ldr	r3, [r4, #0]
  409e74:	2b00      	cmp	r3, #0
  409e76:	d0fb      	beq.n	409e70 <_isatty_r+0x14>
  409e78:	602b      	str	r3, [r5, #0]
  409e7a:	bd38      	pop	{r3, r4, r5, pc}
  409e7c:	20400ee4 	.word	0x20400ee4

00409e80 <_lseek_r>:
  409e80:	b570      	push	{r4, r5, r6, lr}
  409e82:	460d      	mov	r5, r1
  409e84:	4c08      	ldr	r4, [pc, #32]	; (409ea8 <_lseek_r+0x28>)
  409e86:	4611      	mov	r1, r2
  409e88:	4606      	mov	r6, r0
  409e8a:	461a      	mov	r2, r3
  409e8c:	4628      	mov	r0, r5
  409e8e:	2300      	movs	r3, #0
  409e90:	6023      	str	r3, [r4, #0]
  409e92:	f7f7 fe6b 	bl	401b6c <_lseek>
  409e96:	1c43      	adds	r3, r0, #1
  409e98:	d000      	beq.n	409e9c <_lseek_r+0x1c>
  409e9a:	bd70      	pop	{r4, r5, r6, pc}
  409e9c:	6823      	ldr	r3, [r4, #0]
  409e9e:	2b00      	cmp	r3, #0
  409ea0:	d0fb      	beq.n	409e9a <_lseek_r+0x1a>
  409ea2:	6033      	str	r3, [r6, #0]
  409ea4:	bd70      	pop	{r4, r5, r6, pc}
  409ea6:	bf00      	nop
  409ea8:	20400ee4 	.word	0x20400ee4

00409eac <_read_r>:
  409eac:	b570      	push	{r4, r5, r6, lr}
  409eae:	460d      	mov	r5, r1
  409eb0:	4c08      	ldr	r4, [pc, #32]	; (409ed4 <_read_r+0x28>)
  409eb2:	4611      	mov	r1, r2
  409eb4:	4606      	mov	r6, r0
  409eb6:	461a      	mov	r2, r3
  409eb8:	4628      	mov	r0, r5
  409eba:	2300      	movs	r3, #0
  409ebc:	6023      	str	r3, [r4, #0]
  409ebe:	f7f7 f87b 	bl	400fb8 <_read>
  409ec2:	1c43      	adds	r3, r0, #1
  409ec4:	d000      	beq.n	409ec8 <_read_r+0x1c>
  409ec6:	bd70      	pop	{r4, r5, r6, pc}
  409ec8:	6823      	ldr	r3, [r4, #0]
  409eca:	2b00      	cmp	r3, #0
  409ecc:	d0fb      	beq.n	409ec6 <_read_r+0x1a>
  409ece:	6033      	str	r3, [r6, #0]
  409ed0:	bd70      	pop	{r4, r5, r6, pc}
  409ed2:	bf00      	nop
  409ed4:	20400ee4 	.word	0x20400ee4

00409ed8 <__gedf2>:
  409ed8:	f04f 3cff 	mov.w	ip, #4294967295
  409edc:	e006      	b.n	409eec <__cmpdf2+0x4>
  409ede:	bf00      	nop

00409ee0 <__ledf2>:
  409ee0:	f04f 0c01 	mov.w	ip, #1
  409ee4:	e002      	b.n	409eec <__cmpdf2+0x4>
  409ee6:	bf00      	nop

00409ee8 <__cmpdf2>:
  409ee8:	f04f 0c01 	mov.w	ip, #1
  409eec:	f84d cd04 	str.w	ip, [sp, #-4]!
  409ef0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  409ef4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409ef8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  409efc:	bf18      	it	ne
  409efe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  409f02:	d01b      	beq.n	409f3c <__cmpdf2+0x54>
  409f04:	b001      	add	sp, #4
  409f06:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  409f0a:	bf0c      	ite	eq
  409f0c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  409f10:	ea91 0f03 	teqne	r1, r3
  409f14:	bf02      	ittt	eq
  409f16:	ea90 0f02 	teqeq	r0, r2
  409f1a:	2000      	moveq	r0, #0
  409f1c:	4770      	bxeq	lr
  409f1e:	f110 0f00 	cmn.w	r0, #0
  409f22:	ea91 0f03 	teq	r1, r3
  409f26:	bf58      	it	pl
  409f28:	4299      	cmppl	r1, r3
  409f2a:	bf08      	it	eq
  409f2c:	4290      	cmpeq	r0, r2
  409f2e:	bf2c      	ite	cs
  409f30:	17d8      	asrcs	r0, r3, #31
  409f32:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  409f36:	f040 0001 	orr.w	r0, r0, #1
  409f3a:	4770      	bx	lr
  409f3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  409f40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409f44:	d102      	bne.n	409f4c <__cmpdf2+0x64>
  409f46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  409f4a:	d107      	bne.n	409f5c <__cmpdf2+0x74>
  409f4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  409f50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409f54:	d1d6      	bne.n	409f04 <__cmpdf2+0x1c>
  409f56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  409f5a:	d0d3      	beq.n	409f04 <__cmpdf2+0x1c>
  409f5c:	f85d 0b04 	ldr.w	r0, [sp], #4
  409f60:	4770      	bx	lr
  409f62:	bf00      	nop

00409f64 <__aeabi_cdrcmple>:
  409f64:	4684      	mov	ip, r0
  409f66:	4610      	mov	r0, r2
  409f68:	4662      	mov	r2, ip
  409f6a:	468c      	mov	ip, r1
  409f6c:	4619      	mov	r1, r3
  409f6e:	4663      	mov	r3, ip
  409f70:	e000      	b.n	409f74 <__aeabi_cdcmpeq>
  409f72:	bf00      	nop

00409f74 <__aeabi_cdcmpeq>:
  409f74:	b501      	push	{r0, lr}
  409f76:	f7ff ffb7 	bl	409ee8 <__cmpdf2>
  409f7a:	2800      	cmp	r0, #0
  409f7c:	bf48      	it	mi
  409f7e:	f110 0f00 	cmnmi.w	r0, #0
  409f82:	bd01      	pop	{r0, pc}

00409f84 <__aeabi_dcmpeq>:
  409f84:	f84d ed08 	str.w	lr, [sp, #-8]!
  409f88:	f7ff fff4 	bl	409f74 <__aeabi_cdcmpeq>
  409f8c:	bf0c      	ite	eq
  409f8e:	2001      	moveq	r0, #1
  409f90:	2000      	movne	r0, #0
  409f92:	f85d fb08 	ldr.w	pc, [sp], #8
  409f96:	bf00      	nop

00409f98 <__aeabi_dcmplt>:
  409f98:	f84d ed08 	str.w	lr, [sp, #-8]!
  409f9c:	f7ff ffea 	bl	409f74 <__aeabi_cdcmpeq>
  409fa0:	bf34      	ite	cc
  409fa2:	2001      	movcc	r0, #1
  409fa4:	2000      	movcs	r0, #0
  409fa6:	f85d fb08 	ldr.w	pc, [sp], #8
  409faa:	bf00      	nop

00409fac <__aeabi_dcmple>:
  409fac:	f84d ed08 	str.w	lr, [sp, #-8]!
  409fb0:	f7ff ffe0 	bl	409f74 <__aeabi_cdcmpeq>
  409fb4:	bf94      	ite	ls
  409fb6:	2001      	movls	r0, #1
  409fb8:	2000      	movhi	r0, #0
  409fba:	f85d fb08 	ldr.w	pc, [sp], #8
  409fbe:	bf00      	nop

00409fc0 <__aeabi_dcmpge>:
  409fc0:	f84d ed08 	str.w	lr, [sp, #-8]!
  409fc4:	f7ff ffce 	bl	409f64 <__aeabi_cdrcmple>
  409fc8:	bf94      	ite	ls
  409fca:	2001      	movls	r0, #1
  409fcc:	2000      	movhi	r0, #0
  409fce:	f85d fb08 	ldr.w	pc, [sp], #8
  409fd2:	bf00      	nop

00409fd4 <__aeabi_dcmpgt>:
  409fd4:	f84d ed08 	str.w	lr, [sp, #-8]!
  409fd8:	f7ff ffc4 	bl	409f64 <__aeabi_cdrcmple>
  409fdc:	bf34      	ite	cc
  409fde:	2001      	movcc	r0, #1
  409fe0:	2000      	movcs	r0, #0
  409fe2:	f85d fb08 	ldr.w	pc, [sp], #8
  409fe6:	bf00      	nop

00409fe8 <__aeabi_dcmpun>:
  409fe8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  409fec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409ff0:	d102      	bne.n	409ff8 <__aeabi_dcmpun+0x10>
  409ff2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  409ff6:	d10a      	bne.n	40a00e <__aeabi_dcmpun+0x26>
  409ff8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  409ffc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a000:	d102      	bne.n	40a008 <__aeabi_dcmpun+0x20>
  40a002:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40a006:	d102      	bne.n	40a00e <__aeabi_dcmpun+0x26>
  40a008:	f04f 0000 	mov.w	r0, #0
  40a00c:	4770      	bx	lr
  40a00e:	f04f 0001 	mov.w	r0, #1
  40a012:	4770      	bx	lr

0040a014 <__aeabi_uldivmod>:
  40a014:	b953      	cbnz	r3, 40a02c <__aeabi_uldivmod+0x18>
  40a016:	b94a      	cbnz	r2, 40a02c <__aeabi_uldivmod+0x18>
  40a018:	2900      	cmp	r1, #0
  40a01a:	bf08      	it	eq
  40a01c:	2800      	cmpeq	r0, #0
  40a01e:	bf1c      	itt	ne
  40a020:	f04f 31ff 	movne.w	r1, #4294967295
  40a024:	f04f 30ff 	movne.w	r0, #4294967295
  40a028:	f000 b97a 	b.w	40a320 <__aeabi_idiv0>
  40a02c:	f1ad 0c08 	sub.w	ip, sp, #8
  40a030:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40a034:	f000 f806 	bl	40a044 <__udivmoddi4>
  40a038:	f8dd e004 	ldr.w	lr, [sp, #4]
  40a03c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40a040:	b004      	add	sp, #16
  40a042:	4770      	bx	lr

0040a044 <__udivmoddi4>:
  40a044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a048:	468c      	mov	ip, r1
  40a04a:	460d      	mov	r5, r1
  40a04c:	4604      	mov	r4, r0
  40a04e:	9e08      	ldr	r6, [sp, #32]
  40a050:	2b00      	cmp	r3, #0
  40a052:	d151      	bne.n	40a0f8 <__udivmoddi4+0xb4>
  40a054:	428a      	cmp	r2, r1
  40a056:	4617      	mov	r7, r2
  40a058:	d96d      	bls.n	40a136 <__udivmoddi4+0xf2>
  40a05a:	fab2 fe82 	clz	lr, r2
  40a05e:	f1be 0f00 	cmp.w	lr, #0
  40a062:	d00b      	beq.n	40a07c <__udivmoddi4+0x38>
  40a064:	f1ce 0c20 	rsb	ip, lr, #32
  40a068:	fa01 f50e 	lsl.w	r5, r1, lr
  40a06c:	fa20 fc0c 	lsr.w	ip, r0, ip
  40a070:	fa02 f70e 	lsl.w	r7, r2, lr
  40a074:	ea4c 0c05 	orr.w	ip, ip, r5
  40a078:	fa00 f40e 	lsl.w	r4, r0, lr
  40a07c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40a080:	0c25      	lsrs	r5, r4, #16
  40a082:	fbbc f8fa 	udiv	r8, ip, sl
  40a086:	fa1f f987 	uxth.w	r9, r7
  40a08a:	fb0a cc18 	mls	ip, sl, r8, ip
  40a08e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40a092:	fb08 f309 	mul.w	r3, r8, r9
  40a096:	42ab      	cmp	r3, r5
  40a098:	d90a      	bls.n	40a0b0 <__udivmoddi4+0x6c>
  40a09a:	19ed      	adds	r5, r5, r7
  40a09c:	f108 32ff 	add.w	r2, r8, #4294967295
  40a0a0:	f080 8123 	bcs.w	40a2ea <__udivmoddi4+0x2a6>
  40a0a4:	42ab      	cmp	r3, r5
  40a0a6:	f240 8120 	bls.w	40a2ea <__udivmoddi4+0x2a6>
  40a0aa:	f1a8 0802 	sub.w	r8, r8, #2
  40a0ae:	443d      	add	r5, r7
  40a0b0:	1aed      	subs	r5, r5, r3
  40a0b2:	b2a4      	uxth	r4, r4
  40a0b4:	fbb5 f0fa 	udiv	r0, r5, sl
  40a0b8:	fb0a 5510 	mls	r5, sl, r0, r5
  40a0bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40a0c0:	fb00 f909 	mul.w	r9, r0, r9
  40a0c4:	45a1      	cmp	r9, r4
  40a0c6:	d909      	bls.n	40a0dc <__udivmoddi4+0x98>
  40a0c8:	19e4      	adds	r4, r4, r7
  40a0ca:	f100 33ff 	add.w	r3, r0, #4294967295
  40a0ce:	f080 810a 	bcs.w	40a2e6 <__udivmoddi4+0x2a2>
  40a0d2:	45a1      	cmp	r9, r4
  40a0d4:	f240 8107 	bls.w	40a2e6 <__udivmoddi4+0x2a2>
  40a0d8:	3802      	subs	r0, #2
  40a0da:	443c      	add	r4, r7
  40a0dc:	eba4 0409 	sub.w	r4, r4, r9
  40a0e0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40a0e4:	2100      	movs	r1, #0
  40a0e6:	2e00      	cmp	r6, #0
  40a0e8:	d061      	beq.n	40a1ae <__udivmoddi4+0x16a>
  40a0ea:	fa24 f40e 	lsr.w	r4, r4, lr
  40a0ee:	2300      	movs	r3, #0
  40a0f0:	6034      	str	r4, [r6, #0]
  40a0f2:	6073      	str	r3, [r6, #4]
  40a0f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a0f8:	428b      	cmp	r3, r1
  40a0fa:	d907      	bls.n	40a10c <__udivmoddi4+0xc8>
  40a0fc:	2e00      	cmp	r6, #0
  40a0fe:	d054      	beq.n	40a1aa <__udivmoddi4+0x166>
  40a100:	2100      	movs	r1, #0
  40a102:	e886 0021 	stmia.w	r6, {r0, r5}
  40a106:	4608      	mov	r0, r1
  40a108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a10c:	fab3 f183 	clz	r1, r3
  40a110:	2900      	cmp	r1, #0
  40a112:	f040 808e 	bne.w	40a232 <__udivmoddi4+0x1ee>
  40a116:	42ab      	cmp	r3, r5
  40a118:	d302      	bcc.n	40a120 <__udivmoddi4+0xdc>
  40a11a:	4282      	cmp	r2, r0
  40a11c:	f200 80fa 	bhi.w	40a314 <__udivmoddi4+0x2d0>
  40a120:	1a84      	subs	r4, r0, r2
  40a122:	eb65 0503 	sbc.w	r5, r5, r3
  40a126:	2001      	movs	r0, #1
  40a128:	46ac      	mov	ip, r5
  40a12a:	2e00      	cmp	r6, #0
  40a12c:	d03f      	beq.n	40a1ae <__udivmoddi4+0x16a>
  40a12e:	e886 1010 	stmia.w	r6, {r4, ip}
  40a132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a136:	b912      	cbnz	r2, 40a13e <__udivmoddi4+0xfa>
  40a138:	2701      	movs	r7, #1
  40a13a:	fbb7 f7f2 	udiv	r7, r7, r2
  40a13e:	fab7 fe87 	clz	lr, r7
  40a142:	f1be 0f00 	cmp.w	lr, #0
  40a146:	d134      	bne.n	40a1b2 <__udivmoddi4+0x16e>
  40a148:	1beb      	subs	r3, r5, r7
  40a14a:	0c3a      	lsrs	r2, r7, #16
  40a14c:	fa1f fc87 	uxth.w	ip, r7
  40a150:	2101      	movs	r1, #1
  40a152:	fbb3 f8f2 	udiv	r8, r3, r2
  40a156:	0c25      	lsrs	r5, r4, #16
  40a158:	fb02 3318 	mls	r3, r2, r8, r3
  40a15c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40a160:	fb0c f308 	mul.w	r3, ip, r8
  40a164:	42ab      	cmp	r3, r5
  40a166:	d907      	bls.n	40a178 <__udivmoddi4+0x134>
  40a168:	19ed      	adds	r5, r5, r7
  40a16a:	f108 30ff 	add.w	r0, r8, #4294967295
  40a16e:	d202      	bcs.n	40a176 <__udivmoddi4+0x132>
  40a170:	42ab      	cmp	r3, r5
  40a172:	f200 80d1 	bhi.w	40a318 <__udivmoddi4+0x2d4>
  40a176:	4680      	mov	r8, r0
  40a178:	1aed      	subs	r5, r5, r3
  40a17a:	b2a3      	uxth	r3, r4
  40a17c:	fbb5 f0f2 	udiv	r0, r5, r2
  40a180:	fb02 5510 	mls	r5, r2, r0, r5
  40a184:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40a188:	fb0c fc00 	mul.w	ip, ip, r0
  40a18c:	45a4      	cmp	ip, r4
  40a18e:	d907      	bls.n	40a1a0 <__udivmoddi4+0x15c>
  40a190:	19e4      	adds	r4, r4, r7
  40a192:	f100 33ff 	add.w	r3, r0, #4294967295
  40a196:	d202      	bcs.n	40a19e <__udivmoddi4+0x15a>
  40a198:	45a4      	cmp	ip, r4
  40a19a:	f200 80b8 	bhi.w	40a30e <__udivmoddi4+0x2ca>
  40a19e:	4618      	mov	r0, r3
  40a1a0:	eba4 040c 	sub.w	r4, r4, ip
  40a1a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40a1a8:	e79d      	b.n	40a0e6 <__udivmoddi4+0xa2>
  40a1aa:	4631      	mov	r1, r6
  40a1ac:	4630      	mov	r0, r6
  40a1ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a1b2:	f1ce 0420 	rsb	r4, lr, #32
  40a1b6:	fa05 f30e 	lsl.w	r3, r5, lr
  40a1ba:	fa07 f70e 	lsl.w	r7, r7, lr
  40a1be:	fa20 f804 	lsr.w	r8, r0, r4
  40a1c2:	0c3a      	lsrs	r2, r7, #16
  40a1c4:	fa25 f404 	lsr.w	r4, r5, r4
  40a1c8:	ea48 0803 	orr.w	r8, r8, r3
  40a1cc:	fbb4 f1f2 	udiv	r1, r4, r2
  40a1d0:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40a1d4:	fb02 4411 	mls	r4, r2, r1, r4
  40a1d8:	fa1f fc87 	uxth.w	ip, r7
  40a1dc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40a1e0:	fb01 f30c 	mul.w	r3, r1, ip
  40a1e4:	42ab      	cmp	r3, r5
  40a1e6:	fa00 f40e 	lsl.w	r4, r0, lr
  40a1ea:	d909      	bls.n	40a200 <__udivmoddi4+0x1bc>
  40a1ec:	19ed      	adds	r5, r5, r7
  40a1ee:	f101 30ff 	add.w	r0, r1, #4294967295
  40a1f2:	f080 808a 	bcs.w	40a30a <__udivmoddi4+0x2c6>
  40a1f6:	42ab      	cmp	r3, r5
  40a1f8:	f240 8087 	bls.w	40a30a <__udivmoddi4+0x2c6>
  40a1fc:	3902      	subs	r1, #2
  40a1fe:	443d      	add	r5, r7
  40a200:	1aeb      	subs	r3, r5, r3
  40a202:	fa1f f588 	uxth.w	r5, r8
  40a206:	fbb3 f0f2 	udiv	r0, r3, r2
  40a20a:	fb02 3310 	mls	r3, r2, r0, r3
  40a20e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40a212:	fb00 f30c 	mul.w	r3, r0, ip
  40a216:	42ab      	cmp	r3, r5
  40a218:	d907      	bls.n	40a22a <__udivmoddi4+0x1e6>
  40a21a:	19ed      	adds	r5, r5, r7
  40a21c:	f100 38ff 	add.w	r8, r0, #4294967295
  40a220:	d26f      	bcs.n	40a302 <__udivmoddi4+0x2be>
  40a222:	42ab      	cmp	r3, r5
  40a224:	d96d      	bls.n	40a302 <__udivmoddi4+0x2be>
  40a226:	3802      	subs	r0, #2
  40a228:	443d      	add	r5, r7
  40a22a:	1aeb      	subs	r3, r5, r3
  40a22c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40a230:	e78f      	b.n	40a152 <__udivmoddi4+0x10e>
  40a232:	f1c1 0720 	rsb	r7, r1, #32
  40a236:	fa22 f807 	lsr.w	r8, r2, r7
  40a23a:	408b      	lsls	r3, r1
  40a23c:	fa05 f401 	lsl.w	r4, r5, r1
  40a240:	ea48 0303 	orr.w	r3, r8, r3
  40a244:	fa20 fe07 	lsr.w	lr, r0, r7
  40a248:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40a24c:	40fd      	lsrs	r5, r7
  40a24e:	ea4e 0e04 	orr.w	lr, lr, r4
  40a252:	fbb5 f9fc 	udiv	r9, r5, ip
  40a256:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40a25a:	fb0c 5519 	mls	r5, ip, r9, r5
  40a25e:	fa1f f883 	uxth.w	r8, r3
  40a262:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40a266:	fb09 f408 	mul.w	r4, r9, r8
  40a26a:	42ac      	cmp	r4, r5
  40a26c:	fa02 f201 	lsl.w	r2, r2, r1
  40a270:	fa00 fa01 	lsl.w	sl, r0, r1
  40a274:	d908      	bls.n	40a288 <__udivmoddi4+0x244>
  40a276:	18ed      	adds	r5, r5, r3
  40a278:	f109 30ff 	add.w	r0, r9, #4294967295
  40a27c:	d243      	bcs.n	40a306 <__udivmoddi4+0x2c2>
  40a27e:	42ac      	cmp	r4, r5
  40a280:	d941      	bls.n	40a306 <__udivmoddi4+0x2c2>
  40a282:	f1a9 0902 	sub.w	r9, r9, #2
  40a286:	441d      	add	r5, r3
  40a288:	1b2d      	subs	r5, r5, r4
  40a28a:	fa1f fe8e 	uxth.w	lr, lr
  40a28e:	fbb5 f0fc 	udiv	r0, r5, ip
  40a292:	fb0c 5510 	mls	r5, ip, r0, r5
  40a296:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40a29a:	fb00 f808 	mul.w	r8, r0, r8
  40a29e:	45a0      	cmp	r8, r4
  40a2a0:	d907      	bls.n	40a2b2 <__udivmoddi4+0x26e>
  40a2a2:	18e4      	adds	r4, r4, r3
  40a2a4:	f100 35ff 	add.w	r5, r0, #4294967295
  40a2a8:	d229      	bcs.n	40a2fe <__udivmoddi4+0x2ba>
  40a2aa:	45a0      	cmp	r8, r4
  40a2ac:	d927      	bls.n	40a2fe <__udivmoddi4+0x2ba>
  40a2ae:	3802      	subs	r0, #2
  40a2b0:	441c      	add	r4, r3
  40a2b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40a2b6:	eba4 0408 	sub.w	r4, r4, r8
  40a2ba:	fba0 8902 	umull	r8, r9, r0, r2
  40a2be:	454c      	cmp	r4, r9
  40a2c0:	46c6      	mov	lr, r8
  40a2c2:	464d      	mov	r5, r9
  40a2c4:	d315      	bcc.n	40a2f2 <__udivmoddi4+0x2ae>
  40a2c6:	d012      	beq.n	40a2ee <__udivmoddi4+0x2aa>
  40a2c8:	b156      	cbz	r6, 40a2e0 <__udivmoddi4+0x29c>
  40a2ca:	ebba 030e 	subs.w	r3, sl, lr
  40a2ce:	eb64 0405 	sbc.w	r4, r4, r5
  40a2d2:	fa04 f707 	lsl.w	r7, r4, r7
  40a2d6:	40cb      	lsrs	r3, r1
  40a2d8:	431f      	orrs	r7, r3
  40a2da:	40cc      	lsrs	r4, r1
  40a2dc:	6037      	str	r7, [r6, #0]
  40a2de:	6074      	str	r4, [r6, #4]
  40a2e0:	2100      	movs	r1, #0
  40a2e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a2e6:	4618      	mov	r0, r3
  40a2e8:	e6f8      	b.n	40a0dc <__udivmoddi4+0x98>
  40a2ea:	4690      	mov	r8, r2
  40a2ec:	e6e0      	b.n	40a0b0 <__udivmoddi4+0x6c>
  40a2ee:	45c2      	cmp	sl, r8
  40a2f0:	d2ea      	bcs.n	40a2c8 <__udivmoddi4+0x284>
  40a2f2:	ebb8 0e02 	subs.w	lr, r8, r2
  40a2f6:	eb69 0503 	sbc.w	r5, r9, r3
  40a2fa:	3801      	subs	r0, #1
  40a2fc:	e7e4      	b.n	40a2c8 <__udivmoddi4+0x284>
  40a2fe:	4628      	mov	r0, r5
  40a300:	e7d7      	b.n	40a2b2 <__udivmoddi4+0x26e>
  40a302:	4640      	mov	r0, r8
  40a304:	e791      	b.n	40a22a <__udivmoddi4+0x1e6>
  40a306:	4681      	mov	r9, r0
  40a308:	e7be      	b.n	40a288 <__udivmoddi4+0x244>
  40a30a:	4601      	mov	r1, r0
  40a30c:	e778      	b.n	40a200 <__udivmoddi4+0x1bc>
  40a30e:	3802      	subs	r0, #2
  40a310:	443c      	add	r4, r7
  40a312:	e745      	b.n	40a1a0 <__udivmoddi4+0x15c>
  40a314:	4608      	mov	r0, r1
  40a316:	e708      	b.n	40a12a <__udivmoddi4+0xe6>
  40a318:	f1a8 0802 	sub.w	r8, r8, #2
  40a31c:	443d      	add	r5, r7
  40a31e:	e72b      	b.n	40a178 <__udivmoddi4+0x134>

0040a320 <__aeabi_idiv0>:
  40a320:	4770      	bx	lr
  40a322:	bf00      	nop

0040a324 <sysfont_glyphs>:
  40a324:	0000 0000 0000 2000 2020 2020 2000 5050     .......     . PP
  40a334:	0050 0000 5000 f850 f850 5050 7820 70a0     P....PP.P.PP x.p
  40a344:	f028 c020 10c8 4020 1898 9060 40a0 90a8     (. ... @..`..@..
  40a354:	6068 4020 0000 0000 2010 4040 2040 4010     h` @..... @@@ .@
  40a364:	1020 1010 4020 5000 f820 5020 0000 2020      ... @.P . P..  
  40a374:	20f8 0020 0000 0000 2060 0040 0000 00f8     .  .....` @.....
  40a384:	0000 0000 0000 6000 0060 1008 4020 0080     .......``... @..
  40a394:	8870 a898 88c8 2070 2060 2020 7020 8870     p.....p `    pp.
  40a3a4:	1008 4020 f8f8 2010 0810 7088 3010 9050     .. @... ...p.0P.
  40a3b4:	10f8 f810 f080 0808 7088 4030 f080 8888     .........p0@....
  40a3c4:	f870 1008 4020 4040 8870 7088 8888 7070     p... @@@p..p..pp
  40a3d4:	8888 0878 6010 6000 0060 6060 0000 6060     ..x..`.``.``..``
  40a3e4:	6000 4020 1008 4020 1020 0008 f800 f800     .` @.. @ .......
  40a3f4:	0000 4080 1020 4020 7080 0888 2010 2000     ...@ . @.p... . 
  40a404:	8870 6808 a8a8 7070 8888 f888 8888 88f0     p..h..pp........
  40a414:	f088 8888 70f0 8088 8080 7088 90e0 8888     .....p.....p....
  40a424:	9088 f8e0 8080 80f0 f880 80f8 e080 8080     ................
  40a434:	7080 8088 9880 7088 8888 f888 8888 7088     .p.....p.......p
  40a444:	2020 2020 7020 1038 1010 9010 8860 a090          p8.....`...
  40a454:	a0c0 8890 8080 8080 8080 88f8 a8d8 8888     ................
  40a464:	8888 8888 a8c8 8898 7088 8888 8888 7088     .........p.....p
  40a474:	88f0 f088 8080 7080 8888 a888 6890 88f0     .......p.....h..
  40a484:	f088 90a0 7888 8080 0870 f008 20f8 2020     .....x..p....   
  40a494:	2020 8820 8888 8888 7088 8888 8888 5088        ......p.....P
  40a4a4:	8820 8888 a8a8 88d8 8888 2050 8850 8888      .........P P...
  40a4b4:	5088 2020 2020 08f8 2010 8040 38f8 2020     .P    ... @..8  
  40a4c4:	2020 3820 8000 2040 0810 e000 2020 2020        8..@ ....    
  40a4d4:	e020 5020 0088 0000 0000 0000 0000 f800      . P............
  40a4e4:	2040 0010 0000 0000 7000 7808 7888 8080     @ .......p.x.x..
  40a4f4:	c8b0 8888 00f0 7000 8080 7088 0808 9868     .......p...p..h.
  40a504:	8888 0078 7000 f888 7080 4830 e040 4040     ..x..p...p0H@.@@
  40a514:	0040 7800 7888 3008 8080 c8b0 8888 2088     @..x.x.0....... 
  40a524:	6000 2020 7020 0010 1030 9010 4060 4840     .`   p..0...`@@H
  40a534:	6050 4850 2060 2020 2020 0070 d000 a8a8     P`PH`     p.....
  40a544:	8888 0000 c8b0 8888 0088 7000 8888 7088     ...........p...p
  40a554:	0000 88f0 80f0 0080 6800 7898 0808 0000     .........h.x....
  40a564:	c8b0 8080 0080 7000 7080 f008 4040 40e0     .......p.p..@@.@
  40a574:	4840 0030 8800 8888 6898 0000 8888 5088     @H0......h.....P
  40a584:	0020 8800 a888 50a8 0000 5088 5020 0088      ......P...P P..
  40a594:	8800 7888 7008 0000 10f8 4020 10f8 2020     ...x.p.... @..  
  40a5a4:	2040 1020 2020 2020 2020 4020 2020 2010     @  .       @  . 
  40a5b4:	4020 0000 4449 454c 0000 0000 6d54 5172      @..IDLE....TmrQ
  40a5c4:	0000 0000 6d54 2072 7653 0063 6944 7473     ....Tmr Svc.Dist
  40a5d4:	6e61 6963 3a61 2020 6425 6320 006d 0000     ancia:  %d cm...
  40a5e4:	7345 6170 6f63 6120 6562 7472 006f 0000     Espaco aberto...
  40a5f4:	7953 2073 6e69 7469 6f20 206b 000a 0000     Sys init ok ....
  40a604:	6166 686c 2061 6d65 6320 6972 7261 6f20     falha em criar o
  40a614:	7320 6d65 6661 726f 206f 000a 6166 686c      semaforo ..falh
  40a624:	2061 6d65 6320 6972 7261 6120 7120 6575     a em criar a que
  40a634:	6575 0a20 0000 0000 4345 4f48 0000 0000     ue .....ECHO....
  40a644:	6146 6c69 6465 7420 206f 7263 6165 6574     Failed to create
  40a654:	5520 7261 5474 2078 6174 6b73 0a0d 0000      UartTx task....
  40a664:	6174 6b73 6c20 6465 6220 7475 0d20 000a     task led but ...
  40a674:	5254 4749 4547 0052 6544 6373 6e6f 6365     TRIGGER.Desconec
  40a684:	6174 6f64 2121 0000 7473 6361 206b 766f     tado!!..stack ov
  40a694:	7265 6c66 776f 2520 2078 7325 0a0d 0000     erflow %x %s....

0040a6a4 <_global_impure_ptr>:
  40a6a4:	0028 2040 4e49 0046 6e69 0066 414e 004e     (.@ INF.inf.NAN.
  40a6b4:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
  40a6c4:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  40a6d4:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  40a6e4:	296c 0000 0030 0000                         l)..0...

0040a6ec <blanks.7223>:
  40a6ec:	2020 2020 2020 2020 2020 2020 2020 2020                     

0040a6fc <zeroes.7224>:
  40a6fc:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

0040a70c <blanks.7217>:
  40a70c:	2020 2020 2020 2020 2020 2020 2020 2020                     

0040a71c <zeroes.7218>:
  40a71c:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  40a72c:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
  40a73c:	0043 0000 4f50 4953 0058 0000 002e 0000     C...POSIX.......
  40a74c:	0000 0000                                   ....

0040a750 <__mprec_bigtens>:
  40a750:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  40a760:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  40a770:	bf3c 7f73 4fdd 7515                         <.s..O.u

0040a778 <__mprec_tens>:
  40a778:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  40a788:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  40a798:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  40a7a8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  40a7b8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  40a7c8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  40a7d8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  40a7e8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  40a7f8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  40a808:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  40a818:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  40a828:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  40a838:	9db4 79d9 7843 44ea                         ...yCx.D

0040a840 <p05.6055>:
  40a840:	0005 0000 0019 0000 007d 0000               ........}...

0040a84c <_ctype_>:
  40a84c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  40a85c:	2020 2020 2020 2020 2020 2020 2020 2020                     
  40a86c:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  40a87c:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  40a88c:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  40a89c:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  40a8ac:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  40a8bc:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  40a8cc:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0040a950 <_init>:
  40a950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a952:	bf00      	nop
  40a954:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40a956:	bc08      	pop	{r3}
  40a958:	469e      	mov	lr, r3
  40a95a:	4770      	bx	lr

0040a95c <__init_array_start>:
  40a95c:	00407455 	.word	0x00407455

0040a960 <__frame_dummy_init_array_entry>:
  40a960:	00400165                                e.@.

0040a964 <_fini>:
  40a964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a966:	bf00      	nop
  40a968:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40a96a:	bc08      	pop	{r3}
  40a96c:	469e      	mov	lr, r3
  40a96e:	4770      	bx	lr

0040a970 <__fini_array_start>:
  40a970:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sysfont>:
2040000c:	0000 0000 a324 0040 0706 7d20               ....$.@... }

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <uxCriticalNesting>:
20400020:	aaaa aaaa                                   ....

20400024 <_impure_ptr>:
20400024:	0028 2040                                   (.@ 

20400028 <impure_data>:
20400028:	0000 0000 0314 2040 037c 2040 03e4 2040     ......@ |.@ ..@ 
	...
204000d0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400450 <__malloc_av_>:
	...
20400458:	0450 2040 0450 2040 0458 2040 0458 2040     P.@ P.@ X.@ X.@ 
20400468:	0460 2040 0460 2040 0468 2040 0468 2040     `.@ `.@ h.@ h.@ 
20400478:	0470 2040 0470 2040 0478 2040 0478 2040     p.@ p.@ x.@ x.@ 
20400488:	0480 2040 0480 2040 0488 2040 0488 2040     ..@ ..@ ..@ ..@ 
20400498:	0490 2040 0490 2040 0498 2040 0498 2040     ..@ ..@ ..@ ..@ 
204004a8:	04a0 2040 04a0 2040 04a8 2040 04a8 2040     ..@ ..@ ..@ ..@ 
204004b8:	04b0 2040 04b0 2040 04b8 2040 04b8 2040     ..@ ..@ ..@ ..@ 
204004c8:	04c0 2040 04c0 2040 04c8 2040 04c8 2040     ..@ ..@ ..@ ..@ 
204004d8:	04d0 2040 04d0 2040 04d8 2040 04d8 2040     ..@ ..@ ..@ ..@ 
204004e8:	04e0 2040 04e0 2040 04e8 2040 04e8 2040     ..@ ..@ ..@ ..@ 
204004f8:	04f0 2040 04f0 2040 04f8 2040 04f8 2040     ..@ ..@ ..@ ..@ 
20400508:	0500 2040 0500 2040 0508 2040 0508 2040     ..@ ..@ ..@ ..@ 
20400518:	0510 2040 0510 2040 0518 2040 0518 2040     ..@ ..@ ..@ ..@ 
20400528:	0520 2040 0520 2040 0528 2040 0528 2040      .@  .@ (.@ (.@ 
20400538:	0530 2040 0530 2040 0538 2040 0538 2040     0.@ 0.@ 8.@ 8.@ 
20400548:	0540 2040 0540 2040 0548 2040 0548 2040     @.@ @.@ H.@ H.@ 
20400558:	0550 2040 0550 2040 0558 2040 0558 2040     P.@ P.@ X.@ X.@ 
20400568:	0560 2040 0560 2040 0568 2040 0568 2040     `.@ `.@ h.@ h.@ 
20400578:	0570 2040 0570 2040 0578 2040 0578 2040     p.@ p.@ x.@ x.@ 
20400588:	0580 2040 0580 2040 0588 2040 0588 2040     ..@ ..@ ..@ ..@ 
20400598:	0590 2040 0590 2040 0598 2040 0598 2040     ..@ ..@ ..@ ..@ 
204005a8:	05a0 2040 05a0 2040 05a8 2040 05a8 2040     ..@ ..@ ..@ ..@ 
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 

20400858 <__malloc_sbrk_base>:
20400858:	ffff ffff                                   ....

2040085c <__malloc_trim_threshold>:
2040085c:	0000 0002                                   ....

20400860 <__atexit_recursive_mutex>:
20400860:	0ec0 2040                                   ..@ 

20400864 <__global_locale>:
20400864:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400884:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008a4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008c4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008e4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400904:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400924:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400944:	9be1 0040 8e79 0040 0000 0000 a84c 0040     ..@.y.@.....L.@.
20400954:	a748 0040 a638 0040 a638 0040 a638 0040     H.@.8.@.8.@.8.@.
20400964:	a638 0040 a638 0040 a638 0040 a638 0040     8.@.8.@.8.@.8.@.
20400974:	a638 0040 a638 0040 ffff ffff ffff ffff     8.@.8.@.........
20400984:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204009ac:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
